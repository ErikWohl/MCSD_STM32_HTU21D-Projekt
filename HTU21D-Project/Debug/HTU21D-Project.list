
HTU21D-Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000966c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000378  08009800  08009800  00019800  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b78  08009b78  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08009b78  08009b78  00019b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b80  08009b80  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b80  08009b80  00019b80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b84  08009b84  00019b84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08009b88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  20000070  08009bf8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  08009bf8  000201d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001146f  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026e8  00000000  00000000  0003150f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e28  00000000  00000000  00033bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d20  00000000  00000000  00034a20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002197b  00000000  00000000  00035740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001192b  00000000  00000000  000570bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c448d  00000000  00000000  000689e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012ce73  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004dc0  00000000  00000000  0012cec4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080097e4 	.word	0x080097e4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080097e4 	.word	0x080097e4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <HTU21D_Init>:
/**
  * @brief  Sets the i2c variable for communication.
  * @param  i2cVal i2c address
  * @retval none
  */
void HTU21D_Init(I2C_HandleTypeDef i2cVal) {
 8000f4c:	b084      	sub	sp, #16
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	f107 0c08 	add.w	ip, r7, #8
 8000f56:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	i2cDef = i2cVal;
 8000f5a:	4b07      	ldr	r3, [pc, #28]	; (8000f78 <HTU21D_Init+0x2c>)
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f107 0308 	add.w	r3, r7, #8
 8000f62:	2254      	movs	r2, #84	; 0x54
 8000f64:	4619      	mov	r1, r3
 8000f66:	f004 ff0d 	bl	8005d84 <memcpy>
}
 8000f6a:	bf00      	nop
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f72:	b004      	add	sp, #16
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	2000008c 	.word	0x2000008c

08000f7c <HTU21D_Soft_Reset>:

/**
  * @brief  Reboots the HTU21D sensor switching the power off and on again.
  * @retval none
  */
void HTU21D_Soft_Reset(){
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af02      	add	r7, sp, #8
char reg_command[1];
  reg_command[0] = SOFT_RESET;
 8000f82:	23fe      	movs	r3, #254	; 0xfe
 8000f84:	713b      	strb	r3, [r7, #4]
  HAL_I2C_Master_Transmit(&i2cDef, HTU21D_ADDR << 1, (uint8_t *)reg_command, sizeof(reg_command), I2C_TIMEOUT);
 8000f86:	1d3a      	adds	r2, r7, #4
 8000f88:	2332      	movs	r3, #50	; 0x32
 8000f8a:	9300      	str	r3, [sp, #0]
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	2180      	movs	r1, #128	; 0x80
 8000f90:	4804      	ldr	r0, [pc, #16]	; (8000fa4 <HTU21D_Soft_Reset+0x28>)
 8000f92:	f001 fa2b 	bl	80023ec <HAL_I2C_Master_Transmit>
  HAL_Delay(15);
 8000f96:	200f      	movs	r0, #15
 8000f98:	f000 fe54 	bl	8001c44 <HAL_Delay>
}
 8000f9c:	bf00      	nop
 8000f9e:	3708      	adds	r7, #8
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	2000008c 	.word	0x2000008c

08000fa8 <HTU21D_ReadValue>:
/**
  * @brief  Receives an amount of data from the specified register.
  * @param  regSelect register adress.
  * @retval register value cleared of the status bit.
  */
unsigned HTU21D_ReadValue(char regSelect){
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b086      	sub	sp, #24
 8000fac:	af02      	add	r7, sp, #8
 8000fae:	4603      	mov	r3, r0
 8000fb0:	71fb      	strb	r3, [r7, #7]
unsigned value = 0;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60fb      	str	r3, [r7, #12]
char reg_data[3];

  reg_data[0] = regSelect;
 8000fb6:	79fb      	ldrb	r3, [r7, #7]
 8000fb8:	723b      	strb	r3, [r7, #8]
  HAL_I2C_Master_Transmit(&i2cDef, HTU21D_ADDR << 1, (uint8_t *)reg_data, 1, I2C_TIMEOUT);
 8000fba:	f107 0208 	add.w	r2, r7, #8
 8000fbe:	2332      	movs	r3, #50	; 0x32
 8000fc0:	9300      	str	r3, [sp, #0]
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	2180      	movs	r1, #128	; 0x80
 8000fc6:	480c      	ldr	r0, [pc, #48]	; (8000ff8 <HTU21D_ReadValue+0x50>)
 8000fc8:	f001 fa10 	bl	80023ec <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&i2cDef, HTU21D_ADDR << 1, (uint8_t *)reg_data, sizeof(reg_data), I2C_TIMEOUT);
 8000fcc:	f107 0208 	add.w	r2, r7, #8
 8000fd0:	2332      	movs	r3, #50	; 0x32
 8000fd2:	9300      	str	r3, [sp, #0]
 8000fd4:	2303      	movs	r3, #3
 8000fd6:	2180      	movs	r1, #128	; 0x80
 8000fd8:	4807      	ldr	r0, [pc, #28]	; (8000ff8 <HTU21D_ReadValue+0x50>)
 8000fda:	f001 fafb 	bl	80025d4 <HAL_I2C_Master_Receive>
	itoa(reg_data[2], output, 2);
	if(HAL_UART_Transmit(&huart2, (uint8_t*) output, strlen(output), 1000)==HAL_ERROR)Error_Handler();
	if(HAL_UART_Transmit(&huart2, (uint8_t *)spaceMsg, strlen(spaceMsg), 1000)==HAL_ERROR)Error_Handler();
*/

  value = ((unsigned)reg_data[0] << 8) | reg_data[1] ;
 8000fde:	7a3b      	ldrb	r3, [r7, #8]
 8000fe0:	021b      	lsls	r3, r3, #8
 8000fe2:	7a7a      	ldrb	r2, [r7, #9]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	60fb      	str	r3, [r7, #12]
  return value & 0xFFFC;            // Clear status bits
 8000fe8:	68fa      	ldr	r2, [r7, #12]
 8000fea:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8000fee:	4013      	ands	r3, r2
  //return value;
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3710      	adds	r7, #16
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	2000008c 	.word	0x2000008c
 8000ffc:	00000000 	.word	0x00000000

08001000 <procTemperatureValue>:
/**
  * @brief  Calculates the temperature from the raw data
  * @param valueTemp data value from sensor
  * @retval temperature
  */
float procTemperatureValue(unsigned valueTemp){
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  float calc;
  calc = -46.85 + 175.72 * valueTemp / 65536.0;
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f7ff fa7b 	bl	8000504 <__aeabi_ui2d>
 800100e:	a317      	add	r3, pc, #92	; (adr r3, 800106c <procTemperatureValue+0x6c>)
 8001010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001014:	f7ff faf0 	bl	80005f8 <__aeabi_dmul>
 8001018:	4602      	mov	r2, r0
 800101a:	460b      	mov	r3, r1
 800101c:	4610      	mov	r0, r2
 800101e:	4619      	mov	r1, r3
 8001020:	f04f 0200 	mov.w	r2, #0
 8001024:	4b10      	ldr	r3, [pc, #64]	; (8001068 <procTemperatureValue+0x68>)
 8001026:	f7ff fc11 	bl	800084c <__aeabi_ddiv>
 800102a:	4602      	mov	r2, r0
 800102c:	460b      	mov	r3, r1
 800102e:	4610      	mov	r0, r2
 8001030:	4619      	mov	r1, r3
 8001032:	a30b      	add	r3, pc, #44	; (adr r3, 8001060 <procTemperatureValue+0x60>)
 8001034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001038:	f7ff f926 	bl	8000288 <__aeabi_dsub>
 800103c:	4602      	mov	r2, r0
 800103e:	460b      	mov	r3, r1
 8001040:	4610      	mov	r0, r2
 8001042:	4619      	mov	r1, r3
 8001044:	f7ff fdb0 	bl	8000ba8 <__aeabi_d2f>
 8001048:	4603      	mov	r3, r0
 800104a:	60fb      	str	r3, [r7, #12]
  return calc;
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	ee07 3a90 	vmov	s15, r3
}
 8001052:	eeb0 0a67 	vmov.f32	s0, s15
 8001056:	3710      	adds	r7, #16
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	f3af 8000 	nop.w
 8001060:	cccccccd 	.word	0xcccccccd
 8001064:	40476ccc 	.word	0x40476ccc
 8001068:	40f00000 	.word	0x40f00000
 800106c:	3d70a3d7 	.word	0x3d70a3d7
 8001070:	4065f70a 	.word	0x4065f70a

08001074 <procHumidityValue>:
/**
  * @brief  Calculates the humidity from the raw data
  * @param valueTemp data value from sensor
  * @retval humidity
  */
float procHumidityValue(unsigned valueTemp){
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  float calc;
  calc = -6.0 + 125.0 * valueTemp / 65536.0;
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f7ff fa41 	bl	8000504 <__aeabi_ui2d>
 8001082:	f04f 0200 	mov.w	r2, #0
 8001086:	4b12      	ldr	r3, [pc, #72]	; (80010d0 <procHumidityValue+0x5c>)
 8001088:	f7ff fab6 	bl	80005f8 <__aeabi_dmul>
 800108c:	4602      	mov	r2, r0
 800108e:	460b      	mov	r3, r1
 8001090:	4610      	mov	r0, r2
 8001092:	4619      	mov	r1, r3
 8001094:	f04f 0200 	mov.w	r2, #0
 8001098:	4b0e      	ldr	r3, [pc, #56]	; (80010d4 <procHumidityValue+0x60>)
 800109a:	f7ff fbd7 	bl	800084c <__aeabi_ddiv>
 800109e:	4602      	mov	r2, r0
 80010a0:	460b      	mov	r3, r1
 80010a2:	4610      	mov	r0, r2
 80010a4:	4619      	mov	r1, r3
 80010a6:	f04f 0200 	mov.w	r2, #0
 80010aa:	4b0b      	ldr	r3, [pc, #44]	; (80010d8 <procHumidityValue+0x64>)
 80010ac:	f7ff f8ec 	bl	8000288 <__aeabi_dsub>
 80010b0:	4602      	mov	r2, r0
 80010b2:	460b      	mov	r3, r1
 80010b4:	4610      	mov	r0, r2
 80010b6:	4619      	mov	r1, r3
 80010b8:	f7ff fd76 	bl	8000ba8 <__aeabi_d2f>
 80010bc:	4603      	mov	r3, r0
 80010be:	60fb      	str	r3, [r7, #12]
  return calc;
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	ee07 3a90 	vmov	s15, r3
}
 80010c6:	eeb0 0a67 	vmov.f32	s0, s15
 80010ca:	3710      	adds	r7, #16
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	405f4000 	.word	0x405f4000
 80010d4:	40f00000 	.word	0x40f00000
 80010d8:	40180000 	.word	0x40180000
 80010dc:	00000000 	.word	0x00000000

080010e0 <calculatePartialPressure>:
/**
  * @brief  Calculates the partial pressure from the temperature
  * @param temperature value from sensor after calculation
  * @retval partial pressure
  */
float calculatePartialPressure(float temperature) {
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	ed87 0a01 	vstr	s0, [r7, #4]
	double power = Variable_A - (Variable_B / (temperature + Variable_C));
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f7ff fa2c 	bl	8000548 <__aeabi_f2d>
 80010f0:	a317      	add	r3, pc, #92	; (adr r3, 8001150 <calculatePartialPressure+0x70>)
 80010f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f6:	f7ff f8c9 	bl	800028c <__adddf3>
 80010fa:	4602      	mov	r2, r0
 80010fc:	460b      	mov	r3, r1
 80010fe:	a116      	add	r1, pc, #88	; (adr r1, 8001158 <calculatePartialPressure+0x78>)
 8001100:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001104:	f7ff fba2 	bl	800084c <__aeabi_ddiv>
 8001108:	4602      	mov	r2, r0
 800110a:	460b      	mov	r3, r1
 800110c:	a114      	add	r1, pc, #80	; (adr r1, 8001160 <calculatePartialPressure+0x80>)
 800110e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001112:	f7ff f8b9 	bl	8000288 <__aeabi_dsub>
 8001116:	4602      	mov	r2, r0
 8001118:	460b      	mov	r3, r1
 800111a:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return (float)pow(10, power);
 800111e:	ed97 1b02 	vldr	d1, [r7, #8]
 8001122:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8001148 <calculatePartialPressure+0x68>
 8001126:	f007 f9f1 	bl	800850c <pow>
 800112a:	ec53 2b10 	vmov	r2, r3, d0
 800112e:	4610      	mov	r0, r2
 8001130:	4619      	mov	r1, r3
 8001132:	f7ff fd39 	bl	8000ba8 <__aeabi_d2f>
 8001136:	4603      	mov	r3, r0
 8001138:	ee07 3a90 	vmov	s15, r3
}
 800113c:	eeb0 0a67 	vmov.f32	s0, s15
 8001140:	3710      	adds	r7, #16
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	00000000 	.word	0x00000000
 800114c:	40240000 	.word	0x40240000
 8001150:	b851eb85 	.word	0xb851eb85
 8001154:	406d751e 	.word	0x406d751e
 8001158:	5c28f5c3 	.word	0x5c28f5c3
 800115c:	409b898f 	.word	0x409b898f
 8001160:	ca57a787 	.word	0xca57a787
 8001164:	40204432 	.word	0x40204432

08001168 <calculateDewPointTemperature>:
  * @brief  Calculates the dew point temperature from the humidity and partial pressure
  * @param humidity value from sensor after calculation
  * @param partial pressure calculated value
  * @retval dew point temperature
  */
float calculateDewPointTemperature(float humidity, float partialPressure) {
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001172:	edc7 0a00 	vstr	s1, [r7]
	double result = (Variable_B / (log10(humidity * (partialPressure / 100))- Variable_A)) + Variable_C;
 8001176:	edd7 7a00 	vldr	s15, [r7]
 800117a:	eddf 6a23 	vldr	s13, [pc, #140]	; 8001208 <calculateDewPointTemperature+0xa0>
 800117e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001182:	edd7 7a01 	vldr	s15, [r7, #4]
 8001186:	ee67 7a27 	vmul.f32	s15, s14, s15
 800118a:	ee17 0a90 	vmov	r0, s15
 800118e:	f7ff f9db 	bl	8000548 <__aeabi_f2d>
 8001192:	4602      	mov	r2, r0
 8001194:	460b      	mov	r3, r1
 8001196:	ec43 2b10 	vmov	d0, r2, r3
 800119a:	f007 f979 	bl	8008490 <log10>
 800119e:	ec51 0b10 	vmov	r0, r1, d0
 80011a2:	a313      	add	r3, pc, #76	; (adr r3, 80011f0 <calculateDewPointTemperature+0x88>)
 80011a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a8:	f7ff f86e 	bl	8000288 <__aeabi_dsub>
 80011ac:	4602      	mov	r2, r0
 80011ae:	460b      	mov	r3, r1
 80011b0:	a111      	add	r1, pc, #68	; (adr r1, 80011f8 <calculateDewPointTemperature+0x90>)
 80011b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80011b6:	f7ff fb49 	bl	800084c <__aeabi_ddiv>
 80011ba:	4602      	mov	r2, r0
 80011bc:	460b      	mov	r3, r1
 80011be:	4610      	mov	r0, r2
 80011c0:	4619      	mov	r1, r3
 80011c2:	a30f      	add	r3, pc, #60	; (adr r3, 8001200 <calculateDewPointTemperature+0x98>)
 80011c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c8:	f7ff f860 	bl	800028c <__adddf3>
 80011cc:	4602      	mov	r2, r0
 80011ce:	460b      	mov	r3, r1
 80011d0:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return (float)result * (-1);
 80011d4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80011d8:	f7ff fce6 	bl	8000ba8 <__aeabi_d2f>
 80011dc:	4603      	mov	r3, r0
 80011de:	ee07 3a90 	vmov	s15, r3
 80011e2:	eef1 7a67 	vneg.f32	s15, s15
}
 80011e6:	eeb0 0a67 	vmov.f32	s0, s15
 80011ea:	3710      	adds	r7, #16
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	ca57a787 	.word	0xca57a787
 80011f4:	40204432 	.word	0x40204432
 80011f8:	5c28f5c3 	.word	0x5c28f5c3
 80011fc:	409b898f 	.word	0x409b898f
 8001200:	b851eb85 	.word	0xb851eb85
 8001204:	406d751e 	.word	0x406d751e
 8001208:	42c80000 	.word	0x42c80000

0800120c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800120c:	b5b0      	push	{r4, r5, r7, lr}
 800120e:	b0a8      	sub	sp, #160	; 0xa0
 8001210:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001212:	f000 fca2 	bl	8001b5a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001216:	f000 f935 	bl	8001484 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800121a:	f000 fa05 	bl	8001628 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800121e:	f000 f9d3 	bl	80015c8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001222:	f000 f991 	bl	8001548 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HTU21D_Init(hi2c1);
 8001226:	4c90      	ldr	r4, [pc, #576]	; (8001468 <main+0x25c>)
 8001228:	4668      	mov	r0, sp
 800122a:	f104 0310 	add.w	r3, r4, #16
 800122e:	2244      	movs	r2, #68	; 0x44
 8001230:	4619      	mov	r1, r3
 8001232:	f004 fda7 	bl	8005d84 <memcpy>
 8001236:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800123a:	f7ff fe87 	bl	8000f4c <HTU21D_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HTU21D_Soft_Reset();
 800123e:	f7ff fe9d 	bl	8000f7c <HTU21D_Soft_Reset>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 8001242:	2201      	movs	r2, #1
 8001244:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001248:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800124c:	f001 f826 	bl	800229c <HAL_GPIO_WritePin>
  HAL_Delay(50);
 8001250:	2032      	movs	r0, #50	; 0x32
 8001252:	f000 fcf7 	bl	8001c44 <HAL_Delay>
  while (1)
  {
	char bufTemp[10];
	float temp = 0;
 8001256:	f04f 0300 	mov.w	r3, #0
 800125a:	657b      	str	r3, [r7, #84]	; 0x54
	temp = procTemperatureValue(HTU21D_ReadValue(TRIGGER_TEMP_MEASURE_HOLD));
 800125c:	20e3      	movs	r0, #227	; 0xe3
 800125e:	f7ff fea3 	bl	8000fa8 <HTU21D_ReadValue>
 8001262:	4603      	mov	r3, r0
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff fecb 	bl	8001000 <procTemperatureValue>
 800126a:	ed87 0a15 	vstr	s0, [r7, #84]	; 0x54
	gcvt(temp, 7, bufTemp);
 800126e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001270:	f7ff f96a 	bl	8000548 <__aeabi_f2d>
 8001274:	4604      	mov	r4, r0
 8001276:	460d      	mov	r5, r1
 8001278:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800127c:	4619      	mov	r1, r3
 800127e:	2007      	movs	r0, #7
 8001280:	ec45 4b10 	vmov	d0, r4, r5
 8001284:	f004 fd30 	bl	8005ce8 <gcvt>

	char bufHum[10];
	float hum = 0;
 8001288:	f04f 0300 	mov.w	r3, #0
 800128c:	653b      	str	r3, [r7, #80]	; 0x50
	hum = procHumidityValue(HTU21D_ReadValue(TRIGGER_HUMD_MEASURE_HOLD));
 800128e:	20e5      	movs	r0, #229	; 0xe5
 8001290:	f7ff fe8a 	bl	8000fa8 <HTU21D_ReadValue>
 8001294:	4603      	mov	r3, r0
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff feec 	bl	8001074 <procHumidityValue>
 800129c:	ed87 0a14 	vstr	s0, [r7, #80]	; 0x50
	gcvt(hum, 7, bufHum);
 80012a0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80012a2:	f7ff f951 	bl	8000548 <__aeabi_f2d>
 80012a6:	4604      	mov	r4, r0
 80012a8:	460d      	mov	r5, r1
 80012aa:	f107 031c 	add.w	r3, r7, #28
 80012ae:	4619      	mov	r1, r3
 80012b0:	2007      	movs	r0, #7
 80012b2:	ec45 4b10 	vmov	d0, r4, r5
 80012b6:	f004 fd17 	bl	8005ce8 <gcvt>

	char bufPressure[10];
	float pressure = 0;
 80012ba:	f04f 0300 	mov.w	r3, #0
 80012be:	64fb      	str	r3, [r7, #76]	; 0x4c
	pressure = calculatePartialPressure(temp);
 80012c0:	ed97 0a15 	vldr	s0, [r7, #84]	; 0x54
 80012c4:	f7ff ff0c 	bl	80010e0 <calculatePartialPressure>
 80012c8:	ed87 0a13 	vstr	s0, [r7, #76]	; 0x4c
	gcvt(pressure, 7, bufPressure);
 80012cc:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80012ce:	f7ff f93b 	bl	8000548 <__aeabi_f2d>
 80012d2:	4604      	mov	r4, r0
 80012d4:	460d      	mov	r5, r1
 80012d6:	f107 0310 	add.w	r3, r7, #16
 80012da:	4619      	mov	r1, r3
 80012dc:	2007      	movs	r0, #7
 80012de:	ec45 4b10 	vmov	d0, r4, r5
 80012e2:	f004 fd01 	bl	8005ce8 <gcvt>

	char bufDewPoint[10];
	float dewPoint = 0;
 80012e6:	f04f 0300 	mov.w	r3, #0
 80012ea:	64bb      	str	r3, [r7, #72]	; 0x48
	dewPoint = calculateDewPointTemperature(hum, pressure);
 80012ec:	edd7 0a13 	vldr	s1, [r7, #76]	; 0x4c
 80012f0:	ed97 0a14 	vldr	s0, [r7, #80]	; 0x50
 80012f4:	f7ff ff38 	bl	8001168 <calculateDewPointTemperature>
 80012f8:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48
	gcvt(dewPoint, 7, bufDewPoint);
 80012fc:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80012fe:	f7ff f923 	bl	8000548 <__aeabi_f2d>
 8001302:	4604      	mov	r4, r0
 8001304:	460d      	mov	r5, r1
 8001306:	1d3b      	adds	r3, r7, #4
 8001308:	4619      	mov	r1, r3
 800130a:	2007      	movs	r0, #7
 800130c:	ec45 4b10 	vmov	d0, r4, r5
 8001310:	f004 fcea 	bl	8005ce8 <gcvt>

	char *beginMsg = "Temp: ";
 8001314:	4b55      	ldr	r3, [pc, #340]	; (800146c <main+0x260>)
 8001316:	647b      	str	r3, [r7, #68]	; 0x44
	if(HAL_UART_Transmit(&huart2, (uint8_t *)beginMsg, strlen(beginMsg), 1000)==HAL_ERROR)Error_Handler();
 8001318:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800131a:	f7fe ff59 	bl	80001d0 <strlen>
 800131e:	4603      	mov	r3, r0
 8001320:	b29a      	uxth	r2, r3
 8001322:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001326:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001328:	4851      	ldr	r0, [pc, #324]	; (8001470 <main+0x264>)
 800132a:	f003 fcbf 	bl	8004cac <HAL_UART_Transmit>
 800132e:	4603      	mov	r3, r0
 8001330:	2b01      	cmp	r3, #1
 8001332:	d101      	bne.n	8001338 <main+0x12c>
 8001334:	f000 f9c4 	bl	80016c0 <Error_Handler>

	if(HAL_UART_Transmit(&huart2, (uint8_t*) bufTemp, strlen(bufTemp), 1000)==HAL_ERROR)Error_Handler();
 8001338:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800133c:	4618      	mov	r0, r3
 800133e:	f7fe ff47 	bl	80001d0 <strlen>
 8001342:	4603      	mov	r3, r0
 8001344:	b29a      	uxth	r2, r3
 8001346:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800134a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800134e:	4848      	ldr	r0, [pc, #288]	; (8001470 <main+0x264>)
 8001350:	f003 fcac 	bl	8004cac <HAL_UART_Transmit>
 8001354:	4603      	mov	r3, r0
 8001356:	2b01      	cmp	r3, #1
 8001358:	d101      	bne.n	800135e <main+0x152>
 800135a:	f000 f9b1 	bl	80016c0 <Error_Handler>

	char *midMsg1 = "°C Humid: ";
 800135e:	4b45      	ldr	r3, [pc, #276]	; (8001474 <main+0x268>)
 8001360:	643b      	str	r3, [r7, #64]	; 0x40
	if(HAL_UART_Transmit(&huart2, (uint8_t *)midMsg1, strlen(midMsg1), 1000)==HAL_ERROR)Error_Handler();
 8001362:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001364:	f7fe ff34 	bl	80001d0 <strlen>
 8001368:	4603      	mov	r3, r0
 800136a:	b29a      	uxth	r2, r3
 800136c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001370:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001372:	483f      	ldr	r0, [pc, #252]	; (8001470 <main+0x264>)
 8001374:	f003 fc9a 	bl	8004cac <HAL_UART_Transmit>
 8001378:	4603      	mov	r3, r0
 800137a:	2b01      	cmp	r3, #1
 800137c:	d101      	bne.n	8001382 <main+0x176>
 800137e:	f000 f99f 	bl	80016c0 <Error_Handler>

	if(HAL_UART_Transmit(&huart2, (uint8_t*) bufHum, strlen(bufHum), 1000)==HAL_ERROR)Error_Handler();
 8001382:	f107 031c 	add.w	r3, r7, #28
 8001386:	4618      	mov	r0, r3
 8001388:	f7fe ff22 	bl	80001d0 <strlen>
 800138c:	4603      	mov	r3, r0
 800138e:	b29a      	uxth	r2, r3
 8001390:	f107 011c 	add.w	r1, r7, #28
 8001394:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001398:	4835      	ldr	r0, [pc, #212]	; (8001470 <main+0x264>)
 800139a:	f003 fc87 	bl	8004cac <HAL_UART_Transmit>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d101      	bne.n	80013a8 <main+0x19c>
 80013a4:	f000 f98c 	bl	80016c0 <Error_Handler>

	char *midMsg2 = "°C Pressure: ";
 80013a8:	4b33      	ldr	r3, [pc, #204]	; (8001478 <main+0x26c>)
 80013aa:	63fb      	str	r3, [r7, #60]	; 0x3c
	if(HAL_UART_Transmit(&huart2, (uint8_t *)midMsg2, strlen(midMsg2), 1000)==HAL_ERROR)Error_Handler();
 80013ac:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80013ae:	f7fe ff0f 	bl	80001d0 <strlen>
 80013b2:	4603      	mov	r3, r0
 80013b4:	b29a      	uxth	r2, r3
 80013b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80013bc:	482c      	ldr	r0, [pc, #176]	; (8001470 <main+0x264>)
 80013be:	f003 fc75 	bl	8004cac <HAL_UART_Transmit>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d101      	bne.n	80013cc <main+0x1c0>
 80013c8:	f000 f97a 	bl	80016c0 <Error_Handler>

	if(HAL_UART_Transmit(&huart2, (uint8_t*) bufPressure, strlen(bufPressure), 1000)==HAL_ERROR)Error_Handler();
 80013cc:	f107 0310 	add.w	r3, r7, #16
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7fe fefd 	bl	80001d0 <strlen>
 80013d6:	4603      	mov	r3, r0
 80013d8:	b29a      	uxth	r2, r3
 80013da:	f107 0110 	add.w	r1, r7, #16
 80013de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013e2:	4823      	ldr	r0, [pc, #140]	; (8001470 <main+0x264>)
 80013e4:	f003 fc62 	bl	8004cac <HAL_UART_Transmit>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d101      	bne.n	80013f2 <main+0x1e6>
 80013ee:	f000 f967 	bl	80016c0 <Error_Handler>

	char *midMsg3 = " kPa Dew Point: ";
 80013f2:	4b22      	ldr	r3, [pc, #136]	; (800147c <main+0x270>)
 80013f4:	63bb      	str	r3, [r7, #56]	; 0x38
	if(HAL_UART_Transmit(&huart2, (uint8_t *)midMsg3, strlen(midMsg3), 1000)==HAL_ERROR)Error_Handler();
 80013f6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80013f8:	f7fe feea 	bl	80001d0 <strlen>
 80013fc:	4603      	mov	r3, r0
 80013fe:	b29a      	uxth	r2, r3
 8001400:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001404:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001406:	481a      	ldr	r0, [pc, #104]	; (8001470 <main+0x264>)
 8001408:	f003 fc50 	bl	8004cac <HAL_UART_Transmit>
 800140c:	4603      	mov	r3, r0
 800140e:	2b01      	cmp	r3, #1
 8001410:	d101      	bne.n	8001416 <main+0x20a>
 8001412:	f000 f955 	bl	80016c0 <Error_Handler>

	if(HAL_UART_Transmit(&huart2, (uint8_t*) bufDewPoint, strlen(bufDewPoint), 1000)==HAL_ERROR)Error_Handler();
 8001416:	1d3b      	adds	r3, r7, #4
 8001418:	4618      	mov	r0, r3
 800141a:	f7fe fed9 	bl	80001d0 <strlen>
 800141e:	4603      	mov	r3, r0
 8001420:	b29a      	uxth	r2, r3
 8001422:	1d39      	adds	r1, r7, #4
 8001424:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001428:	4811      	ldr	r0, [pc, #68]	; (8001470 <main+0x264>)
 800142a:	f003 fc3f 	bl	8004cac <HAL_UART_Transmit>
 800142e:	4603      	mov	r3, r0
 8001430:	2b01      	cmp	r3, #1
 8001432:	d101      	bne.n	8001438 <main+0x22c>
 8001434:	f000 f944 	bl	80016c0 <Error_Handler>

	char *receiveMsg = "°C\n\r";
 8001438:	4b11      	ldr	r3, [pc, #68]	; (8001480 <main+0x274>)
 800143a:	637b      	str	r3, [r7, #52]	; 0x34
	if(HAL_UART_Transmit(&huart2, (uint8_t *)receiveMsg, strlen(receiveMsg), 1000)==HAL_ERROR)Error_Handler();
 800143c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800143e:	f7fe fec7 	bl	80001d0 <strlen>
 8001442:	4603      	mov	r3, r0
 8001444:	b29a      	uxth	r2, r3
 8001446:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800144a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800144c:	4808      	ldr	r0, [pc, #32]	; (8001470 <main+0x264>)
 800144e:	f003 fc2d 	bl	8004cac <HAL_UART_Transmit>
 8001452:	4603      	mov	r3, r0
 8001454:	2b01      	cmp	r3, #1
 8001456:	d101      	bne.n	800145c <main+0x250>
 8001458:	f000 f932 	bl	80016c0 <Error_Handler>
	HAL_Delay(1000);
 800145c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001460:	f000 fbf0 	bl	8001c44 <HAL_Delay>
  {
 8001464:	e6f7      	b.n	8001256 <main+0x4a>
 8001466:	bf00      	nop
 8001468:	200000e0 	.word	0x200000e0
 800146c:	08009800 	.word	0x08009800
 8001470:	20000134 	.word	0x20000134
 8001474:	08009808 	.word	0x08009808
 8001478:	08009814 	.word	0x08009814
 800147c:	08009824 	.word	0x08009824
 8001480:	08009838 	.word	0x08009838

08001484 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b096      	sub	sp, #88	; 0x58
 8001488:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800148a:	f107 0314 	add.w	r3, r7, #20
 800148e:	2244      	movs	r2, #68	; 0x44
 8001490:	2100      	movs	r1, #0
 8001492:	4618      	mov	r0, r3
 8001494:	f004 fc84 	bl	8005da0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001498:	463b      	mov	r3, r7
 800149a:	2200      	movs	r2, #0
 800149c:	601a      	str	r2, [r3, #0]
 800149e:	605a      	str	r2, [r3, #4]
 80014a0:	609a      	str	r2, [r3, #8]
 80014a2:	60da      	str	r2, [r3, #12]
 80014a4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80014a6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80014aa:	f002 fa2b 	bl	8003904 <HAL_PWREx_ControlVoltageScaling>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80014b4:	f000 f904 	bl	80016c0 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80014b8:	f002 fa06 	bl	80038c8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80014bc:	4b21      	ldr	r3, [pc, #132]	; (8001544 <SystemClock_Config+0xc0>)
 80014be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014c2:	4a20      	ldr	r2, [pc, #128]	; (8001544 <SystemClock_Config+0xc0>)
 80014c4:	f023 0318 	bic.w	r3, r3, #24
 80014c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80014cc:	2314      	movs	r3, #20
 80014ce:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80014d0:	2301      	movs	r3, #1
 80014d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80014d4:	2301      	movs	r3, #1
 80014d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80014d8:	2300      	movs	r3, #0
 80014da:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80014dc:	2360      	movs	r3, #96	; 0x60
 80014de:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014e0:	2302      	movs	r3, #2
 80014e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80014e4:	2301      	movs	r3, #1
 80014e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80014e8:	2301      	movs	r3, #1
 80014ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80014ec:	2310      	movs	r3, #16
 80014ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80014f0:	2307      	movs	r3, #7
 80014f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80014f4:	2302      	movs	r3, #2
 80014f6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80014f8:	2302      	movs	r3, #2
 80014fa:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014fc:	f107 0314 	add.w	r3, r7, #20
 8001500:	4618      	mov	r0, r3
 8001502:	f002 fa55 	bl	80039b0 <HAL_RCC_OscConfig>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800150c:	f000 f8d8 	bl	80016c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001510:	230f      	movs	r3, #15
 8001512:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001514:	2303      	movs	r3, #3
 8001516:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001518:	2300      	movs	r3, #0
 800151a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800151c:	2300      	movs	r3, #0
 800151e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001520:	2300      	movs	r3, #0
 8001522:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001524:	463b      	mov	r3, r7
 8001526:	2101      	movs	r1, #1
 8001528:	4618      	mov	r0, r3
 800152a:	f002 fe55 	bl	80041d8 <HAL_RCC_ClockConfig>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001534:	f000 f8c4 	bl	80016c0 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001538:	f003 fa68 	bl	8004a0c <HAL_RCCEx_EnableMSIPLLMode>
}
 800153c:	bf00      	nop
 800153e:	3758      	adds	r7, #88	; 0x58
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	40021000 	.word	0x40021000

08001548 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800154c:	4b1b      	ldr	r3, [pc, #108]	; (80015bc <MX_I2C1_Init+0x74>)
 800154e:	4a1c      	ldr	r2, [pc, #112]	; (80015c0 <MX_I2C1_Init+0x78>)
 8001550:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8001552:	4b1a      	ldr	r3, [pc, #104]	; (80015bc <MX_I2C1_Init+0x74>)
 8001554:	4a1b      	ldr	r2, [pc, #108]	; (80015c4 <MX_I2C1_Init+0x7c>)
 8001556:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001558:	4b18      	ldr	r3, [pc, #96]	; (80015bc <MX_I2C1_Init+0x74>)
 800155a:	2200      	movs	r2, #0
 800155c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800155e:	4b17      	ldr	r3, [pc, #92]	; (80015bc <MX_I2C1_Init+0x74>)
 8001560:	2201      	movs	r2, #1
 8001562:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001564:	4b15      	ldr	r3, [pc, #84]	; (80015bc <MX_I2C1_Init+0x74>)
 8001566:	2200      	movs	r2, #0
 8001568:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800156a:	4b14      	ldr	r3, [pc, #80]	; (80015bc <MX_I2C1_Init+0x74>)
 800156c:	2200      	movs	r2, #0
 800156e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001570:	4b12      	ldr	r3, [pc, #72]	; (80015bc <MX_I2C1_Init+0x74>)
 8001572:	2200      	movs	r2, #0
 8001574:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001576:	4b11      	ldr	r3, [pc, #68]	; (80015bc <MX_I2C1_Init+0x74>)
 8001578:	2200      	movs	r2, #0
 800157a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800157c:	4b0f      	ldr	r3, [pc, #60]	; (80015bc <MX_I2C1_Init+0x74>)
 800157e:	2200      	movs	r2, #0
 8001580:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001582:	480e      	ldr	r0, [pc, #56]	; (80015bc <MX_I2C1_Init+0x74>)
 8001584:	f000 fea2 	bl	80022cc <HAL_I2C_Init>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800158e:	f000 f897 	bl	80016c0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001592:	2100      	movs	r1, #0
 8001594:	4809      	ldr	r0, [pc, #36]	; (80015bc <MX_I2C1_Init+0x74>)
 8001596:	f002 f8ff 	bl	8003798 <HAL_I2CEx_ConfigAnalogFilter>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80015a0:	f000 f88e 	bl	80016c0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80015a4:	2100      	movs	r1, #0
 80015a6:	4805      	ldr	r0, [pc, #20]	; (80015bc <MX_I2C1_Init+0x74>)
 80015a8:	f002 f941 	bl	800382e <HAL_I2CEx_ConfigDigitalFilter>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80015b2:	f000 f885 	bl	80016c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	200000e0 	.word	0x200000e0
 80015c0:	40005400 	.word	0x40005400
 80015c4:	00707cbb 	.word	0x00707cbb

080015c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015cc:	4b14      	ldr	r3, [pc, #80]	; (8001620 <MX_USART2_UART_Init+0x58>)
 80015ce:	4a15      	ldr	r2, [pc, #84]	; (8001624 <MX_USART2_UART_Init+0x5c>)
 80015d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015d2:	4b13      	ldr	r3, [pc, #76]	; (8001620 <MX_USART2_UART_Init+0x58>)
 80015d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015da:	4b11      	ldr	r3, [pc, #68]	; (8001620 <MX_USART2_UART_Init+0x58>)
 80015dc:	2200      	movs	r2, #0
 80015de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015e0:	4b0f      	ldr	r3, [pc, #60]	; (8001620 <MX_USART2_UART_Init+0x58>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015e6:	4b0e      	ldr	r3, [pc, #56]	; (8001620 <MX_USART2_UART_Init+0x58>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015ec:	4b0c      	ldr	r3, [pc, #48]	; (8001620 <MX_USART2_UART_Init+0x58>)
 80015ee:	220c      	movs	r2, #12
 80015f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015f2:	4b0b      	ldr	r3, [pc, #44]	; (8001620 <MX_USART2_UART_Init+0x58>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015f8:	4b09      	ldr	r3, [pc, #36]	; (8001620 <MX_USART2_UART_Init+0x58>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015fe:	4b08      	ldr	r3, [pc, #32]	; (8001620 <MX_USART2_UART_Init+0x58>)
 8001600:	2200      	movs	r2, #0
 8001602:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001604:	4b06      	ldr	r3, [pc, #24]	; (8001620 <MX_USART2_UART_Init+0x58>)
 8001606:	2200      	movs	r2, #0
 8001608:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800160a:	4805      	ldr	r0, [pc, #20]	; (8001620 <MX_USART2_UART_Init+0x58>)
 800160c:	f003 fb00 	bl	8004c10 <HAL_UART_Init>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001616:	f000 f853 	bl	80016c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	20000134 	.word	0x20000134
 8001624:	40004400 	.word	0x40004400

08001628 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b088      	sub	sp, #32
 800162c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162e:	f107 030c 	add.w	r3, r7, #12
 8001632:	2200      	movs	r2, #0
 8001634:	601a      	str	r2, [r3, #0]
 8001636:	605a      	str	r2, [r3, #4]
 8001638:	609a      	str	r2, [r3, #8]
 800163a:	60da      	str	r2, [r3, #12]
 800163c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800163e:	4b1f      	ldr	r3, [pc, #124]	; (80016bc <MX_GPIO_Init+0x94>)
 8001640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001642:	4a1e      	ldr	r2, [pc, #120]	; (80016bc <MX_GPIO_Init+0x94>)
 8001644:	f043 0304 	orr.w	r3, r3, #4
 8001648:	64d3      	str	r3, [r2, #76]	; 0x4c
 800164a:	4b1c      	ldr	r3, [pc, #112]	; (80016bc <MX_GPIO_Init+0x94>)
 800164c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800164e:	f003 0304 	and.w	r3, r3, #4
 8001652:	60bb      	str	r3, [r7, #8]
 8001654:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001656:	4b19      	ldr	r3, [pc, #100]	; (80016bc <MX_GPIO_Init+0x94>)
 8001658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800165a:	4a18      	ldr	r2, [pc, #96]	; (80016bc <MX_GPIO_Init+0x94>)
 800165c:	f043 0301 	orr.w	r3, r3, #1
 8001660:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001662:	4b16      	ldr	r3, [pc, #88]	; (80016bc <MX_GPIO_Init+0x94>)
 8001664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	607b      	str	r3, [r7, #4]
 800166c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800166e:	4b13      	ldr	r3, [pc, #76]	; (80016bc <MX_GPIO_Init+0x94>)
 8001670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001672:	4a12      	ldr	r2, [pc, #72]	; (80016bc <MX_GPIO_Init+0x94>)
 8001674:	f043 0302 	orr.w	r3, r3, #2
 8001678:	64d3      	str	r3, [r2, #76]	; 0x4c
 800167a:	4b10      	ldr	r3, [pc, #64]	; (80016bc <MX_GPIO_Init+0x94>)
 800167c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800167e:	f003 0302 	and.w	r3, r3, #2
 8001682:	603b      	str	r3, [r7, #0]
 8001684:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001686:	2200      	movs	r2, #0
 8001688:	f44f 7180 	mov.w	r1, #256	; 0x100
 800168c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001690:	f000 fe04 	bl	800229c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001694:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001698:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800169a:	2301      	movs	r3, #1
 800169c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169e:	2300      	movs	r3, #0
 80016a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a2:	2300      	movs	r3, #0
 80016a4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80016a6:	f107 030c 	add.w	r3, r7, #12
 80016aa:	4619      	mov	r1, r3
 80016ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016b0:	f000 fc8a 	bl	8001fc8 <HAL_GPIO_Init>

}
 80016b4:	bf00      	nop
 80016b6:	3720      	adds	r7, #32
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	40021000 	.word	0x40021000

080016c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016c4:	b672      	cpsid	i
}
 80016c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016c8:	e7fe      	b.n	80016c8 <Error_Handler+0x8>
	...

080016cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016d2:	4b0f      	ldr	r3, [pc, #60]	; (8001710 <HAL_MspInit+0x44>)
 80016d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016d6:	4a0e      	ldr	r2, [pc, #56]	; (8001710 <HAL_MspInit+0x44>)
 80016d8:	f043 0301 	orr.w	r3, r3, #1
 80016dc:	6613      	str	r3, [r2, #96]	; 0x60
 80016de:	4b0c      	ldr	r3, [pc, #48]	; (8001710 <HAL_MspInit+0x44>)
 80016e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	607b      	str	r3, [r7, #4]
 80016e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ea:	4b09      	ldr	r3, [pc, #36]	; (8001710 <HAL_MspInit+0x44>)
 80016ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ee:	4a08      	ldr	r2, [pc, #32]	; (8001710 <HAL_MspInit+0x44>)
 80016f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016f4:	6593      	str	r3, [r2, #88]	; 0x58
 80016f6:	4b06      	ldr	r3, [pc, #24]	; (8001710 <HAL_MspInit+0x44>)
 80016f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016fe:	603b      	str	r3, [r7, #0]
 8001700:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001702:	bf00      	nop
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	40021000 	.word	0x40021000

08001714 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b09e      	sub	sp, #120	; 0x78
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	60da      	str	r2, [r3, #12]
 800172a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800172c:	f107 0310 	add.w	r3, r7, #16
 8001730:	2254      	movs	r2, #84	; 0x54
 8001732:	2100      	movs	r1, #0
 8001734:	4618      	mov	r0, r3
 8001736:	f004 fb33 	bl	8005da0 <memset>
  if(hi2c->Instance==I2C1)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a26      	ldr	r2, [pc, #152]	; (80017d8 <HAL_I2C_MspInit+0xc4>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d145      	bne.n	80017d0 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001744:	2340      	movs	r3, #64	; 0x40
 8001746:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001748:	2300      	movs	r3, #0
 800174a:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800174c:	f107 0310 	add.w	r3, r7, #16
 8001750:	4618      	mov	r0, r3
 8001752:	f002 ff65 	bl	8004620 <HAL_RCCEx_PeriphCLKConfig>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800175c:	f7ff ffb0 	bl	80016c0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001760:	4b1e      	ldr	r3, [pc, #120]	; (80017dc <HAL_I2C_MspInit+0xc8>)
 8001762:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001764:	4a1d      	ldr	r2, [pc, #116]	; (80017dc <HAL_I2C_MspInit+0xc8>)
 8001766:	f043 0302 	orr.w	r3, r3, #2
 800176a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800176c:	4b1b      	ldr	r3, [pc, #108]	; (80017dc <HAL_I2C_MspInit+0xc8>)
 800176e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001770:	f003 0302 	and.w	r3, r3, #2
 8001774:	60fb      	str	r3, [r7, #12]
 8001776:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001778:	23c0      	movs	r3, #192	; 0xc0
 800177a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800177c:	2312      	movs	r3, #18
 800177e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001780:	2300      	movs	r3, #0
 8001782:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001784:	2303      	movs	r3, #3
 8001786:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001788:	2304      	movs	r3, #4
 800178a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800178c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001790:	4619      	mov	r1, r3
 8001792:	4813      	ldr	r0, [pc, #76]	; (80017e0 <HAL_I2C_MspInit+0xcc>)
 8001794:	f000 fc18 	bl	8001fc8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001798:	4b10      	ldr	r3, [pc, #64]	; (80017dc <HAL_I2C_MspInit+0xc8>)
 800179a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800179c:	4a0f      	ldr	r2, [pc, #60]	; (80017dc <HAL_I2C_MspInit+0xc8>)
 800179e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017a2:	6593      	str	r3, [r2, #88]	; 0x58
 80017a4:	4b0d      	ldr	r3, [pc, #52]	; (80017dc <HAL_I2C_MspInit+0xc8>)
 80017a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017ac:	60bb      	str	r3, [r7, #8]
 80017ae:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80017b0:	2200      	movs	r2, #0
 80017b2:	2100      	movs	r1, #0
 80017b4:	201f      	movs	r0, #31
 80017b6:	f000 fb44 	bl	8001e42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80017ba:	201f      	movs	r0, #31
 80017bc:	f000 fb5d 	bl	8001e7a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80017c0:	2200      	movs	r2, #0
 80017c2:	2100      	movs	r1, #0
 80017c4:	2020      	movs	r0, #32
 80017c6:	f000 fb3c 	bl	8001e42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80017ca:	2020      	movs	r0, #32
 80017cc:	f000 fb55 	bl	8001e7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80017d0:	bf00      	nop
 80017d2:	3778      	adds	r7, #120	; 0x78
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	40005400 	.word	0x40005400
 80017dc:	40021000 	.word	0x40021000
 80017e0:	48000400 	.word	0x48000400

080017e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b09e      	sub	sp, #120	; 0x78
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ec:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	605a      	str	r2, [r3, #4]
 80017f6:	609a      	str	r2, [r3, #8]
 80017f8:	60da      	str	r2, [r3, #12]
 80017fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017fc:	f107 0310 	add.w	r3, r7, #16
 8001800:	2254      	movs	r2, #84	; 0x54
 8001802:	2100      	movs	r1, #0
 8001804:	4618      	mov	r0, r3
 8001806:	f004 facb 	bl	8005da0 <memset>
  if(huart->Instance==USART2)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a2c      	ldr	r2, [pc, #176]	; (80018c0 <HAL_UART_MspInit+0xdc>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d150      	bne.n	80018b6 <HAL_UART_MspInit+0xd2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001814:	2302      	movs	r3, #2
 8001816:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001818:	2300      	movs	r3, #0
 800181a:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800181c:	f107 0310 	add.w	r3, r7, #16
 8001820:	4618      	mov	r0, r3
 8001822:	f002 fefd 	bl	8004620 <HAL_RCCEx_PeriphCLKConfig>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800182c:	f7ff ff48 	bl	80016c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001830:	4b24      	ldr	r3, [pc, #144]	; (80018c4 <HAL_UART_MspInit+0xe0>)
 8001832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001834:	4a23      	ldr	r2, [pc, #140]	; (80018c4 <HAL_UART_MspInit+0xe0>)
 8001836:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800183a:	6593      	str	r3, [r2, #88]	; 0x58
 800183c:	4b21      	ldr	r3, [pc, #132]	; (80018c4 <HAL_UART_MspInit+0xe0>)
 800183e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001840:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001844:	60fb      	str	r3, [r7, #12]
 8001846:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001848:	4b1e      	ldr	r3, [pc, #120]	; (80018c4 <HAL_UART_MspInit+0xe0>)
 800184a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800184c:	4a1d      	ldr	r2, [pc, #116]	; (80018c4 <HAL_UART_MspInit+0xe0>)
 800184e:	f043 0301 	orr.w	r3, r3, #1
 8001852:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001854:	4b1b      	ldr	r3, [pc, #108]	; (80018c4 <HAL_UART_MspInit+0xe0>)
 8001856:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001858:	f003 0301 	and.w	r3, r3, #1
 800185c:	60bb      	str	r3, [r7, #8]
 800185e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001860:	2304      	movs	r3, #4
 8001862:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001864:	2302      	movs	r3, #2
 8001866:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001868:	2300      	movs	r3, #0
 800186a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800186c:	2303      	movs	r3, #3
 800186e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001870:	2307      	movs	r3, #7
 8001872:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001874:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001878:	4619      	mov	r1, r3
 800187a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800187e:	f000 fba3 	bl	8001fc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001882:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001886:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001888:	2302      	movs	r3, #2
 800188a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188c:	2300      	movs	r3, #0
 800188e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001890:	2303      	movs	r3, #3
 8001892:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001894:	2303      	movs	r3, #3
 8001896:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001898:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800189c:	4619      	mov	r1, r3
 800189e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018a2:	f000 fb91 	bl	8001fc8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80018a6:	2200      	movs	r2, #0
 80018a8:	2100      	movs	r1, #0
 80018aa:	2026      	movs	r0, #38	; 0x26
 80018ac:	f000 fac9 	bl	8001e42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80018b0:	2026      	movs	r0, #38	; 0x26
 80018b2:	f000 fae2 	bl	8001e7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80018b6:	bf00      	nop
 80018b8:	3778      	adds	r7, #120	; 0x78
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	40004400 	.word	0x40004400
 80018c4:	40021000 	.word	0x40021000

080018c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018cc:	e7fe      	b.n	80018cc <NMI_Handler+0x4>

080018ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018ce:	b480      	push	{r7}
 80018d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018d2:	e7fe      	b.n	80018d2 <HardFault_Handler+0x4>

080018d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018d8:	e7fe      	b.n	80018d8 <MemManage_Handler+0x4>

080018da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018da:	b480      	push	{r7}
 80018dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018de:	e7fe      	b.n	80018de <BusFault_Handler+0x4>

080018e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018e4:	e7fe      	b.n	80018e4 <UsageFault_Handler+0x4>

080018e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018e6:	b480      	push	{r7}
 80018e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018ea:	bf00      	nop
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018f8:	bf00      	nop
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr

08001902 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001902:	b480      	push	{r7}
 8001904:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001906:	bf00      	nop
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001914:	f000 f976 	bl	8001c04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001918:	bf00      	nop
 800191a:	bd80      	pop	{r7, pc}

0800191c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001920:	4802      	ldr	r0, [pc, #8]	; (800192c <I2C1_EV_IRQHandler+0x10>)
 8001922:	f000 ff4d 	bl	80027c0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001926:	bf00      	nop
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	200000e0 	.word	0x200000e0

08001930 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001934:	4802      	ldr	r0, [pc, #8]	; (8001940 <I2C1_ER_IRQHandler+0x10>)
 8001936:	f000 ff5d 	bl	80027f4 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800193a:	bf00      	nop
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	200000e0 	.word	0x200000e0

08001944 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001948:	4802      	ldr	r0, [pc, #8]	; (8001954 <USART2_IRQHandler+0x10>)
 800194a:	f003 fa43 	bl	8004dd4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	20000134 	.word	0x20000134

08001958 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
	return 1;
 800195c:	2301      	movs	r3, #1
}
 800195e:	4618      	mov	r0, r3
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <_kill>:

int _kill(int pid, int sig)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001972:	f004 f9dd 	bl	8005d30 <__errno>
 8001976:	4603      	mov	r3, r0
 8001978:	2216      	movs	r2, #22
 800197a:	601a      	str	r2, [r3, #0]
	return -1;
 800197c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001980:	4618      	mov	r0, r3
 8001982:	3708      	adds	r7, #8
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}

08001988 <_exit>:

void _exit (int status)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001990:	f04f 31ff 	mov.w	r1, #4294967295
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f7ff ffe7 	bl	8001968 <_kill>
	while (1) {}		/* Make sure we hang here */
 800199a:	e7fe      	b.n	800199a <_exit+0x12>

0800199c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b086      	sub	sp, #24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	60f8      	str	r0, [r7, #12]
 80019a4:	60b9      	str	r1, [r7, #8]
 80019a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019a8:	2300      	movs	r3, #0
 80019aa:	617b      	str	r3, [r7, #20]
 80019ac:	e00a      	b.n	80019c4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80019ae:	f3af 8000 	nop.w
 80019b2:	4601      	mov	r1, r0
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	1c5a      	adds	r2, r3, #1
 80019b8:	60ba      	str	r2, [r7, #8]
 80019ba:	b2ca      	uxtb	r2, r1
 80019bc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	3301      	adds	r3, #1
 80019c2:	617b      	str	r3, [r7, #20]
 80019c4:	697a      	ldr	r2, [r7, #20]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	dbf0      	blt.n	80019ae <_read+0x12>
	}

return len;
 80019cc:	687b      	ldr	r3, [r7, #4]
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3718      	adds	r7, #24
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019d6:	b580      	push	{r7, lr}
 80019d8:	b086      	sub	sp, #24
 80019da:	af00      	add	r7, sp, #0
 80019dc:	60f8      	str	r0, [r7, #12]
 80019de:	60b9      	str	r1, [r7, #8]
 80019e0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019e2:	2300      	movs	r3, #0
 80019e4:	617b      	str	r3, [r7, #20]
 80019e6:	e009      	b.n	80019fc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	1c5a      	adds	r2, r3, #1
 80019ec:	60ba      	str	r2, [r7, #8]
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	3301      	adds	r3, #1
 80019fa:	617b      	str	r3, [r7, #20]
 80019fc:	697a      	ldr	r2, [r7, #20]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	dbf1      	blt.n	80019e8 <_write+0x12>
	}
	return len;
 8001a04:	687b      	ldr	r3, [r7, #4]
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3718      	adds	r7, #24
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <_close>:

int _close(int file)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	b083      	sub	sp, #12
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
	return -1;
 8001a16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr

08001a26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a26:	b480      	push	{r7}
 8001a28:	b083      	sub	sp, #12
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
 8001a2e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a36:	605a      	str	r2, [r3, #4]
	return 0;
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	370c      	adds	r7, #12
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr

08001a46 <_isatty>:

int _isatty(int file)
{
 8001a46:	b480      	push	{r7}
 8001a48:	b083      	sub	sp, #12
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
	return 1;
 8001a4e:	2301      	movs	r3, #1
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b085      	sub	sp, #20
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	60f8      	str	r0, [r7, #12]
 8001a64:	60b9      	str	r1, [r7, #8]
 8001a66:	607a      	str	r2, [r7, #4]
	return 0;
 8001a68:	2300      	movs	r3, #0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3714      	adds	r7, #20
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
	...

08001a78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b086      	sub	sp, #24
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a80:	4a14      	ldr	r2, [pc, #80]	; (8001ad4 <_sbrk+0x5c>)
 8001a82:	4b15      	ldr	r3, [pc, #84]	; (8001ad8 <_sbrk+0x60>)
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a8c:	4b13      	ldr	r3, [pc, #76]	; (8001adc <_sbrk+0x64>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d102      	bne.n	8001a9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a94:	4b11      	ldr	r3, [pc, #68]	; (8001adc <_sbrk+0x64>)
 8001a96:	4a12      	ldr	r2, [pc, #72]	; (8001ae0 <_sbrk+0x68>)
 8001a98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a9a:	4b10      	ldr	r3, [pc, #64]	; (8001adc <_sbrk+0x64>)
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d207      	bcs.n	8001ab8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001aa8:	f004 f942 	bl	8005d30 <__errno>
 8001aac:	4603      	mov	r3, r0
 8001aae:	220c      	movs	r2, #12
 8001ab0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ab6:	e009      	b.n	8001acc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ab8:	4b08      	ldr	r3, [pc, #32]	; (8001adc <_sbrk+0x64>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001abe:	4b07      	ldr	r3, [pc, #28]	; (8001adc <_sbrk+0x64>)
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	4a05      	ldr	r2, [pc, #20]	; (8001adc <_sbrk+0x64>)
 8001ac8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001aca:	68fb      	ldr	r3, [r7, #12]
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3718      	adds	r7, #24
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	20010000 	.word	0x20010000
 8001ad8:	00000400 	.word	0x00000400
 8001adc:	200001b8 	.word	0x200001b8
 8001ae0:	200001d0 	.word	0x200001d0

08001ae4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001ae8:	4b06      	ldr	r3, [pc, #24]	; (8001b04 <SystemInit+0x20>)
 8001aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001aee:	4a05      	ldr	r2, [pc, #20]	; (8001b04 <SystemInit+0x20>)
 8001af0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001af4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001af8:	bf00      	nop
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	e000ed00 	.word	0xe000ed00

08001b08 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001b08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b40 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b0c:	f7ff ffea 	bl	8001ae4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b10:	480c      	ldr	r0, [pc, #48]	; (8001b44 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b12:	490d      	ldr	r1, [pc, #52]	; (8001b48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b14:	4a0d      	ldr	r2, [pc, #52]	; (8001b4c <LoopForever+0xe>)
  movs r3, #0
 8001b16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b18:	e002      	b.n	8001b20 <LoopCopyDataInit>

08001b1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b1e:	3304      	adds	r3, #4

08001b20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b24:	d3f9      	bcc.n	8001b1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b26:	4a0a      	ldr	r2, [pc, #40]	; (8001b50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b28:	4c0a      	ldr	r4, [pc, #40]	; (8001b54 <LoopForever+0x16>)
  movs r3, #0
 8001b2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b2c:	e001      	b.n	8001b32 <LoopFillZerobss>

08001b2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b30:	3204      	adds	r2, #4

08001b32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b34:	d3fb      	bcc.n	8001b2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b36:	f004 f901 	bl	8005d3c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b3a:	f7ff fb67 	bl	800120c <main>

08001b3e <LoopForever>:

LoopForever:
    b LoopForever
 8001b3e:	e7fe      	b.n	8001b3e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001b40:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001b44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b48:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001b4c:	08009b88 	.word	0x08009b88
  ldr r2, =_sbss
 8001b50:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001b54:	200001d0 	.word	0x200001d0

08001b58 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b58:	e7fe      	b.n	8001b58 <ADC1_IRQHandler>

08001b5a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b082      	sub	sp, #8
 8001b5e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b60:	2300      	movs	r3, #0
 8001b62:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b64:	2003      	movs	r0, #3
 8001b66:	f000 f961 	bl	8001e2c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b6a:	2000      	movs	r0, #0
 8001b6c:	f000 f80e 	bl	8001b8c <HAL_InitTick>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d002      	beq.n	8001b7c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	71fb      	strb	r3, [r7, #7]
 8001b7a:	e001      	b.n	8001b80 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b7c:	f7ff fda6 	bl	80016cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b80:	79fb      	ldrb	r3, [r7, #7]
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
	...

08001b8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b94:	2300      	movs	r3, #0
 8001b96:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001b98:	4b17      	ldr	r3, [pc, #92]	; (8001bf8 <HAL_InitTick+0x6c>)
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d023      	beq.n	8001be8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001ba0:	4b16      	ldr	r3, [pc, #88]	; (8001bfc <HAL_InitTick+0x70>)
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	4b14      	ldr	r3, [pc, #80]	; (8001bf8 <HAL_InitTick+0x6c>)
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	4619      	mov	r1, r3
 8001baa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bae:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f000 f96d 	bl	8001e96 <HAL_SYSTICK_Config>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d10f      	bne.n	8001be2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2b0f      	cmp	r3, #15
 8001bc6:	d809      	bhi.n	8001bdc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bc8:	2200      	movs	r2, #0
 8001bca:	6879      	ldr	r1, [r7, #4]
 8001bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8001bd0:	f000 f937 	bl	8001e42 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001bd4:	4a0a      	ldr	r2, [pc, #40]	; (8001c00 <HAL_InitTick+0x74>)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6013      	str	r3, [r2, #0]
 8001bda:	e007      	b.n	8001bec <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	73fb      	strb	r3, [r7, #15]
 8001be0:	e004      	b.n	8001bec <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	73fb      	strb	r3, [r7, #15]
 8001be6:	e001      	b.n	8001bec <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3710      	adds	r7, #16
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	20000008 	.word	0x20000008
 8001bfc:	20000000 	.word	0x20000000
 8001c00:	20000004 	.word	0x20000004

08001c04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c08:	4b06      	ldr	r3, [pc, #24]	; (8001c24 <HAL_IncTick+0x20>)
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	4b06      	ldr	r3, [pc, #24]	; (8001c28 <HAL_IncTick+0x24>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4413      	add	r3, r2
 8001c14:	4a04      	ldr	r2, [pc, #16]	; (8001c28 <HAL_IncTick+0x24>)
 8001c16:	6013      	str	r3, [r2, #0]
}
 8001c18:	bf00      	nop
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	20000008 	.word	0x20000008
 8001c28:	200001bc 	.word	0x200001bc

08001c2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c30:	4b03      	ldr	r3, [pc, #12]	; (8001c40 <HAL_GetTick+0x14>)
 8001c32:	681b      	ldr	r3, [r3, #0]
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	200001bc 	.word	0x200001bc

08001c44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c4c:	f7ff ffee 	bl	8001c2c <HAL_GetTick>
 8001c50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c5c:	d005      	beq.n	8001c6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001c5e:	4b0a      	ldr	r3, [pc, #40]	; (8001c88 <HAL_Delay+0x44>)
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	461a      	mov	r2, r3
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	4413      	add	r3, r2
 8001c68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c6a:	bf00      	nop
 8001c6c:	f7ff ffde 	bl	8001c2c <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	68fa      	ldr	r2, [r7, #12]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d8f7      	bhi.n	8001c6c <HAL_Delay+0x28>
  {
  }
}
 8001c7c:	bf00      	nop
 8001c7e:	bf00      	nop
 8001c80:	3710      	adds	r7, #16
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	20000008 	.word	0x20000008

08001c8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	f003 0307 	and.w	r3, r3, #7
 8001c9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c9c:	4b0c      	ldr	r3, [pc, #48]	; (8001cd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ca2:	68ba      	ldr	r2, [r7, #8]
 8001ca4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ca8:	4013      	ands	r3, r2
 8001caa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cbe:	4a04      	ldr	r2, [pc, #16]	; (8001cd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	60d3      	str	r3, [r2, #12]
}
 8001cc4:	bf00      	nop
 8001cc6:	3714      	adds	r7, #20
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr
 8001cd0:	e000ed00 	.word	0xe000ed00

08001cd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cd8:	4b04      	ldr	r3, [pc, #16]	; (8001cec <__NVIC_GetPriorityGrouping+0x18>)
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	0a1b      	lsrs	r3, r3, #8
 8001cde:	f003 0307 	and.w	r3, r3, #7
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr
 8001cec:	e000ed00 	.word	0xe000ed00

08001cf0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	db0b      	blt.n	8001d1a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d02:	79fb      	ldrb	r3, [r7, #7]
 8001d04:	f003 021f 	and.w	r2, r3, #31
 8001d08:	4907      	ldr	r1, [pc, #28]	; (8001d28 <__NVIC_EnableIRQ+0x38>)
 8001d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0e:	095b      	lsrs	r3, r3, #5
 8001d10:	2001      	movs	r0, #1
 8001d12:	fa00 f202 	lsl.w	r2, r0, r2
 8001d16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d1a:	bf00      	nop
 8001d1c:	370c      	adds	r7, #12
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	e000e100 	.word	0xe000e100

08001d2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	4603      	mov	r3, r0
 8001d34:	6039      	str	r1, [r7, #0]
 8001d36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	db0a      	blt.n	8001d56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	b2da      	uxtb	r2, r3
 8001d44:	490c      	ldr	r1, [pc, #48]	; (8001d78 <__NVIC_SetPriority+0x4c>)
 8001d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4a:	0112      	lsls	r2, r2, #4
 8001d4c:	b2d2      	uxtb	r2, r2
 8001d4e:	440b      	add	r3, r1
 8001d50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d54:	e00a      	b.n	8001d6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	b2da      	uxtb	r2, r3
 8001d5a:	4908      	ldr	r1, [pc, #32]	; (8001d7c <__NVIC_SetPriority+0x50>)
 8001d5c:	79fb      	ldrb	r3, [r7, #7]
 8001d5e:	f003 030f 	and.w	r3, r3, #15
 8001d62:	3b04      	subs	r3, #4
 8001d64:	0112      	lsls	r2, r2, #4
 8001d66:	b2d2      	uxtb	r2, r2
 8001d68:	440b      	add	r3, r1
 8001d6a:	761a      	strb	r2, [r3, #24]
}
 8001d6c:	bf00      	nop
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr
 8001d78:	e000e100 	.word	0xe000e100
 8001d7c:	e000ed00 	.word	0xe000ed00

08001d80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b089      	sub	sp, #36	; 0x24
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	60f8      	str	r0, [r7, #12]
 8001d88:	60b9      	str	r1, [r7, #8]
 8001d8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	f003 0307 	and.w	r3, r3, #7
 8001d92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	f1c3 0307 	rsb	r3, r3, #7
 8001d9a:	2b04      	cmp	r3, #4
 8001d9c:	bf28      	it	cs
 8001d9e:	2304      	movcs	r3, #4
 8001da0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	3304      	adds	r3, #4
 8001da6:	2b06      	cmp	r3, #6
 8001da8:	d902      	bls.n	8001db0 <NVIC_EncodePriority+0x30>
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	3b03      	subs	r3, #3
 8001dae:	e000      	b.n	8001db2 <NVIC_EncodePriority+0x32>
 8001db0:	2300      	movs	r3, #0
 8001db2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001db4:	f04f 32ff 	mov.w	r2, #4294967295
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbe:	43da      	mvns	r2, r3
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	401a      	ands	r2, r3
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dc8:	f04f 31ff 	mov.w	r1, #4294967295
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd2:	43d9      	mvns	r1, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dd8:	4313      	orrs	r3, r2
         );
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3724      	adds	r7, #36	; 0x24
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
	...

08001de8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	3b01      	subs	r3, #1
 8001df4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001df8:	d301      	bcc.n	8001dfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e00f      	b.n	8001e1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dfe:	4a0a      	ldr	r2, [pc, #40]	; (8001e28 <SysTick_Config+0x40>)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	3b01      	subs	r3, #1
 8001e04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e06:	210f      	movs	r1, #15
 8001e08:	f04f 30ff 	mov.w	r0, #4294967295
 8001e0c:	f7ff ff8e 	bl	8001d2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e10:	4b05      	ldr	r3, [pc, #20]	; (8001e28 <SysTick_Config+0x40>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e16:	4b04      	ldr	r3, [pc, #16]	; (8001e28 <SysTick_Config+0x40>)
 8001e18:	2207      	movs	r2, #7
 8001e1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	e000e010 	.word	0xe000e010

08001e2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f7ff ff29 	bl	8001c8c <__NVIC_SetPriorityGrouping>
}
 8001e3a:	bf00      	nop
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b086      	sub	sp, #24
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	4603      	mov	r3, r0
 8001e4a:	60b9      	str	r1, [r7, #8]
 8001e4c:	607a      	str	r2, [r7, #4]
 8001e4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e50:	2300      	movs	r3, #0
 8001e52:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e54:	f7ff ff3e 	bl	8001cd4 <__NVIC_GetPriorityGrouping>
 8001e58:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	68b9      	ldr	r1, [r7, #8]
 8001e5e:	6978      	ldr	r0, [r7, #20]
 8001e60:	f7ff ff8e 	bl	8001d80 <NVIC_EncodePriority>
 8001e64:	4602      	mov	r2, r0
 8001e66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e6a:	4611      	mov	r1, r2
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7ff ff5d 	bl	8001d2c <__NVIC_SetPriority>
}
 8001e72:	bf00      	nop
 8001e74:	3718      	adds	r7, #24
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}

08001e7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b082      	sub	sp, #8
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	4603      	mov	r3, r0
 8001e82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7ff ff31 	bl	8001cf0 <__NVIC_EnableIRQ>
}
 8001e8e:	bf00      	nop
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b082      	sub	sp, #8
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f7ff ffa2 	bl	8001de8 <SysTick_Config>
 8001ea4:	4603      	mov	r3, r0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	b085      	sub	sp, #20
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d008      	beq.n	8001ed8 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2204      	movs	r2, #4
 8001eca:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e022      	b.n	8001f1e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f022 020e 	bic.w	r2, r2, #14
 8001ee6:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f022 0201 	bic.w	r2, r2, #1
 8001ef6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001efc:	f003 021c 	and.w	r2, r3, #28
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f04:	2101      	movs	r1, #1
 8001f06:	fa01 f202 	lsl.w	r2, r1, r2
 8001f0a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2200      	movs	r2, #0
 8001f18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001f1c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3714      	adds	r7, #20
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr

08001f2a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	b084      	sub	sp, #16
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f32:	2300      	movs	r3, #0
 8001f34:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d005      	beq.n	8001f4e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2204      	movs	r2, #4
 8001f46:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	73fb      	strb	r3, [r7, #15]
 8001f4c:	e029      	b.n	8001fa2 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f022 020e 	bic.w	r2, r2, #14
 8001f5c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f022 0201 	bic.w	r2, r2, #1
 8001f6c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f72:	f003 021c 	and.w	r2, r3, #28
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7a:	2101      	movs	r1, #1
 8001f7c:	fa01 f202 	lsl.w	r2, r1, r2
 8001f80:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2201      	movs	r2, #1
 8001f86:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d003      	beq.n	8001fa2 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	4798      	blx	r3
    }
  }
  return status;
 8001fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3710      	adds	r7, #16
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001fba:	b2db      	uxtb	r3, r3
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b087      	sub	sp, #28
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fd6:	e148      	b.n	800226a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	2101      	movs	r1, #1
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	f000 813a 	beq.w	8002264 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f003 0303 	and.w	r3, r3, #3
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d005      	beq.n	8002008 <HAL_GPIO_Init+0x40>
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f003 0303 	and.w	r3, r3, #3
 8002004:	2b02      	cmp	r3, #2
 8002006:	d130      	bne.n	800206a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	2203      	movs	r2, #3
 8002014:	fa02 f303 	lsl.w	r3, r2, r3
 8002018:	43db      	mvns	r3, r3
 800201a:	693a      	ldr	r2, [r7, #16]
 800201c:	4013      	ands	r3, r2
 800201e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	68da      	ldr	r2, [r3, #12]
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	693a      	ldr	r2, [r7, #16]
 800202e:	4313      	orrs	r3, r2
 8002030:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	693a      	ldr	r2, [r7, #16]
 8002036:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800203e:	2201      	movs	r2, #1
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	43db      	mvns	r3, r3
 8002048:	693a      	ldr	r2, [r7, #16]
 800204a:	4013      	ands	r3, r2
 800204c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	091b      	lsrs	r3, r3, #4
 8002054:	f003 0201 	and.w	r2, r3, #1
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	fa02 f303 	lsl.w	r3, r2, r3
 800205e:	693a      	ldr	r2, [r7, #16]
 8002060:	4313      	orrs	r3, r2
 8002062:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	693a      	ldr	r2, [r7, #16]
 8002068:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f003 0303 	and.w	r3, r3, #3
 8002072:	2b03      	cmp	r3, #3
 8002074:	d017      	beq.n	80020a6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	68db      	ldr	r3, [r3, #12]
 800207a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	005b      	lsls	r3, r3, #1
 8002080:	2203      	movs	r2, #3
 8002082:	fa02 f303 	lsl.w	r3, r2, r3
 8002086:	43db      	mvns	r3, r3
 8002088:	693a      	ldr	r2, [r7, #16]
 800208a:	4013      	ands	r3, r2
 800208c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	689a      	ldr	r2, [r3, #8]
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	fa02 f303 	lsl.w	r3, r2, r3
 800209a:	693a      	ldr	r2, [r7, #16]
 800209c:	4313      	orrs	r3, r2
 800209e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f003 0303 	and.w	r3, r3, #3
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d123      	bne.n	80020fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	08da      	lsrs	r2, r3, #3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	3208      	adds	r2, #8
 80020ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	f003 0307 	and.w	r3, r3, #7
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	220f      	movs	r2, #15
 80020ca:	fa02 f303 	lsl.w	r3, r2, r3
 80020ce:	43db      	mvns	r3, r3
 80020d0:	693a      	ldr	r2, [r7, #16]
 80020d2:	4013      	ands	r3, r2
 80020d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	691a      	ldr	r2, [r3, #16]
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	f003 0307 	and.w	r3, r3, #7
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	fa02 f303 	lsl.w	r3, r2, r3
 80020e6:	693a      	ldr	r2, [r7, #16]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	08da      	lsrs	r2, r3, #3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	3208      	adds	r2, #8
 80020f4:	6939      	ldr	r1, [r7, #16]
 80020f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	2203      	movs	r2, #3
 8002106:	fa02 f303 	lsl.w	r3, r2, r3
 800210a:	43db      	mvns	r3, r3
 800210c:	693a      	ldr	r2, [r7, #16]
 800210e:	4013      	ands	r3, r2
 8002110:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f003 0203 	and.w	r2, r3, #3
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	005b      	lsls	r3, r3, #1
 800211e:	fa02 f303 	lsl.w	r3, r2, r3
 8002122:	693a      	ldr	r2, [r7, #16]
 8002124:	4313      	orrs	r3, r2
 8002126:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	693a      	ldr	r2, [r7, #16]
 800212c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002136:	2b00      	cmp	r3, #0
 8002138:	f000 8094 	beq.w	8002264 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800213c:	4b52      	ldr	r3, [pc, #328]	; (8002288 <HAL_GPIO_Init+0x2c0>)
 800213e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002140:	4a51      	ldr	r2, [pc, #324]	; (8002288 <HAL_GPIO_Init+0x2c0>)
 8002142:	f043 0301 	orr.w	r3, r3, #1
 8002146:	6613      	str	r3, [r2, #96]	; 0x60
 8002148:	4b4f      	ldr	r3, [pc, #316]	; (8002288 <HAL_GPIO_Init+0x2c0>)
 800214a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800214c:	f003 0301 	and.w	r3, r3, #1
 8002150:	60bb      	str	r3, [r7, #8]
 8002152:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002154:	4a4d      	ldr	r2, [pc, #308]	; (800228c <HAL_GPIO_Init+0x2c4>)
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	089b      	lsrs	r3, r3, #2
 800215a:	3302      	adds	r3, #2
 800215c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002160:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	f003 0303 	and.w	r3, r3, #3
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	220f      	movs	r2, #15
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	43db      	mvns	r3, r3
 8002172:	693a      	ldr	r2, [r7, #16]
 8002174:	4013      	ands	r3, r2
 8002176:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800217e:	d00d      	beq.n	800219c <HAL_GPIO_Init+0x1d4>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4a43      	ldr	r2, [pc, #268]	; (8002290 <HAL_GPIO_Init+0x2c8>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d007      	beq.n	8002198 <HAL_GPIO_Init+0x1d0>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4a42      	ldr	r2, [pc, #264]	; (8002294 <HAL_GPIO_Init+0x2cc>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d101      	bne.n	8002194 <HAL_GPIO_Init+0x1cc>
 8002190:	2302      	movs	r3, #2
 8002192:	e004      	b.n	800219e <HAL_GPIO_Init+0x1d6>
 8002194:	2307      	movs	r3, #7
 8002196:	e002      	b.n	800219e <HAL_GPIO_Init+0x1d6>
 8002198:	2301      	movs	r3, #1
 800219a:	e000      	b.n	800219e <HAL_GPIO_Init+0x1d6>
 800219c:	2300      	movs	r3, #0
 800219e:	697a      	ldr	r2, [r7, #20]
 80021a0:	f002 0203 	and.w	r2, r2, #3
 80021a4:	0092      	lsls	r2, r2, #2
 80021a6:	4093      	lsls	r3, r2
 80021a8:	693a      	ldr	r2, [r7, #16]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80021ae:	4937      	ldr	r1, [pc, #220]	; (800228c <HAL_GPIO_Init+0x2c4>)
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	089b      	lsrs	r3, r3, #2
 80021b4:	3302      	adds	r3, #2
 80021b6:	693a      	ldr	r2, [r7, #16]
 80021b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80021bc:	4b36      	ldr	r3, [pc, #216]	; (8002298 <HAL_GPIO_Init+0x2d0>)
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	43db      	mvns	r3, r3
 80021c6:	693a      	ldr	r2, [r7, #16]
 80021c8:	4013      	ands	r3, r2
 80021ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d003      	beq.n	80021e0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80021d8:	693a      	ldr	r2, [r7, #16]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	4313      	orrs	r3, r2
 80021de:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80021e0:	4a2d      	ldr	r2, [pc, #180]	; (8002298 <HAL_GPIO_Init+0x2d0>)
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80021e6:	4b2c      	ldr	r3, [pc, #176]	; (8002298 <HAL_GPIO_Init+0x2d0>)
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	43db      	mvns	r3, r3
 80021f0:	693a      	ldr	r2, [r7, #16]
 80021f2:	4013      	ands	r3, r2
 80021f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d003      	beq.n	800220a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	4313      	orrs	r3, r2
 8002208:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800220a:	4a23      	ldr	r2, [pc, #140]	; (8002298 <HAL_GPIO_Init+0x2d0>)
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002210:	4b21      	ldr	r3, [pc, #132]	; (8002298 <HAL_GPIO_Init+0x2d0>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	43db      	mvns	r3, r3
 800221a:	693a      	ldr	r2, [r7, #16]
 800221c:	4013      	ands	r3, r2
 800221e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d003      	beq.n	8002234 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800222c:	693a      	ldr	r2, [r7, #16]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	4313      	orrs	r3, r2
 8002232:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002234:	4a18      	ldr	r2, [pc, #96]	; (8002298 <HAL_GPIO_Init+0x2d0>)
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800223a:	4b17      	ldr	r3, [pc, #92]	; (8002298 <HAL_GPIO_Init+0x2d0>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	43db      	mvns	r3, r3
 8002244:	693a      	ldr	r2, [r7, #16]
 8002246:	4013      	ands	r3, r2
 8002248:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d003      	beq.n	800225e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002256:	693a      	ldr	r2, [r7, #16]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	4313      	orrs	r3, r2
 800225c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800225e:	4a0e      	ldr	r2, [pc, #56]	; (8002298 <HAL_GPIO_Init+0x2d0>)
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	3301      	adds	r3, #1
 8002268:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	fa22 f303 	lsr.w	r3, r2, r3
 8002274:	2b00      	cmp	r3, #0
 8002276:	f47f aeaf 	bne.w	8001fd8 <HAL_GPIO_Init+0x10>
  }
}
 800227a:	bf00      	nop
 800227c:	bf00      	nop
 800227e:	371c      	adds	r7, #28
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr
 8002288:	40021000 	.word	0x40021000
 800228c:	40010000 	.word	0x40010000
 8002290:	48000400 	.word	0x48000400
 8002294:	48000800 	.word	0x48000800
 8002298:	40010400 	.word	0x40010400

0800229c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	460b      	mov	r3, r1
 80022a6:	807b      	strh	r3, [r7, #2]
 80022a8:	4613      	mov	r3, r2
 80022aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022ac:	787b      	ldrb	r3, [r7, #1]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d003      	beq.n	80022ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80022b2:	887a      	ldrh	r2, [r7, #2]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80022b8:	e002      	b.n	80022c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80022ba:	887a      	ldrh	r2, [r7, #2]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	629a      	str	r2, [r3, #40]	; 0x28
}
 80022c0:	bf00      	nop
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d101      	bne.n	80022de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e081      	b.n	80023e2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d106      	bne.n	80022f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f7ff fa0e 	bl	8001714 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2224      	movs	r2, #36	; 0x24
 80022fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f022 0201 	bic.w	r2, r2, #1
 800230e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685a      	ldr	r2, [r3, #4]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800231c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	689a      	ldr	r2, [r3, #8]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800232c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	2b01      	cmp	r3, #1
 8002334:	d107      	bne.n	8002346 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	689a      	ldr	r2, [r3, #8]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002342:	609a      	str	r2, [r3, #8]
 8002344:	e006      	b.n	8002354 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	689a      	ldr	r2, [r3, #8]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002352:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	2b02      	cmp	r3, #2
 800235a:	d104      	bne.n	8002366 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002364:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	6812      	ldr	r2, [r2, #0]
 8002370:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002374:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002378:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	68da      	ldr	r2, [r3, #12]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002388:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	691a      	ldr	r2, [r3, #16]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	695b      	ldr	r3, [r3, #20]
 8002392:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	699b      	ldr	r3, [r3, #24]
 800239a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	430a      	orrs	r2, r1
 80023a2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	69d9      	ldr	r1, [r3, #28]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6a1a      	ldr	r2, [r3, #32]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	430a      	orrs	r2, r1
 80023b2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f042 0201 	orr.w	r2, r2, #1
 80023c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2220      	movs	r2, #32
 80023ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80023e0:	2300      	movs	r3, #0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3708      	adds	r7, #8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
	...

080023ec <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b088      	sub	sp, #32
 80023f0:	af02      	add	r7, sp, #8
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	607a      	str	r2, [r7, #4]
 80023f6:	461a      	mov	r2, r3
 80023f8:	460b      	mov	r3, r1
 80023fa:	817b      	strh	r3, [r7, #10]
 80023fc:	4613      	mov	r3, r2
 80023fe:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002406:	b2db      	uxtb	r3, r3
 8002408:	2b20      	cmp	r3, #32
 800240a:	f040 80da 	bne.w	80025c2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002414:	2b01      	cmp	r3, #1
 8002416:	d101      	bne.n	800241c <HAL_I2C_Master_Transmit+0x30>
 8002418:	2302      	movs	r3, #2
 800241a:	e0d3      	b.n	80025c4 <HAL_I2C_Master_Transmit+0x1d8>
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2201      	movs	r2, #1
 8002420:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002424:	f7ff fc02 	bl	8001c2c <HAL_GetTick>
 8002428:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	9300      	str	r3, [sp, #0]
 800242e:	2319      	movs	r3, #25
 8002430:	2201      	movs	r2, #1
 8002432:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002436:	68f8      	ldr	r0, [r7, #12]
 8002438:	f000 fefb 	bl	8003232 <I2C_WaitOnFlagUntilTimeout>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d001      	beq.n	8002446 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e0be      	b.n	80025c4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2221      	movs	r2, #33	; 0x21
 800244a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2210      	movs	r2, #16
 8002452:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2200      	movs	r2, #0
 800245a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	893a      	ldrh	r2, [r7, #8]
 8002466:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2200      	movs	r2, #0
 800246c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002472:	b29b      	uxth	r3, r3
 8002474:	2bff      	cmp	r3, #255	; 0xff
 8002476:	d90e      	bls.n	8002496 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	22ff      	movs	r2, #255	; 0xff
 800247c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002482:	b2da      	uxtb	r2, r3
 8002484:	8979      	ldrh	r1, [r7, #10]
 8002486:	4b51      	ldr	r3, [pc, #324]	; (80025cc <HAL_I2C_Master_Transmit+0x1e0>)
 8002488:	9300      	str	r3, [sp, #0]
 800248a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800248e:	68f8      	ldr	r0, [r7, #12]
 8002490:	f001 f8f2 	bl	8003678 <I2C_TransferConfig>
 8002494:	e06c      	b.n	8002570 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800249a:	b29a      	uxth	r2, r3
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024a4:	b2da      	uxtb	r2, r3
 80024a6:	8979      	ldrh	r1, [r7, #10]
 80024a8:	4b48      	ldr	r3, [pc, #288]	; (80025cc <HAL_I2C_Master_Transmit+0x1e0>)
 80024aa:	9300      	str	r3, [sp, #0]
 80024ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024b0:	68f8      	ldr	r0, [r7, #12]
 80024b2:	f001 f8e1 	bl	8003678 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80024b6:	e05b      	b.n	8002570 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024b8:	697a      	ldr	r2, [r7, #20]
 80024ba:	6a39      	ldr	r1, [r7, #32]
 80024bc:	68f8      	ldr	r0, [r7, #12]
 80024be:	f000 fef8 	bl	80032b2 <I2C_WaitOnTXISFlagUntilTimeout>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d001      	beq.n	80024cc <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e07b      	b.n	80025c4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d0:	781a      	ldrb	r2, [r3, #0]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024dc:	1c5a      	adds	r2, r3, #1
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	3b01      	subs	r3, #1
 80024ea:	b29a      	uxth	r2, r3
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024f4:	3b01      	subs	r3, #1
 80024f6:	b29a      	uxth	r2, r3
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002500:	b29b      	uxth	r3, r3
 8002502:	2b00      	cmp	r3, #0
 8002504:	d034      	beq.n	8002570 <HAL_I2C_Master_Transmit+0x184>
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800250a:	2b00      	cmp	r3, #0
 800250c:	d130      	bne.n	8002570 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	9300      	str	r3, [sp, #0]
 8002512:	6a3b      	ldr	r3, [r7, #32]
 8002514:	2200      	movs	r2, #0
 8002516:	2180      	movs	r1, #128	; 0x80
 8002518:	68f8      	ldr	r0, [r7, #12]
 800251a:	f000 fe8a 	bl	8003232 <I2C_WaitOnFlagUntilTimeout>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d001      	beq.n	8002528 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e04d      	b.n	80025c4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800252c:	b29b      	uxth	r3, r3
 800252e:	2bff      	cmp	r3, #255	; 0xff
 8002530:	d90e      	bls.n	8002550 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	22ff      	movs	r2, #255	; 0xff
 8002536:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800253c:	b2da      	uxtb	r2, r3
 800253e:	8979      	ldrh	r1, [r7, #10]
 8002540:	2300      	movs	r3, #0
 8002542:	9300      	str	r3, [sp, #0]
 8002544:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002548:	68f8      	ldr	r0, [r7, #12]
 800254a:	f001 f895 	bl	8003678 <I2C_TransferConfig>
 800254e:	e00f      	b.n	8002570 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002554:	b29a      	uxth	r2, r3
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800255e:	b2da      	uxtb	r2, r3
 8002560:	8979      	ldrh	r1, [r7, #10]
 8002562:	2300      	movs	r3, #0
 8002564:	9300      	str	r3, [sp, #0]
 8002566:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800256a:	68f8      	ldr	r0, [r7, #12]
 800256c:	f001 f884 	bl	8003678 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002574:	b29b      	uxth	r3, r3
 8002576:	2b00      	cmp	r3, #0
 8002578:	d19e      	bne.n	80024b8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800257a:	697a      	ldr	r2, [r7, #20]
 800257c:	6a39      	ldr	r1, [r7, #32]
 800257e:	68f8      	ldr	r0, [r7, #12]
 8002580:	f000 fed7 	bl	8003332 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d001      	beq.n	800258e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e01a      	b.n	80025c4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2220      	movs	r2, #32
 8002594:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	6859      	ldr	r1, [r3, #4]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	4b0b      	ldr	r3, [pc, #44]	; (80025d0 <HAL_I2C_Master_Transmit+0x1e4>)
 80025a2:	400b      	ands	r3, r1
 80025a4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2220      	movs	r2, #32
 80025aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80025be:	2300      	movs	r3, #0
 80025c0:	e000      	b.n	80025c4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80025c2:	2302      	movs	r3, #2
  }
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3718      	adds	r7, #24
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	80002000 	.word	0x80002000
 80025d0:	fe00e800 	.word	0xfe00e800

080025d4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b088      	sub	sp, #32
 80025d8:	af02      	add	r7, sp, #8
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	607a      	str	r2, [r7, #4]
 80025de:	461a      	mov	r2, r3
 80025e0:	460b      	mov	r3, r1
 80025e2:	817b      	strh	r3, [r7, #10]
 80025e4:	4613      	mov	r3, r2
 80025e6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	2b20      	cmp	r3, #32
 80025f2:	f040 80db 	bne.w	80027ac <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d101      	bne.n	8002604 <HAL_I2C_Master_Receive+0x30>
 8002600:	2302      	movs	r3, #2
 8002602:	e0d4      	b.n	80027ae <HAL_I2C_Master_Receive+0x1da>
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2201      	movs	r2, #1
 8002608:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800260c:	f7ff fb0e 	bl	8001c2c <HAL_GetTick>
 8002610:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	9300      	str	r3, [sp, #0]
 8002616:	2319      	movs	r3, #25
 8002618:	2201      	movs	r2, #1
 800261a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800261e:	68f8      	ldr	r0, [r7, #12]
 8002620:	f000 fe07 	bl	8003232 <I2C_WaitOnFlagUntilTimeout>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e0bf      	b.n	80027ae <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2222      	movs	r2, #34	; 0x22
 8002632:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2210      	movs	r2, #16
 800263a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2200      	movs	r2, #0
 8002642:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	893a      	ldrh	r2, [r7, #8]
 800264e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2200      	movs	r2, #0
 8002654:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800265a:	b29b      	uxth	r3, r3
 800265c:	2bff      	cmp	r3, #255	; 0xff
 800265e:	d90e      	bls.n	800267e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	22ff      	movs	r2, #255	; 0xff
 8002664:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800266a:	b2da      	uxtb	r2, r3
 800266c:	8979      	ldrh	r1, [r7, #10]
 800266e:	4b52      	ldr	r3, [pc, #328]	; (80027b8 <HAL_I2C_Master_Receive+0x1e4>)
 8002670:	9300      	str	r3, [sp, #0]
 8002672:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002676:	68f8      	ldr	r0, [r7, #12]
 8002678:	f000 fffe 	bl	8003678 <I2C_TransferConfig>
 800267c:	e06d      	b.n	800275a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002682:	b29a      	uxth	r2, r3
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800268c:	b2da      	uxtb	r2, r3
 800268e:	8979      	ldrh	r1, [r7, #10]
 8002690:	4b49      	ldr	r3, [pc, #292]	; (80027b8 <HAL_I2C_Master_Receive+0x1e4>)
 8002692:	9300      	str	r3, [sp, #0]
 8002694:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002698:	68f8      	ldr	r0, [r7, #12]
 800269a:	f000 ffed 	bl	8003678 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800269e:	e05c      	b.n	800275a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026a0:	697a      	ldr	r2, [r7, #20]
 80026a2:	6a39      	ldr	r1, [r7, #32]
 80026a4:	68f8      	ldr	r0, [r7, #12]
 80026a6:	f000 fe81 	bl	80033ac <I2C_WaitOnRXNEFlagUntilTimeout>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d001      	beq.n	80026b4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e07c      	b.n	80027ae <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026be:	b2d2      	uxtb	r2, r2
 80026c0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c6:	1c5a      	adds	r2, r3, #1
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026d0:	3b01      	subs	r3, #1
 80026d2:	b29a      	uxth	r2, r3
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026dc:	b29b      	uxth	r3, r3
 80026de:	3b01      	subs	r3, #1
 80026e0:	b29a      	uxth	r2, r3
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d034      	beq.n	800275a <HAL_I2C_Master_Receive+0x186>
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d130      	bne.n	800275a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	9300      	str	r3, [sp, #0]
 80026fc:	6a3b      	ldr	r3, [r7, #32]
 80026fe:	2200      	movs	r2, #0
 8002700:	2180      	movs	r1, #128	; 0x80
 8002702:	68f8      	ldr	r0, [r7, #12]
 8002704:	f000 fd95 	bl	8003232 <I2C_WaitOnFlagUntilTimeout>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d001      	beq.n	8002712 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e04d      	b.n	80027ae <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002716:	b29b      	uxth	r3, r3
 8002718:	2bff      	cmp	r3, #255	; 0xff
 800271a:	d90e      	bls.n	800273a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	22ff      	movs	r2, #255	; 0xff
 8002720:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002726:	b2da      	uxtb	r2, r3
 8002728:	8979      	ldrh	r1, [r7, #10]
 800272a:	2300      	movs	r3, #0
 800272c:	9300      	str	r3, [sp, #0]
 800272e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002732:	68f8      	ldr	r0, [r7, #12]
 8002734:	f000 ffa0 	bl	8003678 <I2C_TransferConfig>
 8002738:	e00f      	b.n	800275a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800273e:	b29a      	uxth	r2, r3
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002748:	b2da      	uxtb	r2, r3
 800274a:	8979      	ldrh	r1, [r7, #10]
 800274c:	2300      	movs	r3, #0
 800274e:	9300      	str	r3, [sp, #0]
 8002750:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002754:	68f8      	ldr	r0, [r7, #12]
 8002756:	f000 ff8f 	bl	8003678 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800275e:	b29b      	uxth	r3, r3
 8002760:	2b00      	cmp	r3, #0
 8002762:	d19d      	bne.n	80026a0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002764:	697a      	ldr	r2, [r7, #20]
 8002766:	6a39      	ldr	r1, [r7, #32]
 8002768:	68f8      	ldr	r0, [r7, #12]
 800276a:	f000 fde2 	bl	8003332 <I2C_WaitOnSTOPFlagUntilTimeout>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d001      	beq.n	8002778 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e01a      	b.n	80027ae <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2220      	movs	r2, #32
 800277e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	6859      	ldr	r1, [r3, #4]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	4b0c      	ldr	r3, [pc, #48]	; (80027bc <HAL_I2C_Master_Receive+0x1e8>)
 800278c:	400b      	ands	r3, r1
 800278e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2220      	movs	r2, #32
 8002794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2200      	movs	r2, #0
 800279c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80027a8:	2300      	movs	r3, #0
 80027aa:	e000      	b.n	80027ae <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80027ac:	2302      	movs	r3, #2
  }
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3718      	adds	r7, #24
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	80002400 	.word	0x80002400
 80027bc:	fe00e800 	.word	0xfe00e800

080027c0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	699b      	ldr	r3, [r3, #24]
 80027ce:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d005      	beq.n	80027ec <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027e4:	68ba      	ldr	r2, [r7, #8]
 80027e6:	68f9      	ldr	r1, [r7, #12]
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	4798      	blx	r3
  }
}
 80027ec:	bf00      	nop
 80027ee:	3710      	adds	r7, #16
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b086      	sub	sp, #24
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	699b      	ldr	r3, [r3, #24]
 8002802:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	0a1b      	lsrs	r3, r3, #8
 8002810:	f003 0301 	and.w	r3, r3, #1
 8002814:	2b00      	cmp	r3, #0
 8002816:	d010      	beq.n	800283a <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	09db      	lsrs	r3, r3, #7
 800281c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002820:	2b00      	cmp	r3, #0
 8002822:	d00a      	beq.n	800283a <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002828:	f043 0201 	orr.w	r2, r3, #1
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002838:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	0a9b      	lsrs	r3, r3, #10
 800283e:	f003 0301 	and.w	r3, r3, #1
 8002842:	2b00      	cmp	r3, #0
 8002844:	d010      	beq.n	8002868 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	09db      	lsrs	r3, r3, #7
 800284a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800284e:	2b00      	cmp	r3, #0
 8002850:	d00a      	beq.n	8002868 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002856:	f043 0208 	orr.w	r2, r3, #8
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002866:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	0a5b      	lsrs	r3, r3, #9
 800286c:	f003 0301 	and.w	r3, r3, #1
 8002870:	2b00      	cmp	r3, #0
 8002872:	d010      	beq.n	8002896 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	09db      	lsrs	r3, r3, #7
 8002878:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800287c:	2b00      	cmp	r3, #0
 800287e:	d00a      	beq.n	8002896 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002884:	f043 0202 	orr.w	r2, r3, #2
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002894:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800289a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f003 030b 	and.w	r3, r3, #11
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d003      	beq.n	80028ae <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80028a6:	68f9      	ldr	r1, [r7, #12]
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f000 fb89 	bl	8002fc0 <I2C_ITError>
  }
}
 80028ae:	bf00      	nop
 80028b0:	3718      	adds	r7, #24
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80028b6:	b480      	push	{r7}
 80028b8:	b083      	sub	sp, #12
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80028be:	bf00      	nop
 80028c0:	370c      	adds	r7, #12
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr

080028ca <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80028ca:	b480      	push	{r7}
 80028cc:	b083      	sub	sp, #12
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80028d2:	bf00      	nop
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr

080028de <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80028de:	b480      	push	{r7}
 80028e0:	b083      	sub	sp, #12
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
 80028e6:	460b      	mov	r3, r1
 80028e8:	70fb      	strb	r3, [r7, #3]
 80028ea:	4613      	mov	r3, r2
 80028ec:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80028ee:	bf00      	nop
 80028f0:	370c      	adds	r7, #12
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr

080028fa <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80028fa:	b480      	push	{r7}
 80028fc:	b083      	sub	sp, #12
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002902:	bf00      	nop
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr

0800290e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800290e:	b480      	push	{r7}
 8002910:	b083      	sub	sp, #12
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002916:	bf00      	nop
 8002918:	370c      	adds	r7, #12
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr

08002922 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002922:	b480      	push	{r7}
 8002924:	b083      	sub	sp, #12
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800292a:	bf00      	nop
 800292c:	370c      	adds	r7, #12
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr

08002936 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002936:	b580      	push	{r7, lr}
 8002938:	b086      	sub	sp, #24
 800293a:	af00      	add	r7, sp, #0
 800293c:	60f8      	str	r0, [r7, #12]
 800293e:	60b9      	str	r1, [r7, #8]
 8002940:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002946:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002952:	2b01      	cmp	r3, #1
 8002954:	d101      	bne.n	800295a <I2C_Slave_ISR_IT+0x24>
 8002956:	2302      	movs	r3, #2
 8002958:	e0ec      	b.n	8002b34 <I2C_Slave_ISR_IT+0x1fe>
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2201      	movs	r2, #1
 800295e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	095b      	lsrs	r3, r3, #5
 8002966:	f003 0301 	and.w	r3, r3, #1
 800296a:	2b00      	cmp	r3, #0
 800296c:	d009      	beq.n	8002982 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	095b      	lsrs	r3, r3, #5
 8002972:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002976:	2b00      	cmp	r3, #0
 8002978:	d003      	beq.n	8002982 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800297a:	6939      	ldr	r1, [r7, #16]
 800297c:	68f8      	ldr	r0, [r7, #12]
 800297e:	f000 f9bf 	bl	8002d00 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	091b      	lsrs	r3, r3, #4
 8002986:	f003 0301 	and.w	r3, r3, #1
 800298a:	2b00      	cmp	r3, #0
 800298c:	d04d      	beq.n	8002a2a <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	091b      	lsrs	r3, r3, #4
 8002992:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002996:	2b00      	cmp	r3, #0
 8002998:	d047      	beq.n	8002a2a <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800299e:	b29b      	uxth	r3, r3
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d128      	bne.n	80029f6 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	2b28      	cmp	r3, #40	; 0x28
 80029ae:	d108      	bne.n	80029c2 <I2C_Slave_ISR_IT+0x8c>
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80029b6:	d104      	bne.n	80029c2 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80029b8:	6939      	ldr	r1, [r7, #16]
 80029ba:	68f8      	ldr	r0, [r7, #12]
 80029bc:	f000 faaa 	bl	8002f14 <I2C_ITListenCplt>
 80029c0:	e032      	b.n	8002a28 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	2b29      	cmp	r3, #41	; 0x29
 80029cc:	d10e      	bne.n	80029ec <I2C_Slave_ISR_IT+0xb6>
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80029d4:	d00a      	beq.n	80029ec <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	2210      	movs	r2, #16
 80029dc:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80029de:	68f8      	ldr	r0, [r7, #12]
 80029e0:	f000 fbe5 	bl	80031ae <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80029e4:	68f8      	ldr	r0, [r7, #12]
 80029e6:	f000 f92d 	bl	8002c44 <I2C_ITSlaveSeqCplt>
 80029ea:	e01d      	b.n	8002a28 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2210      	movs	r2, #16
 80029f2:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80029f4:	e096      	b.n	8002b24 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	2210      	movs	r2, #16
 80029fc:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a02:	f043 0204 	orr.w	r2, r3, #4
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d004      	beq.n	8002a1a <I2C_Slave_ISR_IT+0xe4>
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a16:	f040 8085 	bne.w	8002b24 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a1e:	4619      	mov	r1, r3
 8002a20:	68f8      	ldr	r0, [r7, #12]
 8002a22:	f000 facd 	bl	8002fc0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002a26:	e07d      	b.n	8002b24 <I2C_Slave_ISR_IT+0x1ee>
 8002a28:	e07c      	b.n	8002b24 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	089b      	lsrs	r3, r3, #2
 8002a2e:	f003 0301 	and.w	r3, r3, #1
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d030      	beq.n	8002a98 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	089b      	lsrs	r3, r3, #2
 8002a3a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d02a      	beq.n	8002a98 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d018      	beq.n	8002a7e <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a56:	b2d2      	uxtb	r2, r2
 8002a58:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5e:	1c5a      	adds	r2, r3, #1
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a68:	3b01      	subs	r3, #1
 8002a6a:	b29a      	uxth	r2, r3
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	3b01      	subs	r3, #1
 8002a78:	b29a      	uxth	r2, r3
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d14f      	bne.n	8002b28 <I2C_Slave_ISR_IT+0x1f2>
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a8e:	d04b      	beq.n	8002b28 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002a90:	68f8      	ldr	r0, [r7, #12]
 8002a92:	f000 f8d7 	bl	8002c44 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002a96:	e047      	b.n	8002b28 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	08db      	lsrs	r3, r3, #3
 8002a9c:	f003 0301 	and.w	r3, r3, #1
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d00a      	beq.n	8002aba <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	08db      	lsrs	r3, r3, #3
 8002aa8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d004      	beq.n	8002aba <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002ab0:	6939      	ldr	r1, [r7, #16]
 8002ab2:	68f8      	ldr	r0, [r7, #12]
 8002ab4:	f000 f842 	bl	8002b3c <I2C_ITAddrCplt>
 8002ab8:	e037      	b.n	8002b2a <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	085b      	lsrs	r3, r3, #1
 8002abe:	f003 0301 	and.w	r3, r3, #1
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d031      	beq.n	8002b2a <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	085b      	lsrs	r3, r3, #1
 8002aca:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d02b      	beq.n	8002b2a <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d018      	beq.n	8002b0e <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae0:	781a      	ldrb	r2, [r3, #0]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aec:	1c5a      	adds	r2, r3, #1
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	3b01      	subs	r3, #1
 8002afa:	b29a      	uxth	r2, r3
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b04:	3b01      	subs	r3, #1
 8002b06:	b29a      	uxth	r2, r3
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	851a      	strh	r2, [r3, #40]	; 0x28
 8002b0c:	e00d      	b.n	8002b2a <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b14:	d002      	beq.n	8002b1c <I2C_Slave_ISR_IT+0x1e6>
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d106      	bne.n	8002b2a <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002b1c:	68f8      	ldr	r0, [r7, #12]
 8002b1e:	f000 f891 	bl	8002c44 <I2C_ITSlaveSeqCplt>
 8002b22:	e002      	b.n	8002b2a <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8002b24:	bf00      	nop
 8002b26:	e000      	b.n	8002b2a <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8002b28:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002b32:	2300      	movs	r3, #0
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3718      	adds	r7, #24
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002b52:	2b28      	cmp	r3, #40	; 0x28
 8002b54:	d16a      	bne.n	8002c2c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	699b      	ldr	r3, [r3, #24]
 8002b5c:	0c1b      	lsrs	r3, r3, #16
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	f003 0301 	and.w	r3, r3, #1
 8002b64:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	699b      	ldr	r3, [r3, #24]
 8002b6c:	0c1b      	lsrs	r3, r3, #16
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002b74:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b82:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002b90:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d138      	bne.n	8002c0c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002b9a:	897b      	ldrh	r3, [r7, #10]
 8002b9c:	09db      	lsrs	r3, r3, #7
 8002b9e:	b29a      	uxth	r2, r3
 8002ba0:	89bb      	ldrh	r3, [r7, #12]
 8002ba2:	4053      	eors	r3, r2
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	f003 0306 	and.w	r3, r3, #6
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d11c      	bne.n	8002be8 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002bae:	897b      	ldrh	r3, [r7, #10]
 8002bb0:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bb6:	1c5a      	adds	r2, r3, #1
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d13b      	bne.n	8002c3c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	2208      	movs	r2, #8
 8002bd0:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002bda:	89ba      	ldrh	r2, [r7, #12]
 8002bdc:	7bfb      	ldrb	r3, [r7, #15]
 8002bde:	4619      	mov	r1, r3
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f7ff fe7c 	bl	80028de <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002be6:	e029      	b.n	8002c3c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002be8:	893b      	ldrh	r3, [r7, #8]
 8002bea:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002bec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f000 fd73 	bl	80036dc <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002bfe:	89ba      	ldrh	r2, [r7, #12]
 8002c00:	7bfb      	ldrb	r3, [r7, #15]
 8002c02:	4619      	mov	r1, r3
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f7ff fe6a 	bl	80028de <HAL_I2C_AddrCallback>
}
 8002c0a:	e017      	b.n	8002c3c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002c0c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f000 fd63 	bl	80036dc <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002c1e:	89ba      	ldrh	r2, [r7, #12]
 8002c20:	7bfb      	ldrb	r3, [r7, #15]
 8002c22:	4619      	mov	r1, r3
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f7ff fe5a 	bl	80028de <HAL_I2C_AddrCallback>
}
 8002c2a:	e007      	b.n	8002c3c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2208      	movs	r2, #8
 8002c32:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8002c3c:	bf00      	nop
 8002c3e:	3710      	adds	r7, #16
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	0b9b      	lsrs	r3, r3, #14
 8002c60:	f003 0301 	and.w	r3, r3, #1
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d008      	beq.n	8002c7a <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002c76:	601a      	str	r2, [r3, #0]
 8002c78:	e00d      	b.n	8002c96 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	0bdb      	lsrs	r3, r3, #15
 8002c7e:	f003 0301 	and.w	r3, r3, #1
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d007      	beq.n	8002c96 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c94:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	2b29      	cmp	r3, #41	; 0x29
 8002ca0:	d112      	bne.n	8002cc8 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2228      	movs	r2, #40	; 0x28
 8002ca6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2221      	movs	r2, #33	; 0x21
 8002cae:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002cb0:	2101      	movs	r1, #1
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 fd12 	bl	80036dc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f7ff fdf8 	bl	80028b6 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002cc6:	e017      	b.n	8002cf8 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	2b2a      	cmp	r3, #42	; 0x2a
 8002cd2:	d111      	bne.n	8002cf8 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2228      	movs	r2, #40	; 0x28
 8002cd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2222      	movs	r2, #34	; 0x22
 8002ce0:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002ce2:	2102      	movs	r1, #2
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f000 fcf9 	bl	80036dc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f7ff fde9 	bl	80028ca <HAL_I2C_SlaveRxCpltCallback>
}
 8002cf8:	bf00      	nop
 8002cfa:	3710      	adds	r7, #16
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b086      	sub	sp, #24
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d1c:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2220      	movs	r2, #32
 8002d24:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002d26:	7bfb      	ldrb	r3, [r7, #15]
 8002d28:	2b21      	cmp	r3, #33	; 0x21
 8002d2a:	d002      	beq.n	8002d32 <I2C_ITSlaveCplt+0x32>
 8002d2c:	7bfb      	ldrb	r3, [r7, #15]
 8002d2e:	2b29      	cmp	r3, #41	; 0x29
 8002d30:	d108      	bne.n	8002d44 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002d32:	f248 0101 	movw	r1, #32769	; 0x8001
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f000 fcd0 	bl	80036dc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2221      	movs	r2, #33	; 0x21
 8002d40:	631a      	str	r2, [r3, #48]	; 0x30
 8002d42:	e00d      	b.n	8002d60 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002d44:	7bfb      	ldrb	r3, [r7, #15]
 8002d46:	2b22      	cmp	r3, #34	; 0x22
 8002d48:	d002      	beq.n	8002d50 <I2C_ITSlaveCplt+0x50>
 8002d4a:	7bfb      	ldrb	r3, [r7, #15]
 8002d4c:	2b2a      	cmp	r3, #42	; 0x2a
 8002d4e:	d107      	bne.n	8002d60 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002d50:	f248 0102 	movw	r1, #32770	; 0x8002
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f000 fcc1 	bl	80036dc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2222      	movs	r2, #34	; 0x22
 8002d5e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	685a      	ldr	r2, [r3, #4]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d6e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	6859      	ldr	r1, [r3, #4]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	4b64      	ldr	r3, [pc, #400]	; (8002f0c <I2C_ITSlaveCplt+0x20c>)
 8002d7c:	400b      	ands	r3, r1
 8002d7e:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f000 fa14 	bl	80031ae <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	0b9b      	lsrs	r3, r3, #14
 8002d8a:	f003 0301 	and.w	r3, r3, #1
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d013      	beq.n	8002dba <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002da0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d020      	beq.n	8002dec <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	b29a      	uxth	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002db8:	e018      	b.n	8002dec <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	0bdb      	lsrs	r3, r3, #15
 8002dbe:	f003 0301 	and.w	r3, r3, #1
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d012      	beq.n	8002dec <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002dd4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d006      	beq.n	8002dec <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	b29a      	uxth	r2, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	089b      	lsrs	r3, r3, #2
 8002df0:	f003 0301 	and.w	r3, r3, #1
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d020      	beq.n	8002e3a <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	f023 0304 	bic.w	r3, r3, #4
 8002dfe:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0a:	b2d2      	uxtb	r2, r2
 8002e0c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e12:	1c5a      	adds	r2, r3, #1
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d00c      	beq.n	8002e3a <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e24:	3b01      	subs	r3, #1
 8002e26:	b29a      	uxth	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	3b01      	subs	r3, #1
 8002e34:	b29a      	uxth	r2, r3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d005      	beq.n	8002e50 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e48:	f043 0204 	orr.w	r2, r3, #4
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d010      	beq.n	8002e88 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f000 f8a7 	bl	8002fc0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	2b28      	cmp	r3, #40	; 0x28
 8002e7c:	d141      	bne.n	8002f02 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002e7e:	6979      	ldr	r1, [r7, #20]
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f000 f847 	bl	8002f14 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002e86:	e03c      	b.n	8002f02 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e8c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e90:	d014      	beq.n	8002ebc <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f7ff fed6 	bl	8002c44 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	4a1d      	ldr	r2, [pc, #116]	; (8002f10 <I2C_ITSlaveCplt+0x210>)
 8002e9c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2220      	movs	r2, #32
 8002ea2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f7ff fd20 	bl	80028fa <HAL_I2C_ListenCpltCallback>
}
 8002eba:	e022      	b.n	8002f02 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	2b22      	cmp	r3, #34	; 0x22
 8002ec6:	d10e      	bne.n	8002ee6 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2220      	movs	r2, #32
 8002ecc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f7ff fcf3 	bl	80028ca <HAL_I2C_SlaveRxCpltCallback>
}
 8002ee4:	e00d      	b.n	8002f02 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2220      	movs	r2, #32
 8002eea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f7ff fcda 	bl	80028b6 <HAL_I2C_SlaveTxCpltCallback>
}
 8002f02:	bf00      	nop
 8002f04:	3718      	adds	r7, #24
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	fe00e800 	.word	0xfe00e800
 8002f10:	ffff0000 	.word	0xffff0000

08002f14 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a26      	ldr	r2, [pc, #152]	; (8002fbc <I2C_ITListenCplt+0xa8>)
 8002f22:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2220      	movs	r2, #32
 8002f2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	089b      	lsrs	r3, r3, #2
 8002f44:	f003 0301 	and.w	r3, r3, #1
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d022      	beq.n	8002f92 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f56:	b2d2      	uxtb	r2, r2
 8002f58:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5e:	1c5a      	adds	r2, r3, #1
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d012      	beq.n	8002f92 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f70:	3b01      	subs	r3, #1
 8002f72:	b29a      	uxth	r2, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	b29a      	uxth	r2, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f8a:	f043 0204 	orr.w	r2, r3, #4
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002f92:	f248 0103 	movw	r1, #32771	; 0x8003
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f000 fba0 	bl	80036dc <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2210      	movs	r2, #16
 8002fa2:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f7ff fca4 	bl	80028fa <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002fb2:	bf00      	nop
 8002fb4:	3708      	adds	r7, #8
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	ffff0000 	.word	0xffff0000

08002fc0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fd0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a5d      	ldr	r2, [pc, #372]	; (8003154 <I2C_ITError+0x194>)
 8002fde:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	431a      	orrs	r2, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002ff2:	7bfb      	ldrb	r3, [r7, #15]
 8002ff4:	2b28      	cmp	r3, #40	; 0x28
 8002ff6:	d005      	beq.n	8003004 <I2C_ITError+0x44>
 8002ff8:	7bfb      	ldrb	r3, [r7, #15]
 8002ffa:	2b29      	cmp	r3, #41	; 0x29
 8002ffc:	d002      	beq.n	8003004 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002ffe:	7bfb      	ldrb	r3, [r7, #15]
 8003000:	2b2a      	cmp	r3, #42	; 0x2a
 8003002:	d10b      	bne.n	800301c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003004:	2103      	movs	r1, #3
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 fb68 	bl	80036dc <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2228      	movs	r2, #40	; 0x28
 8003010:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	4a50      	ldr	r2, [pc, #320]	; (8003158 <I2C_ITError+0x198>)
 8003018:	635a      	str	r2, [r3, #52]	; 0x34
 800301a:	e011      	b.n	8003040 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800301c:	f248 0103 	movw	r1, #32771	; 0x8003
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f000 fb5b 	bl	80036dc <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800302c:	b2db      	uxtb	r3, r3
 800302e:	2b60      	cmp	r3, #96	; 0x60
 8003030:	d003      	beq.n	800303a <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2220      	movs	r2, #32
 8003036:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003044:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800304a:	2b00      	cmp	r3, #0
 800304c:	d039      	beq.n	80030c2 <I2C_ITError+0x102>
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	2b11      	cmp	r3, #17
 8003052:	d002      	beq.n	800305a <I2C_ITError+0x9a>
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	2b21      	cmp	r3, #33	; 0x21
 8003058:	d133      	bne.n	80030c2 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003064:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003068:	d107      	bne.n	800307a <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003078:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800307e:	4618      	mov	r0, r3
 8003080:	f7fe ff94 	bl	8001fac <HAL_DMA_GetState>
 8003084:	4603      	mov	r3, r0
 8003086:	2b01      	cmp	r3, #1
 8003088:	d017      	beq.n	80030ba <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800308e:	4a33      	ldr	r2, [pc, #204]	; (800315c <I2C_ITError+0x19c>)
 8003090:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800309e:	4618      	mov	r0, r3
 80030a0:	f7fe ff43 	bl	8001f2a <HAL_DMA_Abort_IT>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d04d      	beq.n	8003146 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80030b4:	4610      	mov	r0, r2
 80030b6:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80030b8:	e045      	b.n	8003146 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f000 f850 	bl	8003160 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80030c0:	e041      	b.n	8003146 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d039      	beq.n	800313e <I2C_ITError+0x17e>
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	2b12      	cmp	r3, #18
 80030ce:	d002      	beq.n	80030d6 <I2C_ITError+0x116>
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	2b22      	cmp	r3, #34	; 0x22
 80030d4:	d133      	bne.n	800313e <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030e4:	d107      	bne.n	80030f6 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030f4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030fa:	4618      	mov	r0, r3
 80030fc:	f7fe ff56 	bl	8001fac <HAL_DMA_GetState>
 8003100:	4603      	mov	r3, r0
 8003102:	2b01      	cmp	r3, #1
 8003104:	d017      	beq.n	8003136 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800310a:	4a14      	ldr	r2, [pc, #80]	; (800315c <I2C_ITError+0x19c>)
 800310c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800311a:	4618      	mov	r0, r3
 800311c:	f7fe ff05 	bl	8001f2a <HAL_DMA_Abort_IT>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d011      	beq.n	800314a <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800312a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003130:	4610      	mov	r0, r2
 8003132:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003134:	e009      	b.n	800314a <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f000 f812 	bl	8003160 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800313c:	e005      	b.n	800314a <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f000 f80e 	bl	8003160 <I2C_TreatErrorCallback>
  }
}
 8003144:	e002      	b.n	800314c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003146:	bf00      	nop
 8003148:	e000      	b.n	800314c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800314a:	bf00      	nop
}
 800314c:	bf00      	nop
 800314e:	3710      	adds	r7, #16
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	ffff0000 	.word	0xffff0000
 8003158:	08002937 	.word	0x08002937
 800315c:	080031f7 	.word	0x080031f7

08003160 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800316e:	b2db      	uxtb	r3, r3
 8003170:	2b60      	cmp	r3, #96	; 0x60
 8003172:	d10e      	bne.n	8003192 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2220      	movs	r2, #32
 8003178:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f7ff fbc9 	bl	8002922 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003190:	e009      	b.n	80031a6 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f7ff fbb4 	bl	800290e <HAL_I2C_ErrorCallback>
}
 80031a6:	bf00      	nop
 80031a8:	3708      	adds	r7, #8
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}

080031ae <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80031ae:	b480      	push	{r7}
 80031b0:	b083      	sub	sp, #12
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	699b      	ldr	r3, [r3, #24]
 80031bc:	f003 0302 	and.w	r3, r3, #2
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d103      	bne.n	80031cc <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2200      	movs	r2, #0
 80031ca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	699b      	ldr	r3, [r3, #24]
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d007      	beq.n	80031ea <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	699a      	ldr	r2, [r3, #24]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f042 0201 	orr.w	r2, r2, #1
 80031e8:	619a      	str	r2, [r3, #24]
  }
}
 80031ea:	bf00      	nop
 80031ec:	370c      	adds	r7, #12
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr

080031f6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80031f6:	b580      	push	{r7, lr}
 80031f8:	b084      	sub	sp, #16
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003202:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003208:	2b00      	cmp	r3, #0
 800320a:	d003      	beq.n	8003214 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003210:	2200      	movs	r2, #0
 8003212:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003218:	2b00      	cmp	r3, #0
 800321a:	d003      	beq.n	8003224 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003220:	2200      	movs	r2, #0
 8003222:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8003224:	68f8      	ldr	r0, [r7, #12]
 8003226:	f7ff ff9b 	bl	8003160 <I2C_TreatErrorCallback>
}
 800322a:	bf00      	nop
 800322c:	3710      	adds	r7, #16
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}

08003232 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003232:	b580      	push	{r7, lr}
 8003234:	b084      	sub	sp, #16
 8003236:	af00      	add	r7, sp, #0
 8003238:	60f8      	str	r0, [r7, #12]
 800323a:	60b9      	str	r1, [r7, #8]
 800323c:	603b      	str	r3, [r7, #0]
 800323e:	4613      	mov	r3, r2
 8003240:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003242:	e022      	b.n	800328a <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800324a:	d01e      	beq.n	800328a <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800324c:	f7fe fcee 	bl	8001c2c <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	683a      	ldr	r2, [r7, #0]
 8003258:	429a      	cmp	r2, r3
 800325a:	d302      	bcc.n	8003262 <I2C_WaitOnFlagUntilTimeout+0x30>
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d113      	bne.n	800328a <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003266:	f043 0220 	orr.w	r2, r3, #32
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2220      	movs	r2, #32
 8003272:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2200      	movs	r2, #0
 800327a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2200      	movs	r2, #0
 8003282:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e00f      	b.n	80032aa <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	699a      	ldr	r2, [r3, #24]
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	4013      	ands	r3, r2
 8003294:	68ba      	ldr	r2, [r7, #8]
 8003296:	429a      	cmp	r2, r3
 8003298:	bf0c      	ite	eq
 800329a:	2301      	moveq	r3, #1
 800329c:	2300      	movne	r3, #0
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	461a      	mov	r2, r3
 80032a2:	79fb      	ldrb	r3, [r7, #7]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d0cd      	beq.n	8003244 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3710      	adds	r7, #16
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}

080032b2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b084      	sub	sp, #16
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	60f8      	str	r0, [r7, #12]
 80032ba:	60b9      	str	r1, [r7, #8]
 80032bc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80032be:	e02c      	b.n	800331a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	68b9      	ldr	r1, [r7, #8]
 80032c4:	68f8      	ldr	r0, [r7, #12]
 80032c6:	f000 f8eb 	bl	80034a0 <I2C_IsErrorOccurred>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d001      	beq.n	80032d4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e02a      	b.n	800332a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032da:	d01e      	beq.n	800331a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032dc:	f7fe fca6 	bl	8001c2c <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	68ba      	ldr	r2, [r7, #8]
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d302      	bcc.n	80032f2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d113      	bne.n	800331a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f6:	f043 0220 	orr.w	r2, r3, #32
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2220      	movs	r2, #32
 8003302:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2200      	movs	r2, #0
 800330a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e007      	b.n	800332a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	699b      	ldr	r3, [r3, #24]
 8003320:	f003 0302 	and.w	r3, r3, #2
 8003324:	2b02      	cmp	r3, #2
 8003326:	d1cb      	bne.n	80032c0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3710      	adds	r7, #16
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}

08003332 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003332:	b580      	push	{r7, lr}
 8003334:	b084      	sub	sp, #16
 8003336:	af00      	add	r7, sp, #0
 8003338:	60f8      	str	r0, [r7, #12]
 800333a:	60b9      	str	r1, [r7, #8]
 800333c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800333e:	e028      	b.n	8003392 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	68b9      	ldr	r1, [r7, #8]
 8003344:	68f8      	ldr	r0, [r7, #12]
 8003346:	f000 f8ab 	bl	80034a0 <I2C_IsErrorOccurred>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d001      	beq.n	8003354 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e026      	b.n	80033a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003354:	f7fe fc6a 	bl	8001c2c <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	68ba      	ldr	r2, [r7, #8]
 8003360:	429a      	cmp	r2, r3
 8003362:	d302      	bcc.n	800336a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d113      	bne.n	8003392 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800336e:	f043 0220 	orr.w	r2, r3, #32
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2220      	movs	r2, #32
 800337a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e007      	b.n	80033a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	699b      	ldr	r3, [r3, #24]
 8003398:	f003 0320 	and.w	r3, r3, #32
 800339c:	2b20      	cmp	r3, #32
 800339e:	d1cf      	bne.n	8003340 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3710      	adds	r7, #16
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
	...

080033ac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	60b9      	str	r1, [r7, #8]
 80033b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80033b8:	e064      	b.n	8003484 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	68b9      	ldr	r1, [r7, #8]
 80033be:	68f8      	ldr	r0, [r7, #12]
 80033c0:	f000 f86e 	bl	80034a0 <I2C_IsErrorOccurred>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d001      	beq.n	80033ce <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e062      	b.n	8003494 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	699b      	ldr	r3, [r3, #24]
 80033d4:	f003 0320 	and.w	r3, r3, #32
 80033d8:	2b20      	cmp	r3, #32
 80033da:	d138      	bne.n	800344e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	699b      	ldr	r3, [r3, #24]
 80033e2:	f003 0304 	and.w	r3, r3, #4
 80033e6:	2b04      	cmp	r3, #4
 80033e8:	d105      	bne.n	80033f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d001      	beq.n	80033f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80033f2:	2300      	movs	r3, #0
 80033f4:	e04e      	b.n	8003494 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	699b      	ldr	r3, [r3, #24]
 80033fc:	f003 0310 	and.w	r3, r3, #16
 8003400:	2b10      	cmp	r3, #16
 8003402:	d107      	bne.n	8003414 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2210      	movs	r2, #16
 800340a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2204      	movs	r2, #4
 8003410:	645a      	str	r2, [r3, #68]	; 0x44
 8003412:	e002      	b.n	800341a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2200      	movs	r2, #0
 8003418:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2220      	movs	r2, #32
 8003420:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	6859      	ldr	r1, [r3, #4]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	4b1b      	ldr	r3, [pc, #108]	; (800349c <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800342e:	400b      	ands	r3, r1
 8003430:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2220      	movs	r2, #32
 8003436:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e022      	b.n	8003494 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800344e:	f7fe fbed 	bl	8001c2c <HAL_GetTick>
 8003452:	4602      	mov	r2, r0
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	68ba      	ldr	r2, [r7, #8]
 800345a:	429a      	cmp	r2, r3
 800345c:	d302      	bcc.n	8003464 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d10f      	bne.n	8003484 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003468:	f043 0220 	orr.w	r2, r3, #32
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2220      	movs	r2, #32
 8003474:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e007      	b.n	8003494 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	699b      	ldr	r3, [r3, #24]
 800348a:	f003 0304 	and.w	r3, r3, #4
 800348e:	2b04      	cmp	r3, #4
 8003490:	d193      	bne.n	80033ba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003492:	2300      	movs	r3, #0
}
 8003494:	4618      	mov	r0, r3
 8003496:	3710      	adds	r7, #16
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	fe00e800 	.word	0xfe00e800

080034a0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b08a      	sub	sp, #40	; 0x28
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	60b9      	str	r1, [r7, #8]
 80034aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034ac:	2300      	movs	r3, #0
 80034ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	699b      	ldr	r3, [r3, #24]
 80034b8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80034ba:	2300      	movs	r3, #0
 80034bc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80034c2:	69bb      	ldr	r3, [r7, #24]
 80034c4:	f003 0310 	and.w	r3, r3, #16
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d075      	beq.n	80035b8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2210      	movs	r2, #16
 80034d2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80034d4:	e056      	b.n	8003584 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034dc:	d052      	beq.n	8003584 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80034de:	f7fe fba5 	bl	8001c2c <HAL_GetTick>
 80034e2:	4602      	mov	r2, r0
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	68ba      	ldr	r2, [r7, #8]
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d302      	bcc.n	80034f4 <I2C_IsErrorOccurred+0x54>
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d147      	bne.n	8003584 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034fe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003506:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	699b      	ldr	r3, [r3, #24]
 800350e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003512:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003516:	d12e      	bne.n	8003576 <I2C_IsErrorOccurred+0xd6>
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800351e:	d02a      	beq.n	8003576 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003520:	7cfb      	ldrb	r3, [r7, #19]
 8003522:	2b20      	cmp	r3, #32
 8003524:	d027      	beq.n	8003576 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	685a      	ldr	r2, [r3, #4]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003534:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003536:	f7fe fb79 	bl	8001c2c <HAL_GetTick>
 800353a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800353c:	e01b      	b.n	8003576 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800353e:	f7fe fb75 	bl	8001c2c <HAL_GetTick>
 8003542:	4602      	mov	r2, r0
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	2b19      	cmp	r3, #25
 800354a:	d914      	bls.n	8003576 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003550:	f043 0220 	orr.w	r2, r3, #32
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2220      	movs	r2, #32
 800355c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2200      	movs	r2, #0
 8003564:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	699b      	ldr	r3, [r3, #24]
 800357c:	f003 0320 	and.w	r3, r3, #32
 8003580:	2b20      	cmp	r3, #32
 8003582:	d1dc      	bne.n	800353e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	699b      	ldr	r3, [r3, #24]
 800358a:	f003 0320 	and.w	r3, r3, #32
 800358e:	2b20      	cmp	r3, #32
 8003590:	d003      	beq.n	800359a <I2C_IsErrorOccurred+0xfa>
 8003592:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003596:	2b00      	cmp	r3, #0
 8003598:	d09d      	beq.n	80034d6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800359a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d103      	bne.n	80035aa <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	2220      	movs	r2, #32
 80035a8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80035aa:	6a3b      	ldr	r3, [r7, #32]
 80035ac:	f043 0304 	orr.w	r3, r3, #4
 80035b0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	699b      	ldr	r3, [r3, #24]
 80035be:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80035c0:	69bb      	ldr	r3, [r7, #24]
 80035c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d00b      	beq.n	80035e2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80035ca:	6a3b      	ldr	r3, [r7, #32]
 80035cc:	f043 0301 	orr.w	r3, r3, #1
 80035d0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80035da:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80035e2:	69bb      	ldr	r3, [r7, #24]
 80035e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d00b      	beq.n	8003604 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80035ec:	6a3b      	ldr	r3, [r7, #32]
 80035ee:	f043 0308 	orr.w	r3, r3, #8
 80035f2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80035fc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800360a:	2b00      	cmp	r3, #0
 800360c:	d00b      	beq.n	8003626 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800360e:	6a3b      	ldr	r3, [r7, #32]
 8003610:	f043 0302 	orr.w	r3, r3, #2
 8003614:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800361e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003626:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800362a:	2b00      	cmp	r3, #0
 800362c:	d01c      	beq.n	8003668 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800362e:	68f8      	ldr	r0, [r7, #12]
 8003630:	f7ff fdbd 	bl	80031ae <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	6859      	ldr	r1, [r3, #4]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	4b0d      	ldr	r3, [pc, #52]	; (8003674 <I2C_IsErrorOccurred+0x1d4>)
 8003640:	400b      	ands	r3, r1
 8003642:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003648:	6a3b      	ldr	r3, [r7, #32]
 800364a:	431a      	orrs	r2, r3
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2220      	movs	r2, #32
 8003654:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2200      	movs	r2, #0
 800365c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003668:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800366c:	4618      	mov	r0, r3
 800366e:	3728      	adds	r7, #40	; 0x28
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}
 8003674:	fe00e800 	.word	0xfe00e800

08003678 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003678:	b480      	push	{r7}
 800367a:	b087      	sub	sp, #28
 800367c:	af00      	add	r7, sp, #0
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	607b      	str	r3, [r7, #4]
 8003682:	460b      	mov	r3, r1
 8003684:	817b      	strh	r3, [r7, #10]
 8003686:	4613      	mov	r3, r2
 8003688:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800368a:	897b      	ldrh	r3, [r7, #10]
 800368c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003690:	7a7b      	ldrb	r3, [r7, #9]
 8003692:	041b      	lsls	r3, r3, #16
 8003694:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003698:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800369e:	6a3b      	ldr	r3, [r7, #32]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80036a6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	685a      	ldr	r2, [r3, #4]
 80036ae:	6a3b      	ldr	r3, [r7, #32]
 80036b0:	0d5b      	lsrs	r3, r3, #21
 80036b2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80036b6:	4b08      	ldr	r3, [pc, #32]	; (80036d8 <I2C_TransferConfig+0x60>)
 80036b8:	430b      	orrs	r3, r1
 80036ba:	43db      	mvns	r3, r3
 80036bc:	ea02 0103 	and.w	r1, r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	697a      	ldr	r2, [r7, #20]
 80036c6:	430a      	orrs	r2, r1
 80036c8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80036ca:	bf00      	nop
 80036cc:	371c      	adds	r7, #28
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop
 80036d8:	03ff63ff 	.word	0x03ff63ff

080036dc <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80036dc:	b480      	push	{r7}
 80036de:	b085      	sub	sp, #20
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	460b      	mov	r3, r1
 80036e6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80036e8:	2300      	movs	r3, #0
 80036ea:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80036ec:	887b      	ldrh	r3, [r7, #2]
 80036ee:	f003 0301 	and.w	r3, r3, #1
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d00f      	beq.n	8003716 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80036fc:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003704:	b2db      	uxtb	r3, r3
 8003706:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800370a:	2b28      	cmp	r3, #40	; 0x28
 800370c:	d003      	beq.n	8003716 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003714:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003716:	887b      	ldrh	r3, [r7, #2]
 8003718:	f003 0302 	and.w	r3, r3, #2
 800371c:	2b00      	cmp	r3, #0
 800371e:	d00f      	beq.n	8003740 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8003726:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800372e:	b2db      	uxtb	r3, r3
 8003730:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003734:	2b28      	cmp	r3, #40	; 0x28
 8003736:	d003      	beq.n	8003740 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800373e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003740:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003744:	2b00      	cmp	r3, #0
 8003746:	da03      	bge.n	8003750 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800374e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003750:	887b      	ldrh	r3, [r7, #2]
 8003752:	2b10      	cmp	r3, #16
 8003754:	d103      	bne.n	800375e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800375c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800375e:	887b      	ldrh	r3, [r7, #2]
 8003760:	2b20      	cmp	r3, #32
 8003762:	d103      	bne.n	800376c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f043 0320 	orr.w	r3, r3, #32
 800376a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800376c:	887b      	ldrh	r3, [r7, #2]
 800376e:	2b40      	cmp	r3, #64	; 0x40
 8003770:	d103      	bne.n	800377a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003778:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	6819      	ldr	r1, [r3, #0]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	43da      	mvns	r2, r3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	400a      	ands	r2, r1
 800378a:	601a      	str	r2, [r3, #0]
}
 800378c:	bf00      	nop
 800378e:	3714      	adds	r7, #20
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2b20      	cmp	r3, #32
 80037ac:	d138      	bne.n	8003820 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d101      	bne.n	80037bc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80037b8:	2302      	movs	r3, #2
 80037ba:	e032      	b.n	8003822 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2224      	movs	r2, #36	; 0x24
 80037c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f022 0201 	bic.w	r2, r2, #1
 80037da:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80037ea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	6819      	ldr	r1, [r3, #0]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	683a      	ldr	r2, [r7, #0]
 80037f8:	430a      	orrs	r2, r1
 80037fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f042 0201 	orr.w	r2, r2, #1
 800380a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2220      	movs	r2, #32
 8003810:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800381c:	2300      	movs	r3, #0
 800381e:	e000      	b.n	8003822 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003820:	2302      	movs	r3, #2
  }
}
 8003822:	4618      	mov	r0, r3
 8003824:	370c      	adds	r7, #12
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr

0800382e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800382e:	b480      	push	{r7}
 8003830:	b085      	sub	sp, #20
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
 8003836:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800383e:	b2db      	uxtb	r3, r3
 8003840:	2b20      	cmp	r3, #32
 8003842:	d139      	bne.n	80038b8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800384a:	2b01      	cmp	r3, #1
 800384c:	d101      	bne.n	8003852 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800384e:	2302      	movs	r3, #2
 8003850:	e033      	b.n	80038ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2201      	movs	r2, #1
 8003856:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2224      	movs	r2, #36	; 0x24
 800385e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f022 0201 	bic.w	r2, r2, #1
 8003870:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003880:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	021b      	lsls	r3, r3, #8
 8003886:	68fa      	ldr	r2, [r7, #12]
 8003888:	4313      	orrs	r3, r2
 800388a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	68fa      	ldr	r2, [r7, #12]
 8003892:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f042 0201 	orr.w	r2, r2, #1
 80038a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2220      	movs	r2, #32
 80038a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80038b4:	2300      	movs	r3, #0
 80038b6:	e000      	b.n	80038ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80038b8:	2302      	movs	r3, #2
  }
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3714      	adds	r7, #20
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
	...

080038c8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80038c8:	b480      	push	{r7}
 80038ca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038cc:	4b05      	ldr	r3, [pc, #20]	; (80038e4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a04      	ldr	r2, [pc, #16]	; (80038e4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80038d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038d6:	6013      	str	r3, [r2, #0]
}
 80038d8:	bf00      	nop
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr
 80038e2:	bf00      	nop
 80038e4:	40007000 	.word	0x40007000

080038e8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80038e8:	b480      	push	{r7}
 80038ea:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80038ec:	4b04      	ldr	r3, [pc, #16]	; (8003900 <HAL_PWREx_GetVoltageRange+0x18>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	40007000 	.word	0x40007000

08003904 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003904:	b480      	push	{r7}
 8003906:	b085      	sub	sp, #20
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003912:	d130      	bne.n	8003976 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003914:	4b23      	ldr	r3, [pc, #140]	; (80039a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800391c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003920:	d038      	beq.n	8003994 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003922:	4b20      	ldr	r3, [pc, #128]	; (80039a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800392a:	4a1e      	ldr	r2, [pc, #120]	; (80039a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800392c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003930:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003932:	4b1d      	ldr	r3, [pc, #116]	; (80039a8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	2232      	movs	r2, #50	; 0x32
 8003938:	fb02 f303 	mul.w	r3, r2, r3
 800393c:	4a1b      	ldr	r2, [pc, #108]	; (80039ac <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800393e:	fba2 2303 	umull	r2, r3, r2, r3
 8003942:	0c9b      	lsrs	r3, r3, #18
 8003944:	3301      	adds	r3, #1
 8003946:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003948:	e002      	b.n	8003950 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	3b01      	subs	r3, #1
 800394e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003950:	4b14      	ldr	r3, [pc, #80]	; (80039a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003952:	695b      	ldr	r3, [r3, #20]
 8003954:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003958:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800395c:	d102      	bne.n	8003964 <HAL_PWREx_ControlVoltageScaling+0x60>
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d1f2      	bne.n	800394a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003964:	4b0f      	ldr	r3, [pc, #60]	; (80039a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003966:	695b      	ldr	r3, [r3, #20]
 8003968:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800396c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003970:	d110      	bne.n	8003994 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e00f      	b.n	8003996 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003976:	4b0b      	ldr	r3, [pc, #44]	; (80039a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800397e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003982:	d007      	beq.n	8003994 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003984:	4b07      	ldr	r3, [pc, #28]	; (80039a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800398c:	4a05      	ldr	r2, [pc, #20]	; (80039a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800398e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003992:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3714      	adds	r7, #20
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	40007000 	.word	0x40007000
 80039a8:	20000000 	.word	0x20000000
 80039ac:	431bde83 	.word	0x431bde83

080039b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b088      	sub	sp, #32
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d102      	bne.n	80039c4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	f000 bc02 	b.w	80041c8 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039c4:	4b96      	ldr	r3, [pc, #600]	; (8003c20 <HAL_RCC_OscConfig+0x270>)
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	f003 030c 	and.w	r3, r3, #12
 80039cc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039ce:	4b94      	ldr	r3, [pc, #592]	; (8003c20 <HAL_RCC_OscConfig+0x270>)
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	f003 0303 	and.w	r3, r3, #3
 80039d6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0310 	and.w	r3, r3, #16
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	f000 80e4 	beq.w	8003bae <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80039e6:	69bb      	ldr	r3, [r7, #24]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d007      	beq.n	80039fc <HAL_RCC_OscConfig+0x4c>
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	2b0c      	cmp	r3, #12
 80039f0:	f040 808b 	bne.w	8003b0a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	f040 8087 	bne.w	8003b0a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80039fc:	4b88      	ldr	r3, [pc, #544]	; (8003c20 <HAL_RCC_OscConfig+0x270>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0302 	and.w	r3, r3, #2
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d005      	beq.n	8003a14 <HAL_RCC_OscConfig+0x64>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	699b      	ldr	r3, [r3, #24]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d101      	bne.n	8003a14 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e3d9      	b.n	80041c8 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a1a      	ldr	r2, [r3, #32]
 8003a18:	4b81      	ldr	r3, [pc, #516]	; (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0308 	and.w	r3, r3, #8
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d004      	beq.n	8003a2e <HAL_RCC_OscConfig+0x7e>
 8003a24:	4b7e      	ldr	r3, [pc, #504]	; (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a2c:	e005      	b.n	8003a3a <HAL_RCC_OscConfig+0x8a>
 8003a2e:	4b7c      	ldr	r3, [pc, #496]	; (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003a30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a34:	091b      	lsrs	r3, r3, #4
 8003a36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d223      	bcs.n	8003a86 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a1b      	ldr	r3, [r3, #32]
 8003a42:	4618      	mov	r0, r3
 8003a44:	f000 fd8c 	bl	8004560 <RCC_SetFlashLatencyFromMSIRange>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d001      	beq.n	8003a52 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e3ba      	b.n	80041c8 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a52:	4b73      	ldr	r3, [pc, #460]	; (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a72      	ldr	r2, [pc, #456]	; (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003a58:	f043 0308 	orr.w	r3, r3, #8
 8003a5c:	6013      	str	r3, [r2, #0]
 8003a5e:	4b70      	ldr	r3, [pc, #448]	; (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6a1b      	ldr	r3, [r3, #32]
 8003a6a:	496d      	ldr	r1, [pc, #436]	; (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a70:	4b6b      	ldr	r3, [pc, #428]	; (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	69db      	ldr	r3, [r3, #28]
 8003a7c:	021b      	lsls	r3, r3, #8
 8003a7e:	4968      	ldr	r1, [pc, #416]	; (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003a80:	4313      	orrs	r3, r2
 8003a82:	604b      	str	r3, [r1, #4]
 8003a84:	e025      	b.n	8003ad2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a86:	4b66      	ldr	r3, [pc, #408]	; (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a65      	ldr	r2, [pc, #404]	; (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003a8c:	f043 0308 	orr.w	r3, r3, #8
 8003a90:	6013      	str	r3, [r2, #0]
 8003a92:	4b63      	ldr	r3, [pc, #396]	; (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a1b      	ldr	r3, [r3, #32]
 8003a9e:	4960      	ldr	r1, [pc, #384]	; (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003aa4:	4b5e      	ldr	r3, [pc, #376]	; (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	69db      	ldr	r3, [r3, #28]
 8003ab0:	021b      	lsls	r3, r3, #8
 8003ab2:	495b      	ldr	r1, [pc, #364]	; (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ab8:	69bb      	ldr	r3, [r7, #24]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d109      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a1b      	ldr	r3, [r3, #32]
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f000 fd4c 	bl	8004560 <RCC_SetFlashLatencyFromMSIRange>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d001      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e37a      	b.n	80041c8 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ad2:	f000 fc81 	bl	80043d8 <HAL_RCC_GetSysClockFreq>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	4b51      	ldr	r3, [pc, #324]	; (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	091b      	lsrs	r3, r3, #4
 8003ade:	f003 030f 	and.w	r3, r3, #15
 8003ae2:	4950      	ldr	r1, [pc, #320]	; (8003c24 <HAL_RCC_OscConfig+0x274>)
 8003ae4:	5ccb      	ldrb	r3, [r1, r3]
 8003ae6:	f003 031f 	and.w	r3, r3, #31
 8003aea:	fa22 f303 	lsr.w	r3, r2, r3
 8003aee:	4a4e      	ldr	r2, [pc, #312]	; (8003c28 <HAL_RCC_OscConfig+0x278>)
 8003af0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003af2:	4b4e      	ldr	r3, [pc, #312]	; (8003c2c <HAL_RCC_OscConfig+0x27c>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4618      	mov	r0, r3
 8003af8:	f7fe f848 	bl	8001b8c <HAL_InitTick>
 8003afc:	4603      	mov	r3, r0
 8003afe:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003b00:	7bfb      	ldrb	r3, [r7, #15]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d052      	beq.n	8003bac <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003b06:	7bfb      	ldrb	r3, [r7, #15]
 8003b08:	e35e      	b.n	80041c8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	699b      	ldr	r3, [r3, #24]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d032      	beq.n	8003b78 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003b12:	4b43      	ldr	r3, [pc, #268]	; (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a42      	ldr	r2, [pc, #264]	; (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003b18:	f043 0301 	orr.w	r3, r3, #1
 8003b1c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b1e:	f7fe f885 	bl	8001c2c <HAL_GetTick>
 8003b22:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b24:	e008      	b.n	8003b38 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b26:	f7fe f881 	bl	8001c2c <HAL_GetTick>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	d901      	bls.n	8003b38 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003b34:	2303      	movs	r3, #3
 8003b36:	e347      	b.n	80041c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b38:	4b39      	ldr	r3, [pc, #228]	; (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0302 	and.w	r3, r3, #2
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d0f0      	beq.n	8003b26 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b44:	4b36      	ldr	r3, [pc, #216]	; (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a35      	ldr	r2, [pc, #212]	; (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003b4a:	f043 0308 	orr.w	r3, r3, #8
 8003b4e:	6013      	str	r3, [r2, #0]
 8003b50:	4b33      	ldr	r3, [pc, #204]	; (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a1b      	ldr	r3, [r3, #32]
 8003b5c:	4930      	ldr	r1, [pc, #192]	; (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b62:	4b2f      	ldr	r3, [pc, #188]	; (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	69db      	ldr	r3, [r3, #28]
 8003b6e:	021b      	lsls	r3, r3, #8
 8003b70:	492b      	ldr	r1, [pc, #172]	; (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003b72:	4313      	orrs	r3, r2
 8003b74:	604b      	str	r3, [r1, #4]
 8003b76:	e01a      	b.n	8003bae <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003b78:	4b29      	ldr	r3, [pc, #164]	; (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a28      	ldr	r2, [pc, #160]	; (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003b7e:	f023 0301 	bic.w	r3, r3, #1
 8003b82:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b84:	f7fe f852 	bl	8001c2c <HAL_GetTick>
 8003b88:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b8a:	e008      	b.n	8003b9e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b8c:	f7fe f84e 	bl	8001c2c <HAL_GetTick>
 8003b90:	4602      	mov	r2, r0
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d901      	bls.n	8003b9e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e314      	b.n	80041c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b9e:	4b20      	ldr	r3, [pc, #128]	; (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0302 	and.w	r3, r3, #2
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d1f0      	bne.n	8003b8c <HAL_RCC_OscConfig+0x1dc>
 8003baa:	e000      	b.n	8003bae <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003bac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0301 	and.w	r3, r3, #1
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d073      	beq.n	8003ca2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003bba:	69bb      	ldr	r3, [r7, #24]
 8003bbc:	2b08      	cmp	r3, #8
 8003bbe:	d005      	beq.n	8003bcc <HAL_RCC_OscConfig+0x21c>
 8003bc0:	69bb      	ldr	r3, [r7, #24]
 8003bc2:	2b0c      	cmp	r3, #12
 8003bc4:	d10e      	bne.n	8003be4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	2b03      	cmp	r3, #3
 8003bca:	d10b      	bne.n	8003be4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bcc:	4b14      	ldr	r3, [pc, #80]	; (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d063      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x2f0>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d15f      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e2f1      	b.n	80041c8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bec:	d106      	bne.n	8003bfc <HAL_RCC_OscConfig+0x24c>
 8003bee:	4b0c      	ldr	r3, [pc, #48]	; (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a0b      	ldr	r2, [pc, #44]	; (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003bf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bf8:	6013      	str	r3, [r2, #0]
 8003bfa:	e025      	b.n	8003c48 <HAL_RCC_OscConfig+0x298>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c04:	d114      	bne.n	8003c30 <HAL_RCC_OscConfig+0x280>
 8003c06:	4b06      	ldr	r3, [pc, #24]	; (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a05      	ldr	r2, [pc, #20]	; (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003c0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c10:	6013      	str	r3, [r2, #0]
 8003c12:	4b03      	ldr	r3, [pc, #12]	; (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a02      	ldr	r2, [pc, #8]	; (8003c20 <HAL_RCC_OscConfig+0x270>)
 8003c18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c1c:	6013      	str	r3, [r2, #0]
 8003c1e:	e013      	b.n	8003c48 <HAL_RCC_OscConfig+0x298>
 8003c20:	40021000 	.word	0x40021000
 8003c24:	08009840 	.word	0x08009840
 8003c28:	20000000 	.word	0x20000000
 8003c2c:	20000004 	.word	0x20000004
 8003c30:	4ba0      	ldr	r3, [pc, #640]	; (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a9f      	ldr	r2, [pc, #636]	; (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003c36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c3a:	6013      	str	r3, [r2, #0]
 8003c3c:	4b9d      	ldr	r3, [pc, #628]	; (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a9c      	ldr	r2, [pc, #624]	; (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003c42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d013      	beq.n	8003c78 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c50:	f7fd ffec 	bl	8001c2c <HAL_GetTick>
 8003c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c56:	e008      	b.n	8003c6a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c58:	f7fd ffe8 	bl	8001c2c <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	2b64      	cmp	r3, #100	; 0x64
 8003c64:	d901      	bls.n	8003c6a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e2ae      	b.n	80041c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c6a:	4b92      	ldr	r3, [pc, #584]	; (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d0f0      	beq.n	8003c58 <HAL_RCC_OscConfig+0x2a8>
 8003c76:	e014      	b.n	8003ca2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c78:	f7fd ffd8 	bl	8001c2c <HAL_GetTick>
 8003c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c7e:	e008      	b.n	8003c92 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c80:	f7fd ffd4 	bl	8001c2c <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	2b64      	cmp	r3, #100	; 0x64
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e29a      	b.n	80041c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c92:	4b88      	ldr	r3, [pc, #544]	; (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d1f0      	bne.n	8003c80 <HAL_RCC_OscConfig+0x2d0>
 8003c9e:	e000      	b.n	8003ca2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ca0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0302 	and.w	r3, r3, #2
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d060      	beq.n	8003d70 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003cae:	69bb      	ldr	r3, [r7, #24]
 8003cb0:	2b04      	cmp	r3, #4
 8003cb2:	d005      	beq.n	8003cc0 <HAL_RCC_OscConfig+0x310>
 8003cb4:	69bb      	ldr	r3, [r7, #24]
 8003cb6:	2b0c      	cmp	r3, #12
 8003cb8:	d119      	bne.n	8003cee <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	2b02      	cmp	r3, #2
 8003cbe:	d116      	bne.n	8003cee <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cc0:	4b7c      	ldr	r3, [pc, #496]	; (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d005      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x328>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d101      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e277      	b.n	80041c8 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cd8:	4b76      	ldr	r3, [pc, #472]	; (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	691b      	ldr	r3, [r3, #16]
 8003ce4:	061b      	lsls	r3, r3, #24
 8003ce6:	4973      	ldr	r1, [pc, #460]	; (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cec:	e040      	b.n	8003d70 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	68db      	ldr	r3, [r3, #12]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d023      	beq.n	8003d3e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cf6:	4b6f      	ldr	r3, [pc, #444]	; (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a6e      	ldr	r2, [pc, #440]	; (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003cfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d02:	f7fd ff93 	bl	8001c2c <HAL_GetTick>
 8003d06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d08:	e008      	b.n	8003d1c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d0a:	f7fd ff8f 	bl	8001c2c <HAL_GetTick>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d901      	bls.n	8003d1c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	e255      	b.n	80041c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d1c:	4b65      	ldr	r3, [pc, #404]	; (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d0f0      	beq.n	8003d0a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d28:	4b62      	ldr	r3, [pc, #392]	; (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	691b      	ldr	r3, [r3, #16]
 8003d34:	061b      	lsls	r3, r3, #24
 8003d36:	495f      	ldr	r1, [pc, #380]	; (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	604b      	str	r3, [r1, #4]
 8003d3c:	e018      	b.n	8003d70 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d3e:	4b5d      	ldr	r3, [pc, #372]	; (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a5c      	ldr	r2, [pc, #368]	; (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003d44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d4a:	f7fd ff6f 	bl	8001c2c <HAL_GetTick>
 8003d4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d50:	e008      	b.n	8003d64 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d52:	f7fd ff6b 	bl	8001c2c <HAL_GetTick>
 8003d56:	4602      	mov	r2, r0
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d901      	bls.n	8003d64 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003d60:	2303      	movs	r3, #3
 8003d62:	e231      	b.n	80041c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d64:	4b53      	ldr	r3, [pc, #332]	; (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d1f0      	bne.n	8003d52 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0308 	and.w	r3, r3, #8
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d03c      	beq.n	8003df6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	695b      	ldr	r3, [r3, #20]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d01c      	beq.n	8003dbe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d84:	4b4b      	ldr	r3, [pc, #300]	; (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003d86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d8a:	4a4a      	ldr	r2, [pc, #296]	; (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003d8c:	f043 0301 	orr.w	r3, r3, #1
 8003d90:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d94:	f7fd ff4a 	bl	8001c2c <HAL_GetTick>
 8003d98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d9a:	e008      	b.n	8003dae <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d9c:	f7fd ff46 	bl	8001c2c <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d901      	bls.n	8003dae <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e20c      	b.n	80041c8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003dae:	4b41      	ldr	r3, [pc, #260]	; (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003db0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003db4:	f003 0302 	and.w	r3, r3, #2
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d0ef      	beq.n	8003d9c <HAL_RCC_OscConfig+0x3ec>
 8003dbc:	e01b      	b.n	8003df6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dbe:	4b3d      	ldr	r3, [pc, #244]	; (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003dc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dc4:	4a3b      	ldr	r2, [pc, #236]	; (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003dc6:	f023 0301 	bic.w	r3, r3, #1
 8003dca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dce:	f7fd ff2d 	bl	8001c2c <HAL_GetTick>
 8003dd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003dd4:	e008      	b.n	8003de8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dd6:	f7fd ff29 	bl	8001c2c <HAL_GetTick>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	d901      	bls.n	8003de8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	e1ef      	b.n	80041c8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003de8:	4b32      	ldr	r3, [pc, #200]	; (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003dea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dee:	f003 0302 	and.w	r3, r3, #2
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d1ef      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0304 	and.w	r3, r3, #4
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	f000 80a6 	beq.w	8003f50 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e04:	2300      	movs	r3, #0
 8003e06:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003e08:	4b2a      	ldr	r3, [pc, #168]	; (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d10d      	bne.n	8003e30 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e14:	4b27      	ldr	r3, [pc, #156]	; (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e18:	4a26      	ldr	r2, [pc, #152]	; (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003e1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e1e:	6593      	str	r3, [r2, #88]	; 0x58
 8003e20:	4b24      	ldr	r3, [pc, #144]	; (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e28:	60bb      	str	r3, [r7, #8]
 8003e2a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e30:	4b21      	ldr	r3, [pc, #132]	; (8003eb8 <HAL_RCC_OscConfig+0x508>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d118      	bne.n	8003e6e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e3c:	4b1e      	ldr	r3, [pc, #120]	; (8003eb8 <HAL_RCC_OscConfig+0x508>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a1d      	ldr	r2, [pc, #116]	; (8003eb8 <HAL_RCC_OscConfig+0x508>)
 8003e42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e46:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e48:	f7fd fef0 	bl	8001c2c <HAL_GetTick>
 8003e4c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e4e:	e008      	b.n	8003e62 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e50:	f7fd feec 	bl	8001c2c <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d901      	bls.n	8003e62 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e1b2      	b.n	80041c8 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e62:	4b15      	ldr	r3, [pc, #84]	; (8003eb8 <HAL_RCC_OscConfig+0x508>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d0f0      	beq.n	8003e50 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d108      	bne.n	8003e88 <HAL_RCC_OscConfig+0x4d8>
 8003e76:	4b0f      	ldr	r3, [pc, #60]	; (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e7c:	4a0d      	ldr	r2, [pc, #52]	; (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003e7e:	f043 0301 	orr.w	r3, r3, #1
 8003e82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e86:	e029      	b.n	8003edc <HAL_RCC_OscConfig+0x52c>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	2b05      	cmp	r3, #5
 8003e8e:	d115      	bne.n	8003ebc <HAL_RCC_OscConfig+0x50c>
 8003e90:	4b08      	ldr	r3, [pc, #32]	; (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e96:	4a07      	ldr	r2, [pc, #28]	; (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003e98:	f043 0304 	orr.w	r3, r3, #4
 8003e9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ea0:	4b04      	ldr	r3, [pc, #16]	; (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ea6:	4a03      	ldr	r2, [pc, #12]	; (8003eb4 <HAL_RCC_OscConfig+0x504>)
 8003ea8:	f043 0301 	orr.w	r3, r3, #1
 8003eac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003eb0:	e014      	b.n	8003edc <HAL_RCC_OscConfig+0x52c>
 8003eb2:	bf00      	nop
 8003eb4:	40021000 	.word	0x40021000
 8003eb8:	40007000 	.word	0x40007000
 8003ebc:	4b9a      	ldr	r3, [pc, #616]	; (8004128 <HAL_RCC_OscConfig+0x778>)
 8003ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ec2:	4a99      	ldr	r2, [pc, #612]	; (8004128 <HAL_RCC_OscConfig+0x778>)
 8003ec4:	f023 0301 	bic.w	r3, r3, #1
 8003ec8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ecc:	4b96      	ldr	r3, [pc, #600]	; (8004128 <HAL_RCC_OscConfig+0x778>)
 8003ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ed2:	4a95      	ldr	r2, [pc, #596]	; (8004128 <HAL_RCC_OscConfig+0x778>)
 8003ed4:	f023 0304 	bic.w	r3, r3, #4
 8003ed8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d016      	beq.n	8003f12 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ee4:	f7fd fea2 	bl	8001c2c <HAL_GetTick>
 8003ee8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003eea:	e00a      	b.n	8003f02 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eec:	f7fd fe9e 	bl	8001c2c <HAL_GetTick>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d901      	bls.n	8003f02 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e162      	b.n	80041c8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f02:	4b89      	ldr	r3, [pc, #548]	; (8004128 <HAL_RCC_OscConfig+0x778>)
 8003f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f08:	f003 0302 	and.w	r3, r3, #2
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d0ed      	beq.n	8003eec <HAL_RCC_OscConfig+0x53c>
 8003f10:	e015      	b.n	8003f3e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f12:	f7fd fe8b 	bl	8001c2c <HAL_GetTick>
 8003f16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f18:	e00a      	b.n	8003f30 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f1a:	f7fd fe87 	bl	8001c2c <HAL_GetTick>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d901      	bls.n	8003f30 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	e14b      	b.n	80041c8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f30:	4b7d      	ldr	r3, [pc, #500]	; (8004128 <HAL_RCC_OscConfig+0x778>)
 8003f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f36:	f003 0302 	and.w	r3, r3, #2
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d1ed      	bne.n	8003f1a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f3e:	7ffb      	ldrb	r3, [r7, #31]
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d105      	bne.n	8003f50 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f44:	4b78      	ldr	r3, [pc, #480]	; (8004128 <HAL_RCC_OscConfig+0x778>)
 8003f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f48:	4a77      	ldr	r2, [pc, #476]	; (8004128 <HAL_RCC_OscConfig+0x778>)
 8003f4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f4e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0320 	and.w	r3, r3, #32
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d03c      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d01c      	beq.n	8003f9e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003f64:	4b70      	ldr	r3, [pc, #448]	; (8004128 <HAL_RCC_OscConfig+0x778>)
 8003f66:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f6a:	4a6f      	ldr	r2, [pc, #444]	; (8004128 <HAL_RCC_OscConfig+0x778>)
 8003f6c:	f043 0301 	orr.w	r3, r3, #1
 8003f70:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f74:	f7fd fe5a 	bl	8001c2c <HAL_GetTick>
 8003f78:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003f7a:	e008      	b.n	8003f8e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f7c:	f7fd fe56 	bl	8001c2c <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d901      	bls.n	8003f8e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e11c      	b.n	80041c8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003f8e:	4b66      	ldr	r3, [pc, #408]	; (8004128 <HAL_RCC_OscConfig+0x778>)
 8003f90:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f94:	f003 0302 	and.w	r3, r3, #2
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d0ef      	beq.n	8003f7c <HAL_RCC_OscConfig+0x5cc>
 8003f9c:	e01b      	b.n	8003fd6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003f9e:	4b62      	ldr	r3, [pc, #392]	; (8004128 <HAL_RCC_OscConfig+0x778>)
 8003fa0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003fa4:	4a60      	ldr	r2, [pc, #384]	; (8004128 <HAL_RCC_OscConfig+0x778>)
 8003fa6:	f023 0301 	bic.w	r3, r3, #1
 8003faa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fae:	f7fd fe3d 	bl	8001c2c <HAL_GetTick>
 8003fb2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003fb4:	e008      	b.n	8003fc8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003fb6:	f7fd fe39 	bl	8001c2c <HAL_GetTick>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	1ad3      	subs	r3, r2, r3
 8003fc0:	2b02      	cmp	r3, #2
 8003fc2:	d901      	bls.n	8003fc8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003fc4:	2303      	movs	r3, #3
 8003fc6:	e0ff      	b.n	80041c8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003fc8:	4b57      	ldr	r3, [pc, #348]	; (8004128 <HAL_RCC_OscConfig+0x778>)
 8003fca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003fce:	f003 0302 	and.w	r3, r3, #2
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d1ef      	bne.n	8003fb6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	f000 80f3 	beq.w	80041c6 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	f040 80c9 	bne.w	800417c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003fea:	4b4f      	ldr	r3, [pc, #316]	; (8004128 <HAL_RCC_OscConfig+0x778>)
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	f003 0203 	and.w	r2, r3, #3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d12c      	bne.n	8004058 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004008:	3b01      	subs	r3, #1
 800400a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800400c:	429a      	cmp	r2, r3
 800400e:	d123      	bne.n	8004058 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800401a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800401c:	429a      	cmp	r2, r3
 800401e:	d11b      	bne.n	8004058 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800402a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800402c:	429a      	cmp	r2, r3
 800402e:	d113      	bne.n	8004058 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800403a:	085b      	lsrs	r3, r3, #1
 800403c:	3b01      	subs	r3, #1
 800403e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004040:	429a      	cmp	r2, r3
 8004042:	d109      	bne.n	8004058 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404e:	085b      	lsrs	r3, r3, #1
 8004050:	3b01      	subs	r3, #1
 8004052:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004054:	429a      	cmp	r2, r3
 8004056:	d06b      	beq.n	8004130 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004058:	69bb      	ldr	r3, [r7, #24]
 800405a:	2b0c      	cmp	r3, #12
 800405c:	d062      	beq.n	8004124 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800405e:	4b32      	ldr	r3, [pc, #200]	; (8004128 <HAL_RCC_OscConfig+0x778>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004066:	2b00      	cmp	r3, #0
 8004068:	d001      	beq.n	800406e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e0ac      	b.n	80041c8 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800406e:	4b2e      	ldr	r3, [pc, #184]	; (8004128 <HAL_RCC_OscConfig+0x778>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a2d      	ldr	r2, [pc, #180]	; (8004128 <HAL_RCC_OscConfig+0x778>)
 8004074:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004078:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800407a:	f7fd fdd7 	bl	8001c2c <HAL_GetTick>
 800407e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004080:	e008      	b.n	8004094 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004082:	f7fd fdd3 	bl	8001c2c <HAL_GetTick>
 8004086:	4602      	mov	r2, r0
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	2b02      	cmp	r3, #2
 800408e:	d901      	bls.n	8004094 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004090:	2303      	movs	r3, #3
 8004092:	e099      	b.n	80041c8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004094:	4b24      	ldr	r3, [pc, #144]	; (8004128 <HAL_RCC_OscConfig+0x778>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d1f0      	bne.n	8004082 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040a0:	4b21      	ldr	r3, [pc, #132]	; (8004128 <HAL_RCC_OscConfig+0x778>)
 80040a2:	68da      	ldr	r2, [r3, #12]
 80040a4:	4b21      	ldr	r3, [pc, #132]	; (800412c <HAL_RCC_OscConfig+0x77c>)
 80040a6:	4013      	ands	r3, r2
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80040b0:	3a01      	subs	r2, #1
 80040b2:	0112      	lsls	r2, r2, #4
 80040b4:	4311      	orrs	r1, r2
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80040ba:	0212      	lsls	r2, r2, #8
 80040bc:	4311      	orrs	r1, r2
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80040c2:	0852      	lsrs	r2, r2, #1
 80040c4:	3a01      	subs	r2, #1
 80040c6:	0552      	lsls	r2, r2, #21
 80040c8:	4311      	orrs	r1, r2
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80040ce:	0852      	lsrs	r2, r2, #1
 80040d0:	3a01      	subs	r2, #1
 80040d2:	0652      	lsls	r2, r2, #25
 80040d4:	4311      	orrs	r1, r2
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80040da:	06d2      	lsls	r2, r2, #27
 80040dc:	430a      	orrs	r2, r1
 80040de:	4912      	ldr	r1, [pc, #72]	; (8004128 <HAL_RCC_OscConfig+0x778>)
 80040e0:	4313      	orrs	r3, r2
 80040e2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80040e4:	4b10      	ldr	r3, [pc, #64]	; (8004128 <HAL_RCC_OscConfig+0x778>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a0f      	ldr	r2, [pc, #60]	; (8004128 <HAL_RCC_OscConfig+0x778>)
 80040ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040ee:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80040f0:	4b0d      	ldr	r3, [pc, #52]	; (8004128 <HAL_RCC_OscConfig+0x778>)
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	4a0c      	ldr	r2, [pc, #48]	; (8004128 <HAL_RCC_OscConfig+0x778>)
 80040f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040fa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80040fc:	f7fd fd96 	bl	8001c2c <HAL_GetTick>
 8004100:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004102:	e008      	b.n	8004116 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004104:	f7fd fd92 	bl	8001c2c <HAL_GetTick>
 8004108:	4602      	mov	r2, r0
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	2b02      	cmp	r3, #2
 8004110:	d901      	bls.n	8004116 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e058      	b.n	80041c8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004116:	4b04      	ldr	r3, [pc, #16]	; (8004128 <HAL_RCC_OscConfig+0x778>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d0f0      	beq.n	8004104 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004122:	e050      	b.n	80041c6 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e04f      	b.n	80041c8 <HAL_RCC_OscConfig+0x818>
 8004128:	40021000 	.word	0x40021000
 800412c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004130:	4b27      	ldr	r3, [pc, #156]	; (80041d0 <HAL_RCC_OscConfig+0x820>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004138:	2b00      	cmp	r3, #0
 800413a:	d144      	bne.n	80041c6 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800413c:	4b24      	ldr	r3, [pc, #144]	; (80041d0 <HAL_RCC_OscConfig+0x820>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a23      	ldr	r2, [pc, #140]	; (80041d0 <HAL_RCC_OscConfig+0x820>)
 8004142:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004146:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004148:	4b21      	ldr	r3, [pc, #132]	; (80041d0 <HAL_RCC_OscConfig+0x820>)
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	4a20      	ldr	r2, [pc, #128]	; (80041d0 <HAL_RCC_OscConfig+0x820>)
 800414e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004152:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004154:	f7fd fd6a 	bl	8001c2c <HAL_GetTick>
 8004158:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800415a:	e008      	b.n	800416e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800415c:	f7fd fd66 	bl	8001c2c <HAL_GetTick>
 8004160:	4602      	mov	r2, r0
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	2b02      	cmp	r3, #2
 8004168:	d901      	bls.n	800416e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	e02c      	b.n	80041c8 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800416e:	4b18      	ldr	r3, [pc, #96]	; (80041d0 <HAL_RCC_OscConfig+0x820>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d0f0      	beq.n	800415c <HAL_RCC_OscConfig+0x7ac>
 800417a:	e024      	b.n	80041c6 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	2b0c      	cmp	r3, #12
 8004180:	d01f      	beq.n	80041c2 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004182:	4b13      	ldr	r3, [pc, #76]	; (80041d0 <HAL_RCC_OscConfig+0x820>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a12      	ldr	r2, [pc, #72]	; (80041d0 <HAL_RCC_OscConfig+0x820>)
 8004188:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800418c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800418e:	f7fd fd4d 	bl	8001c2c <HAL_GetTick>
 8004192:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004194:	e008      	b.n	80041a8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004196:	f7fd fd49 	bl	8001c2c <HAL_GetTick>
 800419a:	4602      	mov	r2, r0
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	2b02      	cmp	r3, #2
 80041a2:	d901      	bls.n	80041a8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80041a4:	2303      	movs	r3, #3
 80041a6:	e00f      	b.n	80041c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041a8:	4b09      	ldr	r3, [pc, #36]	; (80041d0 <HAL_RCC_OscConfig+0x820>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d1f0      	bne.n	8004196 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80041b4:	4b06      	ldr	r3, [pc, #24]	; (80041d0 <HAL_RCC_OscConfig+0x820>)
 80041b6:	68da      	ldr	r2, [r3, #12]
 80041b8:	4905      	ldr	r1, [pc, #20]	; (80041d0 <HAL_RCC_OscConfig+0x820>)
 80041ba:	4b06      	ldr	r3, [pc, #24]	; (80041d4 <HAL_RCC_OscConfig+0x824>)
 80041bc:	4013      	ands	r3, r2
 80041be:	60cb      	str	r3, [r1, #12]
 80041c0:	e001      	b.n	80041c6 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e000      	b.n	80041c8 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80041c6:	2300      	movs	r3, #0
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3720      	adds	r7, #32
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	40021000 	.word	0x40021000
 80041d4:	feeefffc 	.word	0xfeeefffc

080041d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d101      	bne.n	80041ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e0e7      	b.n	80043bc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041ec:	4b75      	ldr	r3, [pc, #468]	; (80043c4 <HAL_RCC_ClockConfig+0x1ec>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0307 	and.w	r3, r3, #7
 80041f4:	683a      	ldr	r2, [r7, #0]
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d910      	bls.n	800421c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041fa:	4b72      	ldr	r3, [pc, #456]	; (80043c4 <HAL_RCC_ClockConfig+0x1ec>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f023 0207 	bic.w	r2, r3, #7
 8004202:	4970      	ldr	r1, [pc, #448]	; (80043c4 <HAL_RCC_ClockConfig+0x1ec>)
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	4313      	orrs	r3, r2
 8004208:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800420a:	4b6e      	ldr	r3, [pc, #440]	; (80043c4 <HAL_RCC_ClockConfig+0x1ec>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0307 	and.w	r3, r3, #7
 8004212:	683a      	ldr	r2, [r7, #0]
 8004214:	429a      	cmp	r2, r3
 8004216:	d001      	beq.n	800421c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e0cf      	b.n	80043bc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 0302 	and.w	r3, r3, #2
 8004224:	2b00      	cmp	r3, #0
 8004226:	d010      	beq.n	800424a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	689a      	ldr	r2, [r3, #8]
 800422c:	4b66      	ldr	r3, [pc, #408]	; (80043c8 <HAL_RCC_ClockConfig+0x1f0>)
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004234:	429a      	cmp	r2, r3
 8004236:	d908      	bls.n	800424a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004238:	4b63      	ldr	r3, [pc, #396]	; (80043c8 <HAL_RCC_ClockConfig+0x1f0>)
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	4960      	ldr	r1, [pc, #384]	; (80043c8 <HAL_RCC_ClockConfig+0x1f0>)
 8004246:	4313      	orrs	r3, r2
 8004248:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 0301 	and.w	r3, r3, #1
 8004252:	2b00      	cmp	r3, #0
 8004254:	d04c      	beq.n	80042f0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	2b03      	cmp	r3, #3
 800425c:	d107      	bne.n	800426e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800425e:	4b5a      	ldr	r3, [pc, #360]	; (80043c8 <HAL_RCC_ClockConfig+0x1f0>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d121      	bne.n	80042ae <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e0a6      	b.n	80043bc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	2b02      	cmp	r3, #2
 8004274:	d107      	bne.n	8004286 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004276:	4b54      	ldr	r3, [pc, #336]	; (80043c8 <HAL_RCC_ClockConfig+0x1f0>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800427e:	2b00      	cmp	r3, #0
 8004280:	d115      	bne.n	80042ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e09a      	b.n	80043bc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d107      	bne.n	800429e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800428e:	4b4e      	ldr	r3, [pc, #312]	; (80043c8 <HAL_RCC_ClockConfig+0x1f0>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0302 	and.w	r3, r3, #2
 8004296:	2b00      	cmp	r3, #0
 8004298:	d109      	bne.n	80042ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e08e      	b.n	80043bc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800429e:	4b4a      	ldr	r3, [pc, #296]	; (80043c8 <HAL_RCC_ClockConfig+0x1f0>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d101      	bne.n	80042ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e086      	b.n	80043bc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80042ae:	4b46      	ldr	r3, [pc, #280]	; (80043c8 <HAL_RCC_ClockConfig+0x1f0>)
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	f023 0203 	bic.w	r2, r3, #3
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	4943      	ldr	r1, [pc, #268]	; (80043c8 <HAL_RCC_ClockConfig+0x1f0>)
 80042bc:	4313      	orrs	r3, r2
 80042be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042c0:	f7fd fcb4 	bl	8001c2c <HAL_GetTick>
 80042c4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042c6:	e00a      	b.n	80042de <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042c8:	f7fd fcb0 	bl	8001c2c <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d901      	bls.n	80042de <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e06e      	b.n	80043bc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042de:	4b3a      	ldr	r3, [pc, #232]	; (80043c8 <HAL_RCC_ClockConfig+0x1f0>)
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	f003 020c 	and.w	r2, r3, #12
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d1eb      	bne.n	80042c8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 0302 	and.w	r3, r3, #2
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d010      	beq.n	800431e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	689a      	ldr	r2, [r3, #8]
 8004300:	4b31      	ldr	r3, [pc, #196]	; (80043c8 <HAL_RCC_ClockConfig+0x1f0>)
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004308:	429a      	cmp	r2, r3
 800430a:	d208      	bcs.n	800431e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800430c:	4b2e      	ldr	r3, [pc, #184]	; (80043c8 <HAL_RCC_ClockConfig+0x1f0>)
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	492b      	ldr	r1, [pc, #172]	; (80043c8 <HAL_RCC_ClockConfig+0x1f0>)
 800431a:	4313      	orrs	r3, r2
 800431c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800431e:	4b29      	ldr	r3, [pc, #164]	; (80043c4 <HAL_RCC_ClockConfig+0x1ec>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 0307 	and.w	r3, r3, #7
 8004326:	683a      	ldr	r2, [r7, #0]
 8004328:	429a      	cmp	r2, r3
 800432a:	d210      	bcs.n	800434e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800432c:	4b25      	ldr	r3, [pc, #148]	; (80043c4 <HAL_RCC_ClockConfig+0x1ec>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f023 0207 	bic.w	r2, r3, #7
 8004334:	4923      	ldr	r1, [pc, #140]	; (80043c4 <HAL_RCC_ClockConfig+0x1ec>)
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	4313      	orrs	r3, r2
 800433a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800433c:	4b21      	ldr	r3, [pc, #132]	; (80043c4 <HAL_RCC_ClockConfig+0x1ec>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 0307 	and.w	r3, r3, #7
 8004344:	683a      	ldr	r2, [r7, #0]
 8004346:	429a      	cmp	r2, r3
 8004348:	d001      	beq.n	800434e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e036      	b.n	80043bc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 0304 	and.w	r3, r3, #4
 8004356:	2b00      	cmp	r3, #0
 8004358:	d008      	beq.n	800436c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800435a:	4b1b      	ldr	r3, [pc, #108]	; (80043c8 <HAL_RCC_ClockConfig+0x1f0>)
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	4918      	ldr	r1, [pc, #96]	; (80043c8 <HAL_RCC_ClockConfig+0x1f0>)
 8004368:	4313      	orrs	r3, r2
 800436a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 0308 	and.w	r3, r3, #8
 8004374:	2b00      	cmp	r3, #0
 8004376:	d009      	beq.n	800438c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004378:	4b13      	ldr	r3, [pc, #76]	; (80043c8 <HAL_RCC_ClockConfig+0x1f0>)
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	691b      	ldr	r3, [r3, #16]
 8004384:	00db      	lsls	r3, r3, #3
 8004386:	4910      	ldr	r1, [pc, #64]	; (80043c8 <HAL_RCC_ClockConfig+0x1f0>)
 8004388:	4313      	orrs	r3, r2
 800438a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800438c:	f000 f824 	bl	80043d8 <HAL_RCC_GetSysClockFreq>
 8004390:	4602      	mov	r2, r0
 8004392:	4b0d      	ldr	r3, [pc, #52]	; (80043c8 <HAL_RCC_ClockConfig+0x1f0>)
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	091b      	lsrs	r3, r3, #4
 8004398:	f003 030f 	and.w	r3, r3, #15
 800439c:	490b      	ldr	r1, [pc, #44]	; (80043cc <HAL_RCC_ClockConfig+0x1f4>)
 800439e:	5ccb      	ldrb	r3, [r1, r3]
 80043a0:	f003 031f 	and.w	r3, r3, #31
 80043a4:	fa22 f303 	lsr.w	r3, r2, r3
 80043a8:	4a09      	ldr	r2, [pc, #36]	; (80043d0 <HAL_RCC_ClockConfig+0x1f8>)
 80043aa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80043ac:	4b09      	ldr	r3, [pc, #36]	; (80043d4 <HAL_RCC_ClockConfig+0x1fc>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4618      	mov	r0, r3
 80043b2:	f7fd fbeb 	bl	8001b8c <HAL_InitTick>
 80043b6:	4603      	mov	r3, r0
 80043b8:	72fb      	strb	r3, [r7, #11]

  return status;
 80043ba:	7afb      	ldrb	r3, [r7, #11]
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3710      	adds	r7, #16
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	40022000 	.word	0x40022000
 80043c8:	40021000 	.word	0x40021000
 80043cc:	08009840 	.word	0x08009840
 80043d0:	20000000 	.word	0x20000000
 80043d4:	20000004 	.word	0x20000004

080043d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043d8:	b480      	push	{r7}
 80043da:	b089      	sub	sp, #36	; 0x24
 80043dc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80043de:	2300      	movs	r3, #0
 80043e0:	61fb      	str	r3, [r7, #28]
 80043e2:	2300      	movs	r3, #0
 80043e4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043e6:	4b3e      	ldr	r3, [pc, #248]	; (80044e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	f003 030c 	and.w	r3, r3, #12
 80043ee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043f0:	4b3b      	ldr	r3, [pc, #236]	; (80044e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	f003 0303 	and.w	r3, r3, #3
 80043f8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d005      	beq.n	800440c <HAL_RCC_GetSysClockFreq+0x34>
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	2b0c      	cmp	r3, #12
 8004404:	d121      	bne.n	800444a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2b01      	cmp	r3, #1
 800440a:	d11e      	bne.n	800444a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800440c:	4b34      	ldr	r3, [pc, #208]	; (80044e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0308 	and.w	r3, r3, #8
 8004414:	2b00      	cmp	r3, #0
 8004416:	d107      	bne.n	8004428 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004418:	4b31      	ldr	r3, [pc, #196]	; (80044e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800441a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800441e:	0a1b      	lsrs	r3, r3, #8
 8004420:	f003 030f 	and.w	r3, r3, #15
 8004424:	61fb      	str	r3, [r7, #28]
 8004426:	e005      	b.n	8004434 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004428:	4b2d      	ldr	r3, [pc, #180]	; (80044e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	091b      	lsrs	r3, r3, #4
 800442e:	f003 030f 	and.w	r3, r3, #15
 8004432:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004434:	4a2b      	ldr	r2, [pc, #172]	; (80044e4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800443c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d10d      	bne.n	8004460 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004448:	e00a      	b.n	8004460 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	2b04      	cmp	r3, #4
 800444e:	d102      	bne.n	8004456 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004450:	4b25      	ldr	r3, [pc, #148]	; (80044e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004452:	61bb      	str	r3, [r7, #24]
 8004454:	e004      	b.n	8004460 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	2b08      	cmp	r3, #8
 800445a:	d101      	bne.n	8004460 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800445c:	4b23      	ldr	r3, [pc, #140]	; (80044ec <HAL_RCC_GetSysClockFreq+0x114>)
 800445e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	2b0c      	cmp	r3, #12
 8004464:	d134      	bne.n	80044d0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004466:	4b1e      	ldr	r3, [pc, #120]	; (80044e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	f003 0303 	and.w	r3, r3, #3
 800446e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	2b02      	cmp	r3, #2
 8004474:	d003      	beq.n	800447e <HAL_RCC_GetSysClockFreq+0xa6>
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	2b03      	cmp	r3, #3
 800447a:	d003      	beq.n	8004484 <HAL_RCC_GetSysClockFreq+0xac>
 800447c:	e005      	b.n	800448a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800447e:	4b1a      	ldr	r3, [pc, #104]	; (80044e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004480:	617b      	str	r3, [r7, #20]
      break;
 8004482:	e005      	b.n	8004490 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004484:	4b19      	ldr	r3, [pc, #100]	; (80044ec <HAL_RCC_GetSysClockFreq+0x114>)
 8004486:	617b      	str	r3, [r7, #20]
      break;
 8004488:	e002      	b.n	8004490 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800448a:	69fb      	ldr	r3, [r7, #28]
 800448c:	617b      	str	r3, [r7, #20]
      break;
 800448e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004490:	4b13      	ldr	r3, [pc, #76]	; (80044e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	091b      	lsrs	r3, r3, #4
 8004496:	f003 0307 	and.w	r3, r3, #7
 800449a:	3301      	adds	r3, #1
 800449c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800449e:	4b10      	ldr	r3, [pc, #64]	; (80044e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	0a1b      	lsrs	r3, r3, #8
 80044a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044a8:	697a      	ldr	r2, [r7, #20]
 80044aa:	fb03 f202 	mul.w	r2, r3, r2
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80044b4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80044b6:	4b0a      	ldr	r3, [pc, #40]	; (80044e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	0e5b      	lsrs	r3, r3, #25
 80044bc:	f003 0303 	and.w	r3, r3, #3
 80044c0:	3301      	adds	r3, #1
 80044c2:	005b      	lsls	r3, r3, #1
 80044c4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80044c6:	697a      	ldr	r2, [r7, #20]
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80044ce:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80044d0:	69bb      	ldr	r3, [r7, #24]
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3724      	adds	r7, #36	; 0x24
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop
 80044e0:	40021000 	.word	0x40021000
 80044e4:	08009858 	.word	0x08009858
 80044e8:	00f42400 	.word	0x00f42400
 80044ec:	007a1200 	.word	0x007a1200

080044f0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044f0:	b480      	push	{r7}
 80044f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044f4:	4b03      	ldr	r3, [pc, #12]	; (8004504 <HAL_RCC_GetHCLKFreq+0x14>)
 80044f6:	681b      	ldr	r3, [r3, #0]
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop
 8004504:	20000000 	.word	0x20000000

08004508 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800450c:	f7ff fff0 	bl	80044f0 <HAL_RCC_GetHCLKFreq>
 8004510:	4602      	mov	r2, r0
 8004512:	4b06      	ldr	r3, [pc, #24]	; (800452c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	0a1b      	lsrs	r3, r3, #8
 8004518:	f003 0307 	and.w	r3, r3, #7
 800451c:	4904      	ldr	r1, [pc, #16]	; (8004530 <HAL_RCC_GetPCLK1Freq+0x28>)
 800451e:	5ccb      	ldrb	r3, [r1, r3]
 8004520:	f003 031f 	and.w	r3, r3, #31
 8004524:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004528:	4618      	mov	r0, r3
 800452a:	bd80      	pop	{r7, pc}
 800452c:	40021000 	.word	0x40021000
 8004530:	08009850 	.word	0x08009850

08004534 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004538:	f7ff ffda 	bl	80044f0 <HAL_RCC_GetHCLKFreq>
 800453c:	4602      	mov	r2, r0
 800453e:	4b06      	ldr	r3, [pc, #24]	; (8004558 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	0adb      	lsrs	r3, r3, #11
 8004544:	f003 0307 	and.w	r3, r3, #7
 8004548:	4904      	ldr	r1, [pc, #16]	; (800455c <HAL_RCC_GetPCLK2Freq+0x28>)
 800454a:	5ccb      	ldrb	r3, [r1, r3]
 800454c:	f003 031f 	and.w	r3, r3, #31
 8004550:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004554:	4618      	mov	r0, r3
 8004556:	bd80      	pop	{r7, pc}
 8004558:	40021000 	.word	0x40021000
 800455c:	08009850 	.word	0x08009850

08004560 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b086      	sub	sp, #24
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004568:	2300      	movs	r3, #0
 800456a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800456c:	4b2a      	ldr	r3, [pc, #168]	; (8004618 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800456e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004570:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004574:	2b00      	cmp	r3, #0
 8004576:	d003      	beq.n	8004580 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004578:	f7ff f9b6 	bl	80038e8 <HAL_PWREx_GetVoltageRange>
 800457c:	6178      	str	r0, [r7, #20]
 800457e:	e014      	b.n	80045aa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004580:	4b25      	ldr	r3, [pc, #148]	; (8004618 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004584:	4a24      	ldr	r2, [pc, #144]	; (8004618 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004586:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800458a:	6593      	str	r3, [r2, #88]	; 0x58
 800458c:	4b22      	ldr	r3, [pc, #136]	; (8004618 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800458e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004594:	60fb      	str	r3, [r7, #12]
 8004596:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004598:	f7ff f9a6 	bl	80038e8 <HAL_PWREx_GetVoltageRange>
 800459c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800459e:	4b1e      	ldr	r3, [pc, #120]	; (8004618 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045a2:	4a1d      	ldr	r2, [pc, #116]	; (8004618 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045a8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045b0:	d10b      	bne.n	80045ca <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2b80      	cmp	r3, #128	; 0x80
 80045b6:	d919      	bls.n	80045ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2ba0      	cmp	r3, #160	; 0xa0
 80045bc:	d902      	bls.n	80045c4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80045be:	2302      	movs	r3, #2
 80045c0:	613b      	str	r3, [r7, #16]
 80045c2:	e013      	b.n	80045ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80045c4:	2301      	movs	r3, #1
 80045c6:	613b      	str	r3, [r7, #16]
 80045c8:	e010      	b.n	80045ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2b80      	cmp	r3, #128	; 0x80
 80045ce:	d902      	bls.n	80045d6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80045d0:	2303      	movs	r3, #3
 80045d2:	613b      	str	r3, [r7, #16]
 80045d4:	e00a      	b.n	80045ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2b80      	cmp	r3, #128	; 0x80
 80045da:	d102      	bne.n	80045e2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80045dc:	2302      	movs	r3, #2
 80045de:	613b      	str	r3, [r7, #16]
 80045e0:	e004      	b.n	80045ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2b70      	cmp	r3, #112	; 0x70
 80045e6:	d101      	bne.n	80045ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80045e8:	2301      	movs	r3, #1
 80045ea:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80045ec:	4b0b      	ldr	r3, [pc, #44]	; (800461c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f023 0207 	bic.w	r2, r3, #7
 80045f4:	4909      	ldr	r1, [pc, #36]	; (800461c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80045fc:	4b07      	ldr	r3, [pc, #28]	; (800461c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0307 	and.w	r3, r3, #7
 8004604:	693a      	ldr	r2, [r7, #16]
 8004606:	429a      	cmp	r2, r3
 8004608:	d001      	beq.n	800460e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e000      	b.n	8004610 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800460e:	2300      	movs	r3, #0
}
 8004610:	4618      	mov	r0, r3
 8004612:	3718      	adds	r7, #24
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}
 8004618:	40021000 	.word	0x40021000
 800461c:	40022000 	.word	0x40022000

08004620 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b086      	sub	sp, #24
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004628:	2300      	movs	r3, #0
 800462a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800462c:	2300      	movs	r3, #0
 800462e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004638:	2b00      	cmp	r3, #0
 800463a:	d031      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004640:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004644:	d01a      	beq.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004646:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800464a:	d814      	bhi.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800464c:	2b00      	cmp	r3, #0
 800464e:	d009      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004650:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004654:	d10f      	bne.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004656:	4b5d      	ldr	r3, [pc, #372]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	4a5c      	ldr	r2, [pc, #368]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800465c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004660:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004662:	e00c      	b.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	3304      	adds	r3, #4
 8004668:	2100      	movs	r1, #0
 800466a:	4618      	mov	r0, r3
 800466c:	f000 f9de 	bl	8004a2c <RCCEx_PLLSAI1_Config>
 8004670:	4603      	mov	r3, r0
 8004672:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004674:	e003      	b.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	74fb      	strb	r3, [r7, #19]
      break;
 800467a:	e000      	b.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800467c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800467e:	7cfb      	ldrb	r3, [r7, #19]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d10b      	bne.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004684:	4b51      	ldr	r3, [pc, #324]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800468a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004692:	494e      	ldr	r1, [pc, #312]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004694:	4313      	orrs	r3, r2
 8004696:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800469a:	e001      	b.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800469c:	7cfb      	ldrb	r3, [r7, #19]
 800469e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	f000 809e 	beq.w	80047ea <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046ae:	2300      	movs	r3, #0
 80046b0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80046b2:	4b46      	ldr	r3, [pc, #280]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d101      	bne.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80046be:	2301      	movs	r3, #1
 80046c0:	e000      	b.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80046c2:	2300      	movs	r3, #0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d00d      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046c8:	4b40      	ldr	r3, [pc, #256]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046cc:	4a3f      	ldr	r2, [pc, #252]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046d2:	6593      	str	r3, [r2, #88]	; 0x58
 80046d4:	4b3d      	ldr	r3, [pc, #244]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046dc:	60bb      	str	r3, [r7, #8]
 80046de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046e0:	2301      	movs	r3, #1
 80046e2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046e4:	4b3a      	ldr	r3, [pc, #232]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a39      	ldr	r2, [pc, #228]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80046ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046ee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80046f0:	f7fd fa9c 	bl	8001c2c <HAL_GetTick>
 80046f4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80046f6:	e009      	b.n	800470c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046f8:	f7fd fa98 	bl	8001c2c <HAL_GetTick>
 80046fc:	4602      	mov	r2, r0
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	2b02      	cmp	r3, #2
 8004704:	d902      	bls.n	800470c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	74fb      	strb	r3, [r7, #19]
        break;
 800470a:	e005      	b.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800470c:	4b30      	ldr	r3, [pc, #192]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004714:	2b00      	cmp	r3, #0
 8004716:	d0ef      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004718:	7cfb      	ldrb	r3, [r7, #19]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d15a      	bne.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800471e:	4b2b      	ldr	r3, [pc, #172]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004720:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004724:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004728:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d01e      	beq.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004734:	697a      	ldr	r2, [r7, #20]
 8004736:	429a      	cmp	r2, r3
 8004738:	d019      	beq.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800473a:	4b24      	ldr	r3, [pc, #144]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800473c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004740:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004744:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004746:	4b21      	ldr	r3, [pc, #132]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004748:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800474c:	4a1f      	ldr	r2, [pc, #124]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800474e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004752:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004756:	4b1d      	ldr	r3, [pc, #116]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004758:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800475c:	4a1b      	ldr	r2, [pc, #108]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800475e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004762:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004766:	4a19      	ldr	r2, [pc, #100]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	f003 0301 	and.w	r3, r3, #1
 8004774:	2b00      	cmp	r3, #0
 8004776:	d016      	beq.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004778:	f7fd fa58 	bl	8001c2c <HAL_GetTick>
 800477c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800477e:	e00b      	b.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004780:	f7fd fa54 	bl	8001c2c <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	f241 3288 	movw	r2, #5000	; 0x1388
 800478e:	4293      	cmp	r3, r2
 8004790:	d902      	bls.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	74fb      	strb	r3, [r7, #19]
            break;
 8004796:	e006      	b.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004798:	4b0c      	ldr	r3, [pc, #48]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800479a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800479e:	f003 0302 	and.w	r3, r3, #2
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d0ec      	beq.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80047a6:	7cfb      	ldrb	r3, [r7, #19]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d10b      	bne.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047ac:	4b07      	ldr	r3, [pc, #28]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80047ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047ba:	4904      	ldr	r1, [pc, #16]	; (80047cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80047bc:	4313      	orrs	r3, r2
 80047be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80047c2:	e009      	b.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80047c4:	7cfb      	ldrb	r3, [r7, #19]
 80047c6:	74bb      	strb	r3, [r7, #18]
 80047c8:	e006      	b.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80047ca:	bf00      	nop
 80047cc:	40021000 	.word	0x40021000
 80047d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047d4:	7cfb      	ldrb	r3, [r7, #19]
 80047d6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047d8:	7c7b      	ldrb	r3, [r7, #17]
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d105      	bne.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047de:	4b8a      	ldr	r3, [pc, #552]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047e2:	4a89      	ldr	r2, [pc, #548]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047e8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 0301 	and.w	r3, r3, #1
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d00a      	beq.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80047f6:	4b84      	ldr	r3, [pc, #528]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047fc:	f023 0203 	bic.w	r2, r3, #3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6a1b      	ldr	r3, [r3, #32]
 8004804:	4980      	ldr	r1, [pc, #512]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004806:	4313      	orrs	r3, r2
 8004808:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 0302 	and.w	r3, r3, #2
 8004814:	2b00      	cmp	r3, #0
 8004816:	d00a      	beq.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004818:	4b7b      	ldr	r3, [pc, #492]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800481a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800481e:	f023 020c 	bic.w	r2, r3, #12
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004826:	4978      	ldr	r1, [pc, #480]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004828:	4313      	orrs	r3, r2
 800482a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 0320 	and.w	r3, r3, #32
 8004836:	2b00      	cmp	r3, #0
 8004838:	d00a      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800483a:	4b73      	ldr	r3, [pc, #460]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800483c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004840:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004848:	496f      	ldr	r1, [pc, #444]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800484a:	4313      	orrs	r3, r2
 800484c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004858:	2b00      	cmp	r3, #0
 800485a:	d00a      	beq.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800485c:	4b6a      	ldr	r3, [pc, #424]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800485e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004862:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800486a:	4967      	ldr	r1, [pc, #412]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800486c:	4313      	orrs	r3, r2
 800486e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800487a:	2b00      	cmp	r3, #0
 800487c:	d00a      	beq.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800487e:	4b62      	ldr	r3, [pc, #392]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004880:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004884:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800488c:	495e      	ldr	r1, [pc, #376]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800488e:	4313      	orrs	r3, r2
 8004890:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800489c:	2b00      	cmp	r3, #0
 800489e:	d00a      	beq.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80048a0:	4b59      	ldr	r3, [pc, #356]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048a6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ae:	4956      	ldr	r1, [pc, #344]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048b0:	4313      	orrs	r3, r2
 80048b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d00a      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80048c2:	4b51      	ldr	r3, [pc, #324]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d0:	494d      	ldr	r1, [pc, #308]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048d2:	4313      	orrs	r3, r2
 80048d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d028      	beq.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80048e4:	4b48      	ldr	r3, [pc, #288]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f2:	4945      	ldr	r1, [pc, #276]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80048f4:	4313      	orrs	r3, r2
 80048f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004902:	d106      	bne.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004904:	4b40      	ldr	r3, [pc, #256]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	4a3f      	ldr	r2, [pc, #252]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800490a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800490e:	60d3      	str	r3, [r2, #12]
 8004910:	e011      	b.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004916:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800491a:	d10c      	bne.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	3304      	adds	r3, #4
 8004920:	2101      	movs	r1, #1
 8004922:	4618      	mov	r0, r3
 8004924:	f000 f882 	bl	8004a2c <RCCEx_PLLSAI1_Config>
 8004928:	4603      	mov	r3, r0
 800492a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800492c:	7cfb      	ldrb	r3, [r7, #19]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d001      	beq.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8004932:	7cfb      	ldrb	r3, [r7, #19]
 8004934:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d028      	beq.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004942:	4b31      	ldr	r3, [pc, #196]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004944:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004948:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004950:	492d      	ldr	r1, [pc, #180]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004952:	4313      	orrs	r3, r2
 8004954:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800495c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004960:	d106      	bne.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004962:	4b29      	ldr	r3, [pc, #164]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	4a28      	ldr	r2, [pc, #160]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004968:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800496c:	60d3      	str	r3, [r2, #12]
 800496e:	e011      	b.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004974:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004978:	d10c      	bne.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	3304      	adds	r3, #4
 800497e:	2101      	movs	r1, #1
 8004980:	4618      	mov	r0, r3
 8004982:	f000 f853 	bl	8004a2c <RCCEx_PLLSAI1_Config>
 8004986:	4603      	mov	r3, r0
 8004988:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800498a:	7cfb      	ldrb	r3, [r7, #19]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d001      	beq.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8004990:	7cfb      	ldrb	r3, [r7, #19]
 8004992:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800499c:	2b00      	cmp	r3, #0
 800499e:	d01c      	beq.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80049a0:	4b19      	ldr	r3, [pc, #100]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80049a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049a6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049ae:	4916      	ldr	r1, [pc, #88]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80049b0:	4313      	orrs	r3, r2
 80049b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049be:	d10c      	bne.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	3304      	adds	r3, #4
 80049c4:	2102      	movs	r1, #2
 80049c6:	4618      	mov	r0, r3
 80049c8:	f000 f830 	bl	8004a2c <RCCEx_PLLSAI1_Config>
 80049cc:	4603      	mov	r3, r0
 80049ce:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80049d0:	7cfb      	ldrb	r3, [r7, #19]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d001      	beq.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80049d6:	7cfb      	ldrb	r3, [r7, #19]
 80049d8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d00a      	beq.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80049e6:	4b08      	ldr	r3, [pc, #32]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80049e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049ec:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049f4:	4904      	ldr	r1, [pc, #16]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80049f6:	4313      	orrs	r3, r2
 80049f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80049fc:	7cbb      	ldrb	r3, [r7, #18]
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3718      	adds	r7, #24
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	40021000 	.word	0x40021000

08004a0c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004a10:	4b05      	ldr	r3, [pc, #20]	; (8004a28 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a04      	ldr	r2, [pc, #16]	; (8004a28 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004a16:	f043 0304 	orr.w	r3, r3, #4
 8004a1a:	6013      	str	r3, [r2, #0]
}
 8004a1c:	bf00      	nop
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr
 8004a26:	bf00      	nop
 8004a28:	40021000 	.word	0x40021000

08004a2c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a36:	2300      	movs	r3, #0
 8004a38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004a3a:	4b74      	ldr	r3, [pc, #464]	; (8004c0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a3c:	68db      	ldr	r3, [r3, #12]
 8004a3e:	f003 0303 	and.w	r3, r3, #3
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d018      	beq.n	8004a78 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004a46:	4b71      	ldr	r3, [pc, #452]	; (8004c0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	f003 0203 	and.w	r2, r3, #3
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d10d      	bne.n	8004a72 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
       ||
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d009      	beq.n	8004a72 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004a5e:	4b6b      	ldr	r3, [pc, #428]	; (8004c0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	091b      	lsrs	r3, r3, #4
 8004a64:	f003 0307 	and.w	r3, r3, #7
 8004a68:	1c5a      	adds	r2, r3, #1
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	685b      	ldr	r3, [r3, #4]
       ||
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d047      	beq.n	8004b02 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	73fb      	strb	r3, [r7, #15]
 8004a76:	e044      	b.n	8004b02 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	2b03      	cmp	r3, #3
 8004a7e:	d018      	beq.n	8004ab2 <RCCEx_PLLSAI1_Config+0x86>
 8004a80:	2b03      	cmp	r3, #3
 8004a82:	d825      	bhi.n	8004ad0 <RCCEx_PLLSAI1_Config+0xa4>
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d002      	beq.n	8004a8e <RCCEx_PLLSAI1_Config+0x62>
 8004a88:	2b02      	cmp	r3, #2
 8004a8a:	d009      	beq.n	8004aa0 <RCCEx_PLLSAI1_Config+0x74>
 8004a8c:	e020      	b.n	8004ad0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004a8e:	4b5f      	ldr	r3, [pc, #380]	; (8004c0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 0302 	and.w	r3, r3, #2
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d11d      	bne.n	8004ad6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a9e:	e01a      	b.n	8004ad6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004aa0:	4b5a      	ldr	r3, [pc, #360]	; (8004c0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d116      	bne.n	8004ada <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ab0:	e013      	b.n	8004ada <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004ab2:	4b56      	ldr	r3, [pc, #344]	; (8004c0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d10f      	bne.n	8004ade <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004abe:	4b53      	ldr	r3, [pc, #332]	; (8004c0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d109      	bne.n	8004ade <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004ace:	e006      	b.n	8004ade <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	73fb      	strb	r3, [r7, #15]
      break;
 8004ad4:	e004      	b.n	8004ae0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004ad6:	bf00      	nop
 8004ad8:	e002      	b.n	8004ae0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004ada:	bf00      	nop
 8004adc:	e000      	b.n	8004ae0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004ade:	bf00      	nop
    }

    if(status == HAL_OK)
 8004ae0:	7bfb      	ldrb	r3, [r7, #15]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d10d      	bne.n	8004b02 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004ae6:	4b49      	ldr	r3, [pc, #292]	; (8004c0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6819      	ldr	r1, [r3, #0]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	3b01      	subs	r3, #1
 8004af8:	011b      	lsls	r3, r3, #4
 8004afa:	430b      	orrs	r3, r1
 8004afc:	4943      	ldr	r1, [pc, #268]	; (8004c0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004afe:	4313      	orrs	r3, r2
 8004b00:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004b02:	7bfb      	ldrb	r3, [r7, #15]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d17c      	bne.n	8004c02 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004b08:	4b40      	ldr	r3, [pc, #256]	; (8004c0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a3f      	ldr	r2, [pc, #252]	; (8004c0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b0e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004b12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b14:	f7fd f88a 	bl	8001c2c <HAL_GetTick>
 8004b18:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004b1a:	e009      	b.n	8004b30 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b1c:	f7fd f886 	bl	8001c2c <HAL_GetTick>
 8004b20:	4602      	mov	r2, r0
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	1ad3      	subs	r3, r2, r3
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	d902      	bls.n	8004b30 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	73fb      	strb	r3, [r7, #15]
        break;
 8004b2e:	e005      	b.n	8004b3c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004b30:	4b36      	ldr	r3, [pc, #216]	; (8004c0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d1ef      	bne.n	8004b1c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004b3c:	7bfb      	ldrb	r3, [r7, #15]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d15f      	bne.n	8004c02 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d110      	bne.n	8004b6a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b48:	4b30      	ldr	r3, [pc, #192]	; (8004c0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b4a:	691b      	ldr	r3, [r3, #16]
 8004b4c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004b50:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	6892      	ldr	r2, [r2, #8]
 8004b58:	0211      	lsls	r1, r2, #8
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	68d2      	ldr	r2, [r2, #12]
 8004b5e:	06d2      	lsls	r2, r2, #27
 8004b60:	430a      	orrs	r2, r1
 8004b62:	492a      	ldr	r1, [pc, #168]	; (8004c0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b64:	4313      	orrs	r3, r2
 8004b66:	610b      	str	r3, [r1, #16]
 8004b68:	e027      	b.n	8004bba <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d112      	bne.n	8004b96 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b70:	4b26      	ldr	r3, [pc, #152]	; (8004c0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b72:	691b      	ldr	r3, [r3, #16]
 8004b74:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004b78:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	6892      	ldr	r2, [r2, #8]
 8004b80:	0211      	lsls	r1, r2, #8
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	6912      	ldr	r2, [r2, #16]
 8004b86:	0852      	lsrs	r2, r2, #1
 8004b88:	3a01      	subs	r2, #1
 8004b8a:	0552      	lsls	r2, r2, #21
 8004b8c:	430a      	orrs	r2, r1
 8004b8e:	491f      	ldr	r1, [pc, #124]	; (8004c0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b90:	4313      	orrs	r3, r2
 8004b92:	610b      	str	r3, [r1, #16]
 8004b94:	e011      	b.n	8004bba <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b96:	4b1d      	ldr	r3, [pc, #116]	; (8004c0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004b9e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	6892      	ldr	r2, [r2, #8]
 8004ba6:	0211      	lsls	r1, r2, #8
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	6952      	ldr	r2, [r2, #20]
 8004bac:	0852      	lsrs	r2, r2, #1
 8004bae:	3a01      	subs	r2, #1
 8004bb0:	0652      	lsls	r2, r2, #25
 8004bb2:	430a      	orrs	r2, r1
 8004bb4:	4915      	ldr	r1, [pc, #84]	; (8004c0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004bba:	4b14      	ldr	r3, [pc, #80]	; (8004c0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a13      	ldr	r2, [pc, #76]	; (8004c0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bc0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004bc4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bc6:	f7fd f831 	bl	8001c2c <HAL_GetTick>
 8004bca:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004bcc:	e009      	b.n	8004be2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004bce:	f7fd f82d 	bl	8001c2c <HAL_GetTick>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	2b02      	cmp	r3, #2
 8004bda:	d902      	bls.n	8004be2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	73fb      	strb	r3, [r7, #15]
          break;
 8004be0:	e005      	b.n	8004bee <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004be2:	4b0a      	ldr	r3, [pc, #40]	; (8004c0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d0ef      	beq.n	8004bce <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004bee:	7bfb      	ldrb	r3, [r7, #15]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d106      	bne.n	8004c02 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004bf4:	4b05      	ldr	r3, [pc, #20]	; (8004c0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bf6:	691a      	ldr	r2, [r3, #16]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	699b      	ldr	r3, [r3, #24]
 8004bfc:	4903      	ldr	r1, [pc, #12]	; (8004c0c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004c02:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3710      	adds	r7, #16
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}
 8004c0c:	40021000 	.word	0x40021000

08004c10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b082      	sub	sp, #8
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d101      	bne.n	8004c22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e040      	b.n	8004ca4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d106      	bne.n	8004c38 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f7fc fdd6 	bl	80017e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2224      	movs	r2, #36	; 0x24
 8004c3c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f022 0201 	bic.w	r2, r2, #1
 8004c4c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f000 fbc2 	bl	80053d8 <UART_SetConfig>
 8004c54:	4603      	mov	r3, r0
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d101      	bne.n	8004c5e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e022      	b.n	8004ca4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d002      	beq.n	8004c6c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f000 fde2 	bl	8005830 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	685a      	ldr	r2, [r3, #4]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c7a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	689a      	ldr	r2, [r3, #8]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c8a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f042 0201 	orr.w	r2, r2, #1
 8004c9a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f000 fe69 	bl	8005974 <UART_CheckIdleState>
 8004ca2:	4603      	mov	r3, r0
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3708      	adds	r7, #8
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}

08004cac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b08a      	sub	sp, #40	; 0x28
 8004cb0:	af02      	add	r7, sp, #8
 8004cb2:	60f8      	str	r0, [r7, #12]
 8004cb4:	60b9      	str	r1, [r7, #8]
 8004cb6:	603b      	str	r3, [r7, #0]
 8004cb8:	4613      	mov	r3, r2
 8004cba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004cc0:	2b20      	cmp	r3, #32
 8004cc2:	f040 8082 	bne.w	8004dca <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d002      	beq.n	8004cd2 <HAL_UART_Transmit+0x26>
 8004ccc:	88fb      	ldrh	r3, [r7, #6]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d101      	bne.n	8004cd6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e07a      	b.n	8004dcc <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d101      	bne.n	8004ce4 <HAL_UART_Transmit+0x38>
 8004ce0:	2302      	movs	r3, #2
 8004ce2:	e073      	b.n	8004dcc <HAL_UART_Transmit+0x120>
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2221      	movs	r2, #33	; 0x21
 8004cf8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004cfa:	f7fc ff97 	bl	8001c2c <HAL_GetTick>
 8004cfe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	88fa      	ldrh	r2, [r7, #6]
 8004d04:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	88fa      	ldrh	r2, [r7, #6]
 8004d0c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d18:	d108      	bne.n	8004d2c <HAL_UART_Transmit+0x80>
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	691b      	ldr	r3, [r3, #16]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d104      	bne.n	8004d2c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004d22:	2300      	movs	r3, #0
 8004d24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	61bb      	str	r3, [r7, #24]
 8004d2a:	e003      	b.n	8004d34 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d30:	2300      	movs	r3, #0
 8004d32:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2200      	movs	r2, #0
 8004d38:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004d3c:	e02d      	b.n	8004d9a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	9300      	str	r3, [sp, #0]
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	2200      	movs	r2, #0
 8004d46:	2180      	movs	r1, #128	; 0x80
 8004d48:	68f8      	ldr	r0, [r7, #12]
 8004d4a:	f000 fe5c 	bl	8005a06 <UART_WaitOnFlagUntilTimeout>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d001      	beq.n	8004d58 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004d54:	2303      	movs	r3, #3
 8004d56:	e039      	b.n	8004dcc <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004d58:	69fb      	ldr	r3, [r7, #28]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d10b      	bne.n	8004d76 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d5e:	69bb      	ldr	r3, [r7, #24]
 8004d60:	881a      	ldrh	r2, [r3, #0]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d6a:	b292      	uxth	r2, r2
 8004d6c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004d6e:	69bb      	ldr	r3, [r7, #24]
 8004d70:	3302      	adds	r3, #2
 8004d72:	61bb      	str	r3, [r7, #24]
 8004d74:	e008      	b.n	8004d88 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d76:	69fb      	ldr	r3, [r7, #28]
 8004d78:	781a      	ldrb	r2, [r3, #0]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	b292      	uxth	r2, r2
 8004d80:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004d82:	69fb      	ldr	r3, [r7, #28]
 8004d84:	3301      	adds	r3, #1
 8004d86:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	3b01      	subs	r3, #1
 8004d92:	b29a      	uxth	r2, r3
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d1cb      	bne.n	8004d3e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	9300      	str	r3, [sp, #0]
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	2200      	movs	r2, #0
 8004dae:	2140      	movs	r1, #64	; 0x40
 8004db0:	68f8      	ldr	r0, [r7, #12]
 8004db2:	f000 fe28 	bl	8005a06 <UART_WaitOnFlagUntilTimeout>
 8004db6:	4603      	mov	r3, r0
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d001      	beq.n	8004dc0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004dbc:	2303      	movs	r3, #3
 8004dbe:	e005      	b.n	8004dcc <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2220      	movs	r2, #32
 8004dc4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	e000      	b.n	8004dcc <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004dca:	2302      	movs	r3, #2
  }
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3720      	adds	r7, #32
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b0ba      	sub	sp, #232	; 0xe8
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	69db      	ldr	r3, [r3, #28]
 8004de2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004dfa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004dfe:	f640 030f 	movw	r3, #2063	; 0x80f
 8004e02:	4013      	ands	r3, r2
 8004e04:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004e08:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d115      	bne.n	8004e3c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004e10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e14:	f003 0320 	and.w	r3, r3, #32
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d00f      	beq.n	8004e3c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004e1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e20:	f003 0320 	and.w	r3, r3, #32
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d009      	beq.n	8004e3c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	f000 82a6 	beq.w	800537e <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	4798      	blx	r3
      }
      return;
 8004e3a:	e2a0      	b.n	800537e <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004e3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	f000 8117 	beq.w	8005074 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004e46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e4a:	f003 0301 	and.w	r3, r3, #1
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d106      	bne.n	8004e60 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004e52:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004e56:	4b85      	ldr	r3, [pc, #532]	; (800506c <HAL_UART_IRQHandler+0x298>)
 8004e58:	4013      	ands	r3, r2
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	f000 810a 	beq.w	8005074 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004e60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e64:	f003 0301 	and.w	r3, r3, #1
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d011      	beq.n	8004e90 <HAL_UART_IRQHandler+0xbc>
 8004e6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d00b      	beq.n	8004e90 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e86:	f043 0201 	orr.w	r2, r3, #1
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004e90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e94:	f003 0302 	and.w	r3, r3, #2
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d011      	beq.n	8004ec0 <HAL_UART_IRQHandler+0xec>
 8004e9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ea0:	f003 0301 	and.w	r3, r3, #1
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d00b      	beq.n	8004ec0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	2202      	movs	r2, #2
 8004eae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004eb6:	f043 0204 	orr.w	r2, r3, #4
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004ec0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ec4:	f003 0304 	and.w	r3, r3, #4
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d011      	beq.n	8004ef0 <HAL_UART_IRQHandler+0x11c>
 8004ecc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ed0:	f003 0301 	and.w	r3, r3, #1
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d00b      	beq.n	8004ef0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	2204      	movs	r2, #4
 8004ede:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ee6:	f043 0202 	orr.w	r2, r3, #2
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004ef0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ef4:	f003 0308 	and.w	r3, r3, #8
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d017      	beq.n	8004f2c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004efc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f00:	f003 0320 	and.w	r3, r3, #32
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d105      	bne.n	8004f14 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004f08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f0c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d00b      	beq.n	8004f2c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	2208      	movs	r2, #8
 8004f1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f22:	f043 0208 	orr.w	r2, r3, #8
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004f2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d012      	beq.n	8004f5e <HAL_UART_IRQHandler+0x18a>
 8004f38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f3c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d00c      	beq.n	8004f5e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f4c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f54:	f043 0220 	orr.w	r2, r3, #32
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	f000 820c 	beq.w	8005382 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004f6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f6e:	f003 0320 	and.w	r3, r3, #32
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d00d      	beq.n	8004f92 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004f76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f7a:	f003 0320 	and.w	r3, r3, #32
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d007      	beq.n	8004f92 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d003      	beq.n	8004f92 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f98:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fa6:	2b40      	cmp	r3, #64	; 0x40
 8004fa8:	d005      	beq.n	8004fb6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004faa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004fae:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d04f      	beq.n	8005056 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f000 fde9 	bl	8005b8e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fc6:	2b40      	cmp	r3, #64	; 0x40
 8004fc8:	d141      	bne.n	800504e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	3308      	adds	r3, #8
 8004fd0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004fd8:	e853 3f00 	ldrex	r3, [r3]
 8004fdc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004fe0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004fe4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fe8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	3308      	adds	r3, #8
 8004ff2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004ff6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004ffa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ffe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005002:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005006:	e841 2300 	strex	r3, r2, [r1]
 800500a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800500e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005012:	2b00      	cmp	r3, #0
 8005014:	d1d9      	bne.n	8004fca <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800501a:	2b00      	cmp	r3, #0
 800501c:	d013      	beq.n	8005046 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005022:	4a13      	ldr	r2, [pc, #76]	; (8005070 <HAL_UART_IRQHandler+0x29c>)
 8005024:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800502a:	4618      	mov	r0, r3
 800502c:	f7fc ff7d 	bl	8001f2a <HAL_DMA_Abort_IT>
 8005030:	4603      	mov	r3, r0
 8005032:	2b00      	cmp	r3, #0
 8005034:	d017      	beq.n	8005066 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800503a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005040:	4610      	mov	r0, r2
 8005042:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005044:	e00f      	b.n	8005066 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f000 f9b0 	bl	80053ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800504c:	e00b      	b.n	8005066 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f000 f9ac 	bl	80053ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005054:	e007      	b.n	8005066 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f000 f9a8 	bl	80053ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005064:	e18d      	b.n	8005382 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005066:	bf00      	nop
    return;
 8005068:	e18b      	b.n	8005382 <HAL_UART_IRQHandler+0x5ae>
 800506a:	bf00      	nop
 800506c:	04000120 	.word	0x04000120
 8005070:	08005c55 	.word	0x08005c55

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005078:	2b01      	cmp	r3, #1
 800507a:	f040 8146 	bne.w	800530a <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800507e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005082:	f003 0310 	and.w	r3, r3, #16
 8005086:	2b00      	cmp	r3, #0
 8005088:	f000 813f 	beq.w	800530a <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800508c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005090:	f003 0310 	and.w	r3, r3, #16
 8005094:	2b00      	cmp	r3, #0
 8005096:	f000 8138 	beq.w	800530a <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	2210      	movs	r2, #16
 80050a0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ac:	2b40      	cmp	r3, #64	; 0x40
 80050ae:	f040 80b4 	bne.w	800521a <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80050be:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	f000 815f 	beq.w	8005386 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80050ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80050d2:	429a      	cmp	r2, r3
 80050d4:	f080 8157 	bcs.w	8005386 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80050de:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 0320 	and.w	r3, r3, #32
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	f040 8085 	bne.w	80051fe <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005100:	e853 3f00 	ldrex	r3, [r3]
 8005104:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005108:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800510c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005110:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	461a      	mov	r2, r3
 800511a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800511e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005122:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005126:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800512a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800512e:	e841 2300 	strex	r3, r2, [r1]
 8005132:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005136:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800513a:	2b00      	cmp	r3, #0
 800513c:	d1da      	bne.n	80050f4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	3308      	adds	r3, #8
 8005144:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005146:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005148:	e853 3f00 	ldrex	r3, [r3]
 800514c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800514e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005150:	f023 0301 	bic.w	r3, r3, #1
 8005154:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	3308      	adds	r3, #8
 800515e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005162:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005166:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005168:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800516a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800516e:	e841 2300 	strex	r3, r2, [r1]
 8005172:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005174:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005176:	2b00      	cmp	r3, #0
 8005178:	d1e1      	bne.n	800513e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	3308      	adds	r3, #8
 8005180:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005182:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005184:	e853 3f00 	ldrex	r3, [r3]
 8005188:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800518a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800518c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005190:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	3308      	adds	r3, #8
 800519a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800519e:	66fa      	str	r2, [r7, #108]	; 0x6c
 80051a0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80051a4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80051a6:	e841 2300 	strex	r3, r2, [r1]
 80051aa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80051ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d1e3      	bne.n	800517a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2220      	movs	r2, #32
 80051b6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051c6:	e853 3f00 	ldrex	r3, [r3]
 80051ca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80051cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051ce:	f023 0310 	bic.w	r3, r3, #16
 80051d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	461a      	mov	r2, r3
 80051dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80051e0:	65bb      	str	r3, [r7, #88]	; 0x58
 80051e2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80051e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80051e8:	e841 2300 	strex	r3, r2, [r1]
 80051ec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80051ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d1e4      	bne.n	80051be <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051f8:	4618      	mov	r0, r3
 80051fa:	f7fc fe58 	bl	8001eae <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800520a:	b29b      	uxth	r3, r3
 800520c:	1ad3      	subs	r3, r2, r3
 800520e:	b29b      	uxth	r3, r3
 8005210:	4619      	mov	r1, r3
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f000 f8d4 	bl	80053c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005218:	e0b5      	b.n	8005386 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005226:	b29b      	uxth	r3, r3
 8005228:	1ad3      	subs	r3, r2, r3
 800522a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005234:	b29b      	uxth	r3, r3
 8005236:	2b00      	cmp	r3, #0
 8005238:	f000 80a7 	beq.w	800538a <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800523c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005240:	2b00      	cmp	r3, #0
 8005242:	f000 80a2 	beq.w	800538a <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800524c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800524e:	e853 3f00 	ldrex	r3, [r3]
 8005252:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005256:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800525a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	461a      	mov	r2, r3
 8005264:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005268:	647b      	str	r3, [r7, #68]	; 0x44
 800526a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800526c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800526e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005270:	e841 2300 	strex	r3, r2, [r1]
 8005274:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005276:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005278:	2b00      	cmp	r3, #0
 800527a:	d1e4      	bne.n	8005246 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	3308      	adds	r3, #8
 8005282:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005286:	e853 3f00 	ldrex	r3, [r3]
 800528a:	623b      	str	r3, [r7, #32]
   return(result);
 800528c:	6a3b      	ldr	r3, [r7, #32]
 800528e:	f023 0301 	bic.w	r3, r3, #1
 8005292:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	3308      	adds	r3, #8
 800529c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80052a0:	633a      	str	r2, [r7, #48]	; 0x30
 80052a2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80052a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052a8:	e841 2300 	strex	r3, r2, [r1]
 80052ac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80052ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d1e3      	bne.n	800527c <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2220      	movs	r2, #32
 80052b8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2200      	movs	r2, #0
 80052c4:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	e853 3f00 	ldrex	r3, [r3]
 80052d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f023 0310 	bic.w	r3, r3, #16
 80052da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	461a      	mov	r2, r3
 80052e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80052e8:	61fb      	str	r3, [r7, #28]
 80052ea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ec:	69b9      	ldr	r1, [r7, #24]
 80052ee:	69fa      	ldr	r2, [r7, #28]
 80052f0:	e841 2300 	strex	r3, r2, [r1]
 80052f4:	617b      	str	r3, [r7, #20]
   return(result);
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d1e4      	bne.n	80052c6 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80052fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005300:	4619      	mov	r1, r3
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f000 f85c 	bl	80053c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005308:	e03f      	b.n	800538a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800530a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800530e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005312:	2b00      	cmp	r3, #0
 8005314:	d00e      	beq.n	8005334 <HAL_UART_IRQHandler+0x560>
 8005316:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800531a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800531e:	2b00      	cmp	r3, #0
 8005320:	d008      	beq.n	8005334 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800532a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f000 fcd1 	bl	8005cd4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005332:	e02d      	b.n	8005390 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005334:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005338:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800533c:	2b00      	cmp	r3, #0
 800533e:	d00e      	beq.n	800535e <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005340:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005344:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005348:	2b00      	cmp	r3, #0
 800534a:	d008      	beq.n	800535e <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005350:	2b00      	cmp	r3, #0
 8005352:	d01c      	beq.n	800538e <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	4798      	blx	r3
    }
    return;
 800535c:	e017      	b.n	800538e <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800535e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005366:	2b00      	cmp	r3, #0
 8005368:	d012      	beq.n	8005390 <HAL_UART_IRQHandler+0x5bc>
 800536a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800536e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005372:	2b00      	cmp	r3, #0
 8005374:	d00c      	beq.n	8005390 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f000 fc82 	bl	8005c80 <UART_EndTransmit_IT>
    return;
 800537c:	e008      	b.n	8005390 <HAL_UART_IRQHandler+0x5bc>
      return;
 800537e:	bf00      	nop
 8005380:	e006      	b.n	8005390 <HAL_UART_IRQHandler+0x5bc>
    return;
 8005382:	bf00      	nop
 8005384:	e004      	b.n	8005390 <HAL_UART_IRQHandler+0x5bc>
      return;
 8005386:	bf00      	nop
 8005388:	e002      	b.n	8005390 <HAL_UART_IRQHandler+0x5bc>
      return;
 800538a:	bf00      	nop
 800538c:	e000      	b.n	8005390 <HAL_UART_IRQHandler+0x5bc>
    return;
 800538e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005390:	37e8      	adds	r7, #232	; 0xe8
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}
 8005396:	bf00      	nop

08005398 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005398:	b480      	push	{r7}
 800539a:	b083      	sub	sp, #12
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80053a0:	bf00      	nop
 80053a2:	370c      	adds	r7, #12
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr

080053ac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b083      	sub	sp, #12
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80053b4:	bf00      	nop
 80053b6:	370c      	adds	r7, #12
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr

080053c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b083      	sub	sp, #12
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	460b      	mov	r3, r1
 80053ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80053cc:	bf00      	nop
 80053ce:	370c      	adds	r7, #12
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr

080053d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80053dc:	b08a      	sub	sp, #40	; 0x28
 80053de:	af00      	add	r7, sp, #0
 80053e0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80053e2:	2300      	movs	r3, #0
 80053e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	689a      	ldr	r2, [r3, #8]
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	691b      	ldr	r3, [r3, #16]
 80053f0:	431a      	orrs	r2, r3
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	695b      	ldr	r3, [r3, #20]
 80053f6:	431a      	orrs	r2, r3
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	69db      	ldr	r3, [r3, #28]
 80053fc:	4313      	orrs	r3, r2
 80053fe:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	4bb4      	ldr	r3, [pc, #720]	; (80056d8 <UART_SetConfig+0x300>)
 8005408:	4013      	ands	r3, r2
 800540a:	68fa      	ldr	r2, [r7, #12]
 800540c:	6812      	ldr	r2, [r2, #0]
 800540e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005410:	430b      	orrs	r3, r1
 8005412:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	68da      	ldr	r2, [r3, #12]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	430a      	orrs	r2, r1
 8005428:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	699b      	ldr	r3, [r3, #24]
 800542e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4aa9      	ldr	r2, [pc, #676]	; (80056dc <UART_SetConfig+0x304>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d004      	beq.n	8005444 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	6a1b      	ldr	r3, [r3, #32]
 800543e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005440:	4313      	orrs	r3, r2
 8005442:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005454:	430a      	orrs	r2, r1
 8005456:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4aa0      	ldr	r2, [pc, #640]	; (80056e0 <UART_SetConfig+0x308>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d126      	bne.n	80054b0 <UART_SetConfig+0xd8>
 8005462:	4ba0      	ldr	r3, [pc, #640]	; (80056e4 <UART_SetConfig+0x30c>)
 8005464:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005468:	f003 0303 	and.w	r3, r3, #3
 800546c:	2b03      	cmp	r3, #3
 800546e:	d81b      	bhi.n	80054a8 <UART_SetConfig+0xd0>
 8005470:	a201      	add	r2, pc, #4	; (adr r2, 8005478 <UART_SetConfig+0xa0>)
 8005472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005476:	bf00      	nop
 8005478:	08005489 	.word	0x08005489
 800547c:	08005499 	.word	0x08005499
 8005480:	08005491 	.word	0x08005491
 8005484:	080054a1 	.word	0x080054a1
 8005488:	2301      	movs	r3, #1
 800548a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800548e:	e080      	b.n	8005592 <UART_SetConfig+0x1ba>
 8005490:	2302      	movs	r3, #2
 8005492:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005496:	e07c      	b.n	8005592 <UART_SetConfig+0x1ba>
 8005498:	2304      	movs	r3, #4
 800549a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800549e:	e078      	b.n	8005592 <UART_SetConfig+0x1ba>
 80054a0:	2308      	movs	r3, #8
 80054a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054a6:	e074      	b.n	8005592 <UART_SetConfig+0x1ba>
 80054a8:	2310      	movs	r3, #16
 80054aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054ae:	e070      	b.n	8005592 <UART_SetConfig+0x1ba>
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a8c      	ldr	r2, [pc, #560]	; (80056e8 <UART_SetConfig+0x310>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d138      	bne.n	800552c <UART_SetConfig+0x154>
 80054ba:	4b8a      	ldr	r3, [pc, #552]	; (80056e4 <UART_SetConfig+0x30c>)
 80054bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054c0:	f003 030c 	and.w	r3, r3, #12
 80054c4:	2b0c      	cmp	r3, #12
 80054c6:	d82d      	bhi.n	8005524 <UART_SetConfig+0x14c>
 80054c8:	a201      	add	r2, pc, #4	; (adr r2, 80054d0 <UART_SetConfig+0xf8>)
 80054ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ce:	bf00      	nop
 80054d0:	08005505 	.word	0x08005505
 80054d4:	08005525 	.word	0x08005525
 80054d8:	08005525 	.word	0x08005525
 80054dc:	08005525 	.word	0x08005525
 80054e0:	08005515 	.word	0x08005515
 80054e4:	08005525 	.word	0x08005525
 80054e8:	08005525 	.word	0x08005525
 80054ec:	08005525 	.word	0x08005525
 80054f0:	0800550d 	.word	0x0800550d
 80054f4:	08005525 	.word	0x08005525
 80054f8:	08005525 	.word	0x08005525
 80054fc:	08005525 	.word	0x08005525
 8005500:	0800551d 	.word	0x0800551d
 8005504:	2300      	movs	r3, #0
 8005506:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800550a:	e042      	b.n	8005592 <UART_SetConfig+0x1ba>
 800550c:	2302      	movs	r3, #2
 800550e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005512:	e03e      	b.n	8005592 <UART_SetConfig+0x1ba>
 8005514:	2304      	movs	r3, #4
 8005516:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800551a:	e03a      	b.n	8005592 <UART_SetConfig+0x1ba>
 800551c:	2308      	movs	r3, #8
 800551e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005522:	e036      	b.n	8005592 <UART_SetConfig+0x1ba>
 8005524:	2310      	movs	r3, #16
 8005526:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800552a:	e032      	b.n	8005592 <UART_SetConfig+0x1ba>
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a6a      	ldr	r2, [pc, #424]	; (80056dc <UART_SetConfig+0x304>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d12a      	bne.n	800558c <UART_SetConfig+0x1b4>
 8005536:	4b6b      	ldr	r3, [pc, #428]	; (80056e4 <UART_SetConfig+0x30c>)
 8005538:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800553c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005540:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005544:	d01a      	beq.n	800557c <UART_SetConfig+0x1a4>
 8005546:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800554a:	d81b      	bhi.n	8005584 <UART_SetConfig+0x1ac>
 800554c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005550:	d00c      	beq.n	800556c <UART_SetConfig+0x194>
 8005552:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005556:	d815      	bhi.n	8005584 <UART_SetConfig+0x1ac>
 8005558:	2b00      	cmp	r3, #0
 800555a:	d003      	beq.n	8005564 <UART_SetConfig+0x18c>
 800555c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005560:	d008      	beq.n	8005574 <UART_SetConfig+0x19c>
 8005562:	e00f      	b.n	8005584 <UART_SetConfig+0x1ac>
 8005564:	2300      	movs	r3, #0
 8005566:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800556a:	e012      	b.n	8005592 <UART_SetConfig+0x1ba>
 800556c:	2302      	movs	r3, #2
 800556e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005572:	e00e      	b.n	8005592 <UART_SetConfig+0x1ba>
 8005574:	2304      	movs	r3, #4
 8005576:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800557a:	e00a      	b.n	8005592 <UART_SetConfig+0x1ba>
 800557c:	2308      	movs	r3, #8
 800557e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005582:	e006      	b.n	8005592 <UART_SetConfig+0x1ba>
 8005584:	2310      	movs	r3, #16
 8005586:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800558a:	e002      	b.n	8005592 <UART_SetConfig+0x1ba>
 800558c:	2310      	movs	r3, #16
 800558e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a51      	ldr	r2, [pc, #324]	; (80056dc <UART_SetConfig+0x304>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d17a      	bne.n	8005692 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800559c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80055a0:	2b08      	cmp	r3, #8
 80055a2:	d824      	bhi.n	80055ee <UART_SetConfig+0x216>
 80055a4:	a201      	add	r2, pc, #4	; (adr r2, 80055ac <UART_SetConfig+0x1d4>)
 80055a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055aa:	bf00      	nop
 80055ac:	080055d1 	.word	0x080055d1
 80055b0:	080055ef 	.word	0x080055ef
 80055b4:	080055d9 	.word	0x080055d9
 80055b8:	080055ef 	.word	0x080055ef
 80055bc:	080055df 	.word	0x080055df
 80055c0:	080055ef 	.word	0x080055ef
 80055c4:	080055ef 	.word	0x080055ef
 80055c8:	080055ef 	.word	0x080055ef
 80055cc:	080055e7 	.word	0x080055e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055d0:	f7fe ff9a 	bl	8004508 <HAL_RCC_GetPCLK1Freq>
 80055d4:	61f8      	str	r0, [r7, #28]
        break;
 80055d6:	e010      	b.n	80055fa <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055d8:	4b44      	ldr	r3, [pc, #272]	; (80056ec <UART_SetConfig+0x314>)
 80055da:	61fb      	str	r3, [r7, #28]
        break;
 80055dc:	e00d      	b.n	80055fa <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055de:	f7fe fefb 	bl	80043d8 <HAL_RCC_GetSysClockFreq>
 80055e2:	61f8      	str	r0, [r7, #28]
        break;
 80055e4:	e009      	b.n	80055fa <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055ea:	61fb      	str	r3, [r7, #28]
        break;
 80055ec:	e005      	b.n	80055fa <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80055ee:	2300      	movs	r3, #0
 80055f0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80055f8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80055fa:	69fb      	ldr	r3, [r7, #28]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	f000 8107 	beq.w	8005810 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	685a      	ldr	r2, [r3, #4]
 8005606:	4613      	mov	r3, r2
 8005608:	005b      	lsls	r3, r3, #1
 800560a:	4413      	add	r3, r2
 800560c:	69fa      	ldr	r2, [r7, #28]
 800560e:	429a      	cmp	r2, r3
 8005610:	d305      	bcc.n	800561e <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005618:	69fa      	ldr	r2, [r7, #28]
 800561a:	429a      	cmp	r2, r3
 800561c:	d903      	bls.n	8005626 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005624:	e0f4      	b.n	8005810 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005626:	69fb      	ldr	r3, [r7, #28]
 8005628:	2200      	movs	r2, #0
 800562a:	461c      	mov	r4, r3
 800562c:	4615      	mov	r5, r2
 800562e:	f04f 0200 	mov.w	r2, #0
 8005632:	f04f 0300 	mov.w	r3, #0
 8005636:	022b      	lsls	r3, r5, #8
 8005638:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800563c:	0222      	lsls	r2, r4, #8
 800563e:	68f9      	ldr	r1, [r7, #12]
 8005640:	6849      	ldr	r1, [r1, #4]
 8005642:	0849      	lsrs	r1, r1, #1
 8005644:	2000      	movs	r0, #0
 8005646:	4688      	mov	r8, r1
 8005648:	4681      	mov	r9, r0
 800564a:	eb12 0a08 	adds.w	sl, r2, r8
 800564e:	eb43 0b09 	adc.w	fp, r3, r9
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	2200      	movs	r2, #0
 8005658:	603b      	str	r3, [r7, #0]
 800565a:	607a      	str	r2, [r7, #4]
 800565c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005660:	4650      	mov	r0, sl
 8005662:	4659      	mov	r1, fp
 8005664:	f7fb faf0 	bl	8000c48 <__aeabi_uldivmod>
 8005668:	4602      	mov	r2, r0
 800566a:	460b      	mov	r3, r1
 800566c:	4613      	mov	r3, r2
 800566e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005670:	69bb      	ldr	r3, [r7, #24]
 8005672:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005676:	d308      	bcc.n	800568a <UART_SetConfig+0x2b2>
 8005678:	69bb      	ldr	r3, [r7, #24]
 800567a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800567e:	d204      	bcs.n	800568a <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	69ba      	ldr	r2, [r7, #24]
 8005686:	60da      	str	r2, [r3, #12]
 8005688:	e0c2      	b.n	8005810 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005690:	e0be      	b.n	8005810 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	69db      	ldr	r3, [r3, #28]
 8005696:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800569a:	d16a      	bne.n	8005772 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 800569c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80056a0:	2b08      	cmp	r3, #8
 80056a2:	d834      	bhi.n	800570e <UART_SetConfig+0x336>
 80056a4:	a201      	add	r2, pc, #4	; (adr r2, 80056ac <UART_SetConfig+0x2d4>)
 80056a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056aa:	bf00      	nop
 80056ac:	080056d1 	.word	0x080056d1
 80056b0:	080056f1 	.word	0x080056f1
 80056b4:	080056f9 	.word	0x080056f9
 80056b8:	0800570f 	.word	0x0800570f
 80056bc:	080056ff 	.word	0x080056ff
 80056c0:	0800570f 	.word	0x0800570f
 80056c4:	0800570f 	.word	0x0800570f
 80056c8:	0800570f 	.word	0x0800570f
 80056cc:	08005707 	.word	0x08005707
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056d0:	f7fe ff1a 	bl	8004508 <HAL_RCC_GetPCLK1Freq>
 80056d4:	61f8      	str	r0, [r7, #28]
        break;
 80056d6:	e020      	b.n	800571a <UART_SetConfig+0x342>
 80056d8:	efff69f3 	.word	0xefff69f3
 80056dc:	40008000 	.word	0x40008000
 80056e0:	40013800 	.word	0x40013800
 80056e4:	40021000 	.word	0x40021000
 80056e8:	40004400 	.word	0x40004400
 80056ec:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056f0:	f7fe ff20 	bl	8004534 <HAL_RCC_GetPCLK2Freq>
 80056f4:	61f8      	str	r0, [r7, #28]
        break;
 80056f6:	e010      	b.n	800571a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056f8:	4b4c      	ldr	r3, [pc, #304]	; (800582c <UART_SetConfig+0x454>)
 80056fa:	61fb      	str	r3, [r7, #28]
        break;
 80056fc:	e00d      	b.n	800571a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056fe:	f7fe fe6b 	bl	80043d8 <HAL_RCC_GetSysClockFreq>
 8005702:	61f8      	str	r0, [r7, #28]
        break;
 8005704:	e009      	b.n	800571a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005706:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800570a:	61fb      	str	r3, [r7, #28]
        break;
 800570c:	e005      	b.n	800571a <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800570e:	2300      	movs	r3, #0
 8005710:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005718:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d077      	beq.n	8005810 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005720:	69fb      	ldr	r3, [r7, #28]
 8005722:	005a      	lsls	r2, r3, #1
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	085b      	lsrs	r3, r3, #1
 800572a:	441a      	add	r2, r3
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	fbb2 f3f3 	udiv	r3, r2, r3
 8005734:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005736:	69bb      	ldr	r3, [r7, #24]
 8005738:	2b0f      	cmp	r3, #15
 800573a:	d916      	bls.n	800576a <UART_SetConfig+0x392>
 800573c:	69bb      	ldr	r3, [r7, #24]
 800573e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005742:	d212      	bcs.n	800576a <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005744:	69bb      	ldr	r3, [r7, #24]
 8005746:	b29b      	uxth	r3, r3
 8005748:	f023 030f 	bic.w	r3, r3, #15
 800574c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800574e:	69bb      	ldr	r3, [r7, #24]
 8005750:	085b      	lsrs	r3, r3, #1
 8005752:	b29b      	uxth	r3, r3
 8005754:	f003 0307 	and.w	r3, r3, #7
 8005758:	b29a      	uxth	r2, r3
 800575a:	8afb      	ldrh	r3, [r7, #22]
 800575c:	4313      	orrs	r3, r2
 800575e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	8afa      	ldrh	r2, [r7, #22]
 8005766:	60da      	str	r2, [r3, #12]
 8005768:	e052      	b.n	8005810 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005770:	e04e      	b.n	8005810 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005772:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005776:	2b08      	cmp	r3, #8
 8005778:	d827      	bhi.n	80057ca <UART_SetConfig+0x3f2>
 800577a:	a201      	add	r2, pc, #4	; (adr r2, 8005780 <UART_SetConfig+0x3a8>)
 800577c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005780:	080057a5 	.word	0x080057a5
 8005784:	080057ad 	.word	0x080057ad
 8005788:	080057b5 	.word	0x080057b5
 800578c:	080057cb 	.word	0x080057cb
 8005790:	080057bb 	.word	0x080057bb
 8005794:	080057cb 	.word	0x080057cb
 8005798:	080057cb 	.word	0x080057cb
 800579c:	080057cb 	.word	0x080057cb
 80057a0:	080057c3 	.word	0x080057c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057a4:	f7fe feb0 	bl	8004508 <HAL_RCC_GetPCLK1Freq>
 80057a8:	61f8      	str	r0, [r7, #28]
        break;
 80057aa:	e014      	b.n	80057d6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057ac:	f7fe fec2 	bl	8004534 <HAL_RCC_GetPCLK2Freq>
 80057b0:	61f8      	str	r0, [r7, #28]
        break;
 80057b2:	e010      	b.n	80057d6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057b4:	4b1d      	ldr	r3, [pc, #116]	; (800582c <UART_SetConfig+0x454>)
 80057b6:	61fb      	str	r3, [r7, #28]
        break;
 80057b8:	e00d      	b.n	80057d6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057ba:	f7fe fe0d 	bl	80043d8 <HAL_RCC_GetSysClockFreq>
 80057be:	61f8      	str	r0, [r7, #28]
        break;
 80057c0:	e009      	b.n	80057d6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057c6:	61fb      	str	r3, [r7, #28]
        break;
 80057c8:	e005      	b.n	80057d6 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80057ca:	2300      	movs	r3, #0
 80057cc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80057d4:	bf00      	nop
    }

    if (pclk != 0U)
 80057d6:	69fb      	ldr	r3, [r7, #28]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d019      	beq.n	8005810 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	085a      	lsrs	r2, r3, #1
 80057e2:	69fb      	ldr	r3, [r7, #28]
 80057e4:	441a      	add	r2, r3
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80057ee:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057f0:	69bb      	ldr	r3, [r7, #24]
 80057f2:	2b0f      	cmp	r3, #15
 80057f4:	d909      	bls.n	800580a <UART_SetConfig+0x432>
 80057f6:	69bb      	ldr	r3, [r7, #24]
 80057f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057fc:	d205      	bcs.n	800580a <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	b29a      	uxth	r2, r3
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	60da      	str	r2, [r3, #12]
 8005808:	e002      	b.n	8005810 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2200      	movs	r2, #0
 8005814:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2200      	movs	r2, #0
 800581a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800581c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005820:	4618      	mov	r0, r3
 8005822:	3728      	adds	r7, #40	; 0x28
 8005824:	46bd      	mov	sp, r7
 8005826:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800582a:	bf00      	nop
 800582c:	00f42400 	.word	0x00f42400

08005830 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005830:	b480      	push	{r7}
 8005832:	b083      	sub	sp, #12
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583c:	f003 0301 	and.w	r3, r3, #1
 8005840:	2b00      	cmp	r3, #0
 8005842:	d00a      	beq.n	800585a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	430a      	orrs	r2, r1
 8005858:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585e:	f003 0302 	and.w	r3, r3, #2
 8005862:	2b00      	cmp	r3, #0
 8005864:	d00a      	beq.n	800587c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	430a      	orrs	r2, r1
 800587a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005880:	f003 0304 	and.w	r3, r3, #4
 8005884:	2b00      	cmp	r3, #0
 8005886:	d00a      	beq.n	800589e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	430a      	orrs	r2, r1
 800589c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a2:	f003 0308 	and.w	r3, r3, #8
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d00a      	beq.n	80058c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	430a      	orrs	r2, r1
 80058be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c4:	f003 0310 	and.w	r3, r3, #16
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d00a      	beq.n	80058e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	430a      	orrs	r2, r1
 80058e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e6:	f003 0320 	and.w	r3, r3, #32
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d00a      	beq.n	8005904 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	430a      	orrs	r2, r1
 8005902:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800590c:	2b00      	cmp	r3, #0
 800590e:	d01a      	beq.n	8005946 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	430a      	orrs	r2, r1
 8005924:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800592a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800592e:	d10a      	bne.n	8005946 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	430a      	orrs	r2, r1
 8005944:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800594a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800594e:	2b00      	cmp	r3, #0
 8005950:	d00a      	beq.n	8005968 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	430a      	orrs	r2, r1
 8005966:	605a      	str	r2, [r3, #4]
  }
}
 8005968:	bf00      	nop
 800596a:	370c      	adds	r7, #12
 800596c:	46bd      	mov	sp, r7
 800596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005972:	4770      	bx	lr

08005974 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b086      	sub	sp, #24
 8005978:	af02      	add	r7, sp, #8
 800597a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005984:	f7fc f952 	bl	8001c2c <HAL_GetTick>
 8005988:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f003 0308 	and.w	r3, r3, #8
 8005994:	2b08      	cmp	r3, #8
 8005996:	d10e      	bne.n	80059b6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005998:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800599c:	9300      	str	r3, [sp, #0]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2200      	movs	r2, #0
 80059a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f000 f82d 	bl	8005a06 <UART_WaitOnFlagUntilTimeout>
 80059ac:	4603      	mov	r3, r0
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d001      	beq.n	80059b6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059b2:	2303      	movs	r3, #3
 80059b4:	e023      	b.n	80059fe <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f003 0304 	and.w	r3, r3, #4
 80059c0:	2b04      	cmp	r3, #4
 80059c2:	d10e      	bne.n	80059e2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80059c8:	9300      	str	r3, [sp, #0]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2200      	movs	r2, #0
 80059ce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f000 f817 	bl	8005a06 <UART_WaitOnFlagUntilTimeout>
 80059d8:	4603      	mov	r3, r0
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d001      	beq.n	80059e2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059de:	2303      	movs	r3, #3
 80059e0:	e00d      	b.n	80059fe <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2220      	movs	r2, #32
 80059e6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2220      	movs	r2, #32
 80059ec:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2200      	movs	r2, #0
 80059f2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2200      	movs	r2, #0
 80059f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80059fc:	2300      	movs	r3, #0
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3710      	adds	r7, #16
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}

08005a06 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a06:	b580      	push	{r7, lr}
 8005a08:	b09c      	sub	sp, #112	; 0x70
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	60f8      	str	r0, [r7, #12]
 8005a0e:	60b9      	str	r1, [r7, #8]
 8005a10:	603b      	str	r3, [r7, #0]
 8005a12:	4613      	mov	r3, r2
 8005a14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a16:	e0a5      	b.n	8005b64 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a1e:	f000 80a1 	beq.w	8005b64 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a22:	f7fc f903 	bl	8001c2c <HAL_GetTick>
 8005a26:	4602      	mov	r2, r0
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	1ad3      	subs	r3, r2, r3
 8005a2c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d302      	bcc.n	8005a38 <UART_WaitOnFlagUntilTimeout+0x32>
 8005a32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d13e      	bne.n	8005ab6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a40:	e853 3f00 	ldrex	r3, [r3]
 8005a44:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005a46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a48:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005a4c:	667b      	str	r3, [r7, #100]	; 0x64
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	461a      	mov	r2, r3
 8005a54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a56:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a58:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a5a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005a5c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005a5e:	e841 2300 	strex	r3, r2, [r1]
 8005a62:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005a64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d1e6      	bne.n	8005a38 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	3308      	adds	r3, #8
 8005a70:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a74:	e853 3f00 	ldrex	r3, [r3]
 8005a78:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a7c:	f023 0301 	bic.w	r3, r3, #1
 8005a80:	663b      	str	r3, [r7, #96]	; 0x60
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	3308      	adds	r3, #8
 8005a88:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005a8a:	64ba      	str	r2, [r7, #72]	; 0x48
 8005a8c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a8e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005a90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a92:	e841 2300 	strex	r3, r2, [r1]
 8005a96:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005a98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d1e5      	bne.n	8005a6a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2220      	movs	r2, #32
 8005aa2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2220      	movs	r2, #32
 8005aa8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2200      	movs	r2, #0
 8005aae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005ab2:	2303      	movs	r3, #3
 8005ab4:	e067      	b.n	8005b86 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f003 0304 	and.w	r3, r3, #4
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d04f      	beq.n	8005b64 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	69db      	ldr	r3, [r3, #28]
 8005aca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ace:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ad2:	d147      	bne.n	8005b64 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005adc:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ae6:	e853 3f00 	ldrex	r3, [r3]
 8005aea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005af2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	461a      	mov	r2, r3
 8005afa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005afc:	637b      	str	r3, [r7, #52]	; 0x34
 8005afe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b00:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b04:	e841 2300 	strex	r3, r2, [r1]
 8005b08:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d1e6      	bne.n	8005ade <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	3308      	adds	r3, #8
 8005b16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	e853 3f00 	ldrex	r3, [r3]
 8005b1e:	613b      	str	r3, [r7, #16]
   return(result);
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	f023 0301 	bic.w	r3, r3, #1
 8005b26:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	3308      	adds	r3, #8
 8005b2e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005b30:	623a      	str	r2, [r7, #32]
 8005b32:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b34:	69f9      	ldr	r1, [r7, #28]
 8005b36:	6a3a      	ldr	r2, [r7, #32]
 8005b38:	e841 2300 	strex	r3, r2, [r1]
 8005b3c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b3e:	69bb      	ldr	r3, [r7, #24]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d1e5      	bne.n	8005b10 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2220      	movs	r2, #32
 8005b48:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2220      	movs	r2, #32
 8005b4e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2220      	movs	r2, #32
 8005b54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005b60:	2303      	movs	r3, #3
 8005b62:	e010      	b.n	8005b86 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	69da      	ldr	r2, [r3, #28]
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	4013      	ands	r3, r2
 8005b6e:	68ba      	ldr	r2, [r7, #8]
 8005b70:	429a      	cmp	r2, r3
 8005b72:	bf0c      	ite	eq
 8005b74:	2301      	moveq	r3, #1
 8005b76:	2300      	movne	r3, #0
 8005b78:	b2db      	uxtb	r3, r3
 8005b7a:	461a      	mov	r2, r3
 8005b7c:	79fb      	ldrb	r3, [r7, #7]
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	f43f af4a 	beq.w	8005a18 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b84:	2300      	movs	r3, #0
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3770      	adds	r7, #112	; 0x70
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}

08005b8e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b8e:	b480      	push	{r7}
 8005b90:	b095      	sub	sp, #84	; 0x54
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b9e:	e853 3f00 	ldrex	r3, [r3]
 8005ba2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005baa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bb4:	643b      	str	r3, [r7, #64]	; 0x40
 8005bb6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bb8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005bba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005bbc:	e841 2300 	strex	r3, r2, [r1]
 8005bc0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d1e6      	bne.n	8005b96 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	3308      	adds	r3, #8
 8005bce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd0:	6a3b      	ldr	r3, [r7, #32]
 8005bd2:	e853 3f00 	ldrex	r3, [r3]
 8005bd6:	61fb      	str	r3, [r7, #28]
   return(result);
 8005bd8:	69fb      	ldr	r3, [r7, #28]
 8005bda:	f023 0301 	bic.w	r3, r3, #1
 8005bde:	64bb      	str	r3, [r7, #72]	; 0x48
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	3308      	adds	r3, #8
 8005be6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005be8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005bea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005bee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bf0:	e841 2300 	strex	r3, r2, [r1]
 8005bf4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d1e5      	bne.n	8005bc8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d118      	bne.n	8005c36 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	e853 3f00 	ldrex	r3, [r3]
 8005c10:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	f023 0310 	bic.w	r3, r3, #16
 8005c18:	647b      	str	r3, [r7, #68]	; 0x44
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	461a      	mov	r2, r3
 8005c20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c22:	61bb      	str	r3, [r7, #24]
 8005c24:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c26:	6979      	ldr	r1, [r7, #20]
 8005c28:	69ba      	ldr	r2, [r7, #24]
 8005c2a:	e841 2300 	strex	r3, r2, [r1]
 8005c2e:	613b      	str	r3, [r7, #16]
   return(result);
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d1e6      	bne.n	8005c04 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2220      	movs	r2, #32
 8005c3a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005c48:	bf00      	nop
 8005c4a:	3754      	adds	r7, #84	; 0x54
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr

08005c54 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b084      	sub	sp, #16
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c60:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2200      	movs	r2, #0
 8005c66:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c72:	68f8      	ldr	r0, [r7, #12]
 8005c74:	f7ff fb9a 	bl	80053ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c78:	bf00      	nop
 8005c7a:	3710      	adds	r7, #16
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}

08005c80 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b088      	sub	sp, #32
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	e853 3f00 	ldrex	r3, [r3]
 8005c94:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c9c:	61fb      	str	r3, [r7, #28]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	69fb      	ldr	r3, [r7, #28]
 8005ca6:	61bb      	str	r3, [r7, #24]
 8005ca8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005caa:	6979      	ldr	r1, [r7, #20]
 8005cac:	69ba      	ldr	r2, [r7, #24]
 8005cae:	e841 2300 	strex	r3, r2, [r1]
 8005cb2:	613b      	str	r3, [r7, #16]
   return(result);
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d1e6      	bne.n	8005c88 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2220      	movs	r2, #32
 8005cbe:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f7ff fb66 	bl	8005398 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ccc:	bf00      	nop
 8005cce:	3720      	adds	r7, #32
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}

08005cd4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b083      	sub	sp, #12
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005cdc:	bf00      	nop
 8005cde:	370c      	adds	r7, #12
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr

08005ce8 <gcvt>:
 8005ce8:	b530      	push	{r4, r5, lr}
 8005cea:	2200      	movs	r2, #0
 8005cec:	b085      	sub	sp, #20
 8005cee:	460c      	mov	r4, r1
 8005cf0:	4605      	mov	r5, r0
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	ec51 0b10 	vmov	r0, r1, d0
 8005cf8:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005cfc:	f7fa feee 	bl	8000adc <__aeabi_dcmplt>
 8005d00:	ed9d 0b02 	vldr	d0, [sp, #8]
 8005d04:	4622      	mov	r2, r4
 8005d06:	b118      	cbz	r0, 8005d10 <gcvt+0x28>
 8005d08:	232d      	movs	r3, #45	; 0x2d
 8005d0a:	f802 3b01 	strb.w	r3, [r2], #1
 8005d0e:	3d01      	subs	r5, #1
 8005d10:	2300      	movs	r3, #0
 8005d12:	4806      	ldr	r0, [pc, #24]	; (8005d2c <gcvt+0x44>)
 8005d14:	9300      	str	r3, [sp, #0]
 8005d16:	4629      	mov	r1, r5
 8005d18:	2367      	movs	r3, #103	; 0x67
 8005d1a:	6800      	ldr	r0, [r0, #0]
 8005d1c:	f000 f8c0 	bl	8005ea0 <_gcvt>
 8005d20:	2800      	cmp	r0, #0
 8005d22:	bf14      	ite	ne
 8005d24:	4620      	movne	r0, r4
 8005d26:	2000      	moveq	r0, #0
 8005d28:	b005      	add	sp, #20
 8005d2a:	bd30      	pop	{r4, r5, pc}
 8005d2c:	2000000c 	.word	0x2000000c

08005d30 <__errno>:
 8005d30:	4b01      	ldr	r3, [pc, #4]	; (8005d38 <__errno+0x8>)
 8005d32:	6818      	ldr	r0, [r3, #0]
 8005d34:	4770      	bx	lr
 8005d36:	bf00      	nop
 8005d38:	2000000c 	.word	0x2000000c

08005d3c <__libc_init_array>:
 8005d3c:	b570      	push	{r4, r5, r6, lr}
 8005d3e:	4d0d      	ldr	r5, [pc, #52]	; (8005d74 <__libc_init_array+0x38>)
 8005d40:	4c0d      	ldr	r4, [pc, #52]	; (8005d78 <__libc_init_array+0x3c>)
 8005d42:	1b64      	subs	r4, r4, r5
 8005d44:	10a4      	asrs	r4, r4, #2
 8005d46:	2600      	movs	r6, #0
 8005d48:	42a6      	cmp	r6, r4
 8005d4a:	d109      	bne.n	8005d60 <__libc_init_array+0x24>
 8005d4c:	4d0b      	ldr	r5, [pc, #44]	; (8005d7c <__libc_init_array+0x40>)
 8005d4e:	4c0c      	ldr	r4, [pc, #48]	; (8005d80 <__libc_init_array+0x44>)
 8005d50:	f003 fd48 	bl	80097e4 <_init>
 8005d54:	1b64      	subs	r4, r4, r5
 8005d56:	10a4      	asrs	r4, r4, #2
 8005d58:	2600      	movs	r6, #0
 8005d5a:	42a6      	cmp	r6, r4
 8005d5c:	d105      	bne.n	8005d6a <__libc_init_array+0x2e>
 8005d5e:	bd70      	pop	{r4, r5, r6, pc}
 8005d60:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d64:	4798      	blx	r3
 8005d66:	3601      	adds	r6, #1
 8005d68:	e7ee      	b.n	8005d48 <__libc_init_array+0xc>
 8005d6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d6e:	4798      	blx	r3
 8005d70:	3601      	adds	r6, #1
 8005d72:	e7f2      	b.n	8005d5a <__libc_init_array+0x1e>
 8005d74:	08009b80 	.word	0x08009b80
 8005d78:	08009b80 	.word	0x08009b80
 8005d7c:	08009b80 	.word	0x08009b80
 8005d80:	08009b84 	.word	0x08009b84

08005d84 <memcpy>:
 8005d84:	440a      	add	r2, r1
 8005d86:	4291      	cmp	r1, r2
 8005d88:	f100 33ff 	add.w	r3, r0, #4294967295
 8005d8c:	d100      	bne.n	8005d90 <memcpy+0xc>
 8005d8e:	4770      	bx	lr
 8005d90:	b510      	push	{r4, lr}
 8005d92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d9a:	4291      	cmp	r1, r2
 8005d9c:	d1f9      	bne.n	8005d92 <memcpy+0xe>
 8005d9e:	bd10      	pop	{r4, pc}

08005da0 <memset>:
 8005da0:	4402      	add	r2, r0
 8005da2:	4603      	mov	r3, r0
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d100      	bne.n	8005daa <memset+0xa>
 8005da8:	4770      	bx	lr
 8005daa:	f803 1b01 	strb.w	r1, [r3], #1
 8005dae:	e7f9      	b.n	8005da4 <memset+0x4>

08005db0 <print_e>:
 8005db0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005db2:	b087      	sub	sp, #28
 8005db4:	ec43 2b10 	vmov	d0, r2, r3
 8005db8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8005dba:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8005dbe:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8005dc0:	ab04      	add	r3, sp, #16
 8005dc2:	9301      	str	r3, [sp, #4]
 8005dc4:	ab03      	add	r3, sp, #12
 8005dc6:	9300      	str	r3, [sp, #0]
 8005dc8:	1c62      	adds	r2, r4, #1
 8005dca:	ab05      	add	r3, sp, #20
 8005dcc:	460f      	mov	r7, r1
 8005dce:	2102      	movs	r1, #2
 8005dd0:	f000 fe36 	bl	8006a40 <_dtoa_r>
 8005dd4:	9a05      	ldr	r2, [sp, #20]
 8005dd6:	f242 730f 	movw	r3, #9999	; 0x270f
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d105      	bne.n	8005dea <print_e+0x3a>
 8005dde:	4601      	mov	r1, r0
 8005de0:	4638      	mov	r0, r7
 8005de2:	f000 fd79 	bl	80068d8 <strcpy>
 8005de6:	b007      	add	sp, #28
 8005de8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005dea:	463b      	mov	r3, r7
 8005dec:	7801      	ldrb	r1, [r0, #0]
 8005dee:	f803 1b01 	strb.w	r1, [r3], #1
 8005df2:	2c00      	cmp	r4, #0
 8005df4:	bfc8      	it	gt
 8005df6:	2501      	movgt	r5, #1
 8005df8:	212e      	movs	r1, #46	; 0x2e
 8005dfa:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 8005dfe:	b10f      	cbz	r7, 8005e04 <print_e+0x54>
 8005e00:	2c00      	cmp	r4, #0
 8005e02:	dc37      	bgt.n	8005e74 <print_e+0xc4>
 8005e04:	2e67      	cmp	r6, #103	; 0x67
 8005e06:	d046      	beq.n	8005e96 <print_e+0xe6>
 8005e08:	2e47      	cmp	r6, #71	; 0x47
 8005e0a:	d046      	beq.n	8005e9a <print_e+0xea>
 8005e0c:	212e      	movs	r1, #46	; 0x2e
 8005e0e:	2030      	movs	r0, #48	; 0x30
 8005e10:	2c00      	cmp	r4, #0
 8005e12:	dc38      	bgt.n	8005e86 <print_e+0xd6>
 8005e14:	1e51      	subs	r1, r2, #1
 8005e16:	2900      	cmp	r1, #0
 8005e18:	bfb8      	it	lt
 8005e1a:	f1c2 0201 	rsblt	r2, r2, #1
 8005e1e:	4618      	mov	r0, r3
 8005e20:	9105      	str	r1, [sp, #20]
 8005e22:	bfac      	ite	ge
 8005e24:	222b      	movge	r2, #43	; 0x2b
 8005e26:	9205      	strlt	r2, [sp, #20]
 8005e28:	f800 6b02 	strb.w	r6, [r0], #2
 8005e2c:	bfa8      	it	ge
 8005e2e:	705a      	strbge	r2, [r3, #1]
 8005e30:	9a05      	ldr	r2, [sp, #20]
 8005e32:	bfbc      	itt	lt
 8005e34:	212d      	movlt	r1, #45	; 0x2d
 8005e36:	7059      	strblt	r1, [r3, #1]
 8005e38:	2a63      	cmp	r2, #99	; 0x63
 8005e3a:	dd0b      	ble.n	8005e54 <print_e+0xa4>
 8005e3c:	2164      	movs	r1, #100	; 0x64
 8005e3e:	fb92 f1f1 	sdiv	r1, r2, r1
 8005e42:	f101 0430 	add.w	r4, r1, #48	; 0x30
 8005e46:	1cd8      	adds	r0, r3, #3
 8005e48:	709c      	strb	r4, [r3, #2]
 8005e4a:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8005e4e:	fb03 2201 	mla	r2, r3, r1, r2
 8005e52:	9205      	str	r2, [sp, #20]
 8005e54:	9b05      	ldr	r3, [sp, #20]
 8005e56:	220a      	movs	r2, #10
 8005e58:	fb93 f2f2 	sdiv	r2, r3, r2
 8005e5c:	f102 0130 	add.w	r1, r2, #48	; 0x30
 8005e60:	7001      	strb	r1, [r0, #0]
 8005e62:	f06f 0109 	mvn.w	r1, #9
 8005e66:	fb01 3302 	mla	r3, r1, r2, r3
 8005e6a:	3330      	adds	r3, #48	; 0x30
 8005e6c:	7043      	strb	r3, [r0, #1]
 8005e6e:	2300      	movs	r3, #0
 8005e70:	7083      	strb	r3, [r0, #2]
 8005e72:	e7b8      	b.n	8005de6 <print_e+0x36>
 8005e74:	b10d      	cbz	r5, 8005e7a <print_e+0xca>
 8005e76:	f803 1b01 	strb.w	r1, [r3], #1
 8005e7a:	7805      	ldrb	r5, [r0, #0]
 8005e7c:	f803 5b01 	strb.w	r5, [r3], #1
 8005e80:	3c01      	subs	r4, #1
 8005e82:	2500      	movs	r5, #0
 8005e84:	e7b9      	b.n	8005dfa <print_e+0x4a>
 8005e86:	b10d      	cbz	r5, 8005e8c <print_e+0xdc>
 8005e88:	f803 1b01 	strb.w	r1, [r3], #1
 8005e8c:	f803 0b01 	strb.w	r0, [r3], #1
 8005e90:	3c01      	subs	r4, #1
 8005e92:	2500      	movs	r5, #0
 8005e94:	e7bc      	b.n	8005e10 <print_e+0x60>
 8005e96:	2665      	movs	r6, #101	; 0x65
 8005e98:	e7bc      	b.n	8005e14 <print_e+0x64>
 8005e9a:	2645      	movs	r6, #69	; 0x45
 8005e9c:	e7ba      	b.n	8005e14 <print_e+0x64>
	...

08005ea0 <_gcvt>:
 8005ea0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ea4:	ec55 4b10 	vmov	r4, r5, d0
 8005ea8:	b088      	sub	sp, #32
 8005eaa:	4681      	mov	r9, r0
 8005eac:	4688      	mov	r8, r1
 8005eae:	4616      	mov	r6, r2
 8005eb0:	469a      	mov	sl, r3
 8005eb2:	ee10 0a10 	vmov	r0, s0
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	2300      	movs	r3, #0
 8005eba:	4629      	mov	r1, r5
 8005ebc:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8005ebe:	f7fa fe0d 	bl	8000adc <__aeabi_dcmplt>
 8005ec2:	b110      	cbz	r0, 8005eca <_gcvt+0x2a>
 8005ec4:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005ec8:	461d      	mov	r5, r3
 8005eca:	2200      	movs	r2, #0
 8005ecc:	2300      	movs	r3, #0
 8005ece:	4620      	mov	r0, r4
 8005ed0:	4629      	mov	r1, r5
 8005ed2:	f7fa fdf9 	bl	8000ac8 <__aeabi_dcmpeq>
 8005ed6:	b138      	cbz	r0, 8005ee8 <_gcvt+0x48>
 8005ed8:	2330      	movs	r3, #48	; 0x30
 8005eda:	7033      	strb	r3, [r6, #0]
 8005edc:	2300      	movs	r3, #0
 8005ede:	7073      	strb	r3, [r6, #1]
 8005ee0:	4630      	mov	r0, r6
 8005ee2:	b008      	add	sp, #32
 8005ee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ee8:	a34b      	add	r3, pc, #300	; (adr r3, 8006018 <_gcvt+0x178>)
 8005eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eee:	4620      	mov	r0, r4
 8005ef0:	4629      	mov	r1, r5
 8005ef2:	f7fa fdfd 	bl	8000af0 <__aeabi_dcmple>
 8005ef6:	b158      	cbz	r0, 8005f10 <_gcvt+0x70>
 8005ef8:	f108 31ff 	add.w	r1, r8, #4294967295
 8005efc:	9100      	str	r1, [sp, #0]
 8005efe:	e9cd a701 	strd	sl, r7, [sp, #4]
 8005f02:	4622      	mov	r2, r4
 8005f04:	462b      	mov	r3, r5
 8005f06:	4631      	mov	r1, r6
 8005f08:	4648      	mov	r0, r9
 8005f0a:	f7ff ff51 	bl	8005db0 <print_e>
 8005f0e:	e7e7      	b.n	8005ee0 <_gcvt+0x40>
 8005f10:	4640      	mov	r0, r8
 8005f12:	f000 fc09 	bl	8006728 <_mprec_log10>
 8005f16:	4622      	mov	r2, r4
 8005f18:	ec51 0b10 	vmov	r0, r1, d0
 8005f1c:	462b      	mov	r3, r5
 8005f1e:	f7fa fde7 	bl	8000af0 <__aeabi_dcmple>
 8005f22:	2800      	cmp	r0, #0
 8005f24:	d1e8      	bne.n	8005ef8 <_gcvt+0x58>
 8005f26:	ab07      	add	r3, sp, #28
 8005f28:	9301      	str	r3, [sp, #4]
 8005f2a:	ab06      	add	r3, sp, #24
 8005f2c:	9300      	str	r3, [sp, #0]
 8005f2e:	4642      	mov	r2, r8
 8005f30:	ab05      	add	r3, sp, #20
 8005f32:	ec45 4b10 	vmov	d0, r4, r5
 8005f36:	2102      	movs	r1, #2
 8005f38:	4648      	mov	r0, r9
 8005f3a:	f000 fd81 	bl	8006a40 <_dtoa_r>
 8005f3e:	9a05      	ldr	r2, [sp, #20]
 8005f40:	f242 730f 	movw	r3, #9999	; 0x270f
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d00e      	beq.n	8005f66 <_gcvt+0xc6>
 8005f48:	4633      	mov	r3, r6
 8005f4a:	44b0      	add	r8, r6
 8005f4c:	4605      	mov	r5, r0
 8005f4e:	f810 1b01 	ldrb.w	r1, [r0], #1
 8005f52:	9c05      	ldr	r4, [sp, #20]
 8005f54:	eba8 0203 	sub.w	r2, r8, r3
 8005f58:	b109      	cbz	r1, 8005f5e <_gcvt+0xbe>
 8005f5a:	2c00      	cmp	r4, #0
 8005f5c:	dc08      	bgt.n	8005f70 <_gcvt+0xd0>
 8005f5e:	2100      	movs	r1, #0
 8005f60:	f04f 0c30 	mov.w	ip, #48	; 0x30
 8005f64:	e00d      	b.n	8005f82 <_gcvt+0xe2>
 8005f66:	4601      	mov	r1, r0
 8005f68:	4630      	mov	r0, r6
 8005f6a:	f000 fcb5 	bl	80068d8 <strcpy>
 8005f6e:	e7b7      	b.n	8005ee0 <_gcvt+0x40>
 8005f70:	3c01      	subs	r4, #1
 8005f72:	f803 1b01 	strb.w	r1, [r3], #1
 8005f76:	9405      	str	r4, [sp, #20]
 8005f78:	e7e8      	b.n	8005f4c <_gcvt+0xac>
 8005f7a:	f803 cb01 	strb.w	ip, [r3], #1
 8005f7e:	3a01      	subs	r2, #1
 8005f80:	2101      	movs	r1, #1
 8005f82:	2c00      	cmp	r4, #0
 8005f84:	4620      	mov	r0, r4
 8005f86:	dc2a      	bgt.n	8005fde <_gcvt+0x13e>
 8005f88:	b101      	cbz	r1, 8005f8c <_gcvt+0xec>
 8005f8a:	9405      	str	r4, [sp, #20]
 8005f8c:	b90f      	cbnz	r7, 8005f92 <_gcvt+0xf2>
 8005f8e:	7829      	ldrb	r1, [r5, #0]
 8005f90:	b311      	cbz	r1, 8005fd8 <_gcvt+0x138>
 8005f92:	42b3      	cmp	r3, r6
 8005f94:	bf04      	itt	eq
 8005f96:	2130      	moveq	r1, #48	; 0x30
 8005f98:	f803 1b01 	strbeq.w	r1, [r3], #1
 8005f9c:	212e      	movs	r1, #46	; 0x2e
 8005f9e:	7019      	strb	r1, [r3, #0]
 8005fa0:	9905      	ldr	r1, [sp, #20]
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	2400      	movs	r4, #0
 8005fa6:	eba1 0c03 	sub.w	ip, r1, r3
 8005faa:	f04f 0e30 	mov.w	lr, #48	; 0x30
 8005fae:	eb1c 0f00 	cmn.w	ip, r0
 8005fb2:	d41c      	bmi.n	8005fee <_gcvt+0x14e>
 8005fb4:	2900      	cmp	r1, #0
 8005fb6:	f1c1 0000 	rsb	r0, r1, #0
 8005fba:	bfc8      	it	gt
 8005fbc:	2000      	movgt	r0, #0
 8005fbe:	f100 0c01 	add.w	ip, r0, #1
 8005fc2:	4463      	add	r3, ip
 8005fc4:	4401      	add	r1, r0
 8005fc6:	b104      	cbz	r4, 8005fca <_gcvt+0x12a>
 8005fc8:	9105      	str	r1, [sp, #20]
 8005fca:	1e69      	subs	r1, r5, #1
 8005fcc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005fd0:	b108      	cbz	r0, 8005fd6 <_gcvt+0x136>
 8005fd2:	2a00      	cmp	r2, #0
 8005fd4:	dc0f      	bgt.n	8005ff6 <_gcvt+0x156>
 8005fd6:	b9df      	cbnz	r7, 8006010 <_gcvt+0x170>
 8005fd8:	2200      	movs	r2, #0
 8005fda:	701a      	strb	r2, [r3, #0]
 8005fdc:	e780      	b.n	8005ee0 <_gcvt+0x40>
 8005fde:	2a00      	cmp	r2, #0
 8005fe0:	f104 34ff 	add.w	r4, r4, #4294967295
 8005fe4:	dcc9      	bgt.n	8005f7a <_gcvt+0xda>
 8005fe6:	2900      	cmp	r1, #0
 8005fe8:	d0d0      	beq.n	8005f8c <_gcvt+0xec>
 8005fea:	9005      	str	r0, [sp, #20]
 8005fec:	e7ce      	b.n	8005f8c <_gcvt+0xec>
 8005fee:	f800 ef01 	strb.w	lr, [r0, #1]!
 8005ff2:	2401      	movs	r4, #1
 8005ff4:	e7db      	b.n	8005fae <_gcvt+0x10e>
 8005ff6:	f803 0b01 	strb.w	r0, [r3], #1
 8005ffa:	3a01      	subs	r2, #1
 8005ffc:	e7e6      	b.n	8005fcc <_gcvt+0x12c>
 8005ffe:	f801 5b01 	strb.w	r5, [r1], #1
 8006002:	1a60      	subs	r0, r4, r1
 8006004:	2800      	cmp	r0, #0
 8006006:	dcfa      	bgt.n	8005ffe <_gcvt+0x15e>
 8006008:	2a00      	cmp	r2, #0
 800600a:	bfa8      	it	ge
 800600c:	189b      	addge	r3, r3, r2
 800600e:	e7e3      	b.n	8005fd8 <_gcvt+0x138>
 8006010:	4619      	mov	r1, r3
 8006012:	189c      	adds	r4, r3, r2
 8006014:	2530      	movs	r5, #48	; 0x30
 8006016:	e7f4      	b.n	8006002 <_gcvt+0x162>
 8006018:	eb1c432d 	.word	0xeb1c432d
 800601c:	3f1a36e2 	.word	0x3f1a36e2

08006020 <_Balloc>:
 8006020:	b570      	push	{r4, r5, r6, lr}
 8006022:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006024:	4604      	mov	r4, r0
 8006026:	460d      	mov	r5, r1
 8006028:	b976      	cbnz	r6, 8006048 <_Balloc+0x28>
 800602a:	2010      	movs	r0, #16
 800602c:	f001 fb08 	bl	8007640 <malloc>
 8006030:	4602      	mov	r2, r0
 8006032:	6260      	str	r0, [r4, #36]	; 0x24
 8006034:	b920      	cbnz	r0, 8006040 <_Balloc+0x20>
 8006036:	4b18      	ldr	r3, [pc, #96]	; (8006098 <_Balloc+0x78>)
 8006038:	4818      	ldr	r0, [pc, #96]	; (800609c <_Balloc+0x7c>)
 800603a:	2166      	movs	r1, #102	; 0x66
 800603c:	f000 fc54 	bl	80068e8 <__assert_func>
 8006040:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006044:	6006      	str	r6, [r0, #0]
 8006046:	60c6      	str	r6, [r0, #12]
 8006048:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800604a:	68f3      	ldr	r3, [r6, #12]
 800604c:	b183      	cbz	r3, 8006070 <_Balloc+0x50>
 800604e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006050:	68db      	ldr	r3, [r3, #12]
 8006052:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006056:	b9b8      	cbnz	r0, 8006088 <_Balloc+0x68>
 8006058:	2101      	movs	r1, #1
 800605a:	fa01 f605 	lsl.w	r6, r1, r5
 800605e:	1d72      	adds	r2, r6, #5
 8006060:	0092      	lsls	r2, r2, #2
 8006062:	4620      	mov	r0, r4
 8006064:	f000 fb7e 	bl	8006764 <_calloc_r>
 8006068:	b160      	cbz	r0, 8006084 <_Balloc+0x64>
 800606a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800606e:	e00e      	b.n	800608e <_Balloc+0x6e>
 8006070:	2221      	movs	r2, #33	; 0x21
 8006072:	2104      	movs	r1, #4
 8006074:	4620      	mov	r0, r4
 8006076:	f000 fb75 	bl	8006764 <_calloc_r>
 800607a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800607c:	60f0      	str	r0, [r6, #12]
 800607e:	68db      	ldr	r3, [r3, #12]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d1e4      	bne.n	800604e <_Balloc+0x2e>
 8006084:	2000      	movs	r0, #0
 8006086:	bd70      	pop	{r4, r5, r6, pc}
 8006088:	6802      	ldr	r2, [r0, #0]
 800608a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800608e:	2300      	movs	r3, #0
 8006090:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006094:	e7f7      	b.n	8006086 <_Balloc+0x66>
 8006096:	bf00      	nop
 8006098:	0800988c 	.word	0x0800988c
 800609c:	080098a3 	.word	0x080098a3

080060a0 <_Bfree>:
 80060a0:	b570      	push	{r4, r5, r6, lr}
 80060a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80060a4:	4605      	mov	r5, r0
 80060a6:	460c      	mov	r4, r1
 80060a8:	b976      	cbnz	r6, 80060c8 <_Bfree+0x28>
 80060aa:	2010      	movs	r0, #16
 80060ac:	f001 fac8 	bl	8007640 <malloc>
 80060b0:	4602      	mov	r2, r0
 80060b2:	6268      	str	r0, [r5, #36]	; 0x24
 80060b4:	b920      	cbnz	r0, 80060c0 <_Bfree+0x20>
 80060b6:	4b09      	ldr	r3, [pc, #36]	; (80060dc <_Bfree+0x3c>)
 80060b8:	4809      	ldr	r0, [pc, #36]	; (80060e0 <_Bfree+0x40>)
 80060ba:	218a      	movs	r1, #138	; 0x8a
 80060bc:	f000 fc14 	bl	80068e8 <__assert_func>
 80060c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80060c4:	6006      	str	r6, [r0, #0]
 80060c6:	60c6      	str	r6, [r0, #12]
 80060c8:	b13c      	cbz	r4, 80060da <_Bfree+0x3a>
 80060ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80060cc:	6862      	ldr	r2, [r4, #4]
 80060ce:	68db      	ldr	r3, [r3, #12]
 80060d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80060d4:	6021      	str	r1, [r4, #0]
 80060d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80060da:	bd70      	pop	{r4, r5, r6, pc}
 80060dc:	0800988c 	.word	0x0800988c
 80060e0:	080098a3 	.word	0x080098a3

080060e4 <__multadd>:
 80060e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060e8:	690d      	ldr	r5, [r1, #16]
 80060ea:	4607      	mov	r7, r0
 80060ec:	460c      	mov	r4, r1
 80060ee:	461e      	mov	r6, r3
 80060f0:	f101 0c14 	add.w	ip, r1, #20
 80060f4:	2000      	movs	r0, #0
 80060f6:	f8dc 3000 	ldr.w	r3, [ip]
 80060fa:	b299      	uxth	r1, r3
 80060fc:	fb02 6101 	mla	r1, r2, r1, r6
 8006100:	0c1e      	lsrs	r6, r3, #16
 8006102:	0c0b      	lsrs	r3, r1, #16
 8006104:	fb02 3306 	mla	r3, r2, r6, r3
 8006108:	b289      	uxth	r1, r1
 800610a:	3001      	adds	r0, #1
 800610c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006110:	4285      	cmp	r5, r0
 8006112:	f84c 1b04 	str.w	r1, [ip], #4
 8006116:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800611a:	dcec      	bgt.n	80060f6 <__multadd+0x12>
 800611c:	b30e      	cbz	r6, 8006162 <__multadd+0x7e>
 800611e:	68a3      	ldr	r3, [r4, #8]
 8006120:	42ab      	cmp	r3, r5
 8006122:	dc19      	bgt.n	8006158 <__multadd+0x74>
 8006124:	6861      	ldr	r1, [r4, #4]
 8006126:	4638      	mov	r0, r7
 8006128:	3101      	adds	r1, #1
 800612a:	f7ff ff79 	bl	8006020 <_Balloc>
 800612e:	4680      	mov	r8, r0
 8006130:	b928      	cbnz	r0, 800613e <__multadd+0x5a>
 8006132:	4602      	mov	r2, r0
 8006134:	4b0c      	ldr	r3, [pc, #48]	; (8006168 <__multadd+0x84>)
 8006136:	480d      	ldr	r0, [pc, #52]	; (800616c <__multadd+0x88>)
 8006138:	21b5      	movs	r1, #181	; 0xb5
 800613a:	f000 fbd5 	bl	80068e8 <__assert_func>
 800613e:	6922      	ldr	r2, [r4, #16]
 8006140:	3202      	adds	r2, #2
 8006142:	f104 010c 	add.w	r1, r4, #12
 8006146:	0092      	lsls	r2, r2, #2
 8006148:	300c      	adds	r0, #12
 800614a:	f7ff fe1b 	bl	8005d84 <memcpy>
 800614e:	4621      	mov	r1, r4
 8006150:	4638      	mov	r0, r7
 8006152:	f7ff ffa5 	bl	80060a0 <_Bfree>
 8006156:	4644      	mov	r4, r8
 8006158:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800615c:	3501      	adds	r5, #1
 800615e:	615e      	str	r6, [r3, #20]
 8006160:	6125      	str	r5, [r4, #16]
 8006162:	4620      	mov	r0, r4
 8006164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006168:	080098ff 	.word	0x080098ff
 800616c:	080098a3 	.word	0x080098a3

08006170 <__hi0bits>:
 8006170:	0c03      	lsrs	r3, r0, #16
 8006172:	041b      	lsls	r3, r3, #16
 8006174:	b9d3      	cbnz	r3, 80061ac <__hi0bits+0x3c>
 8006176:	0400      	lsls	r0, r0, #16
 8006178:	2310      	movs	r3, #16
 800617a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800617e:	bf04      	itt	eq
 8006180:	0200      	lsleq	r0, r0, #8
 8006182:	3308      	addeq	r3, #8
 8006184:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006188:	bf04      	itt	eq
 800618a:	0100      	lsleq	r0, r0, #4
 800618c:	3304      	addeq	r3, #4
 800618e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006192:	bf04      	itt	eq
 8006194:	0080      	lsleq	r0, r0, #2
 8006196:	3302      	addeq	r3, #2
 8006198:	2800      	cmp	r0, #0
 800619a:	db05      	blt.n	80061a8 <__hi0bits+0x38>
 800619c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80061a0:	f103 0301 	add.w	r3, r3, #1
 80061a4:	bf08      	it	eq
 80061a6:	2320      	moveq	r3, #32
 80061a8:	4618      	mov	r0, r3
 80061aa:	4770      	bx	lr
 80061ac:	2300      	movs	r3, #0
 80061ae:	e7e4      	b.n	800617a <__hi0bits+0xa>

080061b0 <__lo0bits>:
 80061b0:	6803      	ldr	r3, [r0, #0]
 80061b2:	f013 0207 	ands.w	r2, r3, #7
 80061b6:	4601      	mov	r1, r0
 80061b8:	d00b      	beq.n	80061d2 <__lo0bits+0x22>
 80061ba:	07da      	lsls	r2, r3, #31
 80061bc:	d423      	bmi.n	8006206 <__lo0bits+0x56>
 80061be:	0798      	lsls	r0, r3, #30
 80061c0:	bf49      	itett	mi
 80061c2:	085b      	lsrmi	r3, r3, #1
 80061c4:	089b      	lsrpl	r3, r3, #2
 80061c6:	2001      	movmi	r0, #1
 80061c8:	600b      	strmi	r3, [r1, #0]
 80061ca:	bf5c      	itt	pl
 80061cc:	600b      	strpl	r3, [r1, #0]
 80061ce:	2002      	movpl	r0, #2
 80061d0:	4770      	bx	lr
 80061d2:	b298      	uxth	r0, r3
 80061d4:	b9a8      	cbnz	r0, 8006202 <__lo0bits+0x52>
 80061d6:	0c1b      	lsrs	r3, r3, #16
 80061d8:	2010      	movs	r0, #16
 80061da:	b2da      	uxtb	r2, r3
 80061dc:	b90a      	cbnz	r2, 80061e2 <__lo0bits+0x32>
 80061de:	3008      	adds	r0, #8
 80061e0:	0a1b      	lsrs	r3, r3, #8
 80061e2:	071a      	lsls	r2, r3, #28
 80061e4:	bf04      	itt	eq
 80061e6:	091b      	lsreq	r3, r3, #4
 80061e8:	3004      	addeq	r0, #4
 80061ea:	079a      	lsls	r2, r3, #30
 80061ec:	bf04      	itt	eq
 80061ee:	089b      	lsreq	r3, r3, #2
 80061f0:	3002      	addeq	r0, #2
 80061f2:	07da      	lsls	r2, r3, #31
 80061f4:	d403      	bmi.n	80061fe <__lo0bits+0x4e>
 80061f6:	085b      	lsrs	r3, r3, #1
 80061f8:	f100 0001 	add.w	r0, r0, #1
 80061fc:	d005      	beq.n	800620a <__lo0bits+0x5a>
 80061fe:	600b      	str	r3, [r1, #0]
 8006200:	4770      	bx	lr
 8006202:	4610      	mov	r0, r2
 8006204:	e7e9      	b.n	80061da <__lo0bits+0x2a>
 8006206:	2000      	movs	r0, #0
 8006208:	4770      	bx	lr
 800620a:	2020      	movs	r0, #32
 800620c:	4770      	bx	lr
	...

08006210 <__i2b>:
 8006210:	b510      	push	{r4, lr}
 8006212:	460c      	mov	r4, r1
 8006214:	2101      	movs	r1, #1
 8006216:	f7ff ff03 	bl	8006020 <_Balloc>
 800621a:	4602      	mov	r2, r0
 800621c:	b928      	cbnz	r0, 800622a <__i2b+0x1a>
 800621e:	4b05      	ldr	r3, [pc, #20]	; (8006234 <__i2b+0x24>)
 8006220:	4805      	ldr	r0, [pc, #20]	; (8006238 <__i2b+0x28>)
 8006222:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006226:	f000 fb5f 	bl	80068e8 <__assert_func>
 800622a:	2301      	movs	r3, #1
 800622c:	6144      	str	r4, [r0, #20]
 800622e:	6103      	str	r3, [r0, #16]
 8006230:	bd10      	pop	{r4, pc}
 8006232:	bf00      	nop
 8006234:	080098ff 	.word	0x080098ff
 8006238:	080098a3 	.word	0x080098a3

0800623c <__multiply>:
 800623c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006240:	4691      	mov	r9, r2
 8006242:	690a      	ldr	r2, [r1, #16]
 8006244:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006248:	429a      	cmp	r2, r3
 800624a:	bfb8      	it	lt
 800624c:	460b      	movlt	r3, r1
 800624e:	460c      	mov	r4, r1
 8006250:	bfbc      	itt	lt
 8006252:	464c      	movlt	r4, r9
 8006254:	4699      	movlt	r9, r3
 8006256:	6927      	ldr	r7, [r4, #16]
 8006258:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800625c:	68a3      	ldr	r3, [r4, #8]
 800625e:	6861      	ldr	r1, [r4, #4]
 8006260:	eb07 060a 	add.w	r6, r7, sl
 8006264:	42b3      	cmp	r3, r6
 8006266:	b085      	sub	sp, #20
 8006268:	bfb8      	it	lt
 800626a:	3101      	addlt	r1, #1
 800626c:	f7ff fed8 	bl	8006020 <_Balloc>
 8006270:	b930      	cbnz	r0, 8006280 <__multiply+0x44>
 8006272:	4602      	mov	r2, r0
 8006274:	4b44      	ldr	r3, [pc, #272]	; (8006388 <__multiply+0x14c>)
 8006276:	4845      	ldr	r0, [pc, #276]	; (800638c <__multiply+0x150>)
 8006278:	f240 115d 	movw	r1, #349	; 0x15d
 800627c:	f000 fb34 	bl	80068e8 <__assert_func>
 8006280:	f100 0514 	add.w	r5, r0, #20
 8006284:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006288:	462b      	mov	r3, r5
 800628a:	2200      	movs	r2, #0
 800628c:	4543      	cmp	r3, r8
 800628e:	d321      	bcc.n	80062d4 <__multiply+0x98>
 8006290:	f104 0314 	add.w	r3, r4, #20
 8006294:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006298:	f109 0314 	add.w	r3, r9, #20
 800629c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80062a0:	9202      	str	r2, [sp, #8]
 80062a2:	1b3a      	subs	r2, r7, r4
 80062a4:	3a15      	subs	r2, #21
 80062a6:	f022 0203 	bic.w	r2, r2, #3
 80062aa:	3204      	adds	r2, #4
 80062ac:	f104 0115 	add.w	r1, r4, #21
 80062b0:	428f      	cmp	r7, r1
 80062b2:	bf38      	it	cc
 80062b4:	2204      	movcc	r2, #4
 80062b6:	9201      	str	r2, [sp, #4]
 80062b8:	9a02      	ldr	r2, [sp, #8]
 80062ba:	9303      	str	r3, [sp, #12]
 80062bc:	429a      	cmp	r2, r3
 80062be:	d80c      	bhi.n	80062da <__multiply+0x9e>
 80062c0:	2e00      	cmp	r6, #0
 80062c2:	dd03      	ble.n	80062cc <__multiply+0x90>
 80062c4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d05a      	beq.n	8006382 <__multiply+0x146>
 80062cc:	6106      	str	r6, [r0, #16]
 80062ce:	b005      	add	sp, #20
 80062d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062d4:	f843 2b04 	str.w	r2, [r3], #4
 80062d8:	e7d8      	b.n	800628c <__multiply+0x50>
 80062da:	f8b3 a000 	ldrh.w	sl, [r3]
 80062de:	f1ba 0f00 	cmp.w	sl, #0
 80062e2:	d024      	beq.n	800632e <__multiply+0xf2>
 80062e4:	f104 0e14 	add.w	lr, r4, #20
 80062e8:	46a9      	mov	r9, r5
 80062ea:	f04f 0c00 	mov.w	ip, #0
 80062ee:	f85e 2b04 	ldr.w	r2, [lr], #4
 80062f2:	f8d9 1000 	ldr.w	r1, [r9]
 80062f6:	fa1f fb82 	uxth.w	fp, r2
 80062fa:	b289      	uxth	r1, r1
 80062fc:	fb0a 110b 	mla	r1, sl, fp, r1
 8006300:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006304:	f8d9 2000 	ldr.w	r2, [r9]
 8006308:	4461      	add	r1, ip
 800630a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800630e:	fb0a c20b 	mla	r2, sl, fp, ip
 8006312:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006316:	b289      	uxth	r1, r1
 8006318:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800631c:	4577      	cmp	r7, lr
 800631e:	f849 1b04 	str.w	r1, [r9], #4
 8006322:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006326:	d8e2      	bhi.n	80062ee <__multiply+0xb2>
 8006328:	9a01      	ldr	r2, [sp, #4]
 800632a:	f845 c002 	str.w	ip, [r5, r2]
 800632e:	9a03      	ldr	r2, [sp, #12]
 8006330:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006334:	3304      	adds	r3, #4
 8006336:	f1b9 0f00 	cmp.w	r9, #0
 800633a:	d020      	beq.n	800637e <__multiply+0x142>
 800633c:	6829      	ldr	r1, [r5, #0]
 800633e:	f104 0c14 	add.w	ip, r4, #20
 8006342:	46ae      	mov	lr, r5
 8006344:	f04f 0a00 	mov.w	sl, #0
 8006348:	f8bc b000 	ldrh.w	fp, [ip]
 800634c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006350:	fb09 220b 	mla	r2, r9, fp, r2
 8006354:	4492      	add	sl, r2
 8006356:	b289      	uxth	r1, r1
 8006358:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800635c:	f84e 1b04 	str.w	r1, [lr], #4
 8006360:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006364:	f8be 1000 	ldrh.w	r1, [lr]
 8006368:	0c12      	lsrs	r2, r2, #16
 800636a:	fb09 1102 	mla	r1, r9, r2, r1
 800636e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006372:	4567      	cmp	r7, ip
 8006374:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006378:	d8e6      	bhi.n	8006348 <__multiply+0x10c>
 800637a:	9a01      	ldr	r2, [sp, #4]
 800637c:	50a9      	str	r1, [r5, r2]
 800637e:	3504      	adds	r5, #4
 8006380:	e79a      	b.n	80062b8 <__multiply+0x7c>
 8006382:	3e01      	subs	r6, #1
 8006384:	e79c      	b.n	80062c0 <__multiply+0x84>
 8006386:	bf00      	nop
 8006388:	080098ff 	.word	0x080098ff
 800638c:	080098a3 	.word	0x080098a3

08006390 <__pow5mult>:
 8006390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006394:	4615      	mov	r5, r2
 8006396:	f012 0203 	ands.w	r2, r2, #3
 800639a:	4606      	mov	r6, r0
 800639c:	460f      	mov	r7, r1
 800639e:	d007      	beq.n	80063b0 <__pow5mult+0x20>
 80063a0:	4c25      	ldr	r4, [pc, #148]	; (8006438 <__pow5mult+0xa8>)
 80063a2:	3a01      	subs	r2, #1
 80063a4:	2300      	movs	r3, #0
 80063a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80063aa:	f7ff fe9b 	bl	80060e4 <__multadd>
 80063ae:	4607      	mov	r7, r0
 80063b0:	10ad      	asrs	r5, r5, #2
 80063b2:	d03d      	beq.n	8006430 <__pow5mult+0xa0>
 80063b4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80063b6:	b97c      	cbnz	r4, 80063d8 <__pow5mult+0x48>
 80063b8:	2010      	movs	r0, #16
 80063ba:	f001 f941 	bl	8007640 <malloc>
 80063be:	4602      	mov	r2, r0
 80063c0:	6270      	str	r0, [r6, #36]	; 0x24
 80063c2:	b928      	cbnz	r0, 80063d0 <__pow5mult+0x40>
 80063c4:	4b1d      	ldr	r3, [pc, #116]	; (800643c <__pow5mult+0xac>)
 80063c6:	481e      	ldr	r0, [pc, #120]	; (8006440 <__pow5mult+0xb0>)
 80063c8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80063cc:	f000 fa8c 	bl	80068e8 <__assert_func>
 80063d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80063d4:	6004      	str	r4, [r0, #0]
 80063d6:	60c4      	str	r4, [r0, #12]
 80063d8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80063dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80063e0:	b94c      	cbnz	r4, 80063f6 <__pow5mult+0x66>
 80063e2:	f240 2171 	movw	r1, #625	; 0x271
 80063e6:	4630      	mov	r0, r6
 80063e8:	f7ff ff12 	bl	8006210 <__i2b>
 80063ec:	2300      	movs	r3, #0
 80063ee:	f8c8 0008 	str.w	r0, [r8, #8]
 80063f2:	4604      	mov	r4, r0
 80063f4:	6003      	str	r3, [r0, #0]
 80063f6:	f04f 0900 	mov.w	r9, #0
 80063fa:	07eb      	lsls	r3, r5, #31
 80063fc:	d50a      	bpl.n	8006414 <__pow5mult+0x84>
 80063fe:	4639      	mov	r1, r7
 8006400:	4622      	mov	r2, r4
 8006402:	4630      	mov	r0, r6
 8006404:	f7ff ff1a 	bl	800623c <__multiply>
 8006408:	4639      	mov	r1, r7
 800640a:	4680      	mov	r8, r0
 800640c:	4630      	mov	r0, r6
 800640e:	f7ff fe47 	bl	80060a0 <_Bfree>
 8006412:	4647      	mov	r7, r8
 8006414:	106d      	asrs	r5, r5, #1
 8006416:	d00b      	beq.n	8006430 <__pow5mult+0xa0>
 8006418:	6820      	ldr	r0, [r4, #0]
 800641a:	b938      	cbnz	r0, 800642c <__pow5mult+0x9c>
 800641c:	4622      	mov	r2, r4
 800641e:	4621      	mov	r1, r4
 8006420:	4630      	mov	r0, r6
 8006422:	f7ff ff0b 	bl	800623c <__multiply>
 8006426:	6020      	str	r0, [r4, #0]
 8006428:	f8c0 9000 	str.w	r9, [r0]
 800642c:	4604      	mov	r4, r0
 800642e:	e7e4      	b.n	80063fa <__pow5mult+0x6a>
 8006430:	4638      	mov	r0, r7
 8006432:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006436:	bf00      	nop
 8006438:	08009a00 	.word	0x08009a00
 800643c:	0800988c 	.word	0x0800988c
 8006440:	080098a3 	.word	0x080098a3

08006444 <__lshift>:
 8006444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006448:	460c      	mov	r4, r1
 800644a:	6849      	ldr	r1, [r1, #4]
 800644c:	6923      	ldr	r3, [r4, #16]
 800644e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006452:	68a3      	ldr	r3, [r4, #8]
 8006454:	4607      	mov	r7, r0
 8006456:	4691      	mov	r9, r2
 8006458:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800645c:	f108 0601 	add.w	r6, r8, #1
 8006460:	42b3      	cmp	r3, r6
 8006462:	db0b      	blt.n	800647c <__lshift+0x38>
 8006464:	4638      	mov	r0, r7
 8006466:	f7ff fddb 	bl	8006020 <_Balloc>
 800646a:	4605      	mov	r5, r0
 800646c:	b948      	cbnz	r0, 8006482 <__lshift+0x3e>
 800646e:	4602      	mov	r2, r0
 8006470:	4b2a      	ldr	r3, [pc, #168]	; (800651c <__lshift+0xd8>)
 8006472:	482b      	ldr	r0, [pc, #172]	; (8006520 <__lshift+0xdc>)
 8006474:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006478:	f000 fa36 	bl	80068e8 <__assert_func>
 800647c:	3101      	adds	r1, #1
 800647e:	005b      	lsls	r3, r3, #1
 8006480:	e7ee      	b.n	8006460 <__lshift+0x1c>
 8006482:	2300      	movs	r3, #0
 8006484:	f100 0114 	add.w	r1, r0, #20
 8006488:	f100 0210 	add.w	r2, r0, #16
 800648c:	4618      	mov	r0, r3
 800648e:	4553      	cmp	r3, sl
 8006490:	db37      	blt.n	8006502 <__lshift+0xbe>
 8006492:	6920      	ldr	r0, [r4, #16]
 8006494:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006498:	f104 0314 	add.w	r3, r4, #20
 800649c:	f019 091f 	ands.w	r9, r9, #31
 80064a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80064a4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80064a8:	d02f      	beq.n	800650a <__lshift+0xc6>
 80064aa:	f1c9 0e20 	rsb	lr, r9, #32
 80064ae:	468a      	mov	sl, r1
 80064b0:	f04f 0c00 	mov.w	ip, #0
 80064b4:	681a      	ldr	r2, [r3, #0]
 80064b6:	fa02 f209 	lsl.w	r2, r2, r9
 80064ba:	ea42 020c 	orr.w	r2, r2, ip
 80064be:	f84a 2b04 	str.w	r2, [sl], #4
 80064c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80064c6:	4298      	cmp	r0, r3
 80064c8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80064cc:	d8f2      	bhi.n	80064b4 <__lshift+0x70>
 80064ce:	1b03      	subs	r3, r0, r4
 80064d0:	3b15      	subs	r3, #21
 80064d2:	f023 0303 	bic.w	r3, r3, #3
 80064d6:	3304      	adds	r3, #4
 80064d8:	f104 0215 	add.w	r2, r4, #21
 80064dc:	4290      	cmp	r0, r2
 80064de:	bf38      	it	cc
 80064e0:	2304      	movcc	r3, #4
 80064e2:	f841 c003 	str.w	ip, [r1, r3]
 80064e6:	f1bc 0f00 	cmp.w	ip, #0
 80064ea:	d001      	beq.n	80064f0 <__lshift+0xac>
 80064ec:	f108 0602 	add.w	r6, r8, #2
 80064f0:	3e01      	subs	r6, #1
 80064f2:	4638      	mov	r0, r7
 80064f4:	612e      	str	r6, [r5, #16]
 80064f6:	4621      	mov	r1, r4
 80064f8:	f7ff fdd2 	bl	80060a0 <_Bfree>
 80064fc:	4628      	mov	r0, r5
 80064fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006502:	f842 0f04 	str.w	r0, [r2, #4]!
 8006506:	3301      	adds	r3, #1
 8006508:	e7c1      	b.n	800648e <__lshift+0x4a>
 800650a:	3904      	subs	r1, #4
 800650c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006510:	f841 2f04 	str.w	r2, [r1, #4]!
 8006514:	4298      	cmp	r0, r3
 8006516:	d8f9      	bhi.n	800650c <__lshift+0xc8>
 8006518:	e7ea      	b.n	80064f0 <__lshift+0xac>
 800651a:	bf00      	nop
 800651c:	080098ff 	.word	0x080098ff
 8006520:	080098a3 	.word	0x080098a3

08006524 <__mcmp>:
 8006524:	b530      	push	{r4, r5, lr}
 8006526:	6902      	ldr	r2, [r0, #16]
 8006528:	690c      	ldr	r4, [r1, #16]
 800652a:	1b12      	subs	r2, r2, r4
 800652c:	d10e      	bne.n	800654c <__mcmp+0x28>
 800652e:	f100 0314 	add.w	r3, r0, #20
 8006532:	3114      	adds	r1, #20
 8006534:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006538:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800653c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006540:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006544:	42a5      	cmp	r5, r4
 8006546:	d003      	beq.n	8006550 <__mcmp+0x2c>
 8006548:	d305      	bcc.n	8006556 <__mcmp+0x32>
 800654a:	2201      	movs	r2, #1
 800654c:	4610      	mov	r0, r2
 800654e:	bd30      	pop	{r4, r5, pc}
 8006550:	4283      	cmp	r3, r0
 8006552:	d3f3      	bcc.n	800653c <__mcmp+0x18>
 8006554:	e7fa      	b.n	800654c <__mcmp+0x28>
 8006556:	f04f 32ff 	mov.w	r2, #4294967295
 800655a:	e7f7      	b.n	800654c <__mcmp+0x28>

0800655c <__mdiff>:
 800655c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006560:	460c      	mov	r4, r1
 8006562:	4606      	mov	r6, r0
 8006564:	4611      	mov	r1, r2
 8006566:	4620      	mov	r0, r4
 8006568:	4690      	mov	r8, r2
 800656a:	f7ff ffdb 	bl	8006524 <__mcmp>
 800656e:	1e05      	subs	r5, r0, #0
 8006570:	d110      	bne.n	8006594 <__mdiff+0x38>
 8006572:	4629      	mov	r1, r5
 8006574:	4630      	mov	r0, r6
 8006576:	f7ff fd53 	bl	8006020 <_Balloc>
 800657a:	b930      	cbnz	r0, 800658a <__mdiff+0x2e>
 800657c:	4b3a      	ldr	r3, [pc, #232]	; (8006668 <__mdiff+0x10c>)
 800657e:	4602      	mov	r2, r0
 8006580:	f240 2132 	movw	r1, #562	; 0x232
 8006584:	4839      	ldr	r0, [pc, #228]	; (800666c <__mdiff+0x110>)
 8006586:	f000 f9af 	bl	80068e8 <__assert_func>
 800658a:	2301      	movs	r3, #1
 800658c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006590:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006594:	bfa4      	itt	ge
 8006596:	4643      	movge	r3, r8
 8006598:	46a0      	movge	r8, r4
 800659a:	4630      	mov	r0, r6
 800659c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80065a0:	bfa6      	itte	ge
 80065a2:	461c      	movge	r4, r3
 80065a4:	2500      	movge	r5, #0
 80065a6:	2501      	movlt	r5, #1
 80065a8:	f7ff fd3a 	bl	8006020 <_Balloc>
 80065ac:	b920      	cbnz	r0, 80065b8 <__mdiff+0x5c>
 80065ae:	4b2e      	ldr	r3, [pc, #184]	; (8006668 <__mdiff+0x10c>)
 80065b0:	4602      	mov	r2, r0
 80065b2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80065b6:	e7e5      	b.n	8006584 <__mdiff+0x28>
 80065b8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80065bc:	6926      	ldr	r6, [r4, #16]
 80065be:	60c5      	str	r5, [r0, #12]
 80065c0:	f104 0914 	add.w	r9, r4, #20
 80065c4:	f108 0514 	add.w	r5, r8, #20
 80065c8:	f100 0e14 	add.w	lr, r0, #20
 80065cc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80065d0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80065d4:	f108 0210 	add.w	r2, r8, #16
 80065d8:	46f2      	mov	sl, lr
 80065da:	2100      	movs	r1, #0
 80065dc:	f859 3b04 	ldr.w	r3, [r9], #4
 80065e0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80065e4:	fa1f f883 	uxth.w	r8, r3
 80065e8:	fa11 f18b 	uxtah	r1, r1, fp
 80065ec:	0c1b      	lsrs	r3, r3, #16
 80065ee:	eba1 0808 	sub.w	r8, r1, r8
 80065f2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80065f6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80065fa:	fa1f f888 	uxth.w	r8, r8
 80065fe:	1419      	asrs	r1, r3, #16
 8006600:	454e      	cmp	r6, r9
 8006602:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006606:	f84a 3b04 	str.w	r3, [sl], #4
 800660a:	d8e7      	bhi.n	80065dc <__mdiff+0x80>
 800660c:	1b33      	subs	r3, r6, r4
 800660e:	3b15      	subs	r3, #21
 8006610:	f023 0303 	bic.w	r3, r3, #3
 8006614:	3304      	adds	r3, #4
 8006616:	3415      	adds	r4, #21
 8006618:	42a6      	cmp	r6, r4
 800661a:	bf38      	it	cc
 800661c:	2304      	movcc	r3, #4
 800661e:	441d      	add	r5, r3
 8006620:	4473      	add	r3, lr
 8006622:	469e      	mov	lr, r3
 8006624:	462e      	mov	r6, r5
 8006626:	4566      	cmp	r6, ip
 8006628:	d30e      	bcc.n	8006648 <__mdiff+0xec>
 800662a:	f10c 0203 	add.w	r2, ip, #3
 800662e:	1b52      	subs	r2, r2, r5
 8006630:	f022 0203 	bic.w	r2, r2, #3
 8006634:	3d03      	subs	r5, #3
 8006636:	45ac      	cmp	ip, r5
 8006638:	bf38      	it	cc
 800663a:	2200      	movcc	r2, #0
 800663c:	441a      	add	r2, r3
 800663e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006642:	b17b      	cbz	r3, 8006664 <__mdiff+0x108>
 8006644:	6107      	str	r7, [r0, #16]
 8006646:	e7a3      	b.n	8006590 <__mdiff+0x34>
 8006648:	f856 8b04 	ldr.w	r8, [r6], #4
 800664c:	fa11 f288 	uxtah	r2, r1, r8
 8006650:	1414      	asrs	r4, r2, #16
 8006652:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006656:	b292      	uxth	r2, r2
 8006658:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800665c:	f84e 2b04 	str.w	r2, [lr], #4
 8006660:	1421      	asrs	r1, r4, #16
 8006662:	e7e0      	b.n	8006626 <__mdiff+0xca>
 8006664:	3f01      	subs	r7, #1
 8006666:	e7ea      	b.n	800663e <__mdiff+0xe2>
 8006668:	080098ff 	.word	0x080098ff
 800666c:	080098a3 	.word	0x080098a3

08006670 <__d2b>:
 8006670:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006674:	4689      	mov	r9, r1
 8006676:	2101      	movs	r1, #1
 8006678:	ec57 6b10 	vmov	r6, r7, d0
 800667c:	4690      	mov	r8, r2
 800667e:	f7ff fccf 	bl	8006020 <_Balloc>
 8006682:	4604      	mov	r4, r0
 8006684:	b930      	cbnz	r0, 8006694 <__d2b+0x24>
 8006686:	4602      	mov	r2, r0
 8006688:	4b25      	ldr	r3, [pc, #148]	; (8006720 <__d2b+0xb0>)
 800668a:	4826      	ldr	r0, [pc, #152]	; (8006724 <__d2b+0xb4>)
 800668c:	f240 310a 	movw	r1, #778	; 0x30a
 8006690:	f000 f92a 	bl	80068e8 <__assert_func>
 8006694:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006698:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800669c:	bb35      	cbnz	r5, 80066ec <__d2b+0x7c>
 800669e:	2e00      	cmp	r6, #0
 80066a0:	9301      	str	r3, [sp, #4]
 80066a2:	d028      	beq.n	80066f6 <__d2b+0x86>
 80066a4:	4668      	mov	r0, sp
 80066a6:	9600      	str	r6, [sp, #0]
 80066a8:	f7ff fd82 	bl	80061b0 <__lo0bits>
 80066ac:	9900      	ldr	r1, [sp, #0]
 80066ae:	b300      	cbz	r0, 80066f2 <__d2b+0x82>
 80066b0:	9a01      	ldr	r2, [sp, #4]
 80066b2:	f1c0 0320 	rsb	r3, r0, #32
 80066b6:	fa02 f303 	lsl.w	r3, r2, r3
 80066ba:	430b      	orrs	r3, r1
 80066bc:	40c2      	lsrs	r2, r0
 80066be:	6163      	str	r3, [r4, #20]
 80066c0:	9201      	str	r2, [sp, #4]
 80066c2:	9b01      	ldr	r3, [sp, #4]
 80066c4:	61a3      	str	r3, [r4, #24]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	bf14      	ite	ne
 80066ca:	2202      	movne	r2, #2
 80066cc:	2201      	moveq	r2, #1
 80066ce:	6122      	str	r2, [r4, #16]
 80066d0:	b1d5      	cbz	r5, 8006708 <__d2b+0x98>
 80066d2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80066d6:	4405      	add	r5, r0
 80066d8:	f8c9 5000 	str.w	r5, [r9]
 80066dc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80066e0:	f8c8 0000 	str.w	r0, [r8]
 80066e4:	4620      	mov	r0, r4
 80066e6:	b003      	add	sp, #12
 80066e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80066ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80066f0:	e7d5      	b.n	800669e <__d2b+0x2e>
 80066f2:	6161      	str	r1, [r4, #20]
 80066f4:	e7e5      	b.n	80066c2 <__d2b+0x52>
 80066f6:	a801      	add	r0, sp, #4
 80066f8:	f7ff fd5a 	bl	80061b0 <__lo0bits>
 80066fc:	9b01      	ldr	r3, [sp, #4]
 80066fe:	6163      	str	r3, [r4, #20]
 8006700:	2201      	movs	r2, #1
 8006702:	6122      	str	r2, [r4, #16]
 8006704:	3020      	adds	r0, #32
 8006706:	e7e3      	b.n	80066d0 <__d2b+0x60>
 8006708:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800670c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006710:	f8c9 0000 	str.w	r0, [r9]
 8006714:	6918      	ldr	r0, [r3, #16]
 8006716:	f7ff fd2b 	bl	8006170 <__hi0bits>
 800671a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800671e:	e7df      	b.n	80066e0 <__d2b+0x70>
 8006720:	080098ff 	.word	0x080098ff
 8006724:	080098a3 	.word	0x080098a3

08006728 <_mprec_log10>:
 8006728:	2817      	cmp	r0, #23
 800672a:	b5d0      	push	{r4, r6, r7, lr}
 800672c:	4604      	mov	r4, r0
 800672e:	dc07      	bgt.n	8006740 <_mprec_log10+0x18>
 8006730:	4809      	ldr	r0, [pc, #36]	; (8006758 <_mprec_log10+0x30>)
 8006732:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 8006736:	e9d4 0100 	ldrd	r0, r1, [r4]
 800673a:	ec41 0b10 	vmov	d0, r0, r1
 800673e:	bdd0      	pop	{r4, r6, r7, pc}
 8006740:	4906      	ldr	r1, [pc, #24]	; (800675c <_mprec_log10+0x34>)
 8006742:	4f07      	ldr	r7, [pc, #28]	; (8006760 <_mprec_log10+0x38>)
 8006744:	2000      	movs	r0, #0
 8006746:	2600      	movs	r6, #0
 8006748:	4632      	mov	r2, r6
 800674a:	463b      	mov	r3, r7
 800674c:	f7f9 ff54 	bl	80005f8 <__aeabi_dmul>
 8006750:	3c01      	subs	r4, #1
 8006752:	d1f9      	bne.n	8006748 <_mprec_log10+0x20>
 8006754:	e7f1      	b.n	800673a <_mprec_log10+0x12>
 8006756:	bf00      	nop
 8006758:	08009938 	.word	0x08009938
 800675c:	3ff00000 	.word	0x3ff00000
 8006760:	40240000 	.word	0x40240000

08006764 <_calloc_r>:
 8006764:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006766:	fba1 2402 	umull	r2, r4, r1, r2
 800676a:	b94c      	cbnz	r4, 8006780 <_calloc_r+0x1c>
 800676c:	4611      	mov	r1, r2
 800676e:	9201      	str	r2, [sp, #4]
 8006770:	f000 f82e 	bl	80067d0 <_malloc_r>
 8006774:	9a01      	ldr	r2, [sp, #4]
 8006776:	4605      	mov	r5, r0
 8006778:	b930      	cbnz	r0, 8006788 <_calloc_r+0x24>
 800677a:	4628      	mov	r0, r5
 800677c:	b003      	add	sp, #12
 800677e:	bd30      	pop	{r4, r5, pc}
 8006780:	220c      	movs	r2, #12
 8006782:	6002      	str	r2, [r0, #0]
 8006784:	2500      	movs	r5, #0
 8006786:	e7f8      	b.n	800677a <_calloc_r+0x16>
 8006788:	4621      	mov	r1, r4
 800678a:	f7ff fb09 	bl	8005da0 <memset>
 800678e:	e7f4      	b.n	800677a <_calloc_r+0x16>

08006790 <sbrk_aligned>:
 8006790:	b570      	push	{r4, r5, r6, lr}
 8006792:	4e0e      	ldr	r6, [pc, #56]	; (80067cc <sbrk_aligned+0x3c>)
 8006794:	460c      	mov	r4, r1
 8006796:	6831      	ldr	r1, [r6, #0]
 8006798:	4605      	mov	r5, r0
 800679a:	b911      	cbnz	r1, 80067a2 <sbrk_aligned+0x12>
 800679c:	f000 f88c 	bl	80068b8 <_sbrk_r>
 80067a0:	6030      	str	r0, [r6, #0]
 80067a2:	4621      	mov	r1, r4
 80067a4:	4628      	mov	r0, r5
 80067a6:	f000 f887 	bl	80068b8 <_sbrk_r>
 80067aa:	1c43      	adds	r3, r0, #1
 80067ac:	d00a      	beq.n	80067c4 <sbrk_aligned+0x34>
 80067ae:	1cc4      	adds	r4, r0, #3
 80067b0:	f024 0403 	bic.w	r4, r4, #3
 80067b4:	42a0      	cmp	r0, r4
 80067b6:	d007      	beq.n	80067c8 <sbrk_aligned+0x38>
 80067b8:	1a21      	subs	r1, r4, r0
 80067ba:	4628      	mov	r0, r5
 80067bc:	f000 f87c 	bl	80068b8 <_sbrk_r>
 80067c0:	3001      	adds	r0, #1
 80067c2:	d101      	bne.n	80067c8 <sbrk_aligned+0x38>
 80067c4:	f04f 34ff 	mov.w	r4, #4294967295
 80067c8:	4620      	mov	r0, r4
 80067ca:	bd70      	pop	{r4, r5, r6, pc}
 80067cc:	200001c4 	.word	0x200001c4

080067d0 <_malloc_r>:
 80067d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067d4:	1ccd      	adds	r5, r1, #3
 80067d6:	f025 0503 	bic.w	r5, r5, #3
 80067da:	3508      	adds	r5, #8
 80067dc:	2d0c      	cmp	r5, #12
 80067de:	bf38      	it	cc
 80067e0:	250c      	movcc	r5, #12
 80067e2:	2d00      	cmp	r5, #0
 80067e4:	4607      	mov	r7, r0
 80067e6:	db01      	blt.n	80067ec <_malloc_r+0x1c>
 80067e8:	42a9      	cmp	r1, r5
 80067ea:	d905      	bls.n	80067f8 <_malloc_r+0x28>
 80067ec:	230c      	movs	r3, #12
 80067ee:	603b      	str	r3, [r7, #0]
 80067f0:	2600      	movs	r6, #0
 80067f2:	4630      	mov	r0, r6
 80067f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067f8:	4e2e      	ldr	r6, [pc, #184]	; (80068b4 <_malloc_r+0xe4>)
 80067fa:	f000 ff29 	bl	8007650 <__malloc_lock>
 80067fe:	6833      	ldr	r3, [r6, #0]
 8006800:	461c      	mov	r4, r3
 8006802:	bb34      	cbnz	r4, 8006852 <_malloc_r+0x82>
 8006804:	4629      	mov	r1, r5
 8006806:	4638      	mov	r0, r7
 8006808:	f7ff ffc2 	bl	8006790 <sbrk_aligned>
 800680c:	1c43      	adds	r3, r0, #1
 800680e:	4604      	mov	r4, r0
 8006810:	d14d      	bne.n	80068ae <_malloc_r+0xde>
 8006812:	6834      	ldr	r4, [r6, #0]
 8006814:	4626      	mov	r6, r4
 8006816:	2e00      	cmp	r6, #0
 8006818:	d140      	bne.n	800689c <_malloc_r+0xcc>
 800681a:	6823      	ldr	r3, [r4, #0]
 800681c:	4631      	mov	r1, r6
 800681e:	4638      	mov	r0, r7
 8006820:	eb04 0803 	add.w	r8, r4, r3
 8006824:	f000 f848 	bl	80068b8 <_sbrk_r>
 8006828:	4580      	cmp	r8, r0
 800682a:	d13a      	bne.n	80068a2 <_malloc_r+0xd2>
 800682c:	6821      	ldr	r1, [r4, #0]
 800682e:	3503      	adds	r5, #3
 8006830:	1a6d      	subs	r5, r5, r1
 8006832:	f025 0503 	bic.w	r5, r5, #3
 8006836:	3508      	adds	r5, #8
 8006838:	2d0c      	cmp	r5, #12
 800683a:	bf38      	it	cc
 800683c:	250c      	movcc	r5, #12
 800683e:	4629      	mov	r1, r5
 8006840:	4638      	mov	r0, r7
 8006842:	f7ff ffa5 	bl	8006790 <sbrk_aligned>
 8006846:	3001      	adds	r0, #1
 8006848:	d02b      	beq.n	80068a2 <_malloc_r+0xd2>
 800684a:	6823      	ldr	r3, [r4, #0]
 800684c:	442b      	add	r3, r5
 800684e:	6023      	str	r3, [r4, #0]
 8006850:	e00e      	b.n	8006870 <_malloc_r+0xa0>
 8006852:	6822      	ldr	r2, [r4, #0]
 8006854:	1b52      	subs	r2, r2, r5
 8006856:	d41e      	bmi.n	8006896 <_malloc_r+0xc6>
 8006858:	2a0b      	cmp	r2, #11
 800685a:	d916      	bls.n	800688a <_malloc_r+0xba>
 800685c:	1961      	adds	r1, r4, r5
 800685e:	42a3      	cmp	r3, r4
 8006860:	6025      	str	r5, [r4, #0]
 8006862:	bf18      	it	ne
 8006864:	6059      	strne	r1, [r3, #4]
 8006866:	6863      	ldr	r3, [r4, #4]
 8006868:	bf08      	it	eq
 800686a:	6031      	streq	r1, [r6, #0]
 800686c:	5162      	str	r2, [r4, r5]
 800686e:	604b      	str	r3, [r1, #4]
 8006870:	4638      	mov	r0, r7
 8006872:	f104 060b 	add.w	r6, r4, #11
 8006876:	f000 fef1 	bl	800765c <__malloc_unlock>
 800687a:	f026 0607 	bic.w	r6, r6, #7
 800687e:	1d23      	adds	r3, r4, #4
 8006880:	1af2      	subs	r2, r6, r3
 8006882:	d0b6      	beq.n	80067f2 <_malloc_r+0x22>
 8006884:	1b9b      	subs	r3, r3, r6
 8006886:	50a3      	str	r3, [r4, r2]
 8006888:	e7b3      	b.n	80067f2 <_malloc_r+0x22>
 800688a:	6862      	ldr	r2, [r4, #4]
 800688c:	42a3      	cmp	r3, r4
 800688e:	bf0c      	ite	eq
 8006890:	6032      	streq	r2, [r6, #0]
 8006892:	605a      	strne	r2, [r3, #4]
 8006894:	e7ec      	b.n	8006870 <_malloc_r+0xa0>
 8006896:	4623      	mov	r3, r4
 8006898:	6864      	ldr	r4, [r4, #4]
 800689a:	e7b2      	b.n	8006802 <_malloc_r+0x32>
 800689c:	4634      	mov	r4, r6
 800689e:	6876      	ldr	r6, [r6, #4]
 80068a0:	e7b9      	b.n	8006816 <_malloc_r+0x46>
 80068a2:	230c      	movs	r3, #12
 80068a4:	603b      	str	r3, [r7, #0]
 80068a6:	4638      	mov	r0, r7
 80068a8:	f000 fed8 	bl	800765c <__malloc_unlock>
 80068ac:	e7a1      	b.n	80067f2 <_malloc_r+0x22>
 80068ae:	6025      	str	r5, [r4, #0]
 80068b0:	e7de      	b.n	8006870 <_malloc_r+0xa0>
 80068b2:	bf00      	nop
 80068b4:	200001c0 	.word	0x200001c0

080068b8 <_sbrk_r>:
 80068b8:	b538      	push	{r3, r4, r5, lr}
 80068ba:	4d06      	ldr	r5, [pc, #24]	; (80068d4 <_sbrk_r+0x1c>)
 80068bc:	2300      	movs	r3, #0
 80068be:	4604      	mov	r4, r0
 80068c0:	4608      	mov	r0, r1
 80068c2:	602b      	str	r3, [r5, #0]
 80068c4:	f7fb f8d8 	bl	8001a78 <_sbrk>
 80068c8:	1c43      	adds	r3, r0, #1
 80068ca:	d102      	bne.n	80068d2 <_sbrk_r+0x1a>
 80068cc:	682b      	ldr	r3, [r5, #0]
 80068ce:	b103      	cbz	r3, 80068d2 <_sbrk_r+0x1a>
 80068d0:	6023      	str	r3, [r4, #0]
 80068d2:	bd38      	pop	{r3, r4, r5, pc}
 80068d4:	200001c8 	.word	0x200001c8

080068d8 <strcpy>:
 80068d8:	4603      	mov	r3, r0
 80068da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80068de:	f803 2b01 	strb.w	r2, [r3], #1
 80068e2:	2a00      	cmp	r2, #0
 80068e4:	d1f9      	bne.n	80068da <strcpy+0x2>
 80068e6:	4770      	bx	lr

080068e8 <__assert_func>:
 80068e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80068ea:	4614      	mov	r4, r2
 80068ec:	461a      	mov	r2, r3
 80068ee:	4b09      	ldr	r3, [pc, #36]	; (8006914 <__assert_func+0x2c>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4605      	mov	r5, r0
 80068f4:	68d8      	ldr	r0, [r3, #12]
 80068f6:	b14c      	cbz	r4, 800690c <__assert_func+0x24>
 80068f8:	4b07      	ldr	r3, [pc, #28]	; (8006918 <__assert_func+0x30>)
 80068fa:	9100      	str	r1, [sp, #0]
 80068fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006900:	4906      	ldr	r1, [pc, #24]	; (800691c <__assert_func+0x34>)
 8006902:	462b      	mov	r3, r5
 8006904:	f000 fe8a 	bl	800761c <fiprintf>
 8006908:	f001 faa8 	bl	8007e5c <abort>
 800690c:	4b04      	ldr	r3, [pc, #16]	; (8006920 <__assert_func+0x38>)
 800690e:	461c      	mov	r4, r3
 8006910:	e7f3      	b.n	80068fa <__assert_func+0x12>
 8006912:	bf00      	nop
 8006914:	2000000c 	.word	0x2000000c
 8006918:	08009a0c 	.word	0x08009a0c
 800691c:	08009a19 	.word	0x08009a19
 8006920:	08009a47 	.word	0x08009a47

08006924 <quorem>:
 8006924:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006928:	6903      	ldr	r3, [r0, #16]
 800692a:	690c      	ldr	r4, [r1, #16]
 800692c:	42a3      	cmp	r3, r4
 800692e:	4607      	mov	r7, r0
 8006930:	f2c0 8081 	blt.w	8006a36 <quorem+0x112>
 8006934:	3c01      	subs	r4, #1
 8006936:	f101 0814 	add.w	r8, r1, #20
 800693a:	f100 0514 	add.w	r5, r0, #20
 800693e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006942:	9301      	str	r3, [sp, #4]
 8006944:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006948:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800694c:	3301      	adds	r3, #1
 800694e:	429a      	cmp	r2, r3
 8006950:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006954:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006958:	fbb2 f6f3 	udiv	r6, r2, r3
 800695c:	d331      	bcc.n	80069c2 <quorem+0x9e>
 800695e:	f04f 0e00 	mov.w	lr, #0
 8006962:	4640      	mov	r0, r8
 8006964:	46ac      	mov	ip, r5
 8006966:	46f2      	mov	sl, lr
 8006968:	f850 2b04 	ldr.w	r2, [r0], #4
 800696c:	b293      	uxth	r3, r2
 800696e:	fb06 e303 	mla	r3, r6, r3, lr
 8006972:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006976:	b29b      	uxth	r3, r3
 8006978:	ebaa 0303 	sub.w	r3, sl, r3
 800697c:	f8dc a000 	ldr.w	sl, [ip]
 8006980:	0c12      	lsrs	r2, r2, #16
 8006982:	fa13 f38a 	uxtah	r3, r3, sl
 8006986:	fb06 e202 	mla	r2, r6, r2, lr
 800698a:	9300      	str	r3, [sp, #0]
 800698c:	9b00      	ldr	r3, [sp, #0]
 800698e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006992:	b292      	uxth	r2, r2
 8006994:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006998:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800699c:	f8bd 3000 	ldrh.w	r3, [sp]
 80069a0:	4581      	cmp	r9, r0
 80069a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80069a6:	f84c 3b04 	str.w	r3, [ip], #4
 80069aa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80069ae:	d2db      	bcs.n	8006968 <quorem+0x44>
 80069b0:	f855 300b 	ldr.w	r3, [r5, fp]
 80069b4:	b92b      	cbnz	r3, 80069c2 <quorem+0x9e>
 80069b6:	9b01      	ldr	r3, [sp, #4]
 80069b8:	3b04      	subs	r3, #4
 80069ba:	429d      	cmp	r5, r3
 80069bc:	461a      	mov	r2, r3
 80069be:	d32e      	bcc.n	8006a1e <quorem+0xfa>
 80069c0:	613c      	str	r4, [r7, #16]
 80069c2:	4638      	mov	r0, r7
 80069c4:	f7ff fdae 	bl	8006524 <__mcmp>
 80069c8:	2800      	cmp	r0, #0
 80069ca:	db24      	blt.n	8006a16 <quorem+0xf2>
 80069cc:	3601      	adds	r6, #1
 80069ce:	4628      	mov	r0, r5
 80069d0:	f04f 0c00 	mov.w	ip, #0
 80069d4:	f858 2b04 	ldr.w	r2, [r8], #4
 80069d8:	f8d0 e000 	ldr.w	lr, [r0]
 80069dc:	b293      	uxth	r3, r2
 80069de:	ebac 0303 	sub.w	r3, ip, r3
 80069e2:	0c12      	lsrs	r2, r2, #16
 80069e4:	fa13 f38e 	uxtah	r3, r3, lr
 80069e8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80069ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80069f6:	45c1      	cmp	r9, r8
 80069f8:	f840 3b04 	str.w	r3, [r0], #4
 80069fc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006a00:	d2e8      	bcs.n	80069d4 <quorem+0xb0>
 8006a02:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006a06:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006a0a:	b922      	cbnz	r2, 8006a16 <quorem+0xf2>
 8006a0c:	3b04      	subs	r3, #4
 8006a0e:	429d      	cmp	r5, r3
 8006a10:	461a      	mov	r2, r3
 8006a12:	d30a      	bcc.n	8006a2a <quorem+0x106>
 8006a14:	613c      	str	r4, [r7, #16]
 8006a16:	4630      	mov	r0, r6
 8006a18:	b003      	add	sp, #12
 8006a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a1e:	6812      	ldr	r2, [r2, #0]
 8006a20:	3b04      	subs	r3, #4
 8006a22:	2a00      	cmp	r2, #0
 8006a24:	d1cc      	bne.n	80069c0 <quorem+0x9c>
 8006a26:	3c01      	subs	r4, #1
 8006a28:	e7c7      	b.n	80069ba <quorem+0x96>
 8006a2a:	6812      	ldr	r2, [r2, #0]
 8006a2c:	3b04      	subs	r3, #4
 8006a2e:	2a00      	cmp	r2, #0
 8006a30:	d1f0      	bne.n	8006a14 <quorem+0xf0>
 8006a32:	3c01      	subs	r4, #1
 8006a34:	e7eb      	b.n	8006a0e <quorem+0xea>
 8006a36:	2000      	movs	r0, #0
 8006a38:	e7ee      	b.n	8006a18 <quorem+0xf4>
 8006a3a:	0000      	movs	r0, r0
 8006a3c:	0000      	movs	r0, r0
	...

08006a40 <_dtoa_r>:
 8006a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a44:	ed2d 8b04 	vpush	{d8-d9}
 8006a48:	ec57 6b10 	vmov	r6, r7, d0
 8006a4c:	b093      	sub	sp, #76	; 0x4c
 8006a4e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006a50:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006a54:	9106      	str	r1, [sp, #24]
 8006a56:	ee10 aa10 	vmov	sl, s0
 8006a5a:	4604      	mov	r4, r0
 8006a5c:	9209      	str	r2, [sp, #36]	; 0x24
 8006a5e:	930c      	str	r3, [sp, #48]	; 0x30
 8006a60:	46bb      	mov	fp, r7
 8006a62:	b975      	cbnz	r5, 8006a82 <_dtoa_r+0x42>
 8006a64:	2010      	movs	r0, #16
 8006a66:	f000 fdeb 	bl	8007640 <malloc>
 8006a6a:	4602      	mov	r2, r0
 8006a6c:	6260      	str	r0, [r4, #36]	; 0x24
 8006a6e:	b920      	cbnz	r0, 8006a7a <_dtoa_r+0x3a>
 8006a70:	4ba7      	ldr	r3, [pc, #668]	; (8006d10 <_dtoa_r+0x2d0>)
 8006a72:	21ea      	movs	r1, #234	; 0xea
 8006a74:	48a7      	ldr	r0, [pc, #668]	; (8006d14 <_dtoa_r+0x2d4>)
 8006a76:	f7ff ff37 	bl	80068e8 <__assert_func>
 8006a7a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006a7e:	6005      	str	r5, [r0, #0]
 8006a80:	60c5      	str	r5, [r0, #12]
 8006a82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a84:	6819      	ldr	r1, [r3, #0]
 8006a86:	b151      	cbz	r1, 8006a9e <_dtoa_r+0x5e>
 8006a88:	685a      	ldr	r2, [r3, #4]
 8006a8a:	604a      	str	r2, [r1, #4]
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	4093      	lsls	r3, r2
 8006a90:	608b      	str	r3, [r1, #8]
 8006a92:	4620      	mov	r0, r4
 8006a94:	f7ff fb04 	bl	80060a0 <_Bfree>
 8006a98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	601a      	str	r2, [r3, #0]
 8006a9e:	1e3b      	subs	r3, r7, #0
 8006aa0:	bfaa      	itet	ge
 8006aa2:	2300      	movge	r3, #0
 8006aa4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006aa8:	f8c8 3000 	strge.w	r3, [r8]
 8006aac:	4b9a      	ldr	r3, [pc, #616]	; (8006d18 <_dtoa_r+0x2d8>)
 8006aae:	bfbc      	itt	lt
 8006ab0:	2201      	movlt	r2, #1
 8006ab2:	f8c8 2000 	strlt.w	r2, [r8]
 8006ab6:	ea33 030b 	bics.w	r3, r3, fp
 8006aba:	d11b      	bne.n	8006af4 <_dtoa_r+0xb4>
 8006abc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006abe:	f242 730f 	movw	r3, #9999	; 0x270f
 8006ac2:	6013      	str	r3, [r2, #0]
 8006ac4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006ac8:	4333      	orrs	r3, r6
 8006aca:	f000 8592 	beq.w	80075f2 <_dtoa_r+0xbb2>
 8006ace:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006ad0:	b963      	cbnz	r3, 8006aec <_dtoa_r+0xac>
 8006ad2:	4b92      	ldr	r3, [pc, #584]	; (8006d1c <_dtoa_r+0x2dc>)
 8006ad4:	e022      	b.n	8006b1c <_dtoa_r+0xdc>
 8006ad6:	4b92      	ldr	r3, [pc, #584]	; (8006d20 <_dtoa_r+0x2e0>)
 8006ad8:	9301      	str	r3, [sp, #4]
 8006ada:	3308      	adds	r3, #8
 8006adc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006ade:	6013      	str	r3, [r2, #0]
 8006ae0:	9801      	ldr	r0, [sp, #4]
 8006ae2:	b013      	add	sp, #76	; 0x4c
 8006ae4:	ecbd 8b04 	vpop	{d8-d9}
 8006ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006aec:	4b8b      	ldr	r3, [pc, #556]	; (8006d1c <_dtoa_r+0x2dc>)
 8006aee:	9301      	str	r3, [sp, #4]
 8006af0:	3303      	adds	r3, #3
 8006af2:	e7f3      	b.n	8006adc <_dtoa_r+0x9c>
 8006af4:	2200      	movs	r2, #0
 8006af6:	2300      	movs	r3, #0
 8006af8:	4650      	mov	r0, sl
 8006afa:	4659      	mov	r1, fp
 8006afc:	f7f9 ffe4 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b00:	ec4b ab19 	vmov	d9, sl, fp
 8006b04:	4680      	mov	r8, r0
 8006b06:	b158      	cbz	r0, 8006b20 <_dtoa_r+0xe0>
 8006b08:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	6013      	str	r3, [r2, #0]
 8006b0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	f000 856b 	beq.w	80075ec <_dtoa_r+0xbac>
 8006b16:	4883      	ldr	r0, [pc, #524]	; (8006d24 <_dtoa_r+0x2e4>)
 8006b18:	6018      	str	r0, [r3, #0]
 8006b1a:	1e43      	subs	r3, r0, #1
 8006b1c:	9301      	str	r3, [sp, #4]
 8006b1e:	e7df      	b.n	8006ae0 <_dtoa_r+0xa0>
 8006b20:	ec4b ab10 	vmov	d0, sl, fp
 8006b24:	aa10      	add	r2, sp, #64	; 0x40
 8006b26:	a911      	add	r1, sp, #68	; 0x44
 8006b28:	4620      	mov	r0, r4
 8006b2a:	f7ff fda1 	bl	8006670 <__d2b>
 8006b2e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006b32:	ee08 0a10 	vmov	s16, r0
 8006b36:	2d00      	cmp	r5, #0
 8006b38:	f000 8084 	beq.w	8006c44 <_dtoa_r+0x204>
 8006b3c:	ee19 3a90 	vmov	r3, s19
 8006b40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b44:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006b48:	4656      	mov	r6, sl
 8006b4a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006b4e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006b52:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006b56:	4b74      	ldr	r3, [pc, #464]	; (8006d28 <_dtoa_r+0x2e8>)
 8006b58:	2200      	movs	r2, #0
 8006b5a:	4630      	mov	r0, r6
 8006b5c:	4639      	mov	r1, r7
 8006b5e:	f7f9 fb93 	bl	8000288 <__aeabi_dsub>
 8006b62:	a365      	add	r3, pc, #404	; (adr r3, 8006cf8 <_dtoa_r+0x2b8>)
 8006b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b68:	f7f9 fd46 	bl	80005f8 <__aeabi_dmul>
 8006b6c:	a364      	add	r3, pc, #400	; (adr r3, 8006d00 <_dtoa_r+0x2c0>)
 8006b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b72:	f7f9 fb8b 	bl	800028c <__adddf3>
 8006b76:	4606      	mov	r6, r0
 8006b78:	4628      	mov	r0, r5
 8006b7a:	460f      	mov	r7, r1
 8006b7c:	f7f9 fcd2 	bl	8000524 <__aeabi_i2d>
 8006b80:	a361      	add	r3, pc, #388	; (adr r3, 8006d08 <_dtoa_r+0x2c8>)
 8006b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b86:	f7f9 fd37 	bl	80005f8 <__aeabi_dmul>
 8006b8a:	4602      	mov	r2, r0
 8006b8c:	460b      	mov	r3, r1
 8006b8e:	4630      	mov	r0, r6
 8006b90:	4639      	mov	r1, r7
 8006b92:	f7f9 fb7b 	bl	800028c <__adddf3>
 8006b96:	4606      	mov	r6, r0
 8006b98:	460f      	mov	r7, r1
 8006b9a:	f7f9 ffdd 	bl	8000b58 <__aeabi_d2iz>
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	9000      	str	r0, [sp, #0]
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	4630      	mov	r0, r6
 8006ba6:	4639      	mov	r1, r7
 8006ba8:	f7f9 ff98 	bl	8000adc <__aeabi_dcmplt>
 8006bac:	b150      	cbz	r0, 8006bc4 <_dtoa_r+0x184>
 8006bae:	9800      	ldr	r0, [sp, #0]
 8006bb0:	f7f9 fcb8 	bl	8000524 <__aeabi_i2d>
 8006bb4:	4632      	mov	r2, r6
 8006bb6:	463b      	mov	r3, r7
 8006bb8:	f7f9 ff86 	bl	8000ac8 <__aeabi_dcmpeq>
 8006bbc:	b910      	cbnz	r0, 8006bc4 <_dtoa_r+0x184>
 8006bbe:	9b00      	ldr	r3, [sp, #0]
 8006bc0:	3b01      	subs	r3, #1
 8006bc2:	9300      	str	r3, [sp, #0]
 8006bc4:	9b00      	ldr	r3, [sp, #0]
 8006bc6:	2b16      	cmp	r3, #22
 8006bc8:	d85a      	bhi.n	8006c80 <_dtoa_r+0x240>
 8006bca:	9a00      	ldr	r2, [sp, #0]
 8006bcc:	4b57      	ldr	r3, [pc, #348]	; (8006d2c <_dtoa_r+0x2ec>)
 8006bce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bd6:	ec51 0b19 	vmov	r0, r1, d9
 8006bda:	f7f9 ff7f 	bl	8000adc <__aeabi_dcmplt>
 8006bde:	2800      	cmp	r0, #0
 8006be0:	d050      	beq.n	8006c84 <_dtoa_r+0x244>
 8006be2:	9b00      	ldr	r3, [sp, #0]
 8006be4:	3b01      	subs	r3, #1
 8006be6:	9300      	str	r3, [sp, #0]
 8006be8:	2300      	movs	r3, #0
 8006bea:	930b      	str	r3, [sp, #44]	; 0x2c
 8006bec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006bee:	1b5d      	subs	r5, r3, r5
 8006bf0:	1e6b      	subs	r3, r5, #1
 8006bf2:	9305      	str	r3, [sp, #20]
 8006bf4:	bf45      	ittet	mi
 8006bf6:	f1c5 0301 	rsbmi	r3, r5, #1
 8006bfa:	9304      	strmi	r3, [sp, #16]
 8006bfc:	2300      	movpl	r3, #0
 8006bfe:	2300      	movmi	r3, #0
 8006c00:	bf4c      	ite	mi
 8006c02:	9305      	strmi	r3, [sp, #20]
 8006c04:	9304      	strpl	r3, [sp, #16]
 8006c06:	9b00      	ldr	r3, [sp, #0]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	db3d      	blt.n	8006c88 <_dtoa_r+0x248>
 8006c0c:	9b05      	ldr	r3, [sp, #20]
 8006c0e:	9a00      	ldr	r2, [sp, #0]
 8006c10:	920a      	str	r2, [sp, #40]	; 0x28
 8006c12:	4413      	add	r3, r2
 8006c14:	9305      	str	r3, [sp, #20]
 8006c16:	2300      	movs	r3, #0
 8006c18:	9307      	str	r3, [sp, #28]
 8006c1a:	9b06      	ldr	r3, [sp, #24]
 8006c1c:	2b09      	cmp	r3, #9
 8006c1e:	f200 8089 	bhi.w	8006d34 <_dtoa_r+0x2f4>
 8006c22:	2b05      	cmp	r3, #5
 8006c24:	bfc4      	itt	gt
 8006c26:	3b04      	subgt	r3, #4
 8006c28:	9306      	strgt	r3, [sp, #24]
 8006c2a:	9b06      	ldr	r3, [sp, #24]
 8006c2c:	f1a3 0302 	sub.w	r3, r3, #2
 8006c30:	bfcc      	ite	gt
 8006c32:	2500      	movgt	r5, #0
 8006c34:	2501      	movle	r5, #1
 8006c36:	2b03      	cmp	r3, #3
 8006c38:	f200 8087 	bhi.w	8006d4a <_dtoa_r+0x30a>
 8006c3c:	e8df f003 	tbb	[pc, r3]
 8006c40:	59383a2d 	.word	0x59383a2d
 8006c44:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006c48:	441d      	add	r5, r3
 8006c4a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006c4e:	2b20      	cmp	r3, #32
 8006c50:	bfc1      	itttt	gt
 8006c52:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006c56:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006c5a:	fa0b f303 	lslgt.w	r3, fp, r3
 8006c5e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006c62:	bfda      	itte	le
 8006c64:	f1c3 0320 	rsble	r3, r3, #32
 8006c68:	fa06 f003 	lslle.w	r0, r6, r3
 8006c6c:	4318      	orrgt	r0, r3
 8006c6e:	f7f9 fc49 	bl	8000504 <__aeabi_ui2d>
 8006c72:	2301      	movs	r3, #1
 8006c74:	4606      	mov	r6, r0
 8006c76:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006c7a:	3d01      	subs	r5, #1
 8006c7c:	930e      	str	r3, [sp, #56]	; 0x38
 8006c7e:	e76a      	b.n	8006b56 <_dtoa_r+0x116>
 8006c80:	2301      	movs	r3, #1
 8006c82:	e7b2      	b.n	8006bea <_dtoa_r+0x1aa>
 8006c84:	900b      	str	r0, [sp, #44]	; 0x2c
 8006c86:	e7b1      	b.n	8006bec <_dtoa_r+0x1ac>
 8006c88:	9b04      	ldr	r3, [sp, #16]
 8006c8a:	9a00      	ldr	r2, [sp, #0]
 8006c8c:	1a9b      	subs	r3, r3, r2
 8006c8e:	9304      	str	r3, [sp, #16]
 8006c90:	4253      	negs	r3, r2
 8006c92:	9307      	str	r3, [sp, #28]
 8006c94:	2300      	movs	r3, #0
 8006c96:	930a      	str	r3, [sp, #40]	; 0x28
 8006c98:	e7bf      	b.n	8006c1a <_dtoa_r+0x1da>
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	9308      	str	r3, [sp, #32]
 8006c9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	dc55      	bgt.n	8006d50 <_dtoa_r+0x310>
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006caa:	461a      	mov	r2, r3
 8006cac:	9209      	str	r2, [sp, #36]	; 0x24
 8006cae:	e00c      	b.n	8006cca <_dtoa_r+0x28a>
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	e7f3      	b.n	8006c9c <_dtoa_r+0x25c>
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006cb8:	9308      	str	r3, [sp, #32]
 8006cba:	9b00      	ldr	r3, [sp, #0]
 8006cbc:	4413      	add	r3, r2
 8006cbe:	9302      	str	r3, [sp, #8]
 8006cc0:	3301      	adds	r3, #1
 8006cc2:	2b01      	cmp	r3, #1
 8006cc4:	9303      	str	r3, [sp, #12]
 8006cc6:	bfb8      	it	lt
 8006cc8:	2301      	movlt	r3, #1
 8006cca:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006ccc:	2200      	movs	r2, #0
 8006cce:	6042      	str	r2, [r0, #4]
 8006cd0:	2204      	movs	r2, #4
 8006cd2:	f102 0614 	add.w	r6, r2, #20
 8006cd6:	429e      	cmp	r6, r3
 8006cd8:	6841      	ldr	r1, [r0, #4]
 8006cda:	d93d      	bls.n	8006d58 <_dtoa_r+0x318>
 8006cdc:	4620      	mov	r0, r4
 8006cde:	f7ff f99f 	bl	8006020 <_Balloc>
 8006ce2:	9001      	str	r0, [sp, #4]
 8006ce4:	2800      	cmp	r0, #0
 8006ce6:	d13b      	bne.n	8006d60 <_dtoa_r+0x320>
 8006ce8:	4b11      	ldr	r3, [pc, #68]	; (8006d30 <_dtoa_r+0x2f0>)
 8006cea:	4602      	mov	r2, r0
 8006cec:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006cf0:	e6c0      	b.n	8006a74 <_dtoa_r+0x34>
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	e7df      	b.n	8006cb6 <_dtoa_r+0x276>
 8006cf6:	bf00      	nop
 8006cf8:	636f4361 	.word	0x636f4361
 8006cfc:	3fd287a7 	.word	0x3fd287a7
 8006d00:	8b60c8b3 	.word	0x8b60c8b3
 8006d04:	3fc68a28 	.word	0x3fc68a28
 8006d08:	509f79fb 	.word	0x509f79fb
 8006d0c:	3fd34413 	.word	0x3fd34413
 8006d10:	0800988c 	.word	0x0800988c
 8006d14:	08009a57 	.word	0x08009a57
 8006d18:	7ff00000 	.word	0x7ff00000
 8006d1c:	08009a51 	.word	0x08009a51
 8006d20:	08009a48 	.word	0x08009a48
 8006d24:	08009a56 	.word	0x08009a56
 8006d28:	3ff80000 	.word	0x3ff80000
 8006d2c:	08009938 	.word	0x08009938
 8006d30:	080098ff 	.word	0x080098ff
 8006d34:	2501      	movs	r5, #1
 8006d36:	2300      	movs	r3, #0
 8006d38:	9306      	str	r3, [sp, #24]
 8006d3a:	9508      	str	r5, [sp, #32]
 8006d3c:	f04f 33ff 	mov.w	r3, #4294967295
 8006d40:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006d44:	2200      	movs	r2, #0
 8006d46:	2312      	movs	r3, #18
 8006d48:	e7b0      	b.n	8006cac <_dtoa_r+0x26c>
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	9308      	str	r3, [sp, #32]
 8006d4e:	e7f5      	b.n	8006d3c <_dtoa_r+0x2fc>
 8006d50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d52:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006d56:	e7b8      	b.n	8006cca <_dtoa_r+0x28a>
 8006d58:	3101      	adds	r1, #1
 8006d5a:	6041      	str	r1, [r0, #4]
 8006d5c:	0052      	lsls	r2, r2, #1
 8006d5e:	e7b8      	b.n	8006cd2 <_dtoa_r+0x292>
 8006d60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d62:	9a01      	ldr	r2, [sp, #4]
 8006d64:	601a      	str	r2, [r3, #0]
 8006d66:	9b03      	ldr	r3, [sp, #12]
 8006d68:	2b0e      	cmp	r3, #14
 8006d6a:	f200 809d 	bhi.w	8006ea8 <_dtoa_r+0x468>
 8006d6e:	2d00      	cmp	r5, #0
 8006d70:	f000 809a 	beq.w	8006ea8 <_dtoa_r+0x468>
 8006d74:	9b00      	ldr	r3, [sp, #0]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	dd32      	ble.n	8006de0 <_dtoa_r+0x3a0>
 8006d7a:	4ab7      	ldr	r2, [pc, #732]	; (8007058 <_dtoa_r+0x618>)
 8006d7c:	f003 030f 	and.w	r3, r3, #15
 8006d80:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006d84:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006d88:	9b00      	ldr	r3, [sp, #0]
 8006d8a:	05d8      	lsls	r0, r3, #23
 8006d8c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006d90:	d516      	bpl.n	8006dc0 <_dtoa_r+0x380>
 8006d92:	4bb2      	ldr	r3, [pc, #712]	; (800705c <_dtoa_r+0x61c>)
 8006d94:	ec51 0b19 	vmov	r0, r1, d9
 8006d98:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006d9c:	f7f9 fd56 	bl	800084c <__aeabi_ddiv>
 8006da0:	f007 070f 	and.w	r7, r7, #15
 8006da4:	4682      	mov	sl, r0
 8006da6:	468b      	mov	fp, r1
 8006da8:	2503      	movs	r5, #3
 8006daa:	4eac      	ldr	r6, [pc, #688]	; (800705c <_dtoa_r+0x61c>)
 8006dac:	b957      	cbnz	r7, 8006dc4 <_dtoa_r+0x384>
 8006dae:	4642      	mov	r2, r8
 8006db0:	464b      	mov	r3, r9
 8006db2:	4650      	mov	r0, sl
 8006db4:	4659      	mov	r1, fp
 8006db6:	f7f9 fd49 	bl	800084c <__aeabi_ddiv>
 8006dba:	4682      	mov	sl, r0
 8006dbc:	468b      	mov	fp, r1
 8006dbe:	e028      	b.n	8006e12 <_dtoa_r+0x3d2>
 8006dc0:	2502      	movs	r5, #2
 8006dc2:	e7f2      	b.n	8006daa <_dtoa_r+0x36a>
 8006dc4:	07f9      	lsls	r1, r7, #31
 8006dc6:	d508      	bpl.n	8006dda <_dtoa_r+0x39a>
 8006dc8:	4640      	mov	r0, r8
 8006dca:	4649      	mov	r1, r9
 8006dcc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006dd0:	f7f9 fc12 	bl	80005f8 <__aeabi_dmul>
 8006dd4:	3501      	adds	r5, #1
 8006dd6:	4680      	mov	r8, r0
 8006dd8:	4689      	mov	r9, r1
 8006dda:	107f      	asrs	r7, r7, #1
 8006ddc:	3608      	adds	r6, #8
 8006dde:	e7e5      	b.n	8006dac <_dtoa_r+0x36c>
 8006de0:	f000 809b 	beq.w	8006f1a <_dtoa_r+0x4da>
 8006de4:	9b00      	ldr	r3, [sp, #0]
 8006de6:	4f9d      	ldr	r7, [pc, #628]	; (800705c <_dtoa_r+0x61c>)
 8006de8:	425e      	negs	r6, r3
 8006dea:	4b9b      	ldr	r3, [pc, #620]	; (8007058 <_dtoa_r+0x618>)
 8006dec:	f006 020f 	and.w	r2, r6, #15
 8006df0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006df8:	ec51 0b19 	vmov	r0, r1, d9
 8006dfc:	f7f9 fbfc 	bl	80005f8 <__aeabi_dmul>
 8006e00:	1136      	asrs	r6, r6, #4
 8006e02:	4682      	mov	sl, r0
 8006e04:	468b      	mov	fp, r1
 8006e06:	2300      	movs	r3, #0
 8006e08:	2502      	movs	r5, #2
 8006e0a:	2e00      	cmp	r6, #0
 8006e0c:	d17a      	bne.n	8006f04 <_dtoa_r+0x4c4>
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d1d3      	bne.n	8006dba <_dtoa_r+0x37a>
 8006e12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	f000 8082 	beq.w	8006f1e <_dtoa_r+0x4de>
 8006e1a:	4b91      	ldr	r3, [pc, #580]	; (8007060 <_dtoa_r+0x620>)
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	4650      	mov	r0, sl
 8006e20:	4659      	mov	r1, fp
 8006e22:	f7f9 fe5b 	bl	8000adc <__aeabi_dcmplt>
 8006e26:	2800      	cmp	r0, #0
 8006e28:	d079      	beq.n	8006f1e <_dtoa_r+0x4de>
 8006e2a:	9b03      	ldr	r3, [sp, #12]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d076      	beq.n	8006f1e <_dtoa_r+0x4de>
 8006e30:	9b02      	ldr	r3, [sp, #8]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	dd36      	ble.n	8006ea4 <_dtoa_r+0x464>
 8006e36:	9b00      	ldr	r3, [sp, #0]
 8006e38:	4650      	mov	r0, sl
 8006e3a:	4659      	mov	r1, fp
 8006e3c:	1e5f      	subs	r7, r3, #1
 8006e3e:	2200      	movs	r2, #0
 8006e40:	4b88      	ldr	r3, [pc, #544]	; (8007064 <_dtoa_r+0x624>)
 8006e42:	f7f9 fbd9 	bl	80005f8 <__aeabi_dmul>
 8006e46:	9e02      	ldr	r6, [sp, #8]
 8006e48:	4682      	mov	sl, r0
 8006e4a:	468b      	mov	fp, r1
 8006e4c:	3501      	adds	r5, #1
 8006e4e:	4628      	mov	r0, r5
 8006e50:	f7f9 fb68 	bl	8000524 <__aeabi_i2d>
 8006e54:	4652      	mov	r2, sl
 8006e56:	465b      	mov	r3, fp
 8006e58:	f7f9 fbce 	bl	80005f8 <__aeabi_dmul>
 8006e5c:	4b82      	ldr	r3, [pc, #520]	; (8007068 <_dtoa_r+0x628>)
 8006e5e:	2200      	movs	r2, #0
 8006e60:	f7f9 fa14 	bl	800028c <__adddf3>
 8006e64:	46d0      	mov	r8, sl
 8006e66:	46d9      	mov	r9, fp
 8006e68:	4682      	mov	sl, r0
 8006e6a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006e6e:	2e00      	cmp	r6, #0
 8006e70:	d158      	bne.n	8006f24 <_dtoa_r+0x4e4>
 8006e72:	4b7e      	ldr	r3, [pc, #504]	; (800706c <_dtoa_r+0x62c>)
 8006e74:	2200      	movs	r2, #0
 8006e76:	4640      	mov	r0, r8
 8006e78:	4649      	mov	r1, r9
 8006e7a:	f7f9 fa05 	bl	8000288 <__aeabi_dsub>
 8006e7e:	4652      	mov	r2, sl
 8006e80:	465b      	mov	r3, fp
 8006e82:	4680      	mov	r8, r0
 8006e84:	4689      	mov	r9, r1
 8006e86:	f7f9 fe47 	bl	8000b18 <__aeabi_dcmpgt>
 8006e8a:	2800      	cmp	r0, #0
 8006e8c:	f040 8295 	bne.w	80073ba <_dtoa_r+0x97a>
 8006e90:	4652      	mov	r2, sl
 8006e92:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006e96:	4640      	mov	r0, r8
 8006e98:	4649      	mov	r1, r9
 8006e9a:	f7f9 fe1f 	bl	8000adc <__aeabi_dcmplt>
 8006e9e:	2800      	cmp	r0, #0
 8006ea0:	f040 8289 	bne.w	80073b6 <_dtoa_r+0x976>
 8006ea4:	ec5b ab19 	vmov	sl, fp, d9
 8006ea8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	f2c0 8148 	blt.w	8007140 <_dtoa_r+0x700>
 8006eb0:	9a00      	ldr	r2, [sp, #0]
 8006eb2:	2a0e      	cmp	r2, #14
 8006eb4:	f300 8144 	bgt.w	8007140 <_dtoa_r+0x700>
 8006eb8:	4b67      	ldr	r3, [pc, #412]	; (8007058 <_dtoa_r+0x618>)
 8006eba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ebe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006ec2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	f280 80d5 	bge.w	8007074 <_dtoa_r+0x634>
 8006eca:	9b03      	ldr	r3, [sp, #12]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	f300 80d1 	bgt.w	8007074 <_dtoa_r+0x634>
 8006ed2:	f040 826f 	bne.w	80073b4 <_dtoa_r+0x974>
 8006ed6:	4b65      	ldr	r3, [pc, #404]	; (800706c <_dtoa_r+0x62c>)
 8006ed8:	2200      	movs	r2, #0
 8006eda:	4640      	mov	r0, r8
 8006edc:	4649      	mov	r1, r9
 8006ede:	f7f9 fb8b 	bl	80005f8 <__aeabi_dmul>
 8006ee2:	4652      	mov	r2, sl
 8006ee4:	465b      	mov	r3, fp
 8006ee6:	f7f9 fe0d 	bl	8000b04 <__aeabi_dcmpge>
 8006eea:	9e03      	ldr	r6, [sp, #12]
 8006eec:	4637      	mov	r7, r6
 8006eee:	2800      	cmp	r0, #0
 8006ef0:	f040 8245 	bne.w	800737e <_dtoa_r+0x93e>
 8006ef4:	9d01      	ldr	r5, [sp, #4]
 8006ef6:	2331      	movs	r3, #49	; 0x31
 8006ef8:	f805 3b01 	strb.w	r3, [r5], #1
 8006efc:	9b00      	ldr	r3, [sp, #0]
 8006efe:	3301      	adds	r3, #1
 8006f00:	9300      	str	r3, [sp, #0]
 8006f02:	e240      	b.n	8007386 <_dtoa_r+0x946>
 8006f04:	07f2      	lsls	r2, r6, #31
 8006f06:	d505      	bpl.n	8006f14 <_dtoa_r+0x4d4>
 8006f08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f0c:	f7f9 fb74 	bl	80005f8 <__aeabi_dmul>
 8006f10:	3501      	adds	r5, #1
 8006f12:	2301      	movs	r3, #1
 8006f14:	1076      	asrs	r6, r6, #1
 8006f16:	3708      	adds	r7, #8
 8006f18:	e777      	b.n	8006e0a <_dtoa_r+0x3ca>
 8006f1a:	2502      	movs	r5, #2
 8006f1c:	e779      	b.n	8006e12 <_dtoa_r+0x3d2>
 8006f1e:	9f00      	ldr	r7, [sp, #0]
 8006f20:	9e03      	ldr	r6, [sp, #12]
 8006f22:	e794      	b.n	8006e4e <_dtoa_r+0x40e>
 8006f24:	9901      	ldr	r1, [sp, #4]
 8006f26:	4b4c      	ldr	r3, [pc, #304]	; (8007058 <_dtoa_r+0x618>)
 8006f28:	4431      	add	r1, r6
 8006f2a:	910d      	str	r1, [sp, #52]	; 0x34
 8006f2c:	9908      	ldr	r1, [sp, #32]
 8006f2e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006f32:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006f36:	2900      	cmp	r1, #0
 8006f38:	d043      	beq.n	8006fc2 <_dtoa_r+0x582>
 8006f3a:	494d      	ldr	r1, [pc, #308]	; (8007070 <_dtoa_r+0x630>)
 8006f3c:	2000      	movs	r0, #0
 8006f3e:	f7f9 fc85 	bl	800084c <__aeabi_ddiv>
 8006f42:	4652      	mov	r2, sl
 8006f44:	465b      	mov	r3, fp
 8006f46:	f7f9 f99f 	bl	8000288 <__aeabi_dsub>
 8006f4a:	9d01      	ldr	r5, [sp, #4]
 8006f4c:	4682      	mov	sl, r0
 8006f4e:	468b      	mov	fp, r1
 8006f50:	4649      	mov	r1, r9
 8006f52:	4640      	mov	r0, r8
 8006f54:	f7f9 fe00 	bl	8000b58 <__aeabi_d2iz>
 8006f58:	4606      	mov	r6, r0
 8006f5a:	f7f9 fae3 	bl	8000524 <__aeabi_i2d>
 8006f5e:	4602      	mov	r2, r0
 8006f60:	460b      	mov	r3, r1
 8006f62:	4640      	mov	r0, r8
 8006f64:	4649      	mov	r1, r9
 8006f66:	f7f9 f98f 	bl	8000288 <__aeabi_dsub>
 8006f6a:	3630      	adds	r6, #48	; 0x30
 8006f6c:	f805 6b01 	strb.w	r6, [r5], #1
 8006f70:	4652      	mov	r2, sl
 8006f72:	465b      	mov	r3, fp
 8006f74:	4680      	mov	r8, r0
 8006f76:	4689      	mov	r9, r1
 8006f78:	f7f9 fdb0 	bl	8000adc <__aeabi_dcmplt>
 8006f7c:	2800      	cmp	r0, #0
 8006f7e:	d163      	bne.n	8007048 <_dtoa_r+0x608>
 8006f80:	4642      	mov	r2, r8
 8006f82:	464b      	mov	r3, r9
 8006f84:	4936      	ldr	r1, [pc, #216]	; (8007060 <_dtoa_r+0x620>)
 8006f86:	2000      	movs	r0, #0
 8006f88:	f7f9 f97e 	bl	8000288 <__aeabi_dsub>
 8006f8c:	4652      	mov	r2, sl
 8006f8e:	465b      	mov	r3, fp
 8006f90:	f7f9 fda4 	bl	8000adc <__aeabi_dcmplt>
 8006f94:	2800      	cmp	r0, #0
 8006f96:	f040 80b5 	bne.w	8007104 <_dtoa_r+0x6c4>
 8006f9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f9c:	429d      	cmp	r5, r3
 8006f9e:	d081      	beq.n	8006ea4 <_dtoa_r+0x464>
 8006fa0:	4b30      	ldr	r3, [pc, #192]	; (8007064 <_dtoa_r+0x624>)
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	4650      	mov	r0, sl
 8006fa6:	4659      	mov	r1, fp
 8006fa8:	f7f9 fb26 	bl	80005f8 <__aeabi_dmul>
 8006fac:	4b2d      	ldr	r3, [pc, #180]	; (8007064 <_dtoa_r+0x624>)
 8006fae:	4682      	mov	sl, r0
 8006fb0:	468b      	mov	fp, r1
 8006fb2:	4640      	mov	r0, r8
 8006fb4:	4649      	mov	r1, r9
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	f7f9 fb1e 	bl	80005f8 <__aeabi_dmul>
 8006fbc:	4680      	mov	r8, r0
 8006fbe:	4689      	mov	r9, r1
 8006fc0:	e7c6      	b.n	8006f50 <_dtoa_r+0x510>
 8006fc2:	4650      	mov	r0, sl
 8006fc4:	4659      	mov	r1, fp
 8006fc6:	f7f9 fb17 	bl	80005f8 <__aeabi_dmul>
 8006fca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006fcc:	9d01      	ldr	r5, [sp, #4]
 8006fce:	930f      	str	r3, [sp, #60]	; 0x3c
 8006fd0:	4682      	mov	sl, r0
 8006fd2:	468b      	mov	fp, r1
 8006fd4:	4649      	mov	r1, r9
 8006fd6:	4640      	mov	r0, r8
 8006fd8:	f7f9 fdbe 	bl	8000b58 <__aeabi_d2iz>
 8006fdc:	4606      	mov	r6, r0
 8006fde:	f7f9 faa1 	bl	8000524 <__aeabi_i2d>
 8006fe2:	3630      	adds	r6, #48	; 0x30
 8006fe4:	4602      	mov	r2, r0
 8006fe6:	460b      	mov	r3, r1
 8006fe8:	4640      	mov	r0, r8
 8006fea:	4649      	mov	r1, r9
 8006fec:	f7f9 f94c 	bl	8000288 <__aeabi_dsub>
 8006ff0:	f805 6b01 	strb.w	r6, [r5], #1
 8006ff4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ff6:	429d      	cmp	r5, r3
 8006ff8:	4680      	mov	r8, r0
 8006ffa:	4689      	mov	r9, r1
 8006ffc:	f04f 0200 	mov.w	r2, #0
 8007000:	d124      	bne.n	800704c <_dtoa_r+0x60c>
 8007002:	4b1b      	ldr	r3, [pc, #108]	; (8007070 <_dtoa_r+0x630>)
 8007004:	4650      	mov	r0, sl
 8007006:	4659      	mov	r1, fp
 8007008:	f7f9 f940 	bl	800028c <__adddf3>
 800700c:	4602      	mov	r2, r0
 800700e:	460b      	mov	r3, r1
 8007010:	4640      	mov	r0, r8
 8007012:	4649      	mov	r1, r9
 8007014:	f7f9 fd80 	bl	8000b18 <__aeabi_dcmpgt>
 8007018:	2800      	cmp	r0, #0
 800701a:	d173      	bne.n	8007104 <_dtoa_r+0x6c4>
 800701c:	4652      	mov	r2, sl
 800701e:	465b      	mov	r3, fp
 8007020:	4913      	ldr	r1, [pc, #76]	; (8007070 <_dtoa_r+0x630>)
 8007022:	2000      	movs	r0, #0
 8007024:	f7f9 f930 	bl	8000288 <__aeabi_dsub>
 8007028:	4602      	mov	r2, r0
 800702a:	460b      	mov	r3, r1
 800702c:	4640      	mov	r0, r8
 800702e:	4649      	mov	r1, r9
 8007030:	f7f9 fd54 	bl	8000adc <__aeabi_dcmplt>
 8007034:	2800      	cmp	r0, #0
 8007036:	f43f af35 	beq.w	8006ea4 <_dtoa_r+0x464>
 800703a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800703c:	1e6b      	subs	r3, r5, #1
 800703e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007040:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007044:	2b30      	cmp	r3, #48	; 0x30
 8007046:	d0f8      	beq.n	800703a <_dtoa_r+0x5fa>
 8007048:	9700      	str	r7, [sp, #0]
 800704a:	e049      	b.n	80070e0 <_dtoa_r+0x6a0>
 800704c:	4b05      	ldr	r3, [pc, #20]	; (8007064 <_dtoa_r+0x624>)
 800704e:	f7f9 fad3 	bl	80005f8 <__aeabi_dmul>
 8007052:	4680      	mov	r8, r0
 8007054:	4689      	mov	r9, r1
 8007056:	e7bd      	b.n	8006fd4 <_dtoa_r+0x594>
 8007058:	08009938 	.word	0x08009938
 800705c:	08009910 	.word	0x08009910
 8007060:	3ff00000 	.word	0x3ff00000
 8007064:	40240000 	.word	0x40240000
 8007068:	401c0000 	.word	0x401c0000
 800706c:	40140000 	.word	0x40140000
 8007070:	3fe00000 	.word	0x3fe00000
 8007074:	9d01      	ldr	r5, [sp, #4]
 8007076:	4656      	mov	r6, sl
 8007078:	465f      	mov	r7, fp
 800707a:	4642      	mov	r2, r8
 800707c:	464b      	mov	r3, r9
 800707e:	4630      	mov	r0, r6
 8007080:	4639      	mov	r1, r7
 8007082:	f7f9 fbe3 	bl	800084c <__aeabi_ddiv>
 8007086:	f7f9 fd67 	bl	8000b58 <__aeabi_d2iz>
 800708a:	4682      	mov	sl, r0
 800708c:	f7f9 fa4a 	bl	8000524 <__aeabi_i2d>
 8007090:	4642      	mov	r2, r8
 8007092:	464b      	mov	r3, r9
 8007094:	f7f9 fab0 	bl	80005f8 <__aeabi_dmul>
 8007098:	4602      	mov	r2, r0
 800709a:	460b      	mov	r3, r1
 800709c:	4630      	mov	r0, r6
 800709e:	4639      	mov	r1, r7
 80070a0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80070a4:	f7f9 f8f0 	bl	8000288 <__aeabi_dsub>
 80070a8:	f805 6b01 	strb.w	r6, [r5], #1
 80070ac:	9e01      	ldr	r6, [sp, #4]
 80070ae:	9f03      	ldr	r7, [sp, #12]
 80070b0:	1bae      	subs	r6, r5, r6
 80070b2:	42b7      	cmp	r7, r6
 80070b4:	4602      	mov	r2, r0
 80070b6:	460b      	mov	r3, r1
 80070b8:	d135      	bne.n	8007126 <_dtoa_r+0x6e6>
 80070ba:	f7f9 f8e7 	bl	800028c <__adddf3>
 80070be:	4642      	mov	r2, r8
 80070c0:	464b      	mov	r3, r9
 80070c2:	4606      	mov	r6, r0
 80070c4:	460f      	mov	r7, r1
 80070c6:	f7f9 fd27 	bl	8000b18 <__aeabi_dcmpgt>
 80070ca:	b9d0      	cbnz	r0, 8007102 <_dtoa_r+0x6c2>
 80070cc:	4642      	mov	r2, r8
 80070ce:	464b      	mov	r3, r9
 80070d0:	4630      	mov	r0, r6
 80070d2:	4639      	mov	r1, r7
 80070d4:	f7f9 fcf8 	bl	8000ac8 <__aeabi_dcmpeq>
 80070d8:	b110      	cbz	r0, 80070e0 <_dtoa_r+0x6a0>
 80070da:	f01a 0f01 	tst.w	sl, #1
 80070de:	d110      	bne.n	8007102 <_dtoa_r+0x6c2>
 80070e0:	4620      	mov	r0, r4
 80070e2:	ee18 1a10 	vmov	r1, s16
 80070e6:	f7fe ffdb 	bl	80060a0 <_Bfree>
 80070ea:	2300      	movs	r3, #0
 80070ec:	9800      	ldr	r0, [sp, #0]
 80070ee:	702b      	strb	r3, [r5, #0]
 80070f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80070f2:	3001      	adds	r0, #1
 80070f4:	6018      	str	r0, [r3, #0]
 80070f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	f43f acf1 	beq.w	8006ae0 <_dtoa_r+0xa0>
 80070fe:	601d      	str	r5, [r3, #0]
 8007100:	e4ee      	b.n	8006ae0 <_dtoa_r+0xa0>
 8007102:	9f00      	ldr	r7, [sp, #0]
 8007104:	462b      	mov	r3, r5
 8007106:	461d      	mov	r5, r3
 8007108:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800710c:	2a39      	cmp	r2, #57	; 0x39
 800710e:	d106      	bne.n	800711e <_dtoa_r+0x6de>
 8007110:	9a01      	ldr	r2, [sp, #4]
 8007112:	429a      	cmp	r2, r3
 8007114:	d1f7      	bne.n	8007106 <_dtoa_r+0x6c6>
 8007116:	9901      	ldr	r1, [sp, #4]
 8007118:	2230      	movs	r2, #48	; 0x30
 800711a:	3701      	adds	r7, #1
 800711c:	700a      	strb	r2, [r1, #0]
 800711e:	781a      	ldrb	r2, [r3, #0]
 8007120:	3201      	adds	r2, #1
 8007122:	701a      	strb	r2, [r3, #0]
 8007124:	e790      	b.n	8007048 <_dtoa_r+0x608>
 8007126:	4ba6      	ldr	r3, [pc, #664]	; (80073c0 <_dtoa_r+0x980>)
 8007128:	2200      	movs	r2, #0
 800712a:	f7f9 fa65 	bl	80005f8 <__aeabi_dmul>
 800712e:	2200      	movs	r2, #0
 8007130:	2300      	movs	r3, #0
 8007132:	4606      	mov	r6, r0
 8007134:	460f      	mov	r7, r1
 8007136:	f7f9 fcc7 	bl	8000ac8 <__aeabi_dcmpeq>
 800713a:	2800      	cmp	r0, #0
 800713c:	d09d      	beq.n	800707a <_dtoa_r+0x63a>
 800713e:	e7cf      	b.n	80070e0 <_dtoa_r+0x6a0>
 8007140:	9a08      	ldr	r2, [sp, #32]
 8007142:	2a00      	cmp	r2, #0
 8007144:	f000 80d7 	beq.w	80072f6 <_dtoa_r+0x8b6>
 8007148:	9a06      	ldr	r2, [sp, #24]
 800714a:	2a01      	cmp	r2, #1
 800714c:	f300 80ba 	bgt.w	80072c4 <_dtoa_r+0x884>
 8007150:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007152:	2a00      	cmp	r2, #0
 8007154:	f000 80b2 	beq.w	80072bc <_dtoa_r+0x87c>
 8007158:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800715c:	9e07      	ldr	r6, [sp, #28]
 800715e:	9d04      	ldr	r5, [sp, #16]
 8007160:	9a04      	ldr	r2, [sp, #16]
 8007162:	441a      	add	r2, r3
 8007164:	9204      	str	r2, [sp, #16]
 8007166:	9a05      	ldr	r2, [sp, #20]
 8007168:	2101      	movs	r1, #1
 800716a:	441a      	add	r2, r3
 800716c:	4620      	mov	r0, r4
 800716e:	9205      	str	r2, [sp, #20]
 8007170:	f7ff f84e 	bl	8006210 <__i2b>
 8007174:	4607      	mov	r7, r0
 8007176:	2d00      	cmp	r5, #0
 8007178:	dd0c      	ble.n	8007194 <_dtoa_r+0x754>
 800717a:	9b05      	ldr	r3, [sp, #20]
 800717c:	2b00      	cmp	r3, #0
 800717e:	dd09      	ble.n	8007194 <_dtoa_r+0x754>
 8007180:	42ab      	cmp	r3, r5
 8007182:	9a04      	ldr	r2, [sp, #16]
 8007184:	bfa8      	it	ge
 8007186:	462b      	movge	r3, r5
 8007188:	1ad2      	subs	r2, r2, r3
 800718a:	9204      	str	r2, [sp, #16]
 800718c:	9a05      	ldr	r2, [sp, #20]
 800718e:	1aed      	subs	r5, r5, r3
 8007190:	1ad3      	subs	r3, r2, r3
 8007192:	9305      	str	r3, [sp, #20]
 8007194:	9b07      	ldr	r3, [sp, #28]
 8007196:	b31b      	cbz	r3, 80071e0 <_dtoa_r+0x7a0>
 8007198:	9b08      	ldr	r3, [sp, #32]
 800719a:	2b00      	cmp	r3, #0
 800719c:	f000 80af 	beq.w	80072fe <_dtoa_r+0x8be>
 80071a0:	2e00      	cmp	r6, #0
 80071a2:	dd13      	ble.n	80071cc <_dtoa_r+0x78c>
 80071a4:	4639      	mov	r1, r7
 80071a6:	4632      	mov	r2, r6
 80071a8:	4620      	mov	r0, r4
 80071aa:	f7ff f8f1 	bl	8006390 <__pow5mult>
 80071ae:	ee18 2a10 	vmov	r2, s16
 80071b2:	4601      	mov	r1, r0
 80071b4:	4607      	mov	r7, r0
 80071b6:	4620      	mov	r0, r4
 80071b8:	f7ff f840 	bl	800623c <__multiply>
 80071bc:	ee18 1a10 	vmov	r1, s16
 80071c0:	4680      	mov	r8, r0
 80071c2:	4620      	mov	r0, r4
 80071c4:	f7fe ff6c 	bl	80060a0 <_Bfree>
 80071c8:	ee08 8a10 	vmov	s16, r8
 80071cc:	9b07      	ldr	r3, [sp, #28]
 80071ce:	1b9a      	subs	r2, r3, r6
 80071d0:	d006      	beq.n	80071e0 <_dtoa_r+0x7a0>
 80071d2:	ee18 1a10 	vmov	r1, s16
 80071d6:	4620      	mov	r0, r4
 80071d8:	f7ff f8da 	bl	8006390 <__pow5mult>
 80071dc:	ee08 0a10 	vmov	s16, r0
 80071e0:	2101      	movs	r1, #1
 80071e2:	4620      	mov	r0, r4
 80071e4:	f7ff f814 	bl	8006210 <__i2b>
 80071e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	4606      	mov	r6, r0
 80071ee:	f340 8088 	ble.w	8007302 <_dtoa_r+0x8c2>
 80071f2:	461a      	mov	r2, r3
 80071f4:	4601      	mov	r1, r0
 80071f6:	4620      	mov	r0, r4
 80071f8:	f7ff f8ca 	bl	8006390 <__pow5mult>
 80071fc:	9b06      	ldr	r3, [sp, #24]
 80071fe:	2b01      	cmp	r3, #1
 8007200:	4606      	mov	r6, r0
 8007202:	f340 8081 	ble.w	8007308 <_dtoa_r+0x8c8>
 8007206:	f04f 0800 	mov.w	r8, #0
 800720a:	6933      	ldr	r3, [r6, #16]
 800720c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007210:	6918      	ldr	r0, [r3, #16]
 8007212:	f7fe ffad 	bl	8006170 <__hi0bits>
 8007216:	f1c0 0020 	rsb	r0, r0, #32
 800721a:	9b05      	ldr	r3, [sp, #20]
 800721c:	4418      	add	r0, r3
 800721e:	f010 001f 	ands.w	r0, r0, #31
 8007222:	f000 8092 	beq.w	800734a <_dtoa_r+0x90a>
 8007226:	f1c0 0320 	rsb	r3, r0, #32
 800722a:	2b04      	cmp	r3, #4
 800722c:	f340 808a 	ble.w	8007344 <_dtoa_r+0x904>
 8007230:	f1c0 001c 	rsb	r0, r0, #28
 8007234:	9b04      	ldr	r3, [sp, #16]
 8007236:	4403      	add	r3, r0
 8007238:	9304      	str	r3, [sp, #16]
 800723a:	9b05      	ldr	r3, [sp, #20]
 800723c:	4403      	add	r3, r0
 800723e:	4405      	add	r5, r0
 8007240:	9305      	str	r3, [sp, #20]
 8007242:	9b04      	ldr	r3, [sp, #16]
 8007244:	2b00      	cmp	r3, #0
 8007246:	dd07      	ble.n	8007258 <_dtoa_r+0x818>
 8007248:	ee18 1a10 	vmov	r1, s16
 800724c:	461a      	mov	r2, r3
 800724e:	4620      	mov	r0, r4
 8007250:	f7ff f8f8 	bl	8006444 <__lshift>
 8007254:	ee08 0a10 	vmov	s16, r0
 8007258:	9b05      	ldr	r3, [sp, #20]
 800725a:	2b00      	cmp	r3, #0
 800725c:	dd05      	ble.n	800726a <_dtoa_r+0x82a>
 800725e:	4631      	mov	r1, r6
 8007260:	461a      	mov	r2, r3
 8007262:	4620      	mov	r0, r4
 8007264:	f7ff f8ee 	bl	8006444 <__lshift>
 8007268:	4606      	mov	r6, r0
 800726a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800726c:	2b00      	cmp	r3, #0
 800726e:	d06e      	beq.n	800734e <_dtoa_r+0x90e>
 8007270:	ee18 0a10 	vmov	r0, s16
 8007274:	4631      	mov	r1, r6
 8007276:	f7ff f955 	bl	8006524 <__mcmp>
 800727a:	2800      	cmp	r0, #0
 800727c:	da67      	bge.n	800734e <_dtoa_r+0x90e>
 800727e:	9b00      	ldr	r3, [sp, #0]
 8007280:	3b01      	subs	r3, #1
 8007282:	ee18 1a10 	vmov	r1, s16
 8007286:	9300      	str	r3, [sp, #0]
 8007288:	220a      	movs	r2, #10
 800728a:	2300      	movs	r3, #0
 800728c:	4620      	mov	r0, r4
 800728e:	f7fe ff29 	bl	80060e4 <__multadd>
 8007292:	9b08      	ldr	r3, [sp, #32]
 8007294:	ee08 0a10 	vmov	s16, r0
 8007298:	2b00      	cmp	r3, #0
 800729a:	f000 81b1 	beq.w	8007600 <_dtoa_r+0xbc0>
 800729e:	2300      	movs	r3, #0
 80072a0:	4639      	mov	r1, r7
 80072a2:	220a      	movs	r2, #10
 80072a4:	4620      	mov	r0, r4
 80072a6:	f7fe ff1d 	bl	80060e4 <__multadd>
 80072aa:	9b02      	ldr	r3, [sp, #8]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	4607      	mov	r7, r0
 80072b0:	f300 808e 	bgt.w	80073d0 <_dtoa_r+0x990>
 80072b4:	9b06      	ldr	r3, [sp, #24]
 80072b6:	2b02      	cmp	r3, #2
 80072b8:	dc51      	bgt.n	800735e <_dtoa_r+0x91e>
 80072ba:	e089      	b.n	80073d0 <_dtoa_r+0x990>
 80072bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80072be:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80072c2:	e74b      	b.n	800715c <_dtoa_r+0x71c>
 80072c4:	9b03      	ldr	r3, [sp, #12]
 80072c6:	1e5e      	subs	r6, r3, #1
 80072c8:	9b07      	ldr	r3, [sp, #28]
 80072ca:	42b3      	cmp	r3, r6
 80072cc:	bfbf      	itttt	lt
 80072ce:	9b07      	ldrlt	r3, [sp, #28]
 80072d0:	9607      	strlt	r6, [sp, #28]
 80072d2:	1af2      	sublt	r2, r6, r3
 80072d4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80072d6:	bfb6      	itet	lt
 80072d8:	189b      	addlt	r3, r3, r2
 80072da:	1b9e      	subge	r6, r3, r6
 80072dc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80072de:	9b03      	ldr	r3, [sp, #12]
 80072e0:	bfb8      	it	lt
 80072e2:	2600      	movlt	r6, #0
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	bfb7      	itett	lt
 80072e8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80072ec:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80072f0:	1a9d      	sublt	r5, r3, r2
 80072f2:	2300      	movlt	r3, #0
 80072f4:	e734      	b.n	8007160 <_dtoa_r+0x720>
 80072f6:	9e07      	ldr	r6, [sp, #28]
 80072f8:	9d04      	ldr	r5, [sp, #16]
 80072fa:	9f08      	ldr	r7, [sp, #32]
 80072fc:	e73b      	b.n	8007176 <_dtoa_r+0x736>
 80072fe:	9a07      	ldr	r2, [sp, #28]
 8007300:	e767      	b.n	80071d2 <_dtoa_r+0x792>
 8007302:	9b06      	ldr	r3, [sp, #24]
 8007304:	2b01      	cmp	r3, #1
 8007306:	dc18      	bgt.n	800733a <_dtoa_r+0x8fa>
 8007308:	f1ba 0f00 	cmp.w	sl, #0
 800730c:	d115      	bne.n	800733a <_dtoa_r+0x8fa>
 800730e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007312:	b993      	cbnz	r3, 800733a <_dtoa_r+0x8fa>
 8007314:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007318:	0d1b      	lsrs	r3, r3, #20
 800731a:	051b      	lsls	r3, r3, #20
 800731c:	b183      	cbz	r3, 8007340 <_dtoa_r+0x900>
 800731e:	9b04      	ldr	r3, [sp, #16]
 8007320:	3301      	adds	r3, #1
 8007322:	9304      	str	r3, [sp, #16]
 8007324:	9b05      	ldr	r3, [sp, #20]
 8007326:	3301      	adds	r3, #1
 8007328:	9305      	str	r3, [sp, #20]
 800732a:	f04f 0801 	mov.w	r8, #1
 800732e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007330:	2b00      	cmp	r3, #0
 8007332:	f47f af6a 	bne.w	800720a <_dtoa_r+0x7ca>
 8007336:	2001      	movs	r0, #1
 8007338:	e76f      	b.n	800721a <_dtoa_r+0x7da>
 800733a:	f04f 0800 	mov.w	r8, #0
 800733e:	e7f6      	b.n	800732e <_dtoa_r+0x8ee>
 8007340:	4698      	mov	r8, r3
 8007342:	e7f4      	b.n	800732e <_dtoa_r+0x8ee>
 8007344:	f43f af7d 	beq.w	8007242 <_dtoa_r+0x802>
 8007348:	4618      	mov	r0, r3
 800734a:	301c      	adds	r0, #28
 800734c:	e772      	b.n	8007234 <_dtoa_r+0x7f4>
 800734e:	9b03      	ldr	r3, [sp, #12]
 8007350:	2b00      	cmp	r3, #0
 8007352:	dc37      	bgt.n	80073c4 <_dtoa_r+0x984>
 8007354:	9b06      	ldr	r3, [sp, #24]
 8007356:	2b02      	cmp	r3, #2
 8007358:	dd34      	ble.n	80073c4 <_dtoa_r+0x984>
 800735a:	9b03      	ldr	r3, [sp, #12]
 800735c:	9302      	str	r3, [sp, #8]
 800735e:	9b02      	ldr	r3, [sp, #8]
 8007360:	b96b      	cbnz	r3, 800737e <_dtoa_r+0x93e>
 8007362:	4631      	mov	r1, r6
 8007364:	2205      	movs	r2, #5
 8007366:	4620      	mov	r0, r4
 8007368:	f7fe febc 	bl	80060e4 <__multadd>
 800736c:	4601      	mov	r1, r0
 800736e:	4606      	mov	r6, r0
 8007370:	ee18 0a10 	vmov	r0, s16
 8007374:	f7ff f8d6 	bl	8006524 <__mcmp>
 8007378:	2800      	cmp	r0, #0
 800737a:	f73f adbb 	bgt.w	8006ef4 <_dtoa_r+0x4b4>
 800737e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007380:	9d01      	ldr	r5, [sp, #4]
 8007382:	43db      	mvns	r3, r3
 8007384:	9300      	str	r3, [sp, #0]
 8007386:	f04f 0800 	mov.w	r8, #0
 800738a:	4631      	mov	r1, r6
 800738c:	4620      	mov	r0, r4
 800738e:	f7fe fe87 	bl	80060a0 <_Bfree>
 8007392:	2f00      	cmp	r7, #0
 8007394:	f43f aea4 	beq.w	80070e0 <_dtoa_r+0x6a0>
 8007398:	f1b8 0f00 	cmp.w	r8, #0
 800739c:	d005      	beq.n	80073aa <_dtoa_r+0x96a>
 800739e:	45b8      	cmp	r8, r7
 80073a0:	d003      	beq.n	80073aa <_dtoa_r+0x96a>
 80073a2:	4641      	mov	r1, r8
 80073a4:	4620      	mov	r0, r4
 80073a6:	f7fe fe7b 	bl	80060a0 <_Bfree>
 80073aa:	4639      	mov	r1, r7
 80073ac:	4620      	mov	r0, r4
 80073ae:	f7fe fe77 	bl	80060a0 <_Bfree>
 80073b2:	e695      	b.n	80070e0 <_dtoa_r+0x6a0>
 80073b4:	2600      	movs	r6, #0
 80073b6:	4637      	mov	r7, r6
 80073b8:	e7e1      	b.n	800737e <_dtoa_r+0x93e>
 80073ba:	9700      	str	r7, [sp, #0]
 80073bc:	4637      	mov	r7, r6
 80073be:	e599      	b.n	8006ef4 <_dtoa_r+0x4b4>
 80073c0:	40240000 	.word	0x40240000
 80073c4:	9b08      	ldr	r3, [sp, #32]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	f000 80ca 	beq.w	8007560 <_dtoa_r+0xb20>
 80073cc:	9b03      	ldr	r3, [sp, #12]
 80073ce:	9302      	str	r3, [sp, #8]
 80073d0:	2d00      	cmp	r5, #0
 80073d2:	dd05      	ble.n	80073e0 <_dtoa_r+0x9a0>
 80073d4:	4639      	mov	r1, r7
 80073d6:	462a      	mov	r2, r5
 80073d8:	4620      	mov	r0, r4
 80073da:	f7ff f833 	bl	8006444 <__lshift>
 80073de:	4607      	mov	r7, r0
 80073e0:	f1b8 0f00 	cmp.w	r8, #0
 80073e4:	d05b      	beq.n	800749e <_dtoa_r+0xa5e>
 80073e6:	6879      	ldr	r1, [r7, #4]
 80073e8:	4620      	mov	r0, r4
 80073ea:	f7fe fe19 	bl	8006020 <_Balloc>
 80073ee:	4605      	mov	r5, r0
 80073f0:	b928      	cbnz	r0, 80073fe <_dtoa_r+0x9be>
 80073f2:	4b87      	ldr	r3, [pc, #540]	; (8007610 <_dtoa_r+0xbd0>)
 80073f4:	4602      	mov	r2, r0
 80073f6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80073fa:	f7ff bb3b 	b.w	8006a74 <_dtoa_r+0x34>
 80073fe:	693a      	ldr	r2, [r7, #16]
 8007400:	3202      	adds	r2, #2
 8007402:	0092      	lsls	r2, r2, #2
 8007404:	f107 010c 	add.w	r1, r7, #12
 8007408:	300c      	adds	r0, #12
 800740a:	f7fe fcbb 	bl	8005d84 <memcpy>
 800740e:	2201      	movs	r2, #1
 8007410:	4629      	mov	r1, r5
 8007412:	4620      	mov	r0, r4
 8007414:	f7ff f816 	bl	8006444 <__lshift>
 8007418:	9b01      	ldr	r3, [sp, #4]
 800741a:	f103 0901 	add.w	r9, r3, #1
 800741e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007422:	4413      	add	r3, r2
 8007424:	9305      	str	r3, [sp, #20]
 8007426:	f00a 0301 	and.w	r3, sl, #1
 800742a:	46b8      	mov	r8, r7
 800742c:	9304      	str	r3, [sp, #16]
 800742e:	4607      	mov	r7, r0
 8007430:	4631      	mov	r1, r6
 8007432:	ee18 0a10 	vmov	r0, s16
 8007436:	f7ff fa75 	bl	8006924 <quorem>
 800743a:	4641      	mov	r1, r8
 800743c:	9002      	str	r0, [sp, #8]
 800743e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007442:	ee18 0a10 	vmov	r0, s16
 8007446:	f7ff f86d 	bl	8006524 <__mcmp>
 800744a:	463a      	mov	r2, r7
 800744c:	9003      	str	r0, [sp, #12]
 800744e:	4631      	mov	r1, r6
 8007450:	4620      	mov	r0, r4
 8007452:	f7ff f883 	bl	800655c <__mdiff>
 8007456:	68c2      	ldr	r2, [r0, #12]
 8007458:	f109 3bff 	add.w	fp, r9, #4294967295
 800745c:	4605      	mov	r5, r0
 800745e:	bb02      	cbnz	r2, 80074a2 <_dtoa_r+0xa62>
 8007460:	4601      	mov	r1, r0
 8007462:	ee18 0a10 	vmov	r0, s16
 8007466:	f7ff f85d 	bl	8006524 <__mcmp>
 800746a:	4602      	mov	r2, r0
 800746c:	4629      	mov	r1, r5
 800746e:	4620      	mov	r0, r4
 8007470:	9207      	str	r2, [sp, #28]
 8007472:	f7fe fe15 	bl	80060a0 <_Bfree>
 8007476:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800747a:	ea43 0102 	orr.w	r1, r3, r2
 800747e:	9b04      	ldr	r3, [sp, #16]
 8007480:	430b      	orrs	r3, r1
 8007482:	464d      	mov	r5, r9
 8007484:	d10f      	bne.n	80074a6 <_dtoa_r+0xa66>
 8007486:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800748a:	d02a      	beq.n	80074e2 <_dtoa_r+0xaa2>
 800748c:	9b03      	ldr	r3, [sp, #12]
 800748e:	2b00      	cmp	r3, #0
 8007490:	dd02      	ble.n	8007498 <_dtoa_r+0xa58>
 8007492:	9b02      	ldr	r3, [sp, #8]
 8007494:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007498:	f88b a000 	strb.w	sl, [fp]
 800749c:	e775      	b.n	800738a <_dtoa_r+0x94a>
 800749e:	4638      	mov	r0, r7
 80074a0:	e7ba      	b.n	8007418 <_dtoa_r+0x9d8>
 80074a2:	2201      	movs	r2, #1
 80074a4:	e7e2      	b.n	800746c <_dtoa_r+0xa2c>
 80074a6:	9b03      	ldr	r3, [sp, #12]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	db04      	blt.n	80074b6 <_dtoa_r+0xa76>
 80074ac:	9906      	ldr	r1, [sp, #24]
 80074ae:	430b      	orrs	r3, r1
 80074b0:	9904      	ldr	r1, [sp, #16]
 80074b2:	430b      	orrs	r3, r1
 80074b4:	d122      	bne.n	80074fc <_dtoa_r+0xabc>
 80074b6:	2a00      	cmp	r2, #0
 80074b8:	ddee      	ble.n	8007498 <_dtoa_r+0xa58>
 80074ba:	ee18 1a10 	vmov	r1, s16
 80074be:	2201      	movs	r2, #1
 80074c0:	4620      	mov	r0, r4
 80074c2:	f7fe ffbf 	bl	8006444 <__lshift>
 80074c6:	4631      	mov	r1, r6
 80074c8:	ee08 0a10 	vmov	s16, r0
 80074cc:	f7ff f82a 	bl	8006524 <__mcmp>
 80074d0:	2800      	cmp	r0, #0
 80074d2:	dc03      	bgt.n	80074dc <_dtoa_r+0xa9c>
 80074d4:	d1e0      	bne.n	8007498 <_dtoa_r+0xa58>
 80074d6:	f01a 0f01 	tst.w	sl, #1
 80074da:	d0dd      	beq.n	8007498 <_dtoa_r+0xa58>
 80074dc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80074e0:	d1d7      	bne.n	8007492 <_dtoa_r+0xa52>
 80074e2:	2339      	movs	r3, #57	; 0x39
 80074e4:	f88b 3000 	strb.w	r3, [fp]
 80074e8:	462b      	mov	r3, r5
 80074ea:	461d      	mov	r5, r3
 80074ec:	3b01      	subs	r3, #1
 80074ee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80074f2:	2a39      	cmp	r2, #57	; 0x39
 80074f4:	d071      	beq.n	80075da <_dtoa_r+0xb9a>
 80074f6:	3201      	adds	r2, #1
 80074f8:	701a      	strb	r2, [r3, #0]
 80074fa:	e746      	b.n	800738a <_dtoa_r+0x94a>
 80074fc:	2a00      	cmp	r2, #0
 80074fe:	dd07      	ble.n	8007510 <_dtoa_r+0xad0>
 8007500:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007504:	d0ed      	beq.n	80074e2 <_dtoa_r+0xaa2>
 8007506:	f10a 0301 	add.w	r3, sl, #1
 800750a:	f88b 3000 	strb.w	r3, [fp]
 800750e:	e73c      	b.n	800738a <_dtoa_r+0x94a>
 8007510:	9b05      	ldr	r3, [sp, #20]
 8007512:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007516:	4599      	cmp	r9, r3
 8007518:	d047      	beq.n	80075aa <_dtoa_r+0xb6a>
 800751a:	ee18 1a10 	vmov	r1, s16
 800751e:	2300      	movs	r3, #0
 8007520:	220a      	movs	r2, #10
 8007522:	4620      	mov	r0, r4
 8007524:	f7fe fdde 	bl	80060e4 <__multadd>
 8007528:	45b8      	cmp	r8, r7
 800752a:	ee08 0a10 	vmov	s16, r0
 800752e:	f04f 0300 	mov.w	r3, #0
 8007532:	f04f 020a 	mov.w	r2, #10
 8007536:	4641      	mov	r1, r8
 8007538:	4620      	mov	r0, r4
 800753a:	d106      	bne.n	800754a <_dtoa_r+0xb0a>
 800753c:	f7fe fdd2 	bl	80060e4 <__multadd>
 8007540:	4680      	mov	r8, r0
 8007542:	4607      	mov	r7, r0
 8007544:	f109 0901 	add.w	r9, r9, #1
 8007548:	e772      	b.n	8007430 <_dtoa_r+0x9f0>
 800754a:	f7fe fdcb 	bl	80060e4 <__multadd>
 800754e:	4639      	mov	r1, r7
 8007550:	4680      	mov	r8, r0
 8007552:	2300      	movs	r3, #0
 8007554:	220a      	movs	r2, #10
 8007556:	4620      	mov	r0, r4
 8007558:	f7fe fdc4 	bl	80060e4 <__multadd>
 800755c:	4607      	mov	r7, r0
 800755e:	e7f1      	b.n	8007544 <_dtoa_r+0xb04>
 8007560:	9b03      	ldr	r3, [sp, #12]
 8007562:	9302      	str	r3, [sp, #8]
 8007564:	9d01      	ldr	r5, [sp, #4]
 8007566:	ee18 0a10 	vmov	r0, s16
 800756a:	4631      	mov	r1, r6
 800756c:	f7ff f9da 	bl	8006924 <quorem>
 8007570:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007574:	9b01      	ldr	r3, [sp, #4]
 8007576:	f805 ab01 	strb.w	sl, [r5], #1
 800757a:	1aea      	subs	r2, r5, r3
 800757c:	9b02      	ldr	r3, [sp, #8]
 800757e:	4293      	cmp	r3, r2
 8007580:	dd09      	ble.n	8007596 <_dtoa_r+0xb56>
 8007582:	ee18 1a10 	vmov	r1, s16
 8007586:	2300      	movs	r3, #0
 8007588:	220a      	movs	r2, #10
 800758a:	4620      	mov	r0, r4
 800758c:	f7fe fdaa 	bl	80060e4 <__multadd>
 8007590:	ee08 0a10 	vmov	s16, r0
 8007594:	e7e7      	b.n	8007566 <_dtoa_r+0xb26>
 8007596:	9b02      	ldr	r3, [sp, #8]
 8007598:	2b00      	cmp	r3, #0
 800759a:	bfc8      	it	gt
 800759c:	461d      	movgt	r5, r3
 800759e:	9b01      	ldr	r3, [sp, #4]
 80075a0:	bfd8      	it	le
 80075a2:	2501      	movle	r5, #1
 80075a4:	441d      	add	r5, r3
 80075a6:	f04f 0800 	mov.w	r8, #0
 80075aa:	ee18 1a10 	vmov	r1, s16
 80075ae:	2201      	movs	r2, #1
 80075b0:	4620      	mov	r0, r4
 80075b2:	f7fe ff47 	bl	8006444 <__lshift>
 80075b6:	4631      	mov	r1, r6
 80075b8:	ee08 0a10 	vmov	s16, r0
 80075bc:	f7fe ffb2 	bl	8006524 <__mcmp>
 80075c0:	2800      	cmp	r0, #0
 80075c2:	dc91      	bgt.n	80074e8 <_dtoa_r+0xaa8>
 80075c4:	d102      	bne.n	80075cc <_dtoa_r+0xb8c>
 80075c6:	f01a 0f01 	tst.w	sl, #1
 80075ca:	d18d      	bne.n	80074e8 <_dtoa_r+0xaa8>
 80075cc:	462b      	mov	r3, r5
 80075ce:	461d      	mov	r5, r3
 80075d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80075d4:	2a30      	cmp	r2, #48	; 0x30
 80075d6:	d0fa      	beq.n	80075ce <_dtoa_r+0xb8e>
 80075d8:	e6d7      	b.n	800738a <_dtoa_r+0x94a>
 80075da:	9a01      	ldr	r2, [sp, #4]
 80075dc:	429a      	cmp	r2, r3
 80075de:	d184      	bne.n	80074ea <_dtoa_r+0xaaa>
 80075e0:	9b00      	ldr	r3, [sp, #0]
 80075e2:	3301      	adds	r3, #1
 80075e4:	9300      	str	r3, [sp, #0]
 80075e6:	2331      	movs	r3, #49	; 0x31
 80075e8:	7013      	strb	r3, [r2, #0]
 80075ea:	e6ce      	b.n	800738a <_dtoa_r+0x94a>
 80075ec:	4b09      	ldr	r3, [pc, #36]	; (8007614 <_dtoa_r+0xbd4>)
 80075ee:	f7ff ba95 	b.w	8006b1c <_dtoa_r+0xdc>
 80075f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	f47f aa6e 	bne.w	8006ad6 <_dtoa_r+0x96>
 80075fa:	4b07      	ldr	r3, [pc, #28]	; (8007618 <_dtoa_r+0xbd8>)
 80075fc:	f7ff ba8e 	b.w	8006b1c <_dtoa_r+0xdc>
 8007600:	9b02      	ldr	r3, [sp, #8]
 8007602:	2b00      	cmp	r3, #0
 8007604:	dcae      	bgt.n	8007564 <_dtoa_r+0xb24>
 8007606:	9b06      	ldr	r3, [sp, #24]
 8007608:	2b02      	cmp	r3, #2
 800760a:	f73f aea8 	bgt.w	800735e <_dtoa_r+0x91e>
 800760e:	e7a9      	b.n	8007564 <_dtoa_r+0xb24>
 8007610:	080098ff 	.word	0x080098ff
 8007614:	08009a55 	.word	0x08009a55
 8007618:	08009a48 	.word	0x08009a48

0800761c <fiprintf>:
 800761c:	b40e      	push	{r1, r2, r3}
 800761e:	b503      	push	{r0, r1, lr}
 8007620:	4601      	mov	r1, r0
 8007622:	ab03      	add	r3, sp, #12
 8007624:	4805      	ldr	r0, [pc, #20]	; (800763c <fiprintf+0x20>)
 8007626:	f853 2b04 	ldr.w	r2, [r3], #4
 800762a:	6800      	ldr	r0, [r0, #0]
 800762c:	9301      	str	r3, [sp, #4]
 800762e:	f000 f891 	bl	8007754 <_vfiprintf_r>
 8007632:	b002      	add	sp, #8
 8007634:	f85d eb04 	ldr.w	lr, [sp], #4
 8007638:	b003      	add	sp, #12
 800763a:	4770      	bx	lr
 800763c:	2000000c 	.word	0x2000000c

08007640 <malloc>:
 8007640:	4b02      	ldr	r3, [pc, #8]	; (800764c <malloc+0xc>)
 8007642:	4601      	mov	r1, r0
 8007644:	6818      	ldr	r0, [r3, #0]
 8007646:	f7ff b8c3 	b.w	80067d0 <_malloc_r>
 800764a:	bf00      	nop
 800764c:	2000000c 	.word	0x2000000c

08007650 <__malloc_lock>:
 8007650:	4801      	ldr	r0, [pc, #4]	; (8007658 <__malloc_lock+0x8>)
 8007652:	f000 bdc3 	b.w	80081dc <__retarget_lock_acquire_recursive>
 8007656:	bf00      	nop
 8007658:	200001cc 	.word	0x200001cc

0800765c <__malloc_unlock>:
 800765c:	4801      	ldr	r0, [pc, #4]	; (8007664 <__malloc_unlock+0x8>)
 800765e:	f000 bdbe 	b.w	80081de <__retarget_lock_release_recursive>
 8007662:	bf00      	nop
 8007664:	200001cc 	.word	0x200001cc

08007668 <_free_r>:
 8007668:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800766a:	2900      	cmp	r1, #0
 800766c:	d044      	beq.n	80076f8 <_free_r+0x90>
 800766e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007672:	9001      	str	r0, [sp, #4]
 8007674:	2b00      	cmp	r3, #0
 8007676:	f1a1 0404 	sub.w	r4, r1, #4
 800767a:	bfb8      	it	lt
 800767c:	18e4      	addlt	r4, r4, r3
 800767e:	f7ff ffe7 	bl	8007650 <__malloc_lock>
 8007682:	4a1e      	ldr	r2, [pc, #120]	; (80076fc <_free_r+0x94>)
 8007684:	9801      	ldr	r0, [sp, #4]
 8007686:	6813      	ldr	r3, [r2, #0]
 8007688:	b933      	cbnz	r3, 8007698 <_free_r+0x30>
 800768a:	6063      	str	r3, [r4, #4]
 800768c:	6014      	str	r4, [r2, #0]
 800768e:	b003      	add	sp, #12
 8007690:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007694:	f7ff bfe2 	b.w	800765c <__malloc_unlock>
 8007698:	42a3      	cmp	r3, r4
 800769a:	d908      	bls.n	80076ae <_free_r+0x46>
 800769c:	6825      	ldr	r5, [r4, #0]
 800769e:	1961      	adds	r1, r4, r5
 80076a0:	428b      	cmp	r3, r1
 80076a2:	bf01      	itttt	eq
 80076a4:	6819      	ldreq	r1, [r3, #0]
 80076a6:	685b      	ldreq	r3, [r3, #4]
 80076a8:	1949      	addeq	r1, r1, r5
 80076aa:	6021      	streq	r1, [r4, #0]
 80076ac:	e7ed      	b.n	800768a <_free_r+0x22>
 80076ae:	461a      	mov	r2, r3
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	b10b      	cbz	r3, 80076b8 <_free_r+0x50>
 80076b4:	42a3      	cmp	r3, r4
 80076b6:	d9fa      	bls.n	80076ae <_free_r+0x46>
 80076b8:	6811      	ldr	r1, [r2, #0]
 80076ba:	1855      	adds	r5, r2, r1
 80076bc:	42a5      	cmp	r5, r4
 80076be:	d10b      	bne.n	80076d8 <_free_r+0x70>
 80076c0:	6824      	ldr	r4, [r4, #0]
 80076c2:	4421      	add	r1, r4
 80076c4:	1854      	adds	r4, r2, r1
 80076c6:	42a3      	cmp	r3, r4
 80076c8:	6011      	str	r1, [r2, #0]
 80076ca:	d1e0      	bne.n	800768e <_free_r+0x26>
 80076cc:	681c      	ldr	r4, [r3, #0]
 80076ce:	685b      	ldr	r3, [r3, #4]
 80076d0:	6053      	str	r3, [r2, #4]
 80076d2:	4421      	add	r1, r4
 80076d4:	6011      	str	r1, [r2, #0]
 80076d6:	e7da      	b.n	800768e <_free_r+0x26>
 80076d8:	d902      	bls.n	80076e0 <_free_r+0x78>
 80076da:	230c      	movs	r3, #12
 80076dc:	6003      	str	r3, [r0, #0]
 80076de:	e7d6      	b.n	800768e <_free_r+0x26>
 80076e0:	6825      	ldr	r5, [r4, #0]
 80076e2:	1961      	adds	r1, r4, r5
 80076e4:	428b      	cmp	r3, r1
 80076e6:	bf04      	itt	eq
 80076e8:	6819      	ldreq	r1, [r3, #0]
 80076ea:	685b      	ldreq	r3, [r3, #4]
 80076ec:	6063      	str	r3, [r4, #4]
 80076ee:	bf04      	itt	eq
 80076f0:	1949      	addeq	r1, r1, r5
 80076f2:	6021      	streq	r1, [r4, #0]
 80076f4:	6054      	str	r4, [r2, #4]
 80076f6:	e7ca      	b.n	800768e <_free_r+0x26>
 80076f8:	b003      	add	sp, #12
 80076fa:	bd30      	pop	{r4, r5, pc}
 80076fc:	200001c0 	.word	0x200001c0

08007700 <__sfputc_r>:
 8007700:	6893      	ldr	r3, [r2, #8]
 8007702:	3b01      	subs	r3, #1
 8007704:	2b00      	cmp	r3, #0
 8007706:	b410      	push	{r4}
 8007708:	6093      	str	r3, [r2, #8]
 800770a:	da08      	bge.n	800771e <__sfputc_r+0x1e>
 800770c:	6994      	ldr	r4, [r2, #24]
 800770e:	42a3      	cmp	r3, r4
 8007710:	db01      	blt.n	8007716 <__sfputc_r+0x16>
 8007712:	290a      	cmp	r1, #10
 8007714:	d103      	bne.n	800771e <__sfputc_r+0x1e>
 8007716:	f85d 4b04 	ldr.w	r4, [sp], #4
 800771a:	f000 badf 	b.w	8007cdc <__swbuf_r>
 800771e:	6813      	ldr	r3, [r2, #0]
 8007720:	1c58      	adds	r0, r3, #1
 8007722:	6010      	str	r0, [r2, #0]
 8007724:	7019      	strb	r1, [r3, #0]
 8007726:	4608      	mov	r0, r1
 8007728:	f85d 4b04 	ldr.w	r4, [sp], #4
 800772c:	4770      	bx	lr

0800772e <__sfputs_r>:
 800772e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007730:	4606      	mov	r6, r0
 8007732:	460f      	mov	r7, r1
 8007734:	4614      	mov	r4, r2
 8007736:	18d5      	adds	r5, r2, r3
 8007738:	42ac      	cmp	r4, r5
 800773a:	d101      	bne.n	8007740 <__sfputs_r+0x12>
 800773c:	2000      	movs	r0, #0
 800773e:	e007      	b.n	8007750 <__sfputs_r+0x22>
 8007740:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007744:	463a      	mov	r2, r7
 8007746:	4630      	mov	r0, r6
 8007748:	f7ff ffda 	bl	8007700 <__sfputc_r>
 800774c:	1c43      	adds	r3, r0, #1
 800774e:	d1f3      	bne.n	8007738 <__sfputs_r+0xa>
 8007750:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007754 <_vfiprintf_r>:
 8007754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007758:	460d      	mov	r5, r1
 800775a:	b09d      	sub	sp, #116	; 0x74
 800775c:	4614      	mov	r4, r2
 800775e:	4698      	mov	r8, r3
 8007760:	4606      	mov	r6, r0
 8007762:	b118      	cbz	r0, 800776c <_vfiprintf_r+0x18>
 8007764:	6983      	ldr	r3, [r0, #24]
 8007766:	b90b      	cbnz	r3, 800776c <_vfiprintf_r+0x18>
 8007768:	f000 fc9a 	bl	80080a0 <__sinit>
 800776c:	4b89      	ldr	r3, [pc, #548]	; (8007994 <_vfiprintf_r+0x240>)
 800776e:	429d      	cmp	r5, r3
 8007770:	d11b      	bne.n	80077aa <_vfiprintf_r+0x56>
 8007772:	6875      	ldr	r5, [r6, #4]
 8007774:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007776:	07d9      	lsls	r1, r3, #31
 8007778:	d405      	bmi.n	8007786 <_vfiprintf_r+0x32>
 800777a:	89ab      	ldrh	r3, [r5, #12]
 800777c:	059a      	lsls	r2, r3, #22
 800777e:	d402      	bmi.n	8007786 <_vfiprintf_r+0x32>
 8007780:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007782:	f000 fd2b 	bl	80081dc <__retarget_lock_acquire_recursive>
 8007786:	89ab      	ldrh	r3, [r5, #12]
 8007788:	071b      	lsls	r3, r3, #28
 800778a:	d501      	bpl.n	8007790 <_vfiprintf_r+0x3c>
 800778c:	692b      	ldr	r3, [r5, #16]
 800778e:	b9eb      	cbnz	r3, 80077cc <_vfiprintf_r+0x78>
 8007790:	4629      	mov	r1, r5
 8007792:	4630      	mov	r0, r6
 8007794:	f000 faf4 	bl	8007d80 <__swsetup_r>
 8007798:	b1c0      	cbz	r0, 80077cc <_vfiprintf_r+0x78>
 800779a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800779c:	07dc      	lsls	r4, r3, #31
 800779e:	d50e      	bpl.n	80077be <_vfiprintf_r+0x6a>
 80077a0:	f04f 30ff 	mov.w	r0, #4294967295
 80077a4:	b01d      	add	sp, #116	; 0x74
 80077a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077aa:	4b7b      	ldr	r3, [pc, #492]	; (8007998 <_vfiprintf_r+0x244>)
 80077ac:	429d      	cmp	r5, r3
 80077ae:	d101      	bne.n	80077b4 <_vfiprintf_r+0x60>
 80077b0:	68b5      	ldr	r5, [r6, #8]
 80077b2:	e7df      	b.n	8007774 <_vfiprintf_r+0x20>
 80077b4:	4b79      	ldr	r3, [pc, #484]	; (800799c <_vfiprintf_r+0x248>)
 80077b6:	429d      	cmp	r5, r3
 80077b8:	bf08      	it	eq
 80077ba:	68f5      	ldreq	r5, [r6, #12]
 80077bc:	e7da      	b.n	8007774 <_vfiprintf_r+0x20>
 80077be:	89ab      	ldrh	r3, [r5, #12]
 80077c0:	0598      	lsls	r0, r3, #22
 80077c2:	d4ed      	bmi.n	80077a0 <_vfiprintf_r+0x4c>
 80077c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80077c6:	f000 fd0a 	bl	80081de <__retarget_lock_release_recursive>
 80077ca:	e7e9      	b.n	80077a0 <_vfiprintf_r+0x4c>
 80077cc:	2300      	movs	r3, #0
 80077ce:	9309      	str	r3, [sp, #36]	; 0x24
 80077d0:	2320      	movs	r3, #32
 80077d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80077d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80077da:	2330      	movs	r3, #48	; 0x30
 80077dc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80079a0 <_vfiprintf_r+0x24c>
 80077e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80077e4:	f04f 0901 	mov.w	r9, #1
 80077e8:	4623      	mov	r3, r4
 80077ea:	469a      	mov	sl, r3
 80077ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80077f0:	b10a      	cbz	r2, 80077f6 <_vfiprintf_r+0xa2>
 80077f2:	2a25      	cmp	r2, #37	; 0x25
 80077f4:	d1f9      	bne.n	80077ea <_vfiprintf_r+0x96>
 80077f6:	ebba 0b04 	subs.w	fp, sl, r4
 80077fa:	d00b      	beq.n	8007814 <_vfiprintf_r+0xc0>
 80077fc:	465b      	mov	r3, fp
 80077fe:	4622      	mov	r2, r4
 8007800:	4629      	mov	r1, r5
 8007802:	4630      	mov	r0, r6
 8007804:	f7ff ff93 	bl	800772e <__sfputs_r>
 8007808:	3001      	adds	r0, #1
 800780a:	f000 80aa 	beq.w	8007962 <_vfiprintf_r+0x20e>
 800780e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007810:	445a      	add	r2, fp
 8007812:	9209      	str	r2, [sp, #36]	; 0x24
 8007814:	f89a 3000 	ldrb.w	r3, [sl]
 8007818:	2b00      	cmp	r3, #0
 800781a:	f000 80a2 	beq.w	8007962 <_vfiprintf_r+0x20e>
 800781e:	2300      	movs	r3, #0
 8007820:	f04f 32ff 	mov.w	r2, #4294967295
 8007824:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007828:	f10a 0a01 	add.w	sl, sl, #1
 800782c:	9304      	str	r3, [sp, #16]
 800782e:	9307      	str	r3, [sp, #28]
 8007830:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007834:	931a      	str	r3, [sp, #104]	; 0x68
 8007836:	4654      	mov	r4, sl
 8007838:	2205      	movs	r2, #5
 800783a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800783e:	4858      	ldr	r0, [pc, #352]	; (80079a0 <_vfiprintf_r+0x24c>)
 8007840:	f7f8 fcce 	bl	80001e0 <memchr>
 8007844:	9a04      	ldr	r2, [sp, #16]
 8007846:	b9d8      	cbnz	r0, 8007880 <_vfiprintf_r+0x12c>
 8007848:	06d1      	lsls	r1, r2, #27
 800784a:	bf44      	itt	mi
 800784c:	2320      	movmi	r3, #32
 800784e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007852:	0713      	lsls	r3, r2, #28
 8007854:	bf44      	itt	mi
 8007856:	232b      	movmi	r3, #43	; 0x2b
 8007858:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800785c:	f89a 3000 	ldrb.w	r3, [sl]
 8007860:	2b2a      	cmp	r3, #42	; 0x2a
 8007862:	d015      	beq.n	8007890 <_vfiprintf_r+0x13c>
 8007864:	9a07      	ldr	r2, [sp, #28]
 8007866:	4654      	mov	r4, sl
 8007868:	2000      	movs	r0, #0
 800786a:	f04f 0c0a 	mov.w	ip, #10
 800786e:	4621      	mov	r1, r4
 8007870:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007874:	3b30      	subs	r3, #48	; 0x30
 8007876:	2b09      	cmp	r3, #9
 8007878:	d94e      	bls.n	8007918 <_vfiprintf_r+0x1c4>
 800787a:	b1b0      	cbz	r0, 80078aa <_vfiprintf_r+0x156>
 800787c:	9207      	str	r2, [sp, #28]
 800787e:	e014      	b.n	80078aa <_vfiprintf_r+0x156>
 8007880:	eba0 0308 	sub.w	r3, r0, r8
 8007884:	fa09 f303 	lsl.w	r3, r9, r3
 8007888:	4313      	orrs	r3, r2
 800788a:	9304      	str	r3, [sp, #16]
 800788c:	46a2      	mov	sl, r4
 800788e:	e7d2      	b.n	8007836 <_vfiprintf_r+0xe2>
 8007890:	9b03      	ldr	r3, [sp, #12]
 8007892:	1d19      	adds	r1, r3, #4
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	9103      	str	r1, [sp, #12]
 8007898:	2b00      	cmp	r3, #0
 800789a:	bfbb      	ittet	lt
 800789c:	425b      	neglt	r3, r3
 800789e:	f042 0202 	orrlt.w	r2, r2, #2
 80078a2:	9307      	strge	r3, [sp, #28]
 80078a4:	9307      	strlt	r3, [sp, #28]
 80078a6:	bfb8      	it	lt
 80078a8:	9204      	strlt	r2, [sp, #16]
 80078aa:	7823      	ldrb	r3, [r4, #0]
 80078ac:	2b2e      	cmp	r3, #46	; 0x2e
 80078ae:	d10c      	bne.n	80078ca <_vfiprintf_r+0x176>
 80078b0:	7863      	ldrb	r3, [r4, #1]
 80078b2:	2b2a      	cmp	r3, #42	; 0x2a
 80078b4:	d135      	bne.n	8007922 <_vfiprintf_r+0x1ce>
 80078b6:	9b03      	ldr	r3, [sp, #12]
 80078b8:	1d1a      	adds	r2, r3, #4
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	9203      	str	r2, [sp, #12]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	bfb8      	it	lt
 80078c2:	f04f 33ff 	movlt.w	r3, #4294967295
 80078c6:	3402      	adds	r4, #2
 80078c8:	9305      	str	r3, [sp, #20]
 80078ca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80079b0 <_vfiprintf_r+0x25c>
 80078ce:	7821      	ldrb	r1, [r4, #0]
 80078d0:	2203      	movs	r2, #3
 80078d2:	4650      	mov	r0, sl
 80078d4:	f7f8 fc84 	bl	80001e0 <memchr>
 80078d8:	b140      	cbz	r0, 80078ec <_vfiprintf_r+0x198>
 80078da:	2340      	movs	r3, #64	; 0x40
 80078dc:	eba0 000a 	sub.w	r0, r0, sl
 80078e0:	fa03 f000 	lsl.w	r0, r3, r0
 80078e4:	9b04      	ldr	r3, [sp, #16]
 80078e6:	4303      	orrs	r3, r0
 80078e8:	3401      	adds	r4, #1
 80078ea:	9304      	str	r3, [sp, #16]
 80078ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078f0:	482c      	ldr	r0, [pc, #176]	; (80079a4 <_vfiprintf_r+0x250>)
 80078f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80078f6:	2206      	movs	r2, #6
 80078f8:	f7f8 fc72 	bl	80001e0 <memchr>
 80078fc:	2800      	cmp	r0, #0
 80078fe:	d03f      	beq.n	8007980 <_vfiprintf_r+0x22c>
 8007900:	4b29      	ldr	r3, [pc, #164]	; (80079a8 <_vfiprintf_r+0x254>)
 8007902:	bb1b      	cbnz	r3, 800794c <_vfiprintf_r+0x1f8>
 8007904:	9b03      	ldr	r3, [sp, #12]
 8007906:	3307      	adds	r3, #7
 8007908:	f023 0307 	bic.w	r3, r3, #7
 800790c:	3308      	adds	r3, #8
 800790e:	9303      	str	r3, [sp, #12]
 8007910:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007912:	443b      	add	r3, r7
 8007914:	9309      	str	r3, [sp, #36]	; 0x24
 8007916:	e767      	b.n	80077e8 <_vfiprintf_r+0x94>
 8007918:	fb0c 3202 	mla	r2, ip, r2, r3
 800791c:	460c      	mov	r4, r1
 800791e:	2001      	movs	r0, #1
 8007920:	e7a5      	b.n	800786e <_vfiprintf_r+0x11a>
 8007922:	2300      	movs	r3, #0
 8007924:	3401      	adds	r4, #1
 8007926:	9305      	str	r3, [sp, #20]
 8007928:	4619      	mov	r1, r3
 800792a:	f04f 0c0a 	mov.w	ip, #10
 800792e:	4620      	mov	r0, r4
 8007930:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007934:	3a30      	subs	r2, #48	; 0x30
 8007936:	2a09      	cmp	r2, #9
 8007938:	d903      	bls.n	8007942 <_vfiprintf_r+0x1ee>
 800793a:	2b00      	cmp	r3, #0
 800793c:	d0c5      	beq.n	80078ca <_vfiprintf_r+0x176>
 800793e:	9105      	str	r1, [sp, #20]
 8007940:	e7c3      	b.n	80078ca <_vfiprintf_r+0x176>
 8007942:	fb0c 2101 	mla	r1, ip, r1, r2
 8007946:	4604      	mov	r4, r0
 8007948:	2301      	movs	r3, #1
 800794a:	e7f0      	b.n	800792e <_vfiprintf_r+0x1da>
 800794c:	ab03      	add	r3, sp, #12
 800794e:	9300      	str	r3, [sp, #0]
 8007950:	462a      	mov	r2, r5
 8007952:	4b16      	ldr	r3, [pc, #88]	; (80079ac <_vfiprintf_r+0x258>)
 8007954:	a904      	add	r1, sp, #16
 8007956:	4630      	mov	r0, r6
 8007958:	f3af 8000 	nop.w
 800795c:	4607      	mov	r7, r0
 800795e:	1c78      	adds	r0, r7, #1
 8007960:	d1d6      	bne.n	8007910 <_vfiprintf_r+0x1bc>
 8007962:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007964:	07d9      	lsls	r1, r3, #31
 8007966:	d405      	bmi.n	8007974 <_vfiprintf_r+0x220>
 8007968:	89ab      	ldrh	r3, [r5, #12]
 800796a:	059a      	lsls	r2, r3, #22
 800796c:	d402      	bmi.n	8007974 <_vfiprintf_r+0x220>
 800796e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007970:	f000 fc35 	bl	80081de <__retarget_lock_release_recursive>
 8007974:	89ab      	ldrh	r3, [r5, #12]
 8007976:	065b      	lsls	r3, r3, #25
 8007978:	f53f af12 	bmi.w	80077a0 <_vfiprintf_r+0x4c>
 800797c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800797e:	e711      	b.n	80077a4 <_vfiprintf_r+0x50>
 8007980:	ab03      	add	r3, sp, #12
 8007982:	9300      	str	r3, [sp, #0]
 8007984:	462a      	mov	r2, r5
 8007986:	4b09      	ldr	r3, [pc, #36]	; (80079ac <_vfiprintf_r+0x258>)
 8007988:	a904      	add	r1, sp, #16
 800798a:	4630      	mov	r0, r6
 800798c:	f000 f880 	bl	8007a90 <_printf_i>
 8007990:	e7e4      	b.n	800795c <_vfiprintf_r+0x208>
 8007992:	bf00      	nop
 8007994:	08009b08 	.word	0x08009b08
 8007998:	08009b28 	.word	0x08009b28
 800799c:	08009ae8 	.word	0x08009ae8
 80079a0:	08009ab2 	.word	0x08009ab2
 80079a4:	08009abc 	.word	0x08009abc
 80079a8:	00000000 	.word	0x00000000
 80079ac:	0800772f 	.word	0x0800772f
 80079b0:	08009ab8 	.word	0x08009ab8

080079b4 <_printf_common>:
 80079b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079b8:	4616      	mov	r6, r2
 80079ba:	4699      	mov	r9, r3
 80079bc:	688a      	ldr	r2, [r1, #8]
 80079be:	690b      	ldr	r3, [r1, #16]
 80079c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80079c4:	4293      	cmp	r3, r2
 80079c6:	bfb8      	it	lt
 80079c8:	4613      	movlt	r3, r2
 80079ca:	6033      	str	r3, [r6, #0]
 80079cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80079d0:	4607      	mov	r7, r0
 80079d2:	460c      	mov	r4, r1
 80079d4:	b10a      	cbz	r2, 80079da <_printf_common+0x26>
 80079d6:	3301      	adds	r3, #1
 80079d8:	6033      	str	r3, [r6, #0]
 80079da:	6823      	ldr	r3, [r4, #0]
 80079dc:	0699      	lsls	r1, r3, #26
 80079de:	bf42      	ittt	mi
 80079e0:	6833      	ldrmi	r3, [r6, #0]
 80079e2:	3302      	addmi	r3, #2
 80079e4:	6033      	strmi	r3, [r6, #0]
 80079e6:	6825      	ldr	r5, [r4, #0]
 80079e8:	f015 0506 	ands.w	r5, r5, #6
 80079ec:	d106      	bne.n	80079fc <_printf_common+0x48>
 80079ee:	f104 0a19 	add.w	sl, r4, #25
 80079f2:	68e3      	ldr	r3, [r4, #12]
 80079f4:	6832      	ldr	r2, [r6, #0]
 80079f6:	1a9b      	subs	r3, r3, r2
 80079f8:	42ab      	cmp	r3, r5
 80079fa:	dc26      	bgt.n	8007a4a <_printf_common+0x96>
 80079fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007a00:	1e13      	subs	r3, r2, #0
 8007a02:	6822      	ldr	r2, [r4, #0]
 8007a04:	bf18      	it	ne
 8007a06:	2301      	movne	r3, #1
 8007a08:	0692      	lsls	r2, r2, #26
 8007a0a:	d42b      	bmi.n	8007a64 <_printf_common+0xb0>
 8007a0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007a10:	4649      	mov	r1, r9
 8007a12:	4638      	mov	r0, r7
 8007a14:	47c0      	blx	r8
 8007a16:	3001      	adds	r0, #1
 8007a18:	d01e      	beq.n	8007a58 <_printf_common+0xa4>
 8007a1a:	6823      	ldr	r3, [r4, #0]
 8007a1c:	68e5      	ldr	r5, [r4, #12]
 8007a1e:	6832      	ldr	r2, [r6, #0]
 8007a20:	f003 0306 	and.w	r3, r3, #6
 8007a24:	2b04      	cmp	r3, #4
 8007a26:	bf08      	it	eq
 8007a28:	1aad      	subeq	r5, r5, r2
 8007a2a:	68a3      	ldr	r3, [r4, #8]
 8007a2c:	6922      	ldr	r2, [r4, #16]
 8007a2e:	bf0c      	ite	eq
 8007a30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a34:	2500      	movne	r5, #0
 8007a36:	4293      	cmp	r3, r2
 8007a38:	bfc4      	itt	gt
 8007a3a:	1a9b      	subgt	r3, r3, r2
 8007a3c:	18ed      	addgt	r5, r5, r3
 8007a3e:	2600      	movs	r6, #0
 8007a40:	341a      	adds	r4, #26
 8007a42:	42b5      	cmp	r5, r6
 8007a44:	d11a      	bne.n	8007a7c <_printf_common+0xc8>
 8007a46:	2000      	movs	r0, #0
 8007a48:	e008      	b.n	8007a5c <_printf_common+0xa8>
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	4652      	mov	r2, sl
 8007a4e:	4649      	mov	r1, r9
 8007a50:	4638      	mov	r0, r7
 8007a52:	47c0      	blx	r8
 8007a54:	3001      	adds	r0, #1
 8007a56:	d103      	bne.n	8007a60 <_printf_common+0xac>
 8007a58:	f04f 30ff 	mov.w	r0, #4294967295
 8007a5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a60:	3501      	adds	r5, #1
 8007a62:	e7c6      	b.n	80079f2 <_printf_common+0x3e>
 8007a64:	18e1      	adds	r1, r4, r3
 8007a66:	1c5a      	adds	r2, r3, #1
 8007a68:	2030      	movs	r0, #48	; 0x30
 8007a6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007a6e:	4422      	add	r2, r4
 8007a70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007a74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007a78:	3302      	adds	r3, #2
 8007a7a:	e7c7      	b.n	8007a0c <_printf_common+0x58>
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	4622      	mov	r2, r4
 8007a80:	4649      	mov	r1, r9
 8007a82:	4638      	mov	r0, r7
 8007a84:	47c0      	blx	r8
 8007a86:	3001      	adds	r0, #1
 8007a88:	d0e6      	beq.n	8007a58 <_printf_common+0xa4>
 8007a8a:	3601      	adds	r6, #1
 8007a8c:	e7d9      	b.n	8007a42 <_printf_common+0x8e>
	...

08007a90 <_printf_i>:
 8007a90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a94:	7e0f      	ldrb	r7, [r1, #24]
 8007a96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007a98:	2f78      	cmp	r7, #120	; 0x78
 8007a9a:	4691      	mov	r9, r2
 8007a9c:	4680      	mov	r8, r0
 8007a9e:	460c      	mov	r4, r1
 8007aa0:	469a      	mov	sl, r3
 8007aa2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007aa6:	d807      	bhi.n	8007ab8 <_printf_i+0x28>
 8007aa8:	2f62      	cmp	r7, #98	; 0x62
 8007aaa:	d80a      	bhi.n	8007ac2 <_printf_i+0x32>
 8007aac:	2f00      	cmp	r7, #0
 8007aae:	f000 80d8 	beq.w	8007c62 <_printf_i+0x1d2>
 8007ab2:	2f58      	cmp	r7, #88	; 0x58
 8007ab4:	f000 80a3 	beq.w	8007bfe <_printf_i+0x16e>
 8007ab8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007abc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007ac0:	e03a      	b.n	8007b38 <_printf_i+0xa8>
 8007ac2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007ac6:	2b15      	cmp	r3, #21
 8007ac8:	d8f6      	bhi.n	8007ab8 <_printf_i+0x28>
 8007aca:	a101      	add	r1, pc, #4	; (adr r1, 8007ad0 <_printf_i+0x40>)
 8007acc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007ad0:	08007b29 	.word	0x08007b29
 8007ad4:	08007b3d 	.word	0x08007b3d
 8007ad8:	08007ab9 	.word	0x08007ab9
 8007adc:	08007ab9 	.word	0x08007ab9
 8007ae0:	08007ab9 	.word	0x08007ab9
 8007ae4:	08007ab9 	.word	0x08007ab9
 8007ae8:	08007b3d 	.word	0x08007b3d
 8007aec:	08007ab9 	.word	0x08007ab9
 8007af0:	08007ab9 	.word	0x08007ab9
 8007af4:	08007ab9 	.word	0x08007ab9
 8007af8:	08007ab9 	.word	0x08007ab9
 8007afc:	08007c49 	.word	0x08007c49
 8007b00:	08007b6d 	.word	0x08007b6d
 8007b04:	08007c2b 	.word	0x08007c2b
 8007b08:	08007ab9 	.word	0x08007ab9
 8007b0c:	08007ab9 	.word	0x08007ab9
 8007b10:	08007c6b 	.word	0x08007c6b
 8007b14:	08007ab9 	.word	0x08007ab9
 8007b18:	08007b6d 	.word	0x08007b6d
 8007b1c:	08007ab9 	.word	0x08007ab9
 8007b20:	08007ab9 	.word	0x08007ab9
 8007b24:	08007c33 	.word	0x08007c33
 8007b28:	682b      	ldr	r3, [r5, #0]
 8007b2a:	1d1a      	adds	r2, r3, #4
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	602a      	str	r2, [r5, #0]
 8007b30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007b38:	2301      	movs	r3, #1
 8007b3a:	e0a3      	b.n	8007c84 <_printf_i+0x1f4>
 8007b3c:	6820      	ldr	r0, [r4, #0]
 8007b3e:	6829      	ldr	r1, [r5, #0]
 8007b40:	0606      	lsls	r6, r0, #24
 8007b42:	f101 0304 	add.w	r3, r1, #4
 8007b46:	d50a      	bpl.n	8007b5e <_printf_i+0xce>
 8007b48:	680e      	ldr	r6, [r1, #0]
 8007b4a:	602b      	str	r3, [r5, #0]
 8007b4c:	2e00      	cmp	r6, #0
 8007b4e:	da03      	bge.n	8007b58 <_printf_i+0xc8>
 8007b50:	232d      	movs	r3, #45	; 0x2d
 8007b52:	4276      	negs	r6, r6
 8007b54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b58:	485e      	ldr	r0, [pc, #376]	; (8007cd4 <_printf_i+0x244>)
 8007b5a:	230a      	movs	r3, #10
 8007b5c:	e019      	b.n	8007b92 <_printf_i+0x102>
 8007b5e:	680e      	ldr	r6, [r1, #0]
 8007b60:	602b      	str	r3, [r5, #0]
 8007b62:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007b66:	bf18      	it	ne
 8007b68:	b236      	sxthne	r6, r6
 8007b6a:	e7ef      	b.n	8007b4c <_printf_i+0xbc>
 8007b6c:	682b      	ldr	r3, [r5, #0]
 8007b6e:	6820      	ldr	r0, [r4, #0]
 8007b70:	1d19      	adds	r1, r3, #4
 8007b72:	6029      	str	r1, [r5, #0]
 8007b74:	0601      	lsls	r1, r0, #24
 8007b76:	d501      	bpl.n	8007b7c <_printf_i+0xec>
 8007b78:	681e      	ldr	r6, [r3, #0]
 8007b7a:	e002      	b.n	8007b82 <_printf_i+0xf2>
 8007b7c:	0646      	lsls	r6, r0, #25
 8007b7e:	d5fb      	bpl.n	8007b78 <_printf_i+0xe8>
 8007b80:	881e      	ldrh	r6, [r3, #0]
 8007b82:	4854      	ldr	r0, [pc, #336]	; (8007cd4 <_printf_i+0x244>)
 8007b84:	2f6f      	cmp	r7, #111	; 0x6f
 8007b86:	bf0c      	ite	eq
 8007b88:	2308      	moveq	r3, #8
 8007b8a:	230a      	movne	r3, #10
 8007b8c:	2100      	movs	r1, #0
 8007b8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007b92:	6865      	ldr	r5, [r4, #4]
 8007b94:	60a5      	str	r5, [r4, #8]
 8007b96:	2d00      	cmp	r5, #0
 8007b98:	bfa2      	ittt	ge
 8007b9a:	6821      	ldrge	r1, [r4, #0]
 8007b9c:	f021 0104 	bicge.w	r1, r1, #4
 8007ba0:	6021      	strge	r1, [r4, #0]
 8007ba2:	b90e      	cbnz	r6, 8007ba8 <_printf_i+0x118>
 8007ba4:	2d00      	cmp	r5, #0
 8007ba6:	d04d      	beq.n	8007c44 <_printf_i+0x1b4>
 8007ba8:	4615      	mov	r5, r2
 8007baa:	fbb6 f1f3 	udiv	r1, r6, r3
 8007bae:	fb03 6711 	mls	r7, r3, r1, r6
 8007bb2:	5dc7      	ldrb	r7, [r0, r7]
 8007bb4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007bb8:	4637      	mov	r7, r6
 8007bba:	42bb      	cmp	r3, r7
 8007bbc:	460e      	mov	r6, r1
 8007bbe:	d9f4      	bls.n	8007baa <_printf_i+0x11a>
 8007bc0:	2b08      	cmp	r3, #8
 8007bc2:	d10b      	bne.n	8007bdc <_printf_i+0x14c>
 8007bc4:	6823      	ldr	r3, [r4, #0]
 8007bc6:	07de      	lsls	r6, r3, #31
 8007bc8:	d508      	bpl.n	8007bdc <_printf_i+0x14c>
 8007bca:	6923      	ldr	r3, [r4, #16]
 8007bcc:	6861      	ldr	r1, [r4, #4]
 8007bce:	4299      	cmp	r1, r3
 8007bd0:	bfde      	ittt	le
 8007bd2:	2330      	movle	r3, #48	; 0x30
 8007bd4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007bd8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007bdc:	1b52      	subs	r2, r2, r5
 8007bde:	6122      	str	r2, [r4, #16]
 8007be0:	f8cd a000 	str.w	sl, [sp]
 8007be4:	464b      	mov	r3, r9
 8007be6:	aa03      	add	r2, sp, #12
 8007be8:	4621      	mov	r1, r4
 8007bea:	4640      	mov	r0, r8
 8007bec:	f7ff fee2 	bl	80079b4 <_printf_common>
 8007bf0:	3001      	adds	r0, #1
 8007bf2:	d14c      	bne.n	8007c8e <_printf_i+0x1fe>
 8007bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8007bf8:	b004      	add	sp, #16
 8007bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bfe:	4835      	ldr	r0, [pc, #212]	; (8007cd4 <_printf_i+0x244>)
 8007c00:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007c04:	6829      	ldr	r1, [r5, #0]
 8007c06:	6823      	ldr	r3, [r4, #0]
 8007c08:	f851 6b04 	ldr.w	r6, [r1], #4
 8007c0c:	6029      	str	r1, [r5, #0]
 8007c0e:	061d      	lsls	r5, r3, #24
 8007c10:	d514      	bpl.n	8007c3c <_printf_i+0x1ac>
 8007c12:	07df      	lsls	r7, r3, #31
 8007c14:	bf44      	itt	mi
 8007c16:	f043 0320 	orrmi.w	r3, r3, #32
 8007c1a:	6023      	strmi	r3, [r4, #0]
 8007c1c:	b91e      	cbnz	r6, 8007c26 <_printf_i+0x196>
 8007c1e:	6823      	ldr	r3, [r4, #0]
 8007c20:	f023 0320 	bic.w	r3, r3, #32
 8007c24:	6023      	str	r3, [r4, #0]
 8007c26:	2310      	movs	r3, #16
 8007c28:	e7b0      	b.n	8007b8c <_printf_i+0xfc>
 8007c2a:	6823      	ldr	r3, [r4, #0]
 8007c2c:	f043 0320 	orr.w	r3, r3, #32
 8007c30:	6023      	str	r3, [r4, #0]
 8007c32:	2378      	movs	r3, #120	; 0x78
 8007c34:	4828      	ldr	r0, [pc, #160]	; (8007cd8 <_printf_i+0x248>)
 8007c36:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007c3a:	e7e3      	b.n	8007c04 <_printf_i+0x174>
 8007c3c:	0659      	lsls	r1, r3, #25
 8007c3e:	bf48      	it	mi
 8007c40:	b2b6      	uxthmi	r6, r6
 8007c42:	e7e6      	b.n	8007c12 <_printf_i+0x182>
 8007c44:	4615      	mov	r5, r2
 8007c46:	e7bb      	b.n	8007bc0 <_printf_i+0x130>
 8007c48:	682b      	ldr	r3, [r5, #0]
 8007c4a:	6826      	ldr	r6, [r4, #0]
 8007c4c:	6961      	ldr	r1, [r4, #20]
 8007c4e:	1d18      	adds	r0, r3, #4
 8007c50:	6028      	str	r0, [r5, #0]
 8007c52:	0635      	lsls	r5, r6, #24
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	d501      	bpl.n	8007c5c <_printf_i+0x1cc>
 8007c58:	6019      	str	r1, [r3, #0]
 8007c5a:	e002      	b.n	8007c62 <_printf_i+0x1d2>
 8007c5c:	0670      	lsls	r0, r6, #25
 8007c5e:	d5fb      	bpl.n	8007c58 <_printf_i+0x1c8>
 8007c60:	8019      	strh	r1, [r3, #0]
 8007c62:	2300      	movs	r3, #0
 8007c64:	6123      	str	r3, [r4, #16]
 8007c66:	4615      	mov	r5, r2
 8007c68:	e7ba      	b.n	8007be0 <_printf_i+0x150>
 8007c6a:	682b      	ldr	r3, [r5, #0]
 8007c6c:	1d1a      	adds	r2, r3, #4
 8007c6e:	602a      	str	r2, [r5, #0]
 8007c70:	681d      	ldr	r5, [r3, #0]
 8007c72:	6862      	ldr	r2, [r4, #4]
 8007c74:	2100      	movs	r1, #0
 8007c76:	4628      	mov	r0, r5
 8007c78:	f7f8 fab2 	bl	80001e0 <memchr>
 8007c7c:	b108      	cbz	r0, 8007c82 <_printf_i+0x1f2>
 8007c7e:	1b40      	subs	r0, r0, r5
 8007c80:	6060      	str	r0, [r4, #4]
 8007c82:	6863      	ldr	r3, [r4, #4]
 8007c84:	6123      	str	r3, [r4, #16]
 8007c86:	2300      	movs	r3, #0
 8007c88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c8c:	e7a8      	b.n	8007be0 <_printf_i+0x150>
 8007c8e:	6923      	ldr	r3, [r4, #16]
 8007c90:	462a      	mov	r2, r5
 8007c92:	4649      	mov	r1, r9
 8007c94:	4640      	mov	r0, r8
 8007c96:	47d0      	blx	sl
 8007c98:	3001      	adds	r0, #1
 8007c9a:	d0ab      	beq.n	8007bf4 <_printf_i+0x164>
 8007c9c:	6823      	ldr	r3, [r4, #0]
 8007c9e:	079b      	lsls	r3, r3, #30
 8007ca0:	d413      	bmi.n	8007cca <_printf_i+0x23a>
 8007ca2:	68e0      	ldr	r0, [r4, #12]
 8007ca4:	9b03      	ldr	r3, [sp, #12]
 8007ca6:	4298      	cmp	r0, r3
 8007ca8:	bfb8      	it	lt
 8007caa:	4618      	movlt	r0, r3
 8007cac:	e7a4      	b.n	8007bf8 <_printf_i+0x168>
 8007cae:	2301      	movs	r3, #1
 8007cb0:	4632      	mov	r2, r6
 8007cb2:	4649      	mov	r1, r9
 8007cb4:	4640      	mov	r0, r8
 8007cb6:	47d0      	blx	sl
 8007cb8:	3001      	adds	r0, #1
 8007cba:	d09b      	beq.n	8007bf4 <_printf_i+0x164>
 8007cbc:	3501      	adds	r5, #1
 8007cbe:	68e3      	ldr	r3, [r4, #12]
 8007cc0:	9903      	ldr	r1, [sp, #12]
 8007cc2:	1a5b      	subs	r3, r3, r1
 8007cc4:	42ab      	cmp	r3, r5
 8007cc6:	dcf2      	bgt.n	8007cae <_printf_i+0x21e>
 8007cc8:	e7eb      	b.n	8007ca2 <_printf_i+0x212>
 8007cca:	2500      	movs	r5, #0
 8007ccc:	f104 0619 	add.w	r6, r4, #25
 8007cd0:	e7f5      	b.n	8007cbe <_printf_i+0x22e>
 8007cd2:	bf00      	nop
 8007cd4:	08009ac3 	.word	0x08009ac3
 8007cd8:	08009ad4 	.word	0x08009ad4

08007cdc <__swbuf_r>:
 8007cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cde:	460e      	mov	r6, r1
 8007ce0:	4614      	mov	r4, r2
 8007ce2:	4605      	mov	r5, r0
 8007ce4:	b118      	cbz	r0, 8007cee <__swbuf_r+0x12>
 8007ce6:	6983      	ldr	r3, [r0, #24]
 8007ce8:	b90b      	cbnz	r3, 8007cee <__swbuf_r+0x12>
 8007cea:	f000 f9d9 	bl	80080a0 <__sinit>
 8007cee:	4b21      	ldr	r3, [pc, #132]	; (8007d74 <__swbuf_r+0x98>)
 8007cf0:	429c      	cmp	r4, r3
 8007cf2:	d12b      	bne.n	8007d4c <__swbuf_r+0x70>
 8007cf4:	686c      	ldr	r4, [r5, #4]
 8007cf6:	69a3      	ldr	r3, [r4, #24]
 8007cf8:	60a3      	str	r3, [r4, #8]
 8007cfa:	89a3      	ldrh	r3, [r4, #12]
 8007cfc:	071a      	lsls	r2, r3, #28
 8007cfe:	d52f      	bpl.n	8007d60 <__swbuf_r+0x84>
 8007d00:	6923      	ldr	r3, [r4, #16]
 8007d02:	b36b      	cbz	r3, 8007d60 <__swbuf_r+0x84>
 8007d04:	6923      	ldr	r3, [r4, #16]
 8007d06:	6820      	ldr	r0, [r4, #0]
 8007d08:	1ac0      	subs	r0, r0, r3
 8007d0a:	6963      	ldr	r3, [r4, #20]
 8007d0c:	b2f6      	uxtb	r6, r6
 8007d0e:	4283      	cmp	r3, r0
 8007d10:	4637      	mov	r7, r6
 8007d12:	dc04      	bgt.n	8007d1e <__swbuf_r+0x42>
 8007d14:	4621      	mov	r1, r4
 8007d16:	4628      	mov	r0, r5
 8007d18:	f000 f92e 	bl	8007f78 <_fflush_r>
 8007d1c:	bb30      	cbnz	r0, 8007d6c <__swbuf_r+0x90>
 8007d1e:	68a3      	ldr	r3, [r4, #8]
 8007d20:	3b01      	subs	r3, #1
 8007d22:	60a3      	str	r3, [r4, #8]
 8007d24:	6823      	ldr	r3, [r4, #0]
 8007d26:	1c5a      	adds	r2, r3, #1
 8007d28:	6022      	str	r2, [r4, #0]
 8007d2a:	701e      	strb	r6, [r3, #0]
 8007d2c:	6963      	ldr	r3, [r4, #20]
 8007d2e:	3001      	adds	r0, #1
 8007d30:	4283      	cmp	r3, r0
 8007d32:	d004      	beq.n	8007d3e <__swbuf_r+0x62>
 8007d34:	89a3      	ldrh	r3, [r4, #12]
 8007d36:	07db      	lsls	r3, r3, #31
 8007d38:	d506      	bpl.n	8007d48 <__swbuf_r+0x6c>
 8007d3a:	2e0a      	cmp	r6, #10
 8007d3c:	d104      	bne.n	8007d48 <__swbuf_r+0x6c>
 8007d3e:	4621      	mov	r1, r4
 8007d40:	4628      	mov	r0, r5
 8007d42:	f000 f919 	bl	8007f78 <_fflush_r>
 8007d46:	b988      	cbnz	r0, 8007d6c <__swbuf_r+0x90>
 8007d48:	4638      	mov	r0, r7
 8007d4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d4c:	4b0a      	ldr	r3, [pc, #40]	; (8007d78 <__swbuf_r+0x9c>)
 8007d4e:	429c      	cmp	r4, r3
 8007d50:	d101      	bne.n	8007d56 <__swbuf_r+0x7a>
 8007d52:	68ac      	ldr	r4, [r5, #8]
 8007d54:	e7cf      	b.n	8007cf6 <__swbuf_r+0x1a>
 8007d56:	4b09      	ldr	r3, [pc, #36]	; (8007d7c <__swbuf_r+0xa0>)
 8007d58:	429c      	cmp	r4, r3
 8007d5a:	bf08      	it	eq
 8007d5c:	68ec      	ldreq	r4, [r5, #12]
 8007d5e:	e7ca      	b.n	8007cf6 <__swbuf_r+0x1a>
 8007d60:	4621      	mov	r1, r4
 8007d62:	4628      	mov	r0, r5
 8007d64:	f000 f80c 	bl	8007d80 <__swsetup_r>
 8007d68:	2800      	cmp	r0, #0
 8007d6a:	d0cb      	beq.n	8007d04 <__swbuf_r+0x28>
 8007d6c:	f04f 37ff 	mov.w	r7, #4294967295
 8007d70:	e7ea      	b.n	8007d48 <__swbuf_r+0x6c>
 8007d72:	bf00      	nop
 8007d74:	08009b08 	.word	0x08009b08
 8007d78:	08009b28 	.word	0x08009b28
 8007d7c:	08009ae8 	.word	0x08009ae8

08007d80 <__swsetup_r>:
 8007d80:	4b32      	ldr	r3, [pc, #200]	; (8007e4c <__swsetup_r+0xcc>)
 8007d82:	b570      	push	{r4, r5, r6, lr}
 8007d84:	681d      	ldr	r5, [r3, #0]
 8007d86:	4606      	mov	r6, r0
 8007d88:	460c      	mov	r4, r1
 8007d8a:	b125      	cbz	r5, 8007d96 <__swsetup_r+0x16>
 8007d8c:	69ab      	ldr	r3, [r5, #24]
 8007d8e:	b913      	cbnz	r3, 8007d96 <__swsetup_r+0x16>
 8007d90:	4628      	mov	r0, r5
 8007d92:	f000 f985 	bl	80080a0 <__sinit>
 8007d96:	4b2e      	ldr	r3, [pc, #184]	; (8007e50 <__swsetup_r+0xd0>)
 8007d98:	429c      	cmp	r4, r3
 8007d9a:	d10f      	bne.n	8007dbc <__swsetup_r+0x3c>
 8007d9c:	686c      	ldr	r4, [r5, #4]
 8007d9e:	89a3      	ldrh	r3, [r4, #12]
 8007da0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007da4:	0719      	lsls	r1, r3, #28
 8007da6:	d42c      	bmi.n	8007e02 <__swsetup_r+0x82>
 8007da8:	06dd      	lsls	r5, r3, #27
 8007daa:	d411      	bmi.n	8007dd0 <__swsetup_r+0x50>
 8007dac:	2309      	movs	r3, #9
 8007dae:	6033      	str	r3, [r6, #0]
 8007db0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007db4:	81a3      	strh	r3, [r4, #12]
 8007db6:	f04f 30ff 	mov.w	r0, #4294967295
 8007dba:	e03e      	b.n	8007e3a <__swsetup_r+0xba>
 8007dbc:	4b25      	ldr	r3, [pc, #148]	; (8007e54 <__swsetup_r+0xd4>)
 8007dbe:	429c      	cmp	r4, r3
 8007dc0:	d101      	bne.n	8007dc6 <__swsetup_r+0x46>
 8007dc2:	68ac      	ldr	r4, [r5, #8]
 8007dc4:	e7eb      	b.n	8007d9e <__swsetup_r+0x1e>
 8007dc6:	4b24      	ldr	r3, [pc, #144]	; (8007e58 <__swsetup_r+0xd8>)
 8007dc8:	429c      	cmp	r4, r3
 8007dca:	bf08      	it	eq
 8007dcc:	68ec      	ldreq	r4, [r5, #12]
 8007dce:	e7e6      	b.n	8007d9e <__swsetup_r+0x1e>
 8007dd0:	0758      	lsls	r0, r3, #29
 8007dd2:	d512      	bpl.n	8007dfa <__swsetup_r+0x7a>
 8007dd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007dd6:	b141      	cbz	r1, 8007dea <__swsetup_r+0x6a>
 8007dd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ddc:	4299      	cmp	r1, r3
 8007dde:	d002      	beq.n	8007de6 <__swsetup_r+0x66>
 8007de0:	4630      	mov	r0, r6
 8007de2:	f7ff fc41 	bl	8007668 <_free_r>
 8007de6:	2300      	movs	r3, #0
 8007de8:	6363      	str	r3, [r4, #52]	; 0x34
 8007dea:	89a3      	ldrh	r3, [r4, #12]
 8007dec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007df0:	81a3      	strh	r3, [r4, #12]
 8007df2:	2300      	movs	r3, #0
 8007df4:	6063      	str	r3, [r4, #4]
 8007df6:	6923      	ldr	r3, [r4, #16]
 8007df8:	6023      	str	r3, [r4, #0]
 8007dfa:	89a3      	ldrh	r3, [r4, #12]
 8007dfc:	f043 0308 	orr.w	r3, r3, #8
 8007e00:	81a3      	strh	r3, [r4, #12]
 8007e02:	6923      	ldr	r3, [r4, #16]
 8007e04:	b94b      	cbnz	r3, 8007e1a <__swsetup_r+0x9a>
 8007e06:	89a3      	ldrh	r3, [r4, #12]
 8007e08:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007e0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e10:	d003      	beq.n	8007e1a <__swsetup_r+0x9a>
 8007e12:	4621      	mov	r1, r4
 8007e14:	4630      	mov	r0, r6
 8007e16:	f000 fa09 	bl	800822c <__smakebuf_r>
 8007e1a:	89a0      	ldrh	r0, [r4, #12]
 8007e1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007e20:	f010 0301 	ands.w	r3, r0, #1
 8007e24:	d00a      	beq.n	8007e3c <__swsetup_r+0xbc>
 8007e26:	2300      	movs	r3, #0
 8007e28:	60a3      	str	r3, [r4, #8]
 8007e2a:	6963      	ldr	r3, [r4, #20]
 8007e2c:	425b      	negs	r3, r3
 8007e2e:	61a3      	str	r3, [r4, #24]
 8007e30:	6923      	ldr	r3, [r4, #16]
 8007e32:	b943      	cbnz	r3, 8007e46 <__swsetup_r+0xc6>
 8007e34:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007e38:	d1ba      	bne.n	8007db0 <__swsetup_r+0x30>
 8007e3a:	bd70      	pop	{r4, r5, r6, pc}
 8007e3c:	0781      	lsls	r1, r0, #30
 8007e3e:	bf58      	it	pl
 8007e40:	6963      	ldrpl	r3, [r4, #20]
 8007e42:	60a3      	str	r3, [r4, #8]
 8007e44:	e7f4      	b.n	8007e30 <__swsetup_r+0xb0>
 8007e46:	2000      	movs	r0, #0
 8007e48:	e7f7      	b.n	8007e3a <__swsetup_r+0xba>
 8007e4a:	bf00      	nop
 8007e4c:	2000000c 	.word	0x2000000c
 8007e50:	08009b08 	.word	0x08009b08
 8007e54:	08009b28 	.word	0x08009b28
 8007e58:	08009ae8 	.word	0x08009ae8

08007e5c <abort>:
 8007e5c:	b508      	push	{r3, lr}
 8007e5e:	2006      	movs	r0, #6
 8007e60:	f000 fa4c 	bl	80082fc <raise>
 8007e64:	2001      	movs	r0, #1
 8007e66:	f7f9 fd8f 	bl	8001988 <_exit>
	...

08007e6c <__sflush_r>:
 8007e6c:	898a      	ldrh	r2, [r1, #12]
 8007e6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e72:	4605      	mov	r5, r0
 8007e74:	0710      	lsls	r0, r2, #28
 8007e76:	460c      	mov	r4, r1
 8007e78:	d458      	bmi.n	8007f2c <__sflush_r+0xc0>
 8007e7a:	684b      	ldr	r3, [r1, #4]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	dc05      	bgt.n	8007e8c <__sflush_r+0x20>
 8007e80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	dc02      	bgt.n	8007e8c <__sflush_r+0x20>
 8007e86:	2000      	movs	r0, #0
 8007e88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e8e:	2e00      	cmp	r6, #0
 8007e90:	d0f9      	beq.n	8007e86 <__sflush_r+0x1a>
 8007e92:	2300      	movs	r3, #0
 8007e94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007e98:	682f      	ldr	r7, [r5, #0]
 8007e9a:	602b      	str	r3, [r5, #0]
 8007e9c:	d032      	beq.n	8007f04 <__sflush_r+0x98>
 8007e9e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007ea0:	89a3      	ldrh	r3, [r4, #12]
 8007ea2:	075a      	lsls	r2, r3, #29
 8007ea4:	d505      	bpl.n	8007eb2 <__sflush_r+0x46>
 8007ea6:	6863      	ldr	r3, [r4, #4]
 8007ea8:	1ac0      	subs	r0, r0, r3
 8007eaa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007eac:	b10b      	cbz	r3, 8007eb2 <__sflush_r+0x46>
 8007eae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007eb0:	1ac0      	subs	r0, r0, r3
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	4602      	mov	r2, r0
 8007eb6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007eb8:	6a21      	ldr	r1, [r4, #32]
 8007eba:	4628      	mov	r0, r5
 8007ebc:	47b0      	blx	r6
 8007ebe:	1c43      	adds	r3, r0, #1
 8007ec0:	89a3      	ldrh	r3, [r4, #12]
 8007ec2:	d106      	bne.n	8007ed2 <__sflush_r+0x66>
 8007ec4:	6829      	ldr	r1, [r5, #0]
 8007ec6:	291d      	cmp	r1, #29
 8007ec8:	d82c      	bhi.n	8007f24 <__sflush_r+0xb8>
 8007eca:	4a2a      	ldr	r2, [pc, #168]	; (8007f74 <__sflush_r+0x108>)
 8007ecc:	40ca      	lsrs	r2, r1
 8007ece:	07d6      	lsls	r6, r2, #31
 8007ed0:	d528      	bpl.n	8007f24 <__sflush_r+0xb8>
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	6062      	str	r2, [r4, #4]
 8007ed6:	04d9      	lsls	r1, r3, #19
 8007ed8:	6922      	ldr	r2, [r4, #16]
 8007eda:	6022      	str	r2, [r4, #0]
 8007edc:	d504      	bpl.n	8007ee8 <__sflush_r+0x7c>
 8007ede:	1c42      	adds	r2, r0, #1
 8007ee0:	d101      	bne.n	8007ee6 <__sflush_r+0x7a>
 8007ee2:	682b      	ldr	r3, [r5, #0]
 8007ee4:	b903      	cbnz	r3, 8007ee8 <__sflush_r+0x7c>
 8007ee6:	6560      	str	r0, [r4, #84]	; 0x54
 8007ee8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007eea:	602f      	str	r7, [r5, #0]
 8007eec:	2900      	cmp	r1, #0
 8007eee:	d0ca      	beq.n	8007e86 <__sflush_r+0x1a>
 8007ef0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ef4:	4299      	cmp	r1, r3
 8007ef6:	d002      	beq.n	8007efe <__sflush_r+0x92>
 8007ef8:	4628      	mov	r0, r5
 8007efa:	f7ff fbb5 	bl	8007668 <_free_r>
 8007efe:	2000      	movs	r0, #0
 8007f00:	6360      	str	r0, [r4, #52]	; 0x34
 8007f02:	e7c1      	b.n	8007e88 <__sflush_r+0x1c>
 8007f04:	6a21      	ldr	r1, [r4, #32]
 8007f06:	2301      	movs	r3, #1
 8007f08:	4628      	mov	r0, r5
 8007f0a:	47b0      	blx	r6
 8007f0c:	1c41      	adds	r1, r0, #1
 8007f0e:	d1c7      	bne.n	8007ea0 <__sflush_r+0x34>
 8007f10:	682b      	ldr	r3, [r5, #0]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d0c4      	beq.n	8007ea0 <__sflush_r+0x34>
 8007f16:	2b1d      	cmp	r3, #29
 8007f18:	d001      	beq.n	8007f1e <__sflush_r+0xb2>
 8007f1a:	2b16      	cmp	r3, #22
 8007f1c:	d101      	bne.n	8007f22 <__sflush_r+0xb6>
 8007f1e:	602f      	str	r7, [r5, #0]
 8007f20:	e7b1      	b.n	8007e86 <__sflush_r+0x1a>
 8007f22:	89a3      	ldrh	r3, [r4, #12]
 8007f24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f28:	81a3      	strh	r3, [r4, #12]
 8007f2a:	e7ad      	b.n	8007e88 <__sflush_r+0x1c>
 8007f2c:	690f      	ldr	r7, [r1, #16]
 8007f2e:	2f00      	cmp	r7, #0
 8007f30:	d0a9      	beq.n	8007e86 <__sflush_r+0x1a>
 8007f32:	0793      	lsls	r3, r2, #30
 8007f34:	680e      	ldr	r6, [r1, #0]
 8007f36:	bf08      	it	eq
 8007f38:	694b      	ldreq	r3, [r1, #20]
 8007f3a:	600f      	str	r7, [r1, #0]
 8007f3c:	bf18      	it	ne
 8007f3e:	2300      	movne	r3, #0
 8007f40:	eba6 0807 	sub.w	r8, r6, r7
 8007f44:	608b      	str	r3, [r1, #8]
 8007f46:	f1b8 0f00 	cmp.w	r8, #0
 8007f4a:	dd9c      	ble.n	8007e86 <__sflush_r+0x1a>
 8007f4c:	6a21      	ldr	r1, [r4, #32]
 8007f4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007f50:	4643      	mov	r3, r8
 8007f52:	463a      	mov	r2, r7
 8007f54:	4628      	mov	r0, r5
 8007f56:	47b0      	blx	r6
 8007f58:	2800      	cmp	r0, #0
 8007f5a:	dc06      	bgt.n	8007f6a <__sflush_r+0xfe>
 8007f5c:	89a3      	ldrh	r3, [r4, #12]
 8007f5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f62:	81a3      	strh	r3, [r4, #12]
 8007f64:	f04f 30ff 	mov.w	r0, #4294967295
 8007f68:	e78e      	b.n	8007e88 <__sflush_r+0x1c>
 8007f6a:	4407      	add	r7, r0
 8007f6c:	eba8 0800 	sub.w	r8, r8, r0
 8007f70:	e7e9      	b.n	8007f46 <__sflush_r+0xda>
 8007f72:	bf00      	nop
 8007f74:	20400001 	.word	0x20400001

08007f78 <_fflush_r>:
 8007f78:	b538      	push	{r3, r4, r5, lr}
 8007f7a:	690b      	ldr	r3, [r1, #16]
 8007f7c:	4605      	mov	r5, r0
 8007f7e:	460c      	mov	r4, r1
 8007f80:	b913      	cbnz	r3, 8007f88 <_fflush_r+0x10>
 8007f82:	2500      	movs	r5, #0
 8007f84:	4628      	mov	r0, r5
 8007f86:	bd38      	pop	{r3, r4, r5, pc}
 8007f88:	b118      	cbz	r0, 8007f92 <_fflush_r+0x1a>
 8007f8a:	6983      	ldr	r3, [r0, #24]
 8007f8c:	b90b      	cbnz	r3, 8007f92 <_fflush_r+0x1a>
 8007f8e:	f000 f887 	bl	80080a0 <__sinit>
 8007f92:	4b14      	ldr	r3, [pc, #80]	; (8007fe4 <_fflush_r+0x6c>)
 8007f94:	429c      	cmp	r4, r3
 8007f96:	d11b      	bne.n	8007fd0 <_fflush_r+0x58>
 8007f98:	686c      	ldr	r4, [r5, #4]
 8007f9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d0ef      	beq.n	8007f82 <_fflush_r+0xa>
 8007fa2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007fa4:	07d0      	lsls	r0, r2, #31
 8007fa6:	d404      	bmi.n	8007fb2 <_fflush_r+0x3a>
 8007fa8:	0599      	lsls	r1, r3, #22
 8007faa:	d402      	bmi.n	8007fb2 <_fflush_r+0x3a>
 8007fac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007fae:	f000 f915 	bl	80081dc <__retarget_lock_acquire_recursive>
 8007fb2:	4628      	mov	r0, r5
 8007fb4:	4621      	mov	r1, r4
 8007fb6:	f7ff ff59 	bl	8007e6c <__sflush_r>
 8007fba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007fbc:	07da      	lsls	r2, r3, #31
 8007fbe:	4605      	mov	r5, r0
 8007fc0:	d4e0      	bmi.n	8007f84 <_fflush_r+0xc>
 8007fc2:	89a3      	ldrh	r3, [r4, #12]
 8007fc4:	059b      	lsls	r3, r3, #22
 8007fc6:	d4dd      	bmi.n	8007f84 <_fflush_r+0xc>
 8007fc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007fca:	f000 f908 	bl	80081de <__retarget_lock_release_recursive>
 8007fce:	e7d9      	b.n	8007f84 <_fflush_r+0xc>
 8007fd0:	4b05      	ldr	r3, [pc, #20]	; (8007fe8 <_fflush_r+0x70>)
 8007fd2:	429c      	cmp	r4, r3
 8007fd4:	d101      	bne.n	8007fda <_fflush_r+0x62>
 8007fd6:	68ac      	ldr	r4, [r5, #8]
 8007fd8:	e7df      	b.n	8007f9a <_fflush_r+0x22>
 8007fda:	4b04      	ldr	r3, [pc, #16]	; (8007fec <_fflush_r+0x74>)
 8007fdc:	429c      	cmp	r4, r3
 8007fde:	bf08      	it	eq
 8007fe0:	68ec      	ldreq	r4, [r5, #12]
 8007fe2:	e7da      	b.n	8007f9a <_fflush_r+0x22>
 8007fe4:	08009b08 	.word	0x08009b08
 8007fe8:	08009b28 	.word	0x08009b28
 8007fec:	08009ae8 	.word	0x08009ae8

08007ff0 <std>:
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	b510      	push	{r4, lr}
 8007ff4:	4604      	mov	r4, r0
 8007ff6:	e9c0 3300 	strd	r3, r3, [r0]
 8007ffa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007ffe:	6083      	str	r3, [r0, #8]
 8008000:	8181      	strh	r1, [r0, #12]
 8008002:	6643      	str	r3, [r0, #100]	; 0x64
 8008004:	81c2      	strh	r2, [r0, #14]
 8008006:	6183      	str	r3, [r0, #24]
 8008008:	4619      	mov	r1, r3
 800800a:	2208      	movs	r2, #8
 800800c:	305c      	adds	r0, #92	; 0x5c
 800800e:	f7fd fec7 	bl	8005da0 <memset>
 8008012:	4b05      	ldr	r3, [pc, #20]	; (8008028 <std+0x38>)
 8008014:	6263      	str	r3, [r4, #36]	; 0x24
 8008016:	4b05      	ldr	r3, [pc, #20]	; (800802c <std+0x3c>)
 8008018:	62a3      	str	r3, [r4, #40]	; 0x28
 800801a:	4b05      	ldr	r3, [pc, #20]	; (8008030 <std+0x40>)
 800801c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800801e:	4b05      	ldr	r3, [pc, #20]	; (8008034 <std+0x44>)
 8008020:	6224      	str	r4, [r4, #32]
 8008022:	6323      	str	r3, [r4, #48]	; 0x30
 8008024:	bd10      	pop	{r4, pc}
 8008026:	bf00      	nop
 8008028:	08008335 	.word	0x08008335
 800802c:	08008357 	.word	0x08008357
 8008030:	0800838f 	.word	0x0800838f
 8008034:	080083b3 	.word	0x080083b3

08008038 <_cleanup_r>:
 8008038:	4901      	ldr	r1, [pc, #4]	; (8008040 <_cleanup_r+0x8>)
 800803a:	f000 b8af 	b.w	800819c <_fwalk_reent>
 800803e:	bf00      	nop
 8008040:	08007f79 	.word	0x08007f79

08008044 <__sfmoreglue>:
 8008044:	b570      	push	{r4, r5, r6, lr}
 8008046:	2268      	movs	r2, #104	; 0x68
 8008048:	1e4d      	subs	r5, r1, #1
 800804a:	4355      	muls	r5, r2
 800804c:	460e      	mov	r6, r1
 800804e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008052:	f7fe fbbd 	bl	80067d0 <_malloc_r>
 8008056:	4604      	mov	r4, r0
 8008058:	b140      	cbz	r0, 800806c <__sfmoreglue+0x28>
 800805a:	2100      	movs	r1, #0
 800805c:	e9c0 1600 	strd	r1, r6, [r0]
 8008060:	300c      	adds	r0, #12
 8008062:	60a0      	str	r0, [r4, #8]
 8008064:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008068:	f7fd fe9a 	bl	8005da0 <memset>
 800806c:	4620      	mov	r0, r4
 800806e:	bd70      	pop	{r4, r5, r6, pc}

08008070 <__sfp_lock_acquire>:
 8008070:	4801      	ldr	r0, [pc, #4]	; (8008078 <__sfp_lock_acquire+0x8>)
 8008072:	f000 b8b3 	b.w	80081dc <__retarget_lock_acquire_recursive>
 8008076:	bf00      	nop
 8008078:	200001cd 	.word	0x200001cd

0800807c <__sfp_lock_release>:
 800807c:	4801      	ldr	r0, [pc, #4]	; (8008084 <__sfp_lock_release+0x8>)
 800807e:	f000 b8ae 	b.w	80081de <__retarget_lock_release_recursive>
 8008082:	bf00      	nop
 8008084:	200001cd 	.word	0x200001cd

08008088 <__sinit_lock_acquire>:
 8008088:	4801      	ldr	r0, [pc, #4]	; (8008090 <__sinit_lock_acquire+0x8>)
 800808a:	f000 b8a7 	b.w	80081dc <__retarget_lock_acquire_recursive>
 800808e:	bf00      	nop
 8008090:	200001ce 	.word	0x200001ce

08008094 <__sinit_lock_release>:
 8008094:	4801      	ldr	r0, [pc, #4]	; (800809c <__sinit_lock_release+0x8>)
 8008096:	f000 b8a2 	b.w	80081de <__retarget_lock_release_recursive>
 800809a:	bf00      	nop
 800809c:	200001ce 	.word	0x200001ce

080080a0 <__sinit>:
 80080a0:	b510      	push	{r4, lr}
 80080a2:	4604      	mov	r4, r0
 80080a4:	f7ff fff0 	bl	8008088 <__sinit_lock_acquire>
 80080a8:	69a3      	ldr	r3, [r4, #24]
 80080aa:	b11b      	cbz	r3, 80080b4 <__sinit+0x14>
 80080ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080b0:	f7ff bff0 	b.w	8008094 <__sinit_lock_release>
 80080b4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80080b8:	6523      	str	r3, [r4, #80]	; 0x50
 80080ba:	4b13      	ldr	r3, [pc, #76]	; (8008108 <__sinit+0x68>)
 80080bc:	4a13      	ldr	r2, [pc, #76]	; (800810c <__sinit+0x6c>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	62a2      	str	r2, [r4, #40]	; 0x28
 80080c2:	42a3      	cmp	r3, r4
 80080c4:	bf04      	itt	eq
 80080c6:	2301      	moveq	r3, #1
 80080c8:	61a3      	streq	r3, [r4, #24]
 80080ca:	4620      	mov	r0, r4
 80080cc:	f000 f820 	bl	8008110 <__sfp>
 80080d0:	6060      	str	r0, [r4, #4]
 80080d2:	4620      	mov	r0, r4
 80080d4:	f000 f81c 	bl	8008110 <__sfp>
 80080d8:	60a0      	str	r0, [r4, #8]
 80080da:	4620      	mov	r0, r4
 80080dc:	f000 f818 	bl	8008110 <__sfp>
 80080e0:	2200      	movs	r2, #0
 80080e2:	60e0      	str	r0, [r4, #12]
 80080e4:	2104      	movs	r1, #4
 80080e6:	6860      	ldr	r0, [r4, #4]
 80080e8:	f7ff ff82 	bl	8007ff0 <std>
 80080ec:	68a0      	ldr	r0, [r4, #8]
 80080ee:	2201      	movs	r2, #1
 80080f0:	2109      	movs	r1, #9
 80080f2:	f7ff ff7d 	bl	8007ff0 <std>
 80080f6:	68e0      	ldr	r0, [r4, #12]
 80080f8:	2202      	movs	r2, #2
 80080fa:	2112      	movs	r1, #18
 80080fc:	f7ff ff78 	bl	8007ff0 <std>
 8008100:	2301      	movs	r3, #1
 8008102:	61a3      	str	r3, [r4, #24]
 8008104:	e7d2      	b.n	80080ac <__sinit+0xc>
 8008106:	bf00      	nop
 8008108:	08009888 	.word	0x08009888
 800810c:	08008039 	.word	0x08008039

08008110 <__sfp>:
 8008110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008112:	4607      	mov	r7, r0
 8008114:	f7ff ffac 	bl	8008070 <__sfp_lock_acquire>
 8008118:	4b1e      	ldr	r3, [pc, #120]	; (8008194 <__sfp+0x84>)
 800811a:	681e      	ldr	r6, [r3, #0]
 800811c:	69b3      	ldr	r3, [r6, #24]
 800811e:	b913      	cbnz	r3, 8008126 <__sfp+0x16>
 8008120:	4630      	mov	r0, r6
 8008122:	f7ff ffbd 	bl	80080a0 <__sinit>
 8008126:	3648      	adds	r6, #72	; 0x48
 8008128:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800812c:	3b01      	subs	r3, #1
 800812e:	d503      	bpl.n	8008138 <__sfp+0x28>
 8008130:	6833      	ldr	r3, [r6, #0]
 8008132:	b30b      	cbz	r3, 8008178 <__sfp+0x68>
 8008134:	6836      	ldr	r6, [r6, #0]
 8008136:	e7f7      	b.n	8008128 <__sfp+0x18>
 8008138:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800813c:	b9d5      	cbnz	r5, 8008174 <__sfp+0x64>
 800813e:	4b16      	ldr	r3, [pc, #88]	; (8008198 <__sfp+0x88>)
 8008140:	60e3      	str	r3, [r4, #12]
 8008142:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008146:	6665      	str	r5, [r4, #100]	; 0x64
 8008148:	f000 f847 	bl	80081da <__retarget_lock_init_recursive>
 800814c:	f7ff ff96 	bl	800807c <__sfp_lock_release>
 8008150:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008154:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008158:	6025      	str	r5, [r4, #0]
 800815a:	61a5      	str	r5, [r4, #24]
 800815c:	2208      	movs	r2, #8
 800815e:	4629      	mov	r1, r5
 8008160:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008164:	f7fd fe1c 	bl	8005da0 <memset>
 8008168:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800816c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008170:	4620      	mov	r0, r4
 8008172:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008174:	3468      	adds	r4, #104	; 0x68
 8008176:	e7d9      	b.n	800812c <__sfp+0x1c>
 8008178:	2104      	movs	r1, #4
 800817a:	4638      	mov	r0, r7
 800817c:	f7ff ff62 	bl	8008044 <__sfmoreglue>
 8008180:	4604      	mov	r4, r0
 8008182:	6030      	str	r0, [r6, #0]
 8008184:	2800      	cmp	r0, #0
 8008186:	d1d5      	bne.n	8008134 <__sfp+0x24>
 8008188:	f7ff ff78 	bl	800807c <__sfp_lock_release>
 800818c:	230c      	movs	r3, #12
 800818e:	603b      	str	r3, [r7, #0]
 8008190:	e7ee      	b.n	8008170 <__sfp+0x60>
 8008192:	bf00      	nop
 8008194:	08009888 	.word	0x08009888
 8008198:	ffff0001 	.word	0xffff0001

0800819c <_fwalk_reent>:
 800819c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081a0:	4606      	mov	r6, r0
 80081a2:	4688      	mov	r8, r1
 80081a4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80081a8:	2700      	movs	r7, #0
 80081aa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80081ae:	f1b9 0901 	subs.w	r9, r9, #1
 80081b2:	d505      	bpl.n	80081c0 <_fwalk_reent+0x24>
 80081b4:	6824      	ldr	r4, [r4, #0]
 80081b6:	2c00      	cmp	r4, #0
 80081b8:	d1f7      	bne.n	80081aa <_fwalk_reent+0xe>
 80081ba:	4638      	mov	r0, r7
 80081bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081c0:	89ab      	ldrh	r3, [r5, #12]
 80081c2:	2b01      	cmp	r3, #1
 80081c4:	d907      	bls.n	80081d6 <_fwalk_reent+0x3a>
 80081c6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80081ca:	3301      	adds	r3, #1
 80081cc:	d003      	beq.n	80081d6 <_fwalk_reent+0x3a>
 80081ce:	4629      	mov	r1, r5
 80081d0:	4630      	mov	r0, r6
 80081d2:	47c0      	blx	r8
 80081d4:	4307      	orrs	r7, r0
 80081d6:	3568      	adds	r5, #104	; 0x68
 80081d8:	e7e9      	b.n	80081ae <_fwalk_reent+0x12>

080081da <__retarget_lock_init_recursive>:
 80081da:	4770      	bx	lr

080081dc <__retarget_lock_acquire_recursive>:
 80081dc:	4770      	bx	lr

080081de <__retarget_lock_release_recursive>:
 80081de:	4770      	bx	lr

080081e0 <__swhatbuf_r>:
 80081e0:	b570      	push	{r4, r5, r6, lr}
 80081e2:	460e      	mov	r6, r1
 80081e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081e8:	2900      	cmp	r1, #0
 80081ea:	b096      	sub	sp, #88	; 0x58
 80081ec:	4614      	mov	r4, r2
 80081ee:	461d      	mov	r5, r3
 80081f0:	da08      	bge.n	8008204 <__swhatbuf_r+0x24>
 80081f2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80081f6:	2200      	movs	r2, #0
 80081f8:	602a      	str	r2, [r5, #0]
 80081fa:	061a      	lsls	r2, r3, #24
 80081fc:	d410      	bmi.n	8008220 <__swhatbuf_r+0x40>
 80081fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008202:	e00e      	b.n	8008222 <__swhatbuf_r+0x42>
 8008204:	466a      	mov	r2, sp
 8008206:	f000 f8fb 	bl	8008400 <_fstat_r>
 800820a:	2800      	cmp	r0, #0
 800820c:	dbf1      	blt.n	80081f2 <__swhatbuf_r+0x12>
 800820e:	9a01      	ldr	r2, [sp, #4]
 8008210:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008214:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008218:	425a      	negs	r2, r3
 800821a:	415a      	adcs	r2, r3
 800821c:	602a      	str	r2, [r5, #0]
 800821e:	e7ee      	b.n	80081fe <__swhatbuf_r+0x1e>
 8008220:	2340      	movs	r3, #64	; 0x40
 8008222:	2000      	movs	r0, #0
 8008224:	6023      	str	r3, [r4, #0]
 8008226:	b016      	add	sp, #88	; 0x58
 8008228:	bd70      	pop	{r4, r5, r6, pc}
	...

0800822c <__smakebuf_r>:
 800822c:	898b      	ldrh	r3, [r1, #12]
 800822e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008230:	079d      	lsls	r5, r3, #30
 8008232:	4606      	mov	r6, r0
 8008234:	460c      	mov	r4, r1
 8008236:	d507      	bpl.n	8008248 <__smakebuf_r+0x1c>
 8008238:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800823c:	6023      	str	r3, [r4, #0]
 800823e:	6123      	str	r3, [r4, #16]
 8008240:	2301      	movs	r3, #1
 8008242:	6163      	str	r3, [r4, #20]
 8008244:	b002      	add	sp, #8
 8008246:	bd70      	pop	{r4, r5, r6, pc}
 8008248:	ab01      	add	r3, sp, #4
 800824a:	466a      	mov	r2, sp
 800824c:	f7ff ffc8 	bl	80081e0 <__swhatbuf_r>
 8008250:	9900      	ldr	r1, [sp, #0]
 8008252:	4605      	mov	r5, r0
 8008254:	4630      	mov	r0, r6
 8008256:	f7fe fabb 	bl	80067d0 <_malloc_r>
 800825a:	b948      	cbnz	r0, 8008270 <__smakebuf_r+0x44>
 800825c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008260:	059a      	lsls	r2, r3, #22
 8008262:	d4ef      	bmi.n	8008244 <__smakebuf_r+0x18>
 8008264:	f023 0303 	bic.w	r3, r3, #3
 8008268:	f043 0302 	orr.w	r3, r3, #2
 800826c:	81a3      	strh	r3, [r4, #12]
 800826e:	e7e3      	b.n	8008238 <__smakebuf_r+0xc>
 8008270:	4b0d      	ldr	r3, [pc, #52]	; (80082a8 <__smakebuf_r+0x7c>)
 8008272:	62b3      	str	r3, [r6, #40]	; 0x28
 8008274:	89a3      	ldrh	r3, [r4, #12]
 8008276:	6020      	str	r0, [r4, #0]
 8008278:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800827c:	81a3      	strh	r3, [r4, #12]
 800827e:	9b00      	ldr	r3, [sp, #0]
 8008280:	6163      	str	r3, [r4, #20]
 8008282:	9b01      	ldr	r3, [sp, #4]
 8008284:	6120      	str	r0, [r4, #16]
 8008286:	b15b      	cbz	r3, 80082a0 <__smakebuf_r+0x74>
 8008288:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800828c:	4630      	mov	r0, r6
 800828e:	f000 f8c9 	bl	8008424 <_isatty_r>
 8008292:	b128      	cbz	r0, 80082a0 <__smakebuf_r+0x74>
 8008294:	89a3      	ldrh	r3, [r4, #12]
 8008296:	f023 0303 	bic.w	r3, r3, #3
 800829a:	f043 0301 	orr.w	r3, r3, #1
 800829e:	81a3      	strh	r3, [r4, #12]
 80082a0:	89a0      	ldrh	r0, [r4, #12]
 80082a2:	4305      	orrs	r5, r0
 80082a4:	81a5      	strh	r5, [r4, #12]
 80082a6:	e7cd      	b.n	8008244 <__smakebuf_r+0x18>
 80082a8:	08008039 	.word	0x08008039

080082ac <_raise_r>:
 80082ac:	291f      	cmp	r1, #31
 80082ae:	b538      	push	{r3, r4, r5, lr}
 80082b0:	4604      	mov	r4, r0
 80082b2:	460d      	mov	r5, r1
 80082b4:	d904      	bls.n	80082c0 <_raise_r+0x14>
 80082b6:	2316      	movs	r3, #22
 80082b8:	6003      	str	r3, [r0, #0]
 80082ba:	f04f 30ff 	mov.w	r0, #4294967295
 80082be:	bd38      	pop	{r3, r4, r5, pc}
 80082c0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80082c2:	b112      	cbz	r2, 80082ca <_raise_r+0x1e>
 80082c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80082c8:	b94b      	cbnz	r3, 80082de <_raise_r+0x32>
 80082ca:	4620      	mov	r0, r4
 80082cc:	f000 f830 	bl	8008330 <_getpid_r>
 80082d0:	462a      	mov	r2, r5
 80082d2:	4601      	mov	r1, r0
 80082d4:	4620      	mov	r0, r4
 80082d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80082da:	f000 b817 	b.w	800830c <_kill_r>
 80082de:	2b01      	cmp	r3, #1
 80082e0:	d00a      	beq.n	80082f8 <_raise_r+0x4c>
 80082e2:	1c59      	adds	r1, r3, #1
 80082e4:	d103      	bne.n	80082ee <_raise_r+0x42>
 80082e6:	2316      	movs	r3, #22
 80082e8:	6003      	str	r3, [r0, #0]
 80082ea:	2001      	movs	r0, #1
 80082ec:	e7e7      	b.n	80082be <_raise_r+0x12>
 80082ee:	2400      	movs	r4, #0
 80082f0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80082f4:	4628      	mov	r0, r5
 80082f6:	4798      	blx	r3
 80082f8:	2000      	movs	r0, #0
 80082fa:	e7e0      	b.n	80082be <_raise_r+0x12>

080082fc <raise>:
 80082fc:	4b02      	ldr	r3, [pc, #8]	; (8008308 <raise+0xc>)
 80082fe:	4601      	mov	r1, r0
 8008300:	6818      	ldr	r0, [r3, #0]
 8008302:	f7ff bfd3 	b.w	80082ac <_raise_r>
 8008306:	bf00      	nop
 8008308:	2000000c 	.word	0x2000000c

0800830c <_kill_r>:
 800830c:	b538      	push	{r3, r4, r5, lr}
 800830e:	4d07      	ldr	r5, [pc, #28]	; (800832c <_kill_r+0x20>)
 8008310:	2300      	movs	r3, #0
 8008312:	4604      	mov	r4, r0
 8008314:	4608      	mov	r0, r1
 8008316:	4611      	mov	r1, r2
 8008318:	602b      	str	r3, [r5, #0]
 800831a:	f7f9 fb25 	bl	8001968 <_kill>
 800831e:	1c43      	adds	r3, r0, #1
 8008320:	d102      	bne.n	8008328 <_kill_r+0x1c>
 8008322:	682b      	ldr	r3, [r5, #0]
 8008324:	b103      	cbz	r3, 8008328 <_kill_r+0x1c>
 8008326:	6023      	str	r3, [r4, #0]
 8008328:	bd38      	pop	{r3, r4, r5, pc}
 800832a:	bf00      	nop
 800832c:	200001c8 	.word	0x200001c8

08008330 <_getpid_r>:
 8008330:	f7f9 bb12 	b.w	8001958 <_getpid>

08008334 <__sread>:
 8008334:	b510      	push	{r4, lr}
 8008336:	460c      	mov	r4, r1
 8008338:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800833c:	f000 f894 	bl	8008468 <_read_r>
 8008340:	2800      	cmp	r0, #0
 8008342:	bfab      	itete	ge
 8008344:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008346:	89a3      	ldrhlt	r3, [r4, #12]
 8008348:	181b      	addge	r3, r3, r0
 800834a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800834e:	bfac      	ite	ge
 8008350:	6563      	strge	r3, [r4, #84]	; 0x54
 8008352:	81a3      	strhlt	r3, [r4, #12]
 8008354:	bd10      	pop	{r4, pc}

08008356 <__swrite>:
 8008356:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800835a:	461f      	mov	r7, r3
 800835c:	898b      	ldrh	r3, [r1, #12]
 800835e:	05db      	lsls	r3, r3, #23
 8008360:	4605      	mov	r5, r0
 8008362:	460c      	mov	r4, r1
 8008364:	4616      	mov	r6, r2
 8008366:	d505      	bpl.n	8008374 <__swrite+0x1e>
 8008368:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800836c:	2302      	movs	r3, #2
 800836e:	2200      	movs	r2, #0
 8008370:	f000 f868 	bl	8008444 <_lseek_r>
 8008374:	89a3      	ldrh	r3, [r4, #12]
 8008376:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800837a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800837e:	81a3      	strh	r3, [r4, #12]
 8008380:	4632      	mov	r2, r6
 8008382:	463b      	mov	r3, r7
 8008384:	4628      	mov	r0, r5
 8008386:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800838a:	f000 b817 	b.w	80083bc <_write_r>

0800838e <__sseek>:
 800838e:	b510      	push	{r4, lr}
 8008390:	460c      	mov	r4, r1
 8008392:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008396:	f000 f855 	bl	8008444 <_lseek_r>
 800839a:	1c43      	adds	r3, r0, #1
 800839c:	89a3      	ldrh	r3, [r4, #12]
 800839e:	bf15      	itete	ne
 80083a0:	6560      	strne	r0, [r4, #84]	; 0x54
 80083a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80083a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80083aa:	81a3      	strheq	r3, [r4, #12]
 80083ac:	bf18      	it	ne
 80083ae:	81a3      	strhne	r3, [r4, #12]
 80083b0:	bd10      	pop	{r4, pc}

080083b2 <__sclose>:
 80083b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083b6:	f000 b813 	b.w	80083e0 <_close_r>
	...

080083bc <_write_r>:
 80083bc:	b538      	push	{r3, r4, r5, lr}
 80083be:	4d07      	ldr	r5, [pc, #28]	; (80083dc <_write_r+0x20>)
 80083c0:	4604      	mov	r4, r0
 80083c2:	4608      	mov	r0, r1
 80083c4:	4611      	mov	r1, r2
 80083c6:	2200      	movs	r2, #0
 80083c8:	602a      	str	r2, [r5, #0]
 80083ca:	461a      	mov	r2, r3
 80083cc:	f7f9 fb03 	bl	80019d6 <_write>
 80083d0:	1c43      	adds	r3, r0, #1
 80083d2:	d102      	bne.n	80083da <_write_r+0x1e>
 80083d4:	682b      	ldr	r3, [r5, #0]
 80083d6:	b103      	cbz	r3, 80083da <_write_r+0x1e>
 80083d8:	6023      	str	r3, [r4, #0]
 80083da:	bd38      	pop	{r3, r4, r5, pc}
 80083dc:	200001c8 	.word	0x200001c8

080083e0 <_close_r>:
 80083e0:	b538      	push	{r3, r4, r5, lr}
 80083e2:	4d06      	ldr	r5, [pc, #24]	; (80083fc <_close_r+0x1c>)
 80083e4:	2300      	movs	r3, #0
 80083e6:	4604      	mov	r4, r0
 80083e8:	4608      	mov	r0, r1
 80083ea:	602b      	str	r3, [r5, #0]
 80083ec:	f7f9 fb0f 	bl	8001a0e <_close>
 80083f0:	1c43      	adds	r3, r0, #1
 80083f2:	d102      	bne.n	80083fa <_close_r+0x1a>
 80083f4:	682b      	ldr	r3, [r5, #0]
 80083f6:	b103      	cbz	r3, 80083fa <_close_r+0x1a>
 80083f8:	6023      	str	r3, [r4, #0]
 80083fa:	bd38      	pop	{r3, r4, r5, pc}
 80083fc:	200001c8 	.word	0x200001c8

08008400 <_fstat_r>:
 8008400:	b538      	push	{r3, r4, r5, lr}
 8008402:	4d07      	ldr	r5, [pc, #28]	; (8008420 <_fstat_r+0x20>)
 8008404:	2300      	movs	r3, #0
 8008406:	4604      	mov	r4, r0
 8008408:	4608      	mov	r0, r1
 800840a:	4611      	mov	r1, r2
 800840c:	602b      	str	r3, [r5, #0]
 800840e:	f7f9 fb0a 	bl	8001a26 <_fstat>
 8008412:	1c43      	adds	r3, r0, #1
 8008414:	d102      	bne.n	800841c <_fstat_r+0x1c>
 8008416:	682b      	ldr	r3, [r5, #0]
 8008418:	b103      	cbz	r3, 800841c <_fstat_r+0x1c>
 800841a:	6023      	str	r3, [r4, #0]
 800841c:	bd38      	pop	{r3, r4, r5, pc}
 800841e:	bf00      	nop
 8008420:	200001c8 	.word	0x200001c8

08008424 <_isatty_r>:
 8008424:	b538      	push	{r3, r4, r5, lr}
 8008426:	4d06      	ldr	r5, [pc, #24]	; (8008440 <_isatty_r+0x1c>)
 8008428:	2300      	movs	r3, #0
 800842a:	4604      	mov	r4, r0
 800842c:	4608      	mov	r0, r1
 800842e:	602b      	str	r3, [r5, #0]
 8008430:	f7f9 fb09 	bl	8001a46 <_isatty>
 8008434:	1c43      	adds	r3, r0, #1
 8008436:	d102      	bne.n	800843e <_isatty_r+0x1a>
 8008438:	682b      	ldr	r3, [r5, #0]
 800843a:	b103      	cbz	r3, 800843e <_isatty_r+0x1a>
 800843c:	6023      	str	r3, [r4, #0]
 800843e:	bd38      	pop	{r3, r4, r5, pc}
 8008440:	200001c8 	.word	0x200001c8

08008444 <_lseek_r>:
 8008444:	b538      	push	{r3, r4, r5, lr}
 8008446:	4d07      	ldr	r5, [pc, #28]	; (8008464 <_lseek_r+0x20>)
 8008448:	4604      	mov	r4, r0
 800844a:	4608      	mov	r0, r1
 800844c:	4611      	mov	r1, r2
 800844e:	2200      	movs	r2, #0
 8008450:	602a      	str	r2, [r5, #0]
 8008452:	461a      	mov	r2, r3
 8008454:	f7f9 fb02 	bl	8001a5c <_lseek>
 8008458:	1c43      	adds	r3, r0, #1
 800845a:	d102      	bne.n	8008462 <_lseek_r+0x1e>
 800845c:	682b      	ldr	r3, [r5, #0]
 800845e:	b103      	cbz	r3, 8008462 <_lseek_r+0x1e>
 8008460:	6023      	str	r3, [r4, #0]
 8008462:	bd38      	pop	{r3, r4, r5, pc}
 8008464:	200001c8 	.word	0x200001c8

08008468 <_read_r>:
 8008468:	b538      	push	{r3, r4, r5, lr}
 800846a:	4d07      	ldr	r5, [pc, #28]	; (8008488 <_read_r+0x20>)
 800846c:	4604      	mov	r4, r0
 800846e:	4608      	mov	r0, r1
 8008470:	4611      	mov	r1, r2
 8008472:	2200      	movs	r2, #0
 8008474:	602a      	str	r2, [r5, #0]
 8008476:	461a      	mov	r2, r3
 8008478:	f7f9 fa90 	bl	800199c <_read>
 800847c:	1c43      	adds	r3, r0, #1
 800847e:	d102      	bne.n	8008486 <_read_r+0x1e>
 8008480:	682b      	ldr	r3, [r5, #0]
 8008482:	b103      	cbz	r3, 8008486 <_read_r+0x1e>
 8008484:	6023      	str	r3, [r4, #0]
 8008486:	bd38      	pop	{r3, r4, r5, pc}
 8008488:	200001c8 	.word	0x200001c8
 800848c:	00000000 	.word	0x00000000

08008490 <log10>:
 8008490:	b538      	push	{r3, r4, r5, lr}
 8008492:	ed2d 8b02 	vpush	{d8}
 8008496:	ec55 4b10 	vmov	r4, r5, d0
 800849a:	f000 f8a9 	bl	80085f0 <__ieee754_log10>
 800849e:	4622      	mov	r2, r4
 80084a0:	462b      	mov	r3, r5
 80084a2:	4620      	mov	r0, r4
 80084a4:	4629      	mov	r1, r5
 80084a6:	eeb0 8a40 	vmov.f32	s16, s0
 80084aa:	eef0 8a60 	vmov.f32	s17, s1
 80084ae:	f7f8 fb3d 	bl	8000b2c <__aeabi_dcmpun>
 80084b2:	b998      	cbnz	r0, 80084dc <log10+0x4c>
 80084b4:	2200      	movs	r2, #0
 80084b6:	2300      	movs	r3, #0
 80084b8:	4620      	mov	r0, r4
 80084ba:	4629      	mov	r1, r5
 80084bc:	f7f8 fb18 	bl	8000af0 <__aeabi_dcmple>
 80084c0:	b160      	cbz	r0, 80084dc <log10+0x4c>
 80084c2:	2200      	movs	r2, #0
 80084c4:	2300      	movs	r3, #0
 80084c6:	4620      	mov	r0, r4
 80084c8:	4629      	mov	r1, r5
 80084ca:	f7f8 fafd 	bl	8000ac8 <__aeabi_dcmpeq>
 80084ce:	b160      	cbz	r0, 80084ea <log10+0x5a>
 80084d0:	f7fd fc2e 	bl	8005d30 <__errno>
 80084d4:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 8008500 <log10+0x70>
 80084d8:	2322      	movs	r3, #34	; 0x22
 80084da:	6003      	str	r3, [r0, #0]
 80084dc:	eeb0 0a48 	vmov.f32	s0, s16
 80084e0:	eef0 0a68 	vmov.f32	s1, s17
 80084e4:	ecbd 8b02 	vpop	{d8}
 80084e8:	bd38      	pop	{r3, r4, r5, pc}
 80084ea:	f7fd fc21 	bl	8005d30 <__errno>
 80084ee:	ecbd 8b02 	vpop	{d8}
 80084f2:	2321      	movs	r3, #33	; 0x21
 80084f4:	6003      	str	r3, [r0, #0]
 80084f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80084fa:	4803      	ldr	r0, [pc, #12]	; (8008508 <log10+0x78>)
 80084fc:	f000 bf28 	b.w	8009350 <nan>
 8008500:	00000000 	.word	0x00000000
 8008504:	fff00000 	.word	0xfff00000
 8008508:	08009a47 	.word	0x08009a47

0800850c <pow>:
 800850c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800850e:	ed2d 8b02 	vpush	{d8}
 8008512:	eeb0 8a40 	vmov.f32	s16, s0
 8008516:	eef0 8a60 	vmov.f32	s17, s1
 800851a:	ec55 4b11 	vmov	r4, r5, d1
 800851e:	f000 f8f3 	bl	8008708 <__ieee754_pow>
 8008522:	4622      	mov	r2, r4
 8008524:	462b      	mov	r3, r5
 8008526:	4620      	mov	r0, r4
 8008528:	4629      	mov	r1, r5
 800852a:	ec57 6b10 	vmov	r6, r7, d0
 800852e:	f7f8 fafd 	bl	8000b2c <__aeabi_dcmpun>
 8008532:	2800      	cmp	r0, #0
 8008534:	d13b      	bne.n	80085ae <pow+0xa2>
 8008536:	ec51 0b18 	vmov	r0, r1, d8
 800853a:	2200      	movs	r2, #0
 800853c:	2300      	movs	r3, #0
 800853e:	f7f8 fac3 	bl	8000ac8 <__aeabi_dcmpeq>
 8008542:	b1b8      	cbz	r0, 8008574 <pow+0x68>
 8008544:	2200      	movs	r2, #0
 8008546:	2300      	movs	r3, #0
 8008548:	4620      	mov	r0, r4
 800854a:	4629      	mov	r1, r5
 800854c:	f7f8 fabc 	bl	8000ac8 <__aeabi_dcmpeq>
 8008550:	2800      	cmp	r0, #0
 8008552:	d146      	bne.n	80085e2 <pow+0xd6>
 8008554:	ec45 4b10 	vmov	d0, r4, r5
 8008558:	f000 feef 	bl	800933a <finite>
 800855c:	b338      	cbz	r0, 80085ae <pow+0xa2>
 800855e:	2200      	movs	r2, #0
 8008560:	2300      	movs	r3, #0
 8008562:	4620      	mov	r0, r4
 8008564:	4629      	mov	r1, r5
 8008566:	f7f8 fab9 	bl	8000adc <__aeabi_dcmplt>
 800856a:	b300      	cbz	r0, 80085ae <pow+0xa2>
 800856c:	f7fd fbe0 	bl	8005d30 <__errno>
 8008570:	2322      	movs	r3, #34	; 0x22
 8008572:	e01b      	b.n	80085ac <pow+0xa0>
 8008574:	ec47 6b10 	vmov	d0, r6, r7
 8008578:	f000 fedf 	bl	800933a <finite>
 800857c:	b9e0      	cbnz	r0, 80085b8 <pow+0xac>
 800857e:	eeb0 0a48 	vmov.f32	s0, s16
 8008582:	eef0 0a68 	vmov.f32	s1, s17
 8008586:	f000 fed8 	bl	800933a <finite>
 800858a:	b1a8      	cbz	r0, 80085b8 <pow+0xac>
 800858c:	ec45 4b10 	vmov	d0, r4, r5
 8008590:	f000 fed3 	bl	800933a <finite>
 8008594:	b180      	cbz	r0, 80085b8 <pow+0xac>
 8008596:	4632      	mov	r2, r6
 8008598:	463b      	mov	r3, r7
 800859a:	4630      	mov	r0, r6
 800859c:	4639      	mov	r1, r7
 800859e:	f7f8 fac5 	bl	8000b2c <__aeabi_dcmpun>
 80085a2:	2800      	cmp	r0, #0
 80085a4:	d0e2      	beq.n	800856c <pow+0x60>
 80085a6:	f7fd fbc3 	bl	8005d30 <__errno>
 80085aa:	2321      	movs	r3, #33	; 0x21
 80085ac:	6003      	str	r3, [r0, #0]
 80085ae:	ecbd 8b02 	vpop	{d8}
 80085b2:	ec47 6b10 	vmov	d0, r6, r7
 80085b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085b8:	2200      	movs	r2, #0
 80085ba:	2300      	movs	r3, #0
 80085bc:	4630      	mov	r0, r6
 80085be:	4639      	mov	r1, r7
 80085c0:	f7f8 fa82 	bl	8000ac8 <__aeabi_dcmpeq>
 80085c4:	2800      	cmp	r0, #0
 80085c6:	d0f2      	beq.n	80085ae <pow+0xa2>
 80085c8:	eeb0 0a48 	vmov.f32	s0, s16
 80085cc:	eef0 0a68 	vmov.f32	s1, s17
 80085d0:	f000 feb3 	bl	800933a <finite>
 80085d4:	2800      	cmp	r0, #0
 80085d6:	d0ea      	beq.n	80085ae <pow+0xa2>
 80085d8:	ec45 4b10 	vmov	d0, r4, r5
 80085dc:	f000 fead 	bl	800933a <finite>
 80085e0:	e7c3      	b.n	800856a <pow+0x5e>
 80085e2:	4f01      	ldr	r7, [pc, #4]	; (80085e8 <pow+0xdc>)
 80085e4:	2600      	movs	r6, #0
 80085e6:	e7e2      	b.n	80085ae <pow+0xa2>
 80085e8:	3ff00000 	.word	0x3ff00000
 80085ec:	00000000 	.word	0x00000000

080085f0 <__ieee754_log10>:
 80085f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085f4:	ec55 4b10 	vmov	r4, r5, d0
 80085f8:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 80085fc:	462b      	mov	r3, r5
 80085fe:	da2f      	bge.n	8008660 <__ieee754_log10+0x70>
 8008600:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8008604:	4322      	orrs	r2, r4
 8008606:	d109      	bne.n	800861c <__ieee754_log10+0x2c>
 8008608:	493b      	ldr	r1, [pc, #236]	; (80086f8 <__ieee754_log10+0x108>)
 800860a:	2200      	movs	r2, #0
 800860c:	2300      	movs	r3, #0
 800860e:	2000      	movs	r0, #0
 8008610:	f7f8 f91c 	bl	800084c <__aeabi_ddiv>
 8008614:	ec41 0b10 	vmov	d0, r0, r1
 8008618:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800861c:	2d00      	cmp	r5, #0
 800861e:	da09      	bge.n	8008634 <__ieee754_log10+0x44>
 8008620:	ee10 2a10 	vmov	r2, s0
 8008624:	ee10 0a10 	vmov	r0, s0
 8008628:	4629      	mov	r1, r5
 800862a:	f7f7 fe2d 	bl	8000288 <__aeabi_dsub>
 800862e:	2200      	movs	r2, #0
 8008630:	2300      	movs	r3, #0
 8008632:	e7ed      	b.n	8008610 <__ieee754_log10+0x20>
 8008634:	4b31      	ldr	r3, [pc, #196]	; (80086fc <__ieee754_log10+0x10c>)
 8008636:	2200      	movs	r2, #0
 8008638:	4629      	mov	r1, r5
 800863a:	ee10 0a10 	vmov	r0, s0
 800863e:	f7f7 ffdb 	bl	80005f8 <__aeabi_dmul>
 8008642:	f06f 0235 	mvn.w	r2, #53	; 0x35
 8008646:	4604      	mov	r4, r0
 8008648:	460d      	mov	r5, r1
 800864a:	460b      	mov	r3, r1
 800864c:	492c      	ldr	r1, [pc, #176]	; (8008700 <__ieee754_log10+0x110>)
 800864e:	428b      	cmp	r3, r1
 8008650:	dd08      	ble.n	8008664 <__ieee754_log10+0x74>
 8008652:	4622      	mov	r2, r4
 8008654:	462b      	mov	r3, r5
 8008656:	4620      	mov	r0, r4
 8008658:	4629      	mov	r1, r5
 800865a:	f7f7 fe17 	bl	800028c <__adddf3>
 800865e:	e7d9      	b.n	8008614 <__ieee754_log10+0x24>
 8008660:	2200      	movs	r2, #0
 8008662:	e7f3      	b.n	800864c <__ieee754_log10+0x5c>
 8008664:	1518      	asrs	r0, r3, #20
 8008666:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 800866a:	4410      	add	r0, r2
 800866c:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 8008670:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8008674:	f3c3 0813 	ubfx	r8, r3, #0, #20
 8008678:	f7f7 ff54 	bl	8000524 <__aeabi_i2d>
 800867c:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 8008680:	3303      	adds	r3, #3
 8008682:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 8008686:	ec45 4b10 	vmov	d0, r4, r5
 800868a:	4606      	mov	r6, r0
 800868c:	460f      	mov	r7, r1
 800868e:	f000 feef 	bl	8009470 <__ieee754_log>
 8008692:	a313      	add	r3, pc, #76	; (adr r3, 80086e0 <__ieee754_log10+0xf0>)
 8008694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008698:	4630      	mov	r0, r6
 800869a:	4639      	mov	r1, r7
 800869c:	ec59 8b10 	vmov	r8, r9, d0
 80086a0:	f7f7 ffaa 	bl	80005f8 <__aeabi_dmul>
 80086a4:	a310      	add	r3, pc, #64	; (adr r3, 80086e8 <__ieee754_log10+0xf8>)
 80086a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086aa:	4604      	mov	r4, r0
 80086ac:	460d      	mov	r5, r1
 80086ae:	4640      	mov	r0, r8
 80086b0:	4649      	mov	r1, r9
 80086b2:	f7f7 ffa1 	bl	80005f8 <__aeabi_dmul>
 80086b6:	4602      	mov	r2, r0
 80086b8:	460b      	mov	r3, r1
 80086ba:	4620      	mov	r0, r4
 80086bc:	4629      	mov	r1, r5
 80086be:	f7f7 fde5 	bl	800028c <__adddf3>
 80086c2:	a30b      	add	r3, pc, #44	; (adr r3, 80086f0 <__ieee754_log10+0x100>)
 80086c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086c8:	4604      	mov	r4, r0
 80086ca:	460d      	mov	r5, r1
 80086cc:	4630      	mov	r0, r6
 80086ce:	4639      	mov	r1, r7
 80086d0:	f7f7 ff92 	bl	80005f8 <__aeabi_dmul>
 80086d4:	4602      	mov	r2, r0
 80086d6:	460b      	mov	r3, r1
 80086d8:	4620      	mov	r0, r4
 80086da:	4629      	mov	r1, r5
 80086dc:	e7bd      	b.n	800865a <__ieee754_log10+0x6a>
 80086de:	bf00      	nop
 80086e0:	11f12b36 	.word	0x11f12b36
 80086e4:	3d59fef3 	.word	0x3d59fef3
 80086e8:	1526e50e 	.word	0x1526e50e
 80086ec:	3fdbcb7b 	.word	0x3fdbcb7b
 80086f0:	509f6000 	.word	0x509f6000
 80086f4:	3fd34413 	.word	0x3fd34413
 80086f8:	c3500000 	.word	0xc3500000
 80086fc:	43500000 	.word	0x43500000
 8008700:	7fefffff 	.word	0x7fefffff
 8008704:	00000000 	.word	0x00000000

08008708 <__ieee754_pow>:
 8008708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800870c:	ed2d 8b06 	vpush	{d8-d10}
 8008710:	b089      	sub	sp, #36	; 0x24
 8008712:	ed8d 1b00 	vstr	d1, [sp]
 8008716:	e9dd 2900 	ldrd	r2, r9, [sp]
 800871a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800871e:	ea58 0102 	orrs.w	r1, r8, r2
 8008722:	ec57 6b10 	vmov	r6, r7, d0
 8008726:	d115      	bne.n	8008754 <__ieee754_pow+0x4c>
 8008728:	19b3      	adds	r3, r6, r6
 800872a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800872e:	4152      	adcs	r2, r2
 8008730:	4299      	cmp	r1, r3
 8008732:	4b89      	ldr	r3, [pc, #548]	; (8008958 <__ieee754_pow+0x250>)
 8008734:	4193      	sbcs	r3, r2
 8008736:	f080 84d2 	bcs.w	80090de <__ieee754_pow+0x9d6>
 800873a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800873e:	4630      	mov	r0, r6
 8008740:	4639      	mov	r1, r7
 8008742:	f7f7 fda3 	bl	800028c <__adddf3>
 8008746:	ec41 0b10 	vmov	d0, r0, r1
 800874a:	b009      	add	sp, #36	; 0x24
 800874c:	ecbd 8b06 	vpop	{d8-d10}
 8008750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008754:	4b81      	ldr	r3, [pc, #516]	; (800895c <__ieee754_pow+0x254>)
 8008756:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800875a:	429c      	cmp	r4, r3
 800875c:	ee10 aa10 	vmov	sl, s0
 8008760:	463d      	mov	r5, r7
 8008762:	dc06      	bgt.n	8008772 <__ieee754_pow+0x6a>
 8008764:	d101      	bne.n	800876a <__ieee754_pow+0x62>
 8008766:	2e00      	cmp	r6, #0
 8008768:	d1e7      	bne.n	800873a <__ieee754_pow+0x32>
 800876a:	4598      	cmp	r8, r3
 800876c:	dc01      	bgt.n	8008772 <__ieee754_pow+0x6a>
 800876e:	d10f      	bne.n	8008790 <__ieee754_pow+0x88>
 8008770:	b172      	cbz	r2, 8008790 <__ieee754_pow+0x88>
 8008772:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8008776:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800877a:	ea55 050a 	orrs.w	r5, r5, sl
 800877e:	d1dc      	bne.n	800873a <__ieee754_pow+0x32>
 8008780:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008784:	18db      	adds	r3, r3, r3
 8008786:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800878a:	4152      	adcs	r2, r2
 800878c:	429d      	cmp	r5, r3
 800878e:	e7d0      	b.n	8008732 <__ieee754_pow+0x2a>
 8008790:	2d00      	cmp	r5, #0
 8008792:	da3b      	bge.n	800880c <__ieee754_pow+0x104>
 8008794:	4b72      	ldr	r3, [pc, #456]	; (8008960 <__ieee754_pow+0x258>)
 8008796:	4598      	cmp	r8, r3
 8008798:	dc51      	bgt.n	800883e <__ieee754_pow+0x136>
 800879a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800879e:	4598      	cmp	r8, r3
 80087a0:	f340 84ac 	ble.w	80090fc <__ieee754_pow+0x9f4>
 80087a4:	ea4f 5328 	mov.w	r3, r8, asr #20
 80087a8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80087ac:	2b14      	cmp	r3, #20
 80087ae:	dd0f      	ble.n	80087d0 <__ieee754_pow+0xc8>
 80087b0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80087b4:	fa22 f103 	lsr.w	r1, r2, r3
 80087b8:	fa01 f303 	lsl.w	r3, r1, r3
 80087bc:	4293      	cmp	r3, r2
 80087be:	f040 849d 	bne.w	80090fc <__ieee754_pow+0x9f4>
 80087c2:	f001 0101 	and.w	r1, r1, #1
 80087c6:	f1c1 0302 	rsb	r3, r1, #2
 80087ca:	9304      	str	r3, [sp, #16]
 80087cc:	b182      	cbz	r2, 80087f0 <__ieee754_pow+0xe8>
 80087ce:	e05f      	b.n	8008890 <__ieee754_pow+0x188>
 80087d0:	2a00      	cmp	r2, #0
 80087d2:	d15b      	bne.n	800888c <__ieee754_pow+0x184>
 80087d4:	f1c3 0314 	rsb	r3, r3, #20
 80087d8:	fa48 f103 	asr.w	r1, r8, r3
 80087dc:	fa01 f303 	lsl.w	r3, r1, r3
 80087e0:	4543      	cmp	r3, r8
 80087e2:	f040 8488 	bne.w	80090f6 <__ieee754_pow+0x9ee>
 80087e6:	f001 0101 	and.w	r1, r1, #1
 80087ea:	f1c1 0302 	rsb	r3, r1, #2
 80087ee:	9304      	str	r3, [sp, #16]
 80087f0:	4b5c      	ldr	r3, [pc, #368]	; (8008964 <__ieee754_pow+0x25c>)
 80087f2:	4598      	cmp	r8, r3
 80087f4:	d132      	bne.n	800885c <__ieee754_pow+0x154>
 80087f6:	f1b9 0f00 	cmp.w	r9, #0
 80087fa:	f280 8478 	bge.w	80090ee <__ieee754_pow+0x9e6>
 80087fe:	4959      	ldr	r1, [pc, #356]	; (8008964 <__ieee754_pow+0x25c>)
 8008800:	4632      	mov	r2, r6
 8008802:	463b      	mov	r3, r7
 8008804:	2000      	movs	r0, #0
 8008806:	f7f8 f821 	bl	800084c <__aeabi_ddiv>
 800880a:	e79c      	b.n	8008746 <__ieee754_pow+0x3e>
 800880c:	2300      	movs	r3, #0
 800880e:	9304      	str	r3, [sp, #16]
 8008810:	2a00      	cmp	r2, #0
 8008812:	d13d      	bne.n	8008890 <__ieee754_pow+0x188>
 8008814:	4b51      	ldr	r3, [pc, #324]	; (800895c <__ieee754_pow+0x254>)
 8008816:	4598      	cmp	r8, r3
 8008818:	d1ea      	bne.n	80087f0 <__ieee754_pow+0xe8>
 800881a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800881e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8008822:	ea53 030a 	orrs.w	r3, r3, sl
 8008826:	f000 845a 	beq.w	80090de <__ieee754_pow+0x9d6>
 800882a:	4b4f      	ldr	r3, [pc, #316]	; (8008968 <__ieee754_pow+0x260>)
 800882c:	429c      	cmp	r4, r3
 800882e:	dd08      	ble.n	8008842 <__ieee754_pow+0x13a>
 8008830:	f1b9 0f00 	cmp.w	r9, #0
 8008834:	f2c0 8457 	blt.w	80090e6 <__ieee754_pow+0x9de>
 8008838:	e9dd 0100 	ldrd	r0, r1, [sp]
 800883c:	e783      	b.n	8008746 <__ieee754_pow+0x3e>
 800883e:	2302      	movs	r3, #2
 8008840:	e7e5      	b.n	800880e <__ieee754_pow+0x106>
 8008842:	f1b9 0f00 	cmp.w	r9, #0
 8008846:	f04f 0000 	mov.w	r0, #0
 800884a:	f04f 0100 	mov.w	r1, #0
 800884e:	f6bf af7a 	bge.w	8008746 <__ieee754_pow+0x3e>
 8008852:	e9dd 0300 	ldrd	r0, r3, [sp]
 8008856:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800885a:	e774      	b.n	8008746 <__ieee754_pow+0x3e>
 800885c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8008860:	d106      	bne.n	8008870 <__ieee754_pow+0x168>
 8008862:	4632      	mov	r2, r6
 8008864:	463b      	mov	r3, r7
 8008866:	4630      	mov	r0, r6
 8008868:	4639      	mov	r1, r7
 800886a:	f7f7 fec5 	bl	80005f8 <__aeabi_dmul>
 800886e:	e76a      	b.n	8008746 <__ieee754_pow+0x3e>
 8008870:	4b3e      	ldr	r3, [pc, #248]	; (800896c <__ieee754_pow+0x264>)
 8008872:	4599      	cmp	r9, r3
 8008874:	d10c      	bne.n	8008890 <__ieee754_pow+0x188>
 8008876:	2d00      	cmp	r5, #0
 8008878:	db0a      	blt.n	8008890 <__ieee754_pow+0x188>
 800887a:	ec47 6b10 	vmov	d0, r6, r7
 800887e:	b009      	add	sp, #36	; 0x24
 8008880:	ecbd 8b06 	vpop	{d8-d10}
 8008884:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008888:	f000 bc6c 	b.w	8009164 <__ieee754_sqrt>
 800888c:	2300      	movs	r3, #0
 800888e:	9304      	str	r3, [sp, #16]
 8008890:	ec47 6b10 	vmov	d0, r6, r7
 8008894:	f000 fd48 	bl	8009328 <fabs>
 8008898:	ec51 0b10 	vmov	r0, r1, d0
 800889c:	f1ba 0f00 	cmp.w	sl, #0
 80088a0:	d129      	bne.n	80088f6 <__ieee754_pow+0x1ee>
 80088a2:	b124      	cbz	r4, 80088ae <__ieee754_pow+0x1a6>
 80088a4:	4b2f      	ldr	r3, [pc, #188]	; (8008964 <__ieee754_pow+0x25c>)
 80088a6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80088aa:	429a      	cmp	r2, r3
 80088ac:	d123      	bne.n	80088f6 <__ieee754_pow+0x1ee>
 80088ae:	f1b9 0f00 	cmp.w	r9, #0
 80088b2:	da05      	bge.n	80088c0 <__ieee754_pow+0x1b8>
 80088b4:	4602      	mov	r2, r0
 80088b6:	460b      	mov	r3, r1
 80088b8:	2000      	movs	r0, #0
 80088ba:	492a      	ldr	r1, [pc, #168]	; (8008964 <__ieee754_pow+0x25c>)
 80088bc:	f7f7 ffc6 	bl	800084c <__aeabi_ddiv>
 80088c0:	2d00      	cmp	r5, #0
 80088c2:	f6bf af40 	bge.w	8008746 <__ieee754_pow+0x3e>
 80088c6:	9b04      	ldr	r3, [sp, #16]
 80088c8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80088cc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80088d0:	4323      	orrs	r3, r4
 80088d2:	d108      	bne.n	80088e6 <__ieee754_pow+0x1de>
 80088d4:	4602      	mov	r2, r0
 80088d6:	460b      	mov	r3, r1
 80088d8:	4610      	mov	r0, r2
 80088da:	4619      	mov	r1, r3
 80088dc:	f7f7 fcd4 	bl	8000288 <__aeabi_dsub>
 80088e0:	4602      	mov	r2, r0
 80088e2:	460b      	mov	r3, r1
 80088e4:	e78f      	b.n	8008806 <__ieee754_pow+0xfe>
 80088e6:	9b04      	ldr	r3, [sp, #16]
 80088e8:	2b01      	cmp	r3, #1
 80088ea:	f47f af2c 	bne.w	8008746 <__ieee754_pow+0x3e>
 80088ee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80088f2:	4619      	mov	r1, r3
 80088f4:	e727      	b.n	8008746 <__ieee754_pow+0x3e>
 80088f6:	0feb      	lsrs	r3, r5, #31
 80088f8:	3b01      	subs	r3, #1
 80088fa:	9306      	str	r3, [sp, #24]
 80088fc:	9a06      	ldr	r2, [sp, #24]
 80088fe:	9b04      	ldr	r3, [sp, #16]
 8008900:	4313      	orrs	r3, r2
 8008902:	d102      	bne.n	800890a <__ieee754_pow+0x202>
 8008904:	4632      	mov	r2, r6
 8008906:	463b      	mov	r3, r7
 8008908:	e7e6      	b.n	80088d8 <__ieee754_pow+0x1d0>
 800890a:	4b19      	ldr	r3, [pc, #100]	; (8008970 <__ieee754_pow+0x268>)
 800890c:	4598      	cmp	r8, r3
 800890e:	f340 80fb 	ble.w	8008b08 <__ieee754_pow+0x400>
 8008912:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8008916:	4598      	cmp	r8, r3
 8008918:	4b13      	ldr	r3, [pc, #76]	; (8008968 <__ieee754_pow+0x260>)
 800891a:	dd0c      	ble.n	8008936 <__ieee754_pow+0x22e>
 800891c:	429c      	cmp	r4, r3
 800891e:	dc0f      	bgt.n	8008940 <__ieee754_pow+0x238>
 8008920:	f1b9 0f00 	cmp.w	r9, #0
 8008924:	da0f      	bge.n	8008946 <__ieee754_pow+0x23e>
 8008926:	2000      	movs	r0, #0
 8008928:	b009      	add	sp, #36	; 0x24
 800892a:	ecbd 8b06 	vpop	{d8-d10}
 800892e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008932:	f000 bcf0 	b.w	8009316 <__math_oflow>
 8008936:	429c      	cmp	r4, r3
 8008938:	dbf2      	blt.n	8008920 <__ieee754_pow+0x218>
 800893a:	4b0a      	ldr	r3, [pc, #40]	; (8008964 <__ieee754_pow+0x25c>)
 800893c:	429c      	cmp	r4, r3
 800893e:	dd19      	ble.n	8008974 <__ieee754_pow+0x26c>
 8008940:	f1b9 0f00 	cmp.w	r9, #0
 8008944:	dcef      	bgt.n	8008926 <__ieee754_pow+0x21e>
 8008946:	2000      	movs	r0, #0
 8008948:	b009      	add	sp, #36	; 0x24
 800894a:	ecbd 8b06 	vpop	{d8-d10}
 800894e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008952:	f000 bcd7 	b.w	8009304 <__math_uflow>
 8008956:	bf00      	nop
 8008958:	fff00000 	.word	0xfff00000
 800895c:	7ff00000 	.word	0x7ff00000
 8008960:	433fffff 	.word	0x433fffff
 8008964:	3ff00000 	.word	0x3ff00000
 8008968:	3fefffff 	.word	0x3fefffff
 800896c:	3fe00000 	.word	0x3fe00000
 8008970:	41e00000 	.word	0x41e00000
 8008974:	4b60      	ldr	r3, [pc, #384]	; (8008af8 <__ieee754_pow+0x3f0>)
 8008976:	2200      	movs	r2, #0
 8008978:	f7f7 fc86 	bl	8000288 <__aeabi_dsub>
 800897c:	a354      	add	r3, pc, #336	; (adr r3, 8008ad0 <__ieee754_pow+0x3c8>)
 800897e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008982:	4604      	mov	r4, r0
 8008984:	460d      	mov	r5, r1
 8008986:	f7f7 fe37 	bl	80005f8 <__aeabi_dmul>
 800898a:	a353      	add	r3, pc, #332	; (adr r3, 8008ad8 <__ieee754_pow+0x3d0>)
 800898c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008990:	4606      	mov	r6, r0
 8008992:	460f      	mov	r7, r1
 8008994:	4620      	mov	r0, r4
 8008996:	4629      	mov	r1, r5
 8008998:	f7f7 fe2e 	bl	80005f8 <__aeabi_dmul>
 800899c:	4b57      	ldr	r3, [pc, #348]	; (8008afc <__ieee754_pow+0x3f4>)
 800899e:	4682      	mov	sl, r0
 80089a0:	468b      	mov	fp, r1
 80089a2:	2200      	movs	r2, #0
 80089a4:	4620      	mov	r0, r4
 80089a6:	4629      	mov	r1, r5
 80089a8:	f7f7 fe26 	bl	80005f8 <__aeabi_dmul>
 80089ac:	4602      	mov	r2, r0
 80089ae:	460b      	mov	r3, r1
 80089b0:	a14b      	add	r1, pc, #300	; (adr r1, 8008ae0 <__ieee754_pow+0x3d8>)
 80089b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80089b6:	f7f7 fc67 	bl	8000288 <__aeabi_dsub>
 80089ba:	4622      	mov	r2, r4
 80089bc:	462b      	mov	r3, r5
 80089be:	f7f7 fe1b 	bl	80005f8 <__aeabi_dmul>
 80089c2:	4602      	mov	r2, r0
 80089c4:	460b      	mov	r3, r1
 80089c6:	2000      	movs	r0, #0
 80089c8:	494d      	ldr	r1, [pc, #308]	; (8008b00 <__ieee754_pow+0x3f8>)
 80089ca:	f7f7 fc5d 	bl	8000288 <__aeabi_dsub>
 80089ce:	4622      	mov	r2, r4
 80089d0:	4680      	mov	r8, r0
 80089d2:	4689      	mov	r9, r1
 80089d4:	462b      	mov	r3, r5
 80089d6:	4620      	mov	r0, r4
 80089d8:	4629      	mov	r1, r5
 80089da:	f7f7 fe0d 	bl	80005f8 <__aeabi_dmul>
 80089de:	4602      	mov	r2, r0
 80089e0:	460b      	mov	r3, r1
 80089e2:	4640      	mov	r0, r8
 80089e4:	4649      	mov	r1, r9
 80089e6:	f7f7 fe07 	bl	80005f8 <__aeabi_dmul>
 80089ea:	a33f      	add	r3, pc, #252	; (adr r3, 8008ae8 <__ieee754_pow+0x3e0>)
 80089ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089f0:	f7f7 fe02 	bl	80005f8 <__aeabi_dmul>
 80089f4:	4602      	mov	r2, r0
 80089f6:	460b      	mov	r3, r1
 80089f8:	4650      	mov	r0, sl
 80089fa:	4659      	mov	r1, fp
 80089fc:	f7f7 fc44 	bl	8000288 <__aeabi_dsub>
 8008a00:	4602      	mov	r2, r0
 8008a02:	460b      	mov	r3, r1
 8008a04:	4680      	mov	r8, r0
 8008a06:	4689      	mov	r9, r1
 8008a08:	4630      	mov	r0, r6
 8008a0a:	4639      	mov	r1, r7
 8008a0c:	f7f7 fc3e 	bl	800028c <__adddf3>
 8008a10:	2000      	movs	r0, #0
 8008a12:	4632      	mov	r2, r6
 8008a14:	463b      	mov	r3, r7
 8008a16:	4604      	mov	r4, r0
 8008a18:	460d      	mov	r5, r1
 8008a1a:	f7f7 fc35 	bl	8000288 <__aeabi_dsub>
 8008a1e:	4602      	mov	r2, r0
 8008a20:	460b      	mov	r3, r1
 8008a22:	4640      	mov	r0, r8
 8008a24:	4649      	mov	r1, r9
 8008a26:	f7f7 fc2f 	bl	8000288 <__aeabi_dsub>
 8008a2a:	9b04      	ldr	r3, [sp, #16]
 8008a2c:	9a06      	ldr	r2, [sp, #24]
 8008a2e:	3b01      	subs	r3, #1
 8008a30:	4313      	orrs	r3, r2
 8008a32:	4682      	mov	sl, r0
 8008a34:	468b      	mov	fp, r1
 8008a36:	f040 81e7 	bne.w	8008e08 <__ieee754_pow+0x700>
 8008a3a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8008af0 <__ieee754_pow+0x3e8>
 8008a3e:	eeb0 8a47 	vmov.f32	s16, s14
 8008a42:	eef0 8a67 	vmov.f32	s17, s15
 8008a46:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008a4a:	2600      	movs	r6, #0
 8008a4c:	4632      	mov	r2, r6
 8008a4e:	463b      	mov	r3, r7
 8008a50:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008a54:	f7f7 fc18 	bl	8000288 <__aeabi_dsub>
 8008a58:	4622      	mov	r2, r4
 8008a5a:	462b      	mov	r3, r5
 8008a5c:	f7f7 fdcc 	bl	80005f8 <__aeabi_dmul>
 8008a60:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a64:	4680      	mov	r8, r0
 8008a66:	4689      	mov	r9, r1
 8008a68:	4650      	mov	r0, sl
 8008a6a:	4659      	mov	r1, fp
 8008a6c:	f7f7 fdc4 	bl	80005f8 <__aeabi_dmul>
 8008a70:	4602      	mov	r2, r0
 8008a72:	460b      	mov	r3, r1
 8008a74:	4640      	mov	r0, r8
 8008a76:	4649      	mov	r1, r9
 8008a78:	f7f7 fc08 	bl	800028c <__adddf3>
 8008a7c:	4632      	mov	r2, r6
 8008a7e:	463b      	mov	r3, r7
 8008a80:	4680      	mov	r8, r0
 8008a82:	4689      	mov	r9, r1
 8008a84:	4620      	mov	r0, r4
 8008a86:	4629      	mov	r1, r5
 8008a88:	f7f7 fdb6 	bl	80005f8 <__aeabi_dmul>
 8008a8c:	460b      	mov	r3, r1
 8008a8e:	4604      	mov	r4, r0
 8008a90:	460d      	mov	r5, r1
 8008a92:	4602      	mov	r2, r0
 8008a94:	4649      	mov	r1, r9
 8008a96:	4640      	mov	r0, r8
 8008a98:	f7f7 fbf8 	bl	800028c <__adddf3>
 8008a9c:	4b19      	ldr	r3, [pc, #100]	; (8008b04 <__ieee754_pow+0x3fc>)
 8008a9e:	4299      	cmp	r1, r3
 8008aa0:	ec45 4b19 	vmov	d9, r4, r5
 8008aa4:	4606      	mov	r6, r0
 8008aa6:	460f      	mov	r7, r1
 8008aa8:	468b      	mov	fp, r1
 8008aaa:	f340 82f1 	ble.w	8009090 <__ieee754_pow+0x988>
 8008aae:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8008ab2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8008ab6:	4303      	orrs	r3, r0
 8008ab8:	f000 81e4 	beq.w	8008e84 <__ieee754_pow+0x77c>
 8008abc:	ec51 0b18 	vmov	r0, r1, d8
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	f7f8 f80a 	bl	8000adc <__aeabi_dcmplt>
 8008ac8:	3800      	subs	r0, #0
 8008aca:	bf18      	it	ne
 8008acc:	2001      	movne	r0, #1
 8008ace:	e72b      	b.n	8008928 <__ieee754_pow+0x220>
 8008ad0:	60000000 	.word	0x60000000
 8008ad4:	3ff71547 	.word	0x3ff71547
 8008ad8:	f85ddf44 	.word	0xf85ddf44
 8008adc:	3e54ae0b 	.word	0x3e54ae0b
 8008ae0:	55555555 	.word	0x55555555
 8008ae4:	3fd55555 	.word	0x3fd55555
 8008ae8:	652b82fe 	.word	0x652b82fe
 8008aec:	3ff71547 	.word	0x3ff71547
 8008af0:	00000000 	.word	0x00000000
 8008af4:	bff00000 	.word	0xbff00000
 8008af8:	3ff00000 	.word	0x3ff00000
 8008afc:	3fd00000 	.word	0x3fd00000
 8008b00:	3fe00000 	.word	0x3fe00000
 8008b04:	408fffff 	.word	0x408fffff
 8008b08:	4bd5      	ldr	r3, [pc, #852]	; (8008e60 <__ieee754_pow+0x758>)
 8008b0a:	402b      	ands	r3, r5
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	b92b      	cbnz	r3, 8008b1c <__ieee754_pow+0x414>
 8008b10:	4bd4      	ldr	r3, [pc, #848]	; (8008e64 <__ieee754_pow+0x75c>)
 8008b12:	f7f7 fd71 	bl	80005f8 <__aeabi_dmul>
 8008b16:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8008b1a:	460c      	mov	r4, r1
 8008b1c:	1523      	asrs	r3, r4, #20
 8008b1e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008b22:	4413      	add	r3, r2
 8008b24:	9305      	str	r3, [sp, #20]
 8008b26:	4bd0      	ldr	r3, [pc, #832]	; (8008e68 <__ieee754_pow+0x760>)
 8008b28:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008b2c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8008b30:	429c      	cmp	r4, r3
 8008b32:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008b36:	dd08      	ble.n	8008b4a <__ieee754_pow+0x442>
 8008b38:	4bcc      	ldr	r3, [pc, #816]	; (8008e6c <__ieee754_pow+0x764>)
 8008b3a:	429c      	cmp	r4, r3
 8008b3c:	f340 8162 	ble.w	8008e04 <__ieee754_pow+0x6fc>
 8008b40:	9b05      	ldr	r3, [sp, #20]
 8008b42:	3301      	adds	r3, #1
 8008b44:	9305      	str	r3, [sp, #20]
 8008b46:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8008b4a:	2400      	movs	r4, #0
 8008b4c:	00e3      	lsls	r3, r4, #3
 8008b4e:	9307      	str	r3, [sp, #28]
 8008b50:	4bc7      	ldr	r3, [pc, #796]	; (8008e70 <__ieee754_pow+0x768>)
 8008b52:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008b56:	ed93 7b00 	vldr	d7, [r3]
 8008b5a:	4629      	mov	r1, r5
 8008b5c:	ec53 2b17 	vmov	r2, r3, d7
 8008b60:	eeb0 9a47 	vmov.f32	s18, s14
 8008b64:	eef0 9a67 	vmov.f32	s19, s15
 8008b68:	4682      	mov	sl, r0
 8008b6a:	f7f7 fb8d 	bl	8000288 <__aeabi_dsub>
 8008b6e:	4652      	mov	r2, sl
 8008b70:	4606      	mov	r6, r0
 8008b72:	460f      	mov	r7, r1
 8008b74:	462b      	mov	r3, r5
 8008b76:	ec51 0b19 	vmov	r0, r1, d9
 8008b7a:	f7f7 fb87 	bl	800028c <__adddf3>
 8008b7e:	4602      	mov	r2, r0
 8008b80:	460b      	mov	r3, r1
 8008b82:	2000      	movs	r0, #0
 8008b84:	49bb      	ldr	r1, [pc, #748]	; (8008e74 <__ieee754_pow+0x76c>)
 8008b86:	f7f7 fe61 	bl	800084c <__aeabi_ddiv>
 8008b8a:	ec41 0b1a 	vmov	d10, r0, r1
 8008b8e:	4602      	mov	r2, r0
 8008b90:	460b      	mov	r3, r1
 8008b92:	4630      	mov	r0, r6
 8008b94:	4639      	mov	r1, r7
 8008b96:	f7f7 fd2f 	bl	80005f8 <__aeabi_dmul>
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ba0:	9302      	str	r3, [sp, #8]
 8008ba2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008ba6:	46ab      	mov	fp, r5
 8008ba8:	106d      	asrs	r5, r5, #1
 8008baa:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8008bae:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8008bb2:	ec41 0b18 	vmov	d8, r0, r1
 8008bb6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8008bba:	2200      	movs	r2, #0
 8008bbc:	4640      	mov	r0, r8
 8008bbe:	4649      	mov	r1, r9
 8008bc0:	4614      	mov	r4, r2
 8008bc2:	461d      	mov	r5, r3
 8008bc4:	f7f7 fd18 	bl	80005f8 <__aeabi_dmul>
 8008bc8:	4602      	mov	r2, r0
 8008bca:	460b      	mov	r3, r1
 8008bcc:	4630      	mov	r0, r6
 8008bce:	4639      	mov	r1, r7
 8008bd0:	f7f7 fb5a 	bl	8000288 <__aeabi_dsub>
 8008bd4:	ec53 2b19 	vmov	r2, r3, d9
 8008bd8:	4606      	mov	r6, r0
 8008bda:	460f      	mov	r7, r1
 8008bdc:	4620      	mov	r0, r4
 8008bde:	4629      	mov	r1, r5
 8008be0:	f7f7 fb52 	bl	8000288 <__aeabi_dsub>
 8008be4:	4602      	mov	r2, r0
 8008be6:	460b      	mov	r3, r1
 8008be8:	4650      	mov	r0, sl
 8008bea:	4659      	mov	r1, fp
 8008bec:	f7f7 fb4c 	bl	8000288 <__aeabi_dsub>
 8008bf0:	4642      	mov	r2, r8
 8008bf2:	464b      	mov	r3, r9
 8008bf4:	f7f7 fd00 	bl	80005f8 <__aeabi_dmul>
 8008bf8:	4602      	mov	r2, r0
 8008bfa:	460b      	mov	r3, r1
 8008bfc:	4630      	mov	r0, r6
 8008bfe:	4639      	mov	r1, r7
 8008c00:	f7f7 fb42 	bl	8000288 <__aeabi_dsub>
 8008c04:	ec53 2b1a 	vmov	r2, r3, d10
 8008c08:	f7f7 fcf6 	bl	80005f8 <__aeabi_dmul>
 8008c0c:	ec53 2b18 	vmov	r2, r3, d8
 8008c10:	ec41 0b19 	vmov	d9, r0, r1
 8008c14:	ec51 0b18 	vmov	r0, r1, d8
 8008c18:	f7f7 fcee 	bl	80005f8 <__aeabi_dmul>
 8008c1c:	a37c      	add	r3, pc, #496	; (adr r3, 8008e10 <__ieee754_pow+0x708>)
 8008c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c22:	4604      	mov	r4, r0
 8008c24:	460d      	mov	r5, r1
 8008c26:	f7f7 fce7 	bl	80005f8 <__aeabi_dmul>
 8008c2a:	a37b      	add	r3, pc, #492	; (adr r3, 8008e18 <__ieee754_pow+0x710>)
 8008c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c30:	f7f7 fb2c 	bl	800028c <__adddf3>
 8008c34:	4622      	mov	r2, r4
 8008c36:	462b      	mov	r3, r5
 8008c38:	f7f7 fcde 	bl	80005f8 <__aeabi_dmul>
 8008c3c:	a378      	add	r3, pc, #480	; (adr r3, 8008e20 <__ieee754_pow+0x718>)
 8008c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c42:	f7f7 fb23 	bl	800028c <__adddf3>
 8008c46:	4622      	mov	r2, r4
 8008c48:	462b      	mov	r3, r5
 8008c4a:	f7f7 fcd5 	bl	80005f8 <__aeabi_dmul>
 8008c4e:	a376      	add	r3, pc, #472	; (adr r3, 8008e28 <__ieee754_pow+0x720>)
 8008c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c54:	f7f7 fb1a 	bl	800028c <__adddf3>
 8008c58:	4622      	mov	r2, r4
 8008c5a:	462b      	mov	r3, r5
 8008c5c:	f7f7 fccc 	bl	80005f8 <__aeabi_dmul>
 8008c60:	a373      	add	r3, pc, #460	; (adr r3, 8008e30 <__ieee754_pow+0x728>)
 8008c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c66:	f7f7 fb11 	bl	800028c <__adddf3>
 8008c6a:	4622      	mov	r2, r4
 8008c6c:	462b      	mov	r3, r5
 8008c6e:	f7f7 fcc3 	bl	80005f8 <__aeabi_dmul>
 8008c72:	a371      	add	r3, pc, #452	; (adr r3, 8008e38 <__ieee754_pow+0x730>)
 8008c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c78:	f7f7 fb08 	bl	800028c <__adddf3>
 8008c7c:	4622      	mov	r2, r4
 8008c7e:	4606      	mov	r6, r0
 8008c80:	460f      	mov	r7, r1
 8008c82:	462b      	mov	r3, r5
 8008c84:	4620      	mov	r0, r4
 8008c86:	4629      	mov	r1, r5
 8008c88:	f7f7 fcb6 	bl	80005f8 <__aeabi_dmul>
 8008c8c:	4602      	mov	r2, r0
 8008c8e:	460b      	mov	r3, r1
 8008c90:	4630      	mov	r0, r6
 8008c92:	4639      	mov	r1, r7
 8008c94:	f7f7 fcb0 	bl	80005f8 <__aeabi_dmul>
 8008c98:	4642      	mov	r2, r8
 8008c9a:	4604      	mov	r4, r0
 8008c9c:	460d      	mov	r5, r1
 8008c9e:	464b      	mov	r3, r9
 8008ca0:	ec51 0b18 	vmov	r0, r1, d8
 8008ca4:	f7f7 faf2 	bl	800028c <__adddf3>
 8008ca8:	ec53 2b19 	vmov	r2, r3, d9
 8008cac:	f7f7 fca4 	bl	80005f8 <__aeabi_dmul>
 8008cb0:	4622      	mov	r2, r4
 8008cb2:	462b      	mov	r3, r5
 8008cb4:	f7f7 faea 	bl	800028c <__adddf3>
 8008cb8:	4642      	mov	r2, r8
 8008cba:	4682      	mov	sl, r0
 8008cbc:	468b      	mov	fp, r1
 8008cbe:	464b      	mov	r3, r9
 8008cc0:	4640      	mov	r0, r8
 8008cc2:	4649      	mov	r1, r9
 8008cc4:	f7f7 fc98 	bl	80005f8 <__aeabi_dmul>
 8008cc8:	4b6b      	ldr	r3, [pc, #428]	; (8008e78 <__ieee754_pow+0x770>)
 8008cca:	2200      	movs	r2, #0
 8008ccc:	4606      	mov	r6, r0
 8008cce:	460f      	mov	r7, r1
 8008cd0:	f7f7 fadc 	bl	800028c <__adddf3>
 8008cd4:	4652      	mov	r2, sl
 8008cd6:	465b      	mov	r3, fp
 8008cd8:	f7f7 fad8 	bl	800028c <__adddf3>
 8008cdc:	2000      	movs	r0, #0
 8008cde:	4604      	mov	r4, r0
 8008ce0:	460d      	mov	r5, r1
 8008ce2:	4602      	mov	r2, r0
 8008ce4:	460b      	mov	r3, r1
 8008ce6:	4640      	mov	r0, r8
 8008ce8:	4649      	mov	r1, r9
 8008cea:	f7f7 fc85 	bl	80005f8 <__aeabi_dmul>
 8008cee:	4b62      	ldr	r3, [pc, #392]	; (8008e78 <__ieee754_pow+0x770>)
 8008cf0:	4680      	mov	r8, r0
 8008cf2:	4689      	mov	r9, r1
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	4620      	mov	r0, r4
 8008cf8:	4629      	mov	r1, r5
 8008cfa:	f7f7 fac5 	bl	8000288 <__aeabi_dsub>
 8008cfe:	4632      	mov	r2, r6
 8008d00:	463b      	mov	r3, r7
 8008d02:	f7f7 fac1 	bl	8000288 <__aeabi_dsub>
 8008d06:	4602      	mov	r2, r0
 8008d08:	460b      	mov	r3, r1
 8008d0a:	4650      	mov	r0, sl
 8008d0c:	4659      	mov	r1, fp
 8008d0e:	f7f7 fabb 	bl	8000288 <__aeabi_dsub>
 8008d12:	ec53 2b18 	vmov	r2, r3, d8
 8008d16:	f7f7 fc6f 	bl	80005f8 <__aeabi_dmul>
 8008d1a:	4622      	mov	r2, r4
 8008d1c:	4606      	mov	r6, r0
 8008d1e:	460f      	mov	r7, r1
 8008d20:	462b      	mov	r3, r5
 8008d22:	ec51 0b19 	vmov	r0, r1, d9
 8008d26:	f7f7 fc67 	bl	80005f8 <__aeabi_dmul>
 8008d2a:	4602      	mov	r2, r0
 8008d2c:	460b      	mov	r3, r1
 8008d2e:	4630      	mov	r0, r6
 8008d30:	4639      	mov	r1, r7
 8008d32:	f7f7 faab 	bl	800028c <__adddf3>
 8008d36:	4606      	mov	r6, r0
 8008d38:	460f      	mov	r7, r1
 8008d3a:	4602      	mov	r2, r0
 8008d3c:	460b      	mov	r3, r1
 8008d3e:	4640      	mov	r0, r8
 8008d40:	4649      	mov	r1, r9
 8008d42:	f7f7 faa3 	bl	800028c <__adddf3>
 8008d46:	a33e      	add	r3, pc, #248	; (adr r3, 8008e40 <__ieee754_pow+0x738>)
 8008d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d4c:	2000      	movs	r0, #0
 8008d4e:	4604      	mov	r4, r0
 8008d50:	460d      	mov	r5, r1
 8008d52:	f7f7 fc51 	bl	80005f8 <__aeabi_dmul>
 8008d56:	4642      	mov	r2, r8
 8008d58:	ec41 0b18 	vmov	d8, r0, r1
 8008d5c:	464b      	mov	r3, r9
 8008d5e:	4620      	mov	r0, r4
 8008d60:	4629      	mov	r1, r5
 8008d62:	f7f7 fa91 	bl	8000288 <__aeabi_dsub>
 8008d66:	4602      	mov	r2, r0
 8008d68:	460b      	mov	r3, r1
 8008d6a:	4630      	mov	r0, r6
 8008d6c:	4639      	mov	r1, r7
 8008d6e:	f7f7 fa8b 	bl	8000288 <__aeabi_dsub>
 8008d72:	a335      	add	r3, pc, #212	; (adr r3, 8008e48 <__ieee754_pow+0x740>)
 8008d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d78:	f7f7 fc3e 	bl	80005f8 <__aeabi_dmul>
 8008d7c:	a334      	add	r3, pc, #208	; (adr r3, 8008e50 <__ieee754_pow+0x748>)
 8008d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d82:	4606      	mov	r6, r0
 8008d84:	460f      	mov	r7, r1
 8008d86:	4620      	mov	r0, r4
 8008d88:	4629      	mov	r1, r5
 8008d8a:	f7f7 fc35 	bl	80005f8 <__aeabi_dmul>
 8008d8e:	4602      	mov	r2, r0
 8008d90:	460b      	mov	r3, r1
 8008d92:	4630      	mov	r0, r6
 8008d94:	4639      	mov	r1, r7
 8008d96:	f7f7 fa79 	bl	800028c <__adddf3>
 8008d9a:	9a07      	ldr	r2, [sp, #28]
 8008d9c:	4b37      	ldr	r3, [pc, #220]	; (8008e7c <__ieee754_pow+0x774>)
 8008d9e:	4413      	add	r3, r2
 8008da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008da4:	f7f7 fa72 	bl	800028c <__adddf3>
 8008da8:	4682      	mov	sl, r0
 8008daa:	9805      	ldr	r0, [sp, #20]
 8008dac:	468b      	mov	fp, r1
 8008dae:	f7f7 fbb9 	bl	8000524 <__aeabi_i2d>
 8008db2:	9a07      	ldr	r2, [sp, #28]
 8008db4:	4b32      	ldr	r3, [pc, #200]	; (8008e80 <__ieee754_pow+0x778>)
 8008db6:	4413      	add	r3, r2
 8008db8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008dbc:	4606      	mov	r6, r0
 8008dbe:	460f      	mov	r7, r1
 8008dc0:	4652      	mov	r2, sl
 8008dc2:	465b      	mov	r3, fp
 8008dc4:	ec51 0b18 	vmov	r0, r1, d8
 8008dc8:	f7f7 fa60 	bl	800028c <__adddf3>
 8008dcc:	4642      	mov	r2, r8
 8008dce:	464b      	mov	r3, r9
 8008dd0:	f7f7 fa5c 	bl	800028c <__adddf3>
 8008dd4:	4632      	mov	r2, r6
 8008dd6:	463b      	mov	r3, r7
 8008dd8:	f7f7 fa58 	bl	800028c <__adddf3>
 8008ddc:	2000      	movs	r0, #0
 8008dde:	4632      	mov	r2, r6
 8008de0:	463b      	mov	r3, r7
 8008de2:	4604      	mov	r4, r0
 8008de4:	460d      	mov	r5, r1
 8008de6:	f7f7 fa4f 	bl	8000288 <__aeabi_dsub>
 8008dea:	4642      	mov	r2, r8
 8008dec:	464b      	mov	r3, r9
 8008dee:	f7f7 fa4b 	bl	8000288 <__aeabi_dsub>
 8008df2:	ec53 2b18 	vmov	r2, r3, d8
 8008df6:	f7f7 fa47 	bl	8000288 <__aeabi_dsub>
 8008dfa:	4602      	mov	r2, r0
 8008dfc:	460b      	mov	r3, r1
 8008dfe:	4650      	mov	r0, sl
 8008e00:	4659      	mov	r1, fp
 8008e02:	e610      	b.n	8008a26 <__ieee754_pow+0x31e>
 8008e04:	2401      	movs	r4, #1
 8008e06:	e6a1      	b.n	8008b4c <__ieee754_pow+0x444>
 8008e08:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8008e58 <__ieee754_pow+0x750>
 8008e0c:	e617      	b.n	8008a3e <__ieee754_pow+0x336>
 8008e0e:	bf00      	nop
 8008e10:	4a454eef 	.word	0x4a454eef
 8008e14:	3fca7e28 	.word	0x3fca7e28
 8008e18:	93c9db65 	.word	0x93c9db65
 8008e1c:	3fcd864a 	.word	0x3fcd864a
 8008e20:	a91d4101 	.word	0xa91d4101
 8008e24:	3fd17460 	.word	0x3fd17460
 8008e28:	518f264d 	.word	0x518f264d
 8008e2c:	3fd55555 	.word	0x3fd55555
 8008e30:	db6fabff 	.word	0xdb6fabff
 8008e34:	3fdb6db6 	.word	0x3fdb6db6
 8008e38:	33333303 	.word	0x33333303
 8008e3c:	3fe33333 	.word	0x3fe33333
 8008e40:	e0000000 	.word	0xe0000000
 8008e44:	3feec709 	.word	0x3feec709
 8008e48:	dc3a03fd 	.word	0xdc3a03fd
 8008e4c:	3feec709 	.word	0x3feec709
 8008e50:	145b01f5 	.word	0x145b01f5
 8008e54:	be3e2fe0 	.word	0xbe3e2fe0
 8008e58:	00000000 	.word	0x00000000
 8008e5c:	3ff00000 	.word	0x3ff00000
 8008e60:	7ff00000 	.word	0x7ff00000
 8008e64:	43400000 	.word	0x43400000
 8008e68:	0003988e 	.word	0x0003988e
 8008e6c:	000bb679 	.word	0x000bb679
 8008e70:	08009b48 	.word	0x08009b48
 8008e74:	3ff00000 	.word	0x3ff00000
 8008e78:	40080000 	.word	0x40080000
 8008e7c:	08009b68 	.word	0x08009b68
 8008e80:	08009b58 	.word	0x08009b58
 8008e84:	a3b5      	add	r3, pc, #724	; (adr r3, 800915c <__ieee754_pow+0xa54>)
 8008e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e8a:	4640      	mov	r0, r8
 8008e8c:	4649      	mov	r1, r9
 8008e8e:	f7f7 f9fd 	bl	800028c <__adddf3>
 8008e92:	4622      	mov	r2, r4
 8008e94:	ec41 0b1a 	vmov	d10, r0, r1
 8008e98:	462b      	mov	r3, r5
 8008e9a:	4630      	mov	r0, r6
 8008e9c:	4639      	mov	r1, r7
 8008e9e:	f7f7 f9f3 	bl	8000288 <__aeabi_dsub>
 8008ea2:	4602      	mov	r2, r0
 8008ea4:	460b      	mov	r3, r1
 8008ea6:	ec51 0b1a 	vmov	r0, r1, d10
 8008eaa:	f7f7 fe35 	bl	8000b18 <__aeabi_dcmpgt>
 8008eae:	2800      	cmp	r0, #0
 8008eb0:	f47f ae04 	bne.w	8008abc <__ieee754_pow+0x3b4>
 8008eb4:	4aa4      	ldr	r2, [pc, #656]	; (8009148 <__ieee754_pow+0xa40>)
 8008eb6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008eba:	4293      	cmp	r3, r2
 8008ebc:	f340 8108 	ble.w	80090d0 <__ieee754_pow+0x9c8>
 8008ec0:	151b      	asrs	r3, r3, #20
 8008ec2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8008ec6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8008eca:	fa4a f303 	asr.w	r3, sl, r3
 8008ece:	445b      	add	r3, fp
 8008ed0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8008ed4:	4e9d      	ldr	r6, [pc, #628]	; (800914c <__ieee754_pow+0xa44>)
 8008ed6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8008eda:	4116      	asrs	r6, r2
 8008edc:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8008ee0:	2000      	movs	r0, #0
 8008ee2:	ea23 0106 	bic.w	r1, r3, r6
 8008ee6:	f1c2 0214 	rsb	r2, r2, #20
 8008eea:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8008eee:	fa4a fa02 	asr.w	sl, sl, r2
 8008ef2:	f1bb 0f00 	cmp.w	fp, #0
 8008ef6:	4602      	mov	r2, r0
 8008ef8:	460b      	mov	r3, r1
 8008efa:	4620      	mov	r0, r4
 8008efc:	4629      	mov	r1, r5
 8008efe:	bfb8      	it	lt
 8008f00:	f1ca 0a00 	rsblt	sl, sl, #0
 8008f04:	f7f7 f9c0 	bl	8000288 <__aeabi_dsub>
 8008f08:	ec41 0b19 	vmov	d9, r0, r1
 8008f0c:	4642      	mov	r2, r8
 8008f0e:	464b      	mov	r3, r9
 8008f10:	ec51 0b19 	vmov	r0, r1, d9
 8008f14:	f7f7 f9ba 	bl	800028c <__adddf3>
 8008f18:	a37b      	add	r3, pc, #492	; (adr r3, 8009108 <__ieee754_pow+0xa00>)
 8008f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f1e:	2000      	movs	r0, #0
 8008f20:	4604      	mov	r4, r0
 8008f22:	460d      	mov	r5, r1
 8008f24:	f7f7 fb68 	bl	80005f8 <__aeabi_dmul>
 8008f28:	ec53 2b19 	vmov	r2, r3, d9
 8008f2c:	4606      	mov	r6, r0
 8008f2e:	460f      	mov	r7, r1
 8008f30:	4620      	mov	r0, r4
 8008f32:	4629      	mov	r1, r5
 8008f34:	f7f7 f9a8 	bl	8000288 <__aeabi_dsub>
 8008f38:	4602      	mov	r2, r0
 8008f3a:	460b      	mov	r3, r1
 8008f3c:	4640      	mov	r0, r8
 8008f3e:	4649      	mov	r1, r9
 8008f40:	f7f7 f9a2 	bl	8000288 <__aeabi_dsub>
 8008f44:	a372      	add	r3, pc, #456	; (adr r3, 8009110 <__ieee754_pow+0xa08>)
 8008f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f4a:	f7f7 fb55 	bl	80005f8 <__aeabi_dmul>
 8008f4e:	a372      	add	r3, pc, #456	; (adr r3, 8009118 <__ieee754_pow+0xa10>)
 8008f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f54:	4680      	mov	r8, r0
 8008f56:	4689      	mov	r9, r1
 8008f58:	4620      	mov	r0, r4
 8008f5a:	4629      	mov	r1, r5
 8008f5c:	f7f7 fb4c 	bl	80005f8 <__aeabi_dmul>
 8008f60:	4602      	mov	r2, r0
 8008f62:	460b      	mov	r3, r1
 8008f64:	4640      	mov	r0, r8
 8008f66:	4649      	mov	r1, r9
 8008f68:	f7f7 f990 	bl	800028c <__adddf3>
 8008f6c:	4604      	mov	r4, r0
 8008f6e:	460d      	mov	r5, r1
 8008f70:	4602      	mov	r2, r0
 8008f72:	460b      	mov	r3, r1
 8008f74:	4630      	mov	r0, r6
 8008f76:	4639      	mov	r1, r7
 8008f78:	f7f7 f988 	bl	800028c <__adddf3>
 8008f7c:	4632      	mov	r2, r6
 8008f7e:	463b      	mov	r3, r7
 8008f80:	4680      	mov	r8, r0
 8008f82:	4689      	mov	r9, r1
 8008f84:	f7f7 f980 	bl	8000288 <__aeabi_dsub>
 8008f88:	4602      	mov	r2, r0
 8008f8a:	460b      	mov	r3, r1
 8008f8c:	4620      	mov	r0, r4
 8008f8e:	4629      	mov	r1, r5
 8008f90:	f7f7 f97a 	bl	8000288 <__aeabi_dsub>
 8008f94:	4642      	mov	r2, r8
 8008f96:	4606      	mov	r6, r0
 8008f98:	460f      	mov	r7, r1
 8008f9a:	464b      	mov	r3, r9
 8008f9c:	4640      	mov	r0, r8
 8008f9e:	4649      	mov	r1, r9
 8008fa0:	f7f7 fb2a 	bl	80005f8 <__aeabi_dmul>
 8008fa4:	a35e      	add	r3, pc, #376	; (adr r3, 8009120 <__ieee754_pow+0xa18>)
 8008fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008faa:	4604      	mov	r4, r0
 8008fac:	460d      	mov	r5, r1
 8008fae:	f7f7 fb23 	bl	80005f8 <__aeabi_dmul>
 8008fb2:	a35d      	add	r3, pc, #372	; (adr r3, 8009128 <__ieee754_pow+0xa20>)
 8008fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fb8:	f7f7 f966 	bl	8000288 <__aeabi_dsub>
 8008fbc:	4622      	mov	r2, r4
 8008fbe:	462b      	mov	r3, r5
 8008fc0:	f7f7 fb1a 	bl	80005f8 <__aeabi_dmul>
 8008fc4:	a35a      	add	r3, pc, #360	; (adr r3, 8009130 <__ieee754_pow+0xa28>)
 8008fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fca:	f7f7 f95f 	bl	800028c <__adddf3>
 8008fce:	4622      	mov	r2, r4
 8008fd0:	462b      	mov	r3, r5
 8008fd2:	f7f7 fb11 	bl	80005f8 <__aeabi_dmul>
 8008fd6:	a358      	add	r3, pc, #352	; (adr r3, 8009138 <__ieee754_pow+0xa30>)
 8008fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fdc:	f7f7 f954 	bl	8000288 <__aeabi_dsub>
 8008fe0:	4622      	mov	r2, r4
 8008fe2:	462b      	mov	r3, r5
 8008fe4:	f7f7 fb08 	bl	80005f8 <__aeabi_dmul>
 8008fe8:	a355      	add	r3, pc, #340	; (adr r3, 8009140 <__ieee754_pow+0xa38>)
 8008fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fee:	f7f7 f94d 	bl	800028c <__adddf3>
 8008ff2:	4622      	mov	r2, r4
 8008ff4:	462b      	mov	r3, r5
 8008ff6:	f7f7 faff 	bl	80005f8 <__aeabi_dmul>
 8008ffa:	4602      	mov	r2, r0
 8008ffc:	460b      	mov	r3, r1
 8008ffe:	4640      	mov	r0, r8
 8009000:	4649      	mov	r1, r9
 8009002:	f7f7 f941 	bl	8000288 <__aeabi_dsub>
 8009006:	4604      	mov	r4, r0
 8009008:	460d      	mov	r5, r1
 800900a:	4602      	mov	r2, r0
 800900c:	460b      	mov	r3, r1
 800900e:	4640      	mov	r0, r8
 8009010:	4649      	mov	r1, r9
 8009012:	f7f7 faf1 	bl	80005f8 <__aeabi_dmul>
 8009016:	2200      	movs	r2, #0
 8009018:	ec41 0b19 	vmov	d9, r0, r1
 800901c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009020:	4620      	mov	r0, r4
 8009022:	4629      	mov	r1, r5
 8009024:	f7f7 f930 	bl	8000288 <__aeabi_dsub>
 8009028:	4602      	mov	r2, r0
 800902a:	460b      	mov	r3, r1
 800902c:	ec51 0b19 	vmov	r0, r1, d9
 8009030:	f7f7 fc0c 	bl	800084c <__aeabi_ddiv>
 8009034:	4632      	mov	r2, r6
 8009036:	4604      	mov	r4, r0
 8009038:	460d      	mov	r5, r1
 800903a:	463b      	mov	r3, r7
 800903c:	4640      	mov	r0, r8
 800903e:	4649      	mov	r1, r9
 8009040:	f7f7 fada 	bl	80005f8 <__aeabi_dmul>
 8009044:	4632      	mov	r2, r6
 8009046:	463b      	mov	r3, r7
 8009048:	f7f7 f920 	bl	800028c <__adddf3>
 800904c:	4602      	mov	r2, r0
 800904e:	460b      	mov	r3, r1
 8009050:	4620      	mov	r0, r4
 8009052:	4629      	mov	r1, r5
 8009054:	f7f7 f918 	bl	8000288 <__aeabi_dsub>
 8009058:	4642      	mov	r2, r8
 800905a:	464b      	mov	r3, r9
 800905c:	f7f7 f914 	bl	8000288 <__aeabi_dsub>
 8009060:	460b      	mov	r3, r1
 8009062:	4602      	mov	r2, r0
 8009064:	493a      	ldr	r1, [pc, #232]	; (8009150 <__ieee754_pow+0xa48>)
 8009066:	2000      	movs	r0, #0
 8009068:	f7f7 f90e 	bl	8000288 <__aeabi_dsub>
 800906c:	ec41 0b10 	vmov	d0, r0, r1
 8009070:	ee10 3a90 	vmov	r3, s1
 8009074:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8009078:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800907c:	da2b      	bge.n	80090d6 <__ieee754_pow+0x9ce>
 800907e:	4650      	mov	r0, sl
 8009080:	f000 f96e 	bl	8009360 <scalbn>
 8009084:	ec51 0b10 	vmov	r0, r1, d0
 8009088:	ec53 2b18 	vmov	r2, r3, d8
 800908c:	f7ff bbed 	b.w	800886a <__ieee754_pow+0x162>
 8009090:	4b30      	ldr	r3, [pc, #192]	; (8009154 <__ieee754_pow+0xa4c>)
 8009092:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009096:	429e      	cmp	r6, r3
 8009098:	f77f af0c 	ble.w	8008eb4 <__ieee754_pow+0x7ac>
 800909c:	4b2e      	ldr	r3, [pc, #184]	; (8009158 <__ieee754_pow+0xa50>)
 800909e:	440b      	add	r3, r1
 80090a0:	4303      	orrs	r3, r0
 80090a2:	d009      	beq.n	80090b8 <__ieee754_pow+0x9b0>
 80090a4:	ec51 0b18 	vmov	r0, r1, d8
 80090a8:	2200      	movs	r2, #0
 80090aa:	2300      	movs	r3, #0
 80090ac:	f7f7 fd16 	bl	8000adc <__aeabi_dcmplt>
 80090b0:	3800      	subs	r0, #0
 80090b2:	bf18      	it	ne
 80090b4:	2001      	movne	r0, #1
 80090b6:	e447      	b.n	8008948 <__ieee754_pow+0x240>
 80090b8:	4622      	mov	r2, r4
 80090ba:	462b      	mov	r3, r5
 80090bc:	f7f7 f8e4 	bl	8000288 <__aeabi_dsub>
 80090c0:	4642      	mov	r2, r8
 80090c2:	464b      	mov	r3, r9
 80090c4:	f7f7 fd1e 	bl	8000b04 <__aeabi_dcmpge>
 80090c8:	2800      	cmp	r0, #0
 80090ca:	f43f aef3 	beq.w	8008eb4 <__ieee754_pow+0x7ac>
 80090ce:	e7e9      	b.n	80090a4 <__ieee754_pow+0x99c>
 80090d0:	f04f 0a00 	mov.w	sl, #0
 80090d4:	e71a      	b.n	8008f0c <__ieee754_pow+0x804>
 80090d6:	ec51 0b10 	vmov	r0, r1, d0
 80090da:	4619      	mov	r1, r3
 80090dc:	e7d4      	b.n	8009088 <__ieee754_pow+0x980>
 80090de:	491c      	ldr	r1, [pc, #112]	; (8009150 <__ieee754_pow+0xa48>)
 80090e0:	2000      	movs	r0, #0
 80090e2:	f7ff bb30 	b.w	8008746 <__ieee754_pow+0x3e>
 80090e6:	2000      	movs	r0, #0
 80090e8:	2100      	movs	r1, #0
 80090ea:	f7ff bb2c 	b.w	8008746 <__ieee754_pow+0x3e>
 80090ee:	4630      	mov	r0, r6
 80090f0:	4639      	mov	r1, r7
 80090f2:	f7ff bb28 	b.w	8008746 <__ieee754_pow+0x3e>
 80090f6:	9204      	str	r2, [sp, #16]
 80090f8:	f7ff bb7a 	b.w	80087f0 <__ieee754_pow+0xe8>
 80090fc:	2300      	movs	r3, #0
 80090fe:	f7ff bb64 	b.w	80087ca <__ieee754_pow+0xc2>
 8009102:	bf00      	nop
 8009104:	f3af 8000 	nop.w
 8009108:	00000000 	.word	0x00000000
 800910c:	3fe62e43 	.word	0x3fe62e43
 8009110:	fefa39ef 	.word	0xfefa39ef
 8009114:	3fe62e42 	.word	0x3fe62e42
 8009118:	0ca86c39 	.word	0x0ca86c39
 800911c:	be205c61 	.word	0xbe205c61
 8009120:	72bea4d0 	.word	0x72bea4d0
 8009124:	3e663769 	.word	0x3e663769
 8009128:	c5d26bf1 	.word	0xc5d26bf1
 800912c:	3ebbbd41 	.word	0x3ebbbd41
 8009130:	af25de2c 	.word	0xaf25de2c
 8009134:	3f11566a 	.word	0x3f11566a
 8009138:	16bebd93 	.word	0x16bebd93
 800913c:	3f66c16c 	.word	0x3f66c16c
 8009140:	5555553e 	.word	0x5555553e
 8009144:	3fc55555 	.word	0x3fc55555
 8009148:	3fe00000 	.word	0x3fe00000
 800914c:	000fffff 	.word	0x000fffff
 8009150:	3ff00000 	.word	0x3ff00000
 8009154:	4090cbff 	.word	0x4090cbff
 8009158:	3f6f3400 	.word	0x3f6f3400
 800915c:	652b82fe 	.word	0x652b82fe
 8009160:	3c971547 	.word	0x3c971547

08009164 <__ieee754_sqrt>:
 8009164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009168:	ec55 4b10 	vmov	r4, r5, d0
 800916c:	4e55      	ldr	r6, [pc, #340]	; (80092c4 <__ieee754_sqrt+0x160>)
 800916e:	43ae      	bics	r6, r5
 8009170:	ee10 0a10 	vmov	r0, s0
 8009174:	ee10 3a10 	vmov	r3, s0
 8009178:	462a      	mov	r2, r5
 800917a:	4629      	mov	r1, r5
 800917c:	d110      	bne.n	80091a0 <__ieee754_sqrt+0x3c>
 800917e:	ee10 2a10 	vmov	r2, s0
 8009182:	462b      	mov	r3, r5
 8009184:	f7f7 fa38 	bl	80005f8 <__aeabi_dmul>
 8009188:	4602      	mov	r2, r0
 800918a:	460b      	mov	r3, r1
 800918c:	4620      	mov	r0, r4
 800918e:	4629      	mov	r1, r5
 8009190:	f7f7 f87c 	bl	800028c <__adddf3>
 8009194:	4604      	mov	r4, r0
 8009196:	460d      	mov	r5, r1
 8009198:	ec45 4b10 	vmov	d0, r4, r5
 800919c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091a0:	2d00      	cmp	r5, #0
 80091a2:	dc10      	bgt.n	80091c6 <__ieee754_sqrt+0x62>
 80091a4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80091a8:	4330      	orrs	r0, r6
 80091aa:	d0f5      	beq.n	8009198 <__ieee754_sqrt+0x34>
 80091ac:	b15d      	cbz	r5, 80091c6 <__ieee754_sqrt+0x62>
 80091ae:	ee10 2a10 	vmov	r2, s0
 80091b2:	462b      	mov	r3, r5
 80091b4:	ee10 0a10 	vmov	r0, s0
 80091b8:	f7f7 f866 	bl	8000288 <__aeabi_dsub>
 80091bc:	4602      	mov	r2, r0
 80091be:	460b      	mov	r3, r1
 80091c0:	f7f7 fb44 	bl	800084c <__aeabi_ddiv>
 80091c4:	e7e6      	b.n	8009194 <__ieee754_sqrt+0x30>
 80091c6:	1512      	asrs	r2, r2, #20
 80091c8:	d074      	beq.n	80092b4 <__ieee754_sqrt+0x150>
 80091ca:	07d4      	lsls	r4, r2, #31
 80091cc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80091d0:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 80091d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80091d8:	bf5e      	ittt	pl
 80091da:	0fda      	lsrpl	r2, r3, #31
 80091dc:	005b      	lslpl	r3, r3, #1
 80091de:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 80091e2:	2400      	movs	r4, #0
 80091e4:	0fda      	lsrs	r2, r3, #31
 80091e6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80091ea:	107f      	asrs	r7, r7, #1
 80091ec:	005b      	lsls	r3, r3, #1
 80091ee:	2516      	movs	r5, #22
 80091f0:	4620      	mov	r0, r4
 80091f2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80091f6:	1886      	adds	r6, r0, r2
 80091f8:	428e      	cmp	r6, r1
 80091fa:	bfde      	ittt	le
 80091fc:	1b89      	suble	r1, r1, r6
 80091fe:	18b0      	addle	r0, r6, r2
 8009200:	18a4      	addle	r4, r4, r2
 8009202:	0049      	lsls	r1, r1, #1
 8009204:	3d01      	subs	r5, #1
 8009206:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800920a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800920e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009212:	d1f0      	bne.n	80091f6 <__ieee754_sqrt+0x92>
 8009214:	462a      	mov	r2, r5
 8009216:	f04f 0e20 	mov.w	lr, #32
 800921a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800921e:	4281      	cmp	r1, r0
 8009220:	eb06 0c05 	add.w	ip, r6, r5
 8009224:	dc02      	bgt.n	800922c <__ieee754_sqrt+0xc8>
 8009226:	d113      	bne.n	8009250 <__ieee754_sqrt+0xec>
 8009228:	459c      	cmp	ip, r3
 800922a:	d811      	bhi.n	8009250 <__ieee754_sqrt+0xec>
 800922c:	f1bc 0f00 	cmp.w	ip, #0
 8009230:	eb0c 0506 	add.w	r5, ip, r6
 8009234:	da43      	bge.n	80092be <__ieee754_sqrt+0x15a>
 8009236:	2d00      	cmp	r5, #0
 8009238:	db41      	blt.n	80092be <__ieee754_sqrt+0x15a>
 800923a:	f100 0801 	add.w	r8, r0, #1
 800923e:	1a09      	subs	r1, r1, r0
 8009240:	459c      	cmp	ip, r3
 8009242:	bf88      	it	hi
 8009244:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8009248:	eba3 030c 	sub.w	r3, r3, ip
 800924c:	4432      	add	r2, r6
 800924e:	4640      	mov	r0, r8
 8009250:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8009254:	f1be 0e01 	subs.w	lr, lr, #1
 8009258:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800925c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009260:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009264:	d1db      	bne.n	800921e <__ieee754_sqrt+0xba>
 8009266:	430b      	orrs	r3, r1
 8009268:	d006      	beq.n	8009278 <__ieee754_sqrt+0x114>
 800926a:	1c50      	adds	r0, r2, #1
 800926c:	bf13      	iteet	ne
 800926e:	3201      	addne	r2, #1
 8009270:	3401      	addeq	r4, #1
 8009272:	4672      	moveq	r2, lr
 8009274:	f022 0201 	bicne.w	r2, r2, #1
 8009278:	1063      	asrs	r3, r4, #1
 800927a:	0852      	lsrs	r2, r2, #1
 800927c:	07e1      	lsls	r1, r4, #31
 800927e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009282:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009286:	bf48      	it	mi
 8009288:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800928c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8009290:	4614      	mov	r4, r2
 8009292:	e781      	b.n	8009198 <__ieee754_sqrt+0x34>
 8009294:	0ad9      	lsrs	r1, r3, #11
 8009296:	3815      	subs	r0, #21
 8009298:	055b      	lsls	r3, r3, #21
 800929a:	2900      	cmp	r1, #0
 800929c:	d0fa      	beq.n	8009294 <__ieee754_sqrt+0x130>
 800929e:	02cd      	lsls	r5, r1, #11
 80092a0:	d50a      	bpl.n	80092b8 <__ieee754_sqrt+0x154>
 80092a2:	f1c2 0420 	rsb	r4, r2, #32
 80092a6:	fa23 f404 	lsr.w	r4, r3, r4
 80092aa:	1e55      	subs	r5, r2, #1
 80092ac:	4093      	lsls	r3, r2
 80092ae:	4321      	orrs	r1, r4
 80092b0:	1b42      	subs	r2, r0, r5
 80092b2:	e78a      	b.n	80091ca <__ieee754_sqrt+0x66>
 80092b4:	4610      	mov	r0, r2
 80092b6:	e7f0      	b.n	800929a <__ieee754_sqrt+0x136>
 80092b8:	0049      	lsls	r1, r1, #1
 80092ba:	3201      	adds	r2, #1
 80092bc:	e7ef      	b.n	800929e <__ieee754_sqrt+0x13a>
 80092be:	4680      	mov	r8, r0
 80092c0:	e7bd      	b.n	800923e <__ieee754_sqrt+0xda>
 80092c2:	bf00      	nop
 80092c4:	7ff00000 	.word	0x7ff00000

080092c8 <with_errno>:
 80092c8:	b570      	push	{r4, r5, r6, lr}
 80092ca:	4604      	mov	r4, r0
 80092cc:	460d      	mov	r5, r1
 80092ce:	4616      	mov	r6, r2
 80092d0:	f7fc fd2e 	bl	8005d30 <__errno>
 80092d4:	4629      	mov	r1, r5
 80092d6:	6006      	str	r6, [r0, #0]
 80092d8:	4620      	mov	r0, r4
 80092da:	bd70      	pop	{r4, r5, r6, pc}

080092dc <xflow>:
 80092dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80092de:	4614      	mov	r4, r2
 80092e0:	461d      	mov	r5, r3
 80092e2:	b108      	cbz	r0, 80092e8 <xflow+0xc>
 80092e4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80092e8:	e9cd 2300 	strd	r2, r3, [sp]
 80092ec:	e9dd 2300 	ldrd	r2, r3, [sp]
 80092f0:	4620      	mov	r0, r4
 80092f2:	4629      	mov	r1, r5
 80092f4:	f7f7 f980 	bl	80005f8 <__aeabi_dmul>
 80092f8:	2222      	movs	r2, #34	; 0x22
 80092fa:	b003      	add	sp, #12
 80092fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009300:	f7ff bfe2 	b.w	80092c8 <with_errno>

08009304 <__math_uflow>:
 8009304:	b508      	push	{r3, lr}
 8009306:	2200      	movs	r2, #0
 8009308:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800930c:	f7ff ffe6 	bl	80092dc <xflow>
 8009310:	ec41 0b10 	vmov	d0, r0, r1
 8009314:	bd08      	pop	{r3, pc}

08009316 <__math_oflow>:
 8009316:	b508      	push	{r3, lr}
 8009318:	2200      	movs	r2, #0
 800931a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800931e:	f7ff ffdd 	bl	80092dc <xflow>
 8009322:	ec41 0b10 	vmov	d0, r0, r1
 8009326:	bd08      	pop	{r3, pc}

08009328 <fabs>:
 8009328:	ec51 0b10 	vmov	r0, r1, d0
 800932c:	ee10 2a10 	vmov	r2, s0
 8009330:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009334:	ec43 2b10 	vmov	d0, r2, r3
 8009338:	4770      	bx	lr

0800933a <finite>:
 800933a:	b082      	sub	sp, #8
 800933c:	ed8d 0b00 	vstr	d0, [sp]
 8009340:	9801      	ldr	r0, [sp, #4]
 8009342:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8009346:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800934a:	0fc0      	lsrs	r0, r0, #31
 800934c:	b002      	add	sp, #8
 800934e:	4770      	bx	lr

08009350 <nan>:
 8009350:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009358 <nan+0x8>
 8009354:	4770      	bx	lr
 8009356:	bf00      	nop
 8009358:	00000000 	.word	0x00000000
 800935c:	7ff80000 	.word	0x7ff80000

08009360 <scalbn>:
 8009360:	b570      	push	{r4, r5, r6, lr}
 8009362:	ec55 4b10 	vmov	r4, r5, d0
 8009366:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800936a:	4606      	mov	r6, r0
 800936c:	462b      	mov	r3, r5
 800936e:	b99a      	cbnz	r2, 8009398 <scalbn+0x38>
 8009370:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009374:	4323      	orrs	r3, r4
 8009376:	d036      	beq.n	80093e6 <scalbn+0x86>
 8009378:	4b39      	ldr	r3, [pc, #228]	; (8009460 <scalbn+0x100>)
 800937a:	4629      	mov	r1, r5
 800937c:	ee10 0a10 	vmov	r0, s0
 8009380:	2200      	movs	r2, #0
 8009382:	f7f7 f939 	bl	80005f8 <__aeabi_dmul>
 8009386:	4b37      	ldr	r3, [pc, #220]	; (8009464 <scalbn+0x104>)
 8009388:	429e      	cmp	r6, r3
 800938a:	4604      	mov	r4, r0
 800938c:	460d      	mov	r5, r1
 800938e:	da10      	bge.n	80093b2 <scalbn+0x52>
 8009390:	a32b      	add	r3, pc, #172	; (adr r3, 8009440 <scalbn+0xe0>)
 8009392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009396:	e03a      	b.n	800940e <scalbn+0xae>
 8009398:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800939c:	428a      	cmp	r2, r1
 800939e:	d10c      	bne.n	80093ba <scalbn+0x5a>
 80093a0:	ee10 2a10 	vmov	r2, s0
 80093a4:	4620      	mov	r0, r4
 80093a6:	4629      	mov	r1, r5
 80093a8:	f7f6 ff70 	bl	800028c <__adddf3>
 80093ac:	4604      	mov	r4, r0
 80093ae:	460d      	mov	r5, r1
 80093b0:	e019      	b.n	80093e6 <scalbn+0x86>
 80093b2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80093b6:	460b      	mov	r3, r1
 80093b8:	3a36      	subs	r2, #54	; 0x36
 80093ba:	4432      	add	r2, r6
 80093bc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80093c0:	428a      	cmp	r2, r1
 80093c2:	dd08      	ble.n	80093d6 <scalbn+0x76>
 80093c4:	2d00      	cmp	r5, #0
 80093c6:	a120      	add	r1, pc, #128	; (adr r1, 8009448 <scalbn+0xe8>)
 80093c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80093cc:	da1c      	bge.n	8009408 <scalbn+0xa8>
 80093ce:	a120      	add	r1, pc, #128	; (adr r1, 8009450 <scalbn+0xf0>)
 80093d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80093d4:	e018      	b.n	8009408 <scalbn+0xa8>
 80093d6:	2a00      	cmp	r2, #0
 80093d8:	dd08      	ble.n	80093ec <scalbn+0x8c>
 80093da:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80093de:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80093e2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80093e6:	ec45 4b10 	vmov	d0, r4, r5
 80093ea:	bd70      	pop	{r4, r5, r6, pc}
 80093ec:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80093f0:	da19      	bge.n	8009426 <scalbn+0xc6>
 80093f2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80093f6:	429e      	cmp	r6, r3
 80093f8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80093fc:	dd0a      	ble.n	8009414 <scalbn+0xb4>
 80093fe:	a112      	add	r1, pc, #72	; (adr r1, 8009448 <scalbn+0xe8>)
 8009400:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d1e2      	bne.n	80093ce <scalbn+0x6e>
 8009408:	a30f      	add	r3, pc, #60	; (adr r3, 8009448 <scalbn+0xe8>)
 800940a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800940e:	f7f7 f8f3 	bl	80005f8 <__aeabi_dmul>
 8009412:	e7cb      	b.n	80093ac <scalbn+0x4c>
 8009414:	a10a      	add	r1, pc, #40	; (adr r1, 8009440 <scalbn+0xe0>)
 8009416:	e9d1 0100 	ldrd	r0, r1, [r1]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d0b8      	beq.n	8009390 <scalbn+0x30>
 800941e:	a10e      	add	r1, pc, #56	; (adr r1, 8009458 <scalbn+0xf8>)
 8009420:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009424:	e7b4      	b.n	8009390 <scalbn+0x30>
 8009426:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800942a:	3236      	adds	r2, #54	; 0x36
 800942c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009430:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8009434:	4620      	mov	r0, r4
 8009436:	4b0c      	ldr	r3, [pc, #48]	; (8009468 <scalbn+0x108>)
 8009438:	2200      	movs	r2, #0
 800943a:	e7e8      	b.n	800940e <scalbn+0xae>
 800943c:	f3af 8000 	nop.w
 8009440:	c2f8f359 	.word	0xc2f8f359
 8009444:	01a56e1f 	.word	0x01a56e1f
 8009448:	8800759c 	.word	0x8800759c
 800944c:	7e37e43c 	.word	0x7e37e43c
 8009450:	8800759c 	.word	0x8800759c
 8009454:	fe37e43c 	.word	0xfe37e43c
 8009458:	c2f8f359 	.word	0xc2f8f359
 800945c:	81a56e1f 	.word	0x81a56e1f
 8009460:	43500000 	.word	0x43500000
 8009464:	ffff3cb0 	.word	0xffff3cb0
 8009468:	3c900000 	.word	0x3c900000
 800946c:	00000000 	.word	0x00000000

08009470 <__ieee754_log>:
 8009470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009474:	ec51 0b10 	vmov	r0, r1, d0
 8009478:	ed2d 8b04 	vpush	{d8-d9}
 800947c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8009480:	b083      	sub	sp, #12
 8009482:	460d      	mov	r5, r1
 8009484:	da29      	bge.n	80094da <__ieee754_log+0x6a>
 8009486:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800948a:	4303      	orrs	r3, r0
 800948c:	ee10 2a10 	vmov	r2, s0
 8009490:	d10c      	bne.n	80094ac <__ieee754_log+0x3c>
 8009492:	49cf      	ldr	r1, [pc, #828]	; (80097d0 <__ieee754_log+0x360>)
 8009494:	2200      	movs	r2, #0
 8009496:	2300      	movs	r3, #0
 8009498:	2000      	movs	r0, #0
 800949a:	f7f7 f9d7 	bl	800084c <__aeabi_ddiv>
 800949e:	ec41 0b10 	vmov	d0, r0, r1
 80094a2:	b003      	add	sp, #12
 80094a4:	ecbd 8b04 	vpop	{d8-d9}
 80094a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094ac:	2900      	cmp	r1, #0
 80094ae:	da05      	bge.n	80094bc <__ieee754_log+0x4c>
 80094b0:	460b      	mov	r3, r1
 80094b2:	f7f6 fee9 	bl	8000288 <__aeabi_dsub>
 80094b6:	2200      	movs	r2, #0
 80094b8:	2300      	movs	r3, #0
 80094ba:	e7ee      	b.n	800949a <__ieee754_log+0x2a>
 80094bc:	4bc5      	ldr	r3, [pc, #788]	; (80097d4 <__ieee754_log+0x364>)
 80094be:	2200      	movs	r2, #0
 80094c0:	f7f7 f89a 	bl	80005f8 <__aeabi_dmul>
 80094c4:	f06f 0335 	mvn.w	r3, #53	; 0x35
 80094c8:	460d      	mov	r5, r1
 80094ca:	4ac3      	ldr	r2, [pc, #780]	; (80097d8 <__ieee754_log+0x368>)
 80094cc:	4295      	cmp	r5, r2
 80094ce:	dd06      	ble.n	80094de <__ieee754_log+0x6e>
 80094d0:	4602      	mov	r2, r0
 80094d2:	460b      	mov	r3, r1
 80094d4:	f7f6 feda 	bl	800028c <__adddf3>
 80094d8:	e7e1      	b.n	800949e <__ieee754_log+0x2e>
 80094da:	2300      	movs	r3, #0
 80094dc:	e7f5      	b.n	80094ca <__ieee754_log+0x5a>
 80094de:	152c      	asrs	r4, r5, #20
 80094e0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80094e4:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80094e8:	441c      	add	r4, r3
 80094ea:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 80094ee:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 80094f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80094f6:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 80094fa:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 80094fe:	ea42 0105 	orr.w	r1, r2, r5
 8009502:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8009506:	2200      	movs	r2, #0
 8009508:	4bb4      	ldr	r3, [pc, #720]	; (80097dc <__ieee754_log+0x36c>)
 800950a:	f7f6 febd 	bl	8000288 <__aeabi_dsub>
 800950e:	1cab      	adds	r3, r5, #2
 8009510:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009514:	2b02      	cmp	r3, #2
 8009516:	4682      	mov	sl, r0
 8009518:	468b      	mov	fp, r1
 800951a:	f04f 0200 	mov.w	r2, #0
 800951e:	dc53      	bgt.n	80095c8 <__ieee754_log+0x158>
 8009520:	2300      	movs	r3, #0
 8009522:	f7f7 fad1 	bl	8000ac8 <__aeabi_dcmpeq>
 8009526:	b1d0      	cbz	r0, 800955e <__ieee754_log+0xee>
 8009528:	2c00      	cmp	r4, #0
 800952a:	f000 8122 	beq.w	8009772 <__ieee754_log+0x302>
 800952e:	4620      	mov	r0, r4
 8009530:	f7f6 fff8 	bl	8000524 <__aeabi_i2d>
 8009534:	a390      	add	r3, pc, #576	; (adr r3, 8009778 <__ieee754_log+0x308>)
 8009536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800953a:	4606      	mov	r6, r0
 800953c:	460f      	mov	r7, r1
 800953e:	f7f7 f85b 	bl	80005f8 <__aeabi_dmul>
 8009542:	a38f      	add	r3, pc, #572	; (adr r3, 8009780 <__ieee754_log+0x310>)
 8009544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009548:	4604      	mov	r4, r0
 800954a:	460d      	mov	r5, r1
 800954c:	4630      	mov	r0, r6
 800954e:	4639      	mov	r1, r7
 8009550:	f7f7 f852 	bl	80005f8 <__aeabi_dmul>
 8009554:	4602      	mov	r2, r0
 8009556:	460b      	mov	r3, r1
 8009558:	4620      	mov	r0, r4
 800955a:	4629      	mov	r1, r5
 800955c:	e7ba      	b.n	80094d4 <__ieee754_log+0x64>
 800955e:	a38a      	add	r3, pc, #552	; (adr r3, 8009788 <__ieee754_log+0x318>)
 8009560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009564:	4650      	mov	r0, sl
 8009566:	4659      	mov	r1, fp
 8009568:	f7f7 f846 	bl	80005f8 <__aeabi_dmul>
 800956c:	4602      	mov	r2, r0
 800956e:	460b      	mov	r3, r1
 8009570:	2000      	movs	r0, #0
 8009572:	499b      	ldr	r1, [pc, #620]	; (80097e0 <__ieee754_log+0x370>)
 8009574:	f7f6 fe88 	bl	8000288 <__aeabi_dsub>
 8009578:	4652      	mov	r2, sl
 800957a:	4606      	mov	r6, r0
 800957c:	460f      	mov	r7, r1
 800957e:	465b      	mov	r3, fp
 8009580:	4650      	mov	r0, sl
 8009582:	4659      	mov	r1, fp
 8009584:	f7f7 f838 	bl	80005f8 <__aeabi_dmul>
 8009588:	4602      	mov	r2, r0
 800958a:	460b      	mov	r3, r1
 800958c:	4630      	mov	r0, r6
 800958e:	4639      	mov	r1, r7
 8009590:	f7f7 f832 	bl	80005f8 <__aeabi_dmul>
 8009594:	4606      	mov	r6, r0
 8009596:	460f      	mov	r7, r1
 8009598:	b914      	cbnz	r4, 80095a0 <__ieee754_log+0x130>
 800959a:	4632      	mov	r2, r6
 800959c:	463b      	mov	r3, r7
 800959e:	e0a2      	b.n	80096e6 <__ieee754_log+0x276>
 80095a0:	4620      	mov	r0, r4
 80095a2:	f7f6 ffbf 	bl	8000524 <__aeabi_i2d>
 80095a6:	a374      	add	r3, pc, #464	; (adr r3, 8009778 <__ieee754_log+0x308>)
 80095a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ac:	4680      	mov	r8, r0
 80095ae:	4689      	mov	r9, r1
 80095b0:	f7f7 f822 	bl	80005f8 <__aeabi_dmul>
 80095b4:	a372      	add	r3, pc, #456	; (adr r3, 8009780 <__ieee754_log+0x310>)
 80095b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ba:	4604      	mov	r4, r0
 80095bc:	460d      	mov	r5, r1
 80095be:	4640      	mov	r0, r8
 80095c0:	4649      	mov	r1, r9
 80095c2:	f7f7 f819 	bl	80005f8 <__aeabi_dmul>
 80095c6:	e0a7      	b.n	8009718 <__ieee754_log+0x2a8>
 80095c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80095cc:	f7f6 fe5e 	bl	800028c <__adddf3>
 80095d0:	4602      	mov	r2, r0
 80095d2:	460b      	mov	r3, r1
 80095d4:	4650      	mov	r0, sl
 80095d6:	4659      	mov	r1, fp
 80095d8:	f7f7 f938 	bl	800084c <__aeabi_ddiv>
 80095dc:	ec41 0b18 	vmov	d8, r0, r1
 80095e0:	4620      	mov	r0, r4
 80095e2:	f7f6 ff9f 	bl	8000524 <__aeabi_i2d>
 80095e6:	ec53 2b18 	vmov	r2, r3, d8
 80095ea:	ec41 0b19 	vmov	d9, r0, r1
 80095ee:	ec51 0b18 	vmov	r0, r1, d8
 80095f2:	f7f7 f801 	bl	80005f8 <__aeabi_dmul>
 80095f6:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 80095fa:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 80095fe:	9301      	str	r3, [sp, #4]
 8009600:	4602      	mov	r2, r0
 8009602:	460b      	mov	r3, r1
 8009604:	4680      	mov	r8, r0
 8009606:	4689      	mov	r9, r1
 8009608:	f7f6 fff6 	bl	80005f8 <__aeabi_dmul>
 800960c:	a360      	add	r3, pc, #384	; (adr r3, 8009790 <__ieee754_log+0x320>)
 800960e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009612:	4606      	mov	r6, r0
 8009614:	460f      	mov	r7, r1
 8009616:	f7f6 ffef 	bl	80005f8 <__aeabi_dmul>
 800961a:	a35f      	add	r3, pc, #380	; (adr r3, 8009798 <__ieee754_log+0x328>)
 800961c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009620:	f7f6 fe34 	bl	800028c <__adddf3>
 8009624:	4632      	mov	r2, r6
 8009626:	463b      	mov	r3, r7
 8009628:	f7f6 ffe6 	bl	80005f8 <__aeabi_dmul>
 800962c:	a35c      	add	r3, pc, #368	; (adr r3, 80097a0 <__ieee754_log+0x330>)
 800962e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009632:	f7f6 fe2b 	bl	800028c <__adddf3>
 8009636:	4632      	mov	r2, r6
 8009638:	463b      	mov	r3, r7
 800963a:	f7f6 ffdd 	bl	80005f8 <__aeabi_dmul>
 800963e:	a35a      	add	r3, pc, #360	; (adr r3, 80097a8 <__ieee754_log+0x338>)
 8009640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009644:	f7f6 fe22 	bl	800028c <__adddf3>
 8009648:	4642      	mov	r2, r8
 800964a:	464b      	mov	r3, r9
 800964c:	f7f6 ffd4 	bl	80005f8 <__aeabi_dmul>
 8009650:	a357      	add	r3, pc, #348	; (adr r3, 80097b0 <__ieee754_log+0x340>)
 8009652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009656:	4680      	mov	r8, r0
 8009658:	4689      	mov	r9, r1
 800965a:	4630      	mov	r0, r6
 800965c:	4639      	mov	r1, r7
 800965e:	f7f6 ffcb 	bl	80005f8 <__aeabi_dmul>
 8009662:	a355      	add	r3, pc, #340	; (adr r3, 80097b8 <__ieee754_log+0x348>)
 8009664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009668:	f7f6 fe10 	bl	800028c <__adddf3>
 800966c:	4632      	mov	r2, r6
 800966e:	463b      	mov	r3, r7
 8009670:	f7f6 ffc2 	bl	80005f8 <__aeabi_dmul>
 8009674:	a352      	add	r3, pc, #328	; (adr r3, 80097c0 <__ieee754_log+0x350>)
 8009676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800967a:	f7f6 fe07 	bl	800028c <__adddf3>
 800967e:	4632      	mov	r2, r6
 8009680:	463b      	mov	r3, r7
 8009682:	f7f6 ffb9 	bl	80005f8 <__aeabi_dmul>
 8009686:	460b      	mov	r3, r1
 8009688:	4602      	mov	r2, r0
 800968a:	4649      	mov	r1, r9
 800968c:	4640      	mov	r0, r8
 800968e:	f7f6 fdfd 	bl	800028c <__adddf3>
 8009692:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8009696:	9b01      	ldr	r3, [sp, #4]
 8009698:	3551      	adds	r5, #81	; 0x51
 800969a:	431d      	orrs	r5, r3
 800969c:	2d00      	cmp	r5, #0
 800969e:	4680      	mov	r8, r0
 80096a0:	4689      	mov	r9, r1
 80096a2:	dd48      	ble.n	8009736 <__ieee754_log+0x2c6>
 80096a4:	4b4e      	ldr	r3, [pc, #312]	; (80097e0 <__ieee754_log+0x370>)
 80096a6:	2200      	movs	r2, #0
 80096a8:	4650      	mov	r0, sl
 80096aa:	4659      	mov	r1, fp
 80096ac:	f7f6 ffa4 	bl	80005f8 <__aeabi_dmul>
 80096b0:	4652      	mov	r2, sl
 80096b2:	465b      	mov	r3, fp
 80096b4:	f7f6 ffa0 	bl	80005f8 <__aeabi_dmul>
 80096b8:	4602      	mov	r2, r0
 80096ba:	460b      	mov	r3, r1
 80096bc:	4606      	mov	r6, r0
 80096be:	460f      	mov	r7, r1
 80096c0:	4640      	mov	r0, r8
 80096c2:	4649      	mov	r1, r9
 80096c4:	f7f6 fde2 	bl	800028c <__adddf3>
 80096c8:	ec53 2b18 	vmov	r2, r3, d8
 80096cc:	f7f6 ff94 	bl	80005f8 <__aeabi_dmul>
 80096d0:	4680      	mov	r8, r0
 80096d2:	4689      	mov	r9, r1
 80096d4:	b964      	cbnz	r4, 80096f0 <__ieee754_log+0x280>
 80096d6:	4602      	mov	r2, r0
 80096d8:	460b      	mov	r3, r1
 80096da:	4630      	mov	r0, r6
 80096dc:	4639      	mov	r1, r7
 80096de:	f7f6 fdd3 	bl	8000288 <__aeabi_dsub>
 80096e2:	4602      	mov	r2, r0
 80096e4:	460b      	mov	r3, r1
 80096e6:	4650      	mov	r0, sl
 80096e8:	4659      	mov	r1, fp
 80096ea:	f7f6 fdcd 	bl	8000288 <__aeabi_dsub>
 80096ee:	e6d6      	b.n	800949e <__ieee754_log+0x2e>
 80096f0:	a321      	add	r3, pc, #132	; (adr r3, 8009778 <__ieee754_log+0x308>)
 80096f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096f6:	ec51 0b19 	vmov	r0, r1, d9
 80096fa:	f7f6 ff7d 	bl	80005f8 <__aeabi_dmul>
 80096fe:	a320      	add	r3, pc, #128	; (adr r3, 8009780 <__ieee754_log+0x310>)
 8009700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009704:	4604      	mov	r4, r0
 8009706:	460d      	mov	r5, r1
 8009708:	ec51 0b19 	vmov	r0, r1, d9
 800970c:	f7f6 ff74 	bl	80005f8 <__aeabi_dmul>
 8009710:	4642      	mov	r2, r8
 8009712:	464b      	mov	r3, r9
 8009714:	f7f6 fdba 	bl	800028c <__adddf3>
 8009718:	4602      	mov	r2, r0
 800971a:	460b      	mov	r3, r1
 800971c:	4630      	mov	r0, r6
 800971e:	4639      	mov	r1, r7
 8009720:	f7f6 fdb2 	bl	8000288 <__aeabi_dsub>
 8009724:	4652      	mov	r2, sl
 8009726:	465b      	mov	r3, fp
 8009728:	f7f6 fdae 	bl	8000288 <__aeabi_dsub>
 800972c:	4602      	mov	r2, r0
 800972e:	460b      	mov	r3, r1
 8009730:	4620      	mov	r0, r4
 8009732:	4629      	mov	r1, r5
 8009734:	e7d9      	b.n	80096ea <__ieee754_log+0x27a>
 8009736:	4602      	mov	r2, r0
 8009738:	460b      	mov	r3, r1
 800973a:	4650      	mov	r0, sl
 800973c:	4659      	mov	r1, fp
 800973e:	f7f6 fda3 	bl	8000288 <__aeabi_dsub>
 8009742:	ec53 2b18 	vmov	r2, r3, d8
 8009746:	f7f6 ff57 	bl	80005f8 <__aeabi_dmul>
 800974a:	4606      	mov	r6, r0
 800974c:	460f      	mov	r7, r1
 800974e:	2c00      	cmp	r4, #0
 8009750:	f43f af23 	beq.w	800959a <__ieee754_log+0x12a>
 8009754:	a308      	add	r3, pc, #32	; (adr r3, 8009778 <__ieee754_log+0x308>)
 8009756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800975a:	ec51 0b19 	vmov	r0, r1, d9
 800975e:	f7f6 ff4b 	bl	80005f8 <__aeabi_dmul>
 8009762:	a307      	add	r3, pc, #28	; (adr r3, 8009780 <__ieee754_log+0x310>)
 8009764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009768:	4604      	mov	r4, r0
 800976a:	460d      	mov	r5, r1
 800976c:	ec51 0b19 	vmov	r0, r1, d9
 8009770:	e727      	b.n	80095c2 <__ieee754_log+0x152>
 8009772:	ed9f 0b15 	vldr	d0, [pc, #84]	; 80097c8 <__ieee754_log+0x358>
 8009776:	e694      	b.n	80094a2 <__ieee754_log+0x32>
 8009778:	fee00000 	.word	0xfee00000
 800977c:	3fe62e42 	.word	0x3fe62e42
 8009780:	35793c76 	.word	0x35793c76
 8009784:	3dea39ef 	.word	0x3dea39ef
 8009788:	55555555 	.word	0x55555555
 800978c:	3fd55555 	.word	0x3fd55555
 8009790:	df3e5244 	.word	0xdf3e5244
 8009794:	3fc2f112 	.word	0x3fc2f112
 8009798:	96cb03de 	.word	0x96cb03de
 800979c:	3fc74664 	.word	0x3fc74664
 80097a0:	94229359 	.word	0x94229359
 80097a4:	3fd24924 	.word	0x3fd24924
 80097a8:	55555593 	.word	0x55555593
 80097ac:	3fe55555 	.word	0x3fe55555
 80097b0:	d078c69f 	.word	0xd078c69f
 80097b4:	3fc39a09 	.word	0x3fc39a09
 80097b8:	1d8e78af 	.word	0x1d8e78af
 80097bc:	3fcc71c5 	.word	0x3fcc71c5
 80097c0:	9997fa04 	.word	0x9997fa04
 80097c4:	3fd99999 	.word	0x3fd99999
	...
 80097d0:	c3500000 	.word	0xc3500000
 80097d4:	43500000 	.word	0x43500000
 80097d8:	7fefffff 	.word	0x7fefffff
 80097dc:	3ff00000 	.word	0x3ff00000
 80097e0:	3fe00000 	.word	0x3fe00000

080097e4 <_init>:
 80097e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097e6:	bf00      	nop
 80097e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097ea:	bc08      	pop	{r3}
 80097ec:	469e      	mov	lr, r3
 80097ee:	4770      	bx	lr

080097f0 <_fini>:
 80097f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097f2:	bf00      	nop
 80097f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097f6:	bc08      	pop	{r3}
 80097f8:	469e      	mov	lr, r3
 80097fa:	4770      	bx	lr
