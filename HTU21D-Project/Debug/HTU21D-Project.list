
HTU21D-Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a634  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000540  0800a7c8  0800a7c8  0001a7c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ad08  0800ad08  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800ad08  0800ad08  0001ad08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ad10  0800ad10  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ad10  0800ad10  0001ad10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ad14  0800ad14  0001ad14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800ad18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  200001e0  0800aef8  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000398  0800aef8  00020398  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016877  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cb5  00000000  00000000  00036a87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013e0  00000000  00000000  00039740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012b8  00000000  00000000  0003ab20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022a86  00000000  00000000  0003bdd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000174f4  00000000  00000000  0005e85e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cecc3  00000000  00000000  00075d52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00144a15  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000697c  00000000  00000000  00144a68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a7ac 	.word	0x0800a7ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800a7ac 	.word	0x0800a7ac

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <HTU21D_Init>:
/**
  * @brief  Sets the i2c variable for communication.
  * @param  i2cVal i2c address
  * @retval none
  */
void HTU21D_Init(I2C_HandleTypeDef i2cVal) {
 8000f4c:	b084      	sub	sp, #16
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	f107 0c08 	add.w	ip, r7, #8
 8000f56:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	i2cDef = i2cVal;
 8000f5a:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <HTU21D_Init+0x40>)
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f107 0308 	add.w	r3, r7, #8
 8000f62:	2254      	movs	r2, #84	; 0x54
 8000f64:	4619      	mov	r1, r3
 8000f66:	f005 fb8b 	bl	8006680 <memcpy>
	currentWarning.check_value_type = NONE;
 8000f6a:	4b09      	ldr	r3, [pc, #36]	; (8000f90 <HTU21D_Init+0x44>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	701a      	strb	r2, [r3, #0]
	currentWarning.check_trigger = BELOW;
 8000f70:	4b07      	ldr	r3, [pc, #28]	; (8000f90 <HTU21D_Init+0x44>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	705a      	strb	r2, [r3, #1]
	currentWarning.check_threshold = 0;
 8000f76:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <HTU21D_Init+0x44>)
 8000f78:	f04f 0200 	mov.w	r2, #0
 8000f7c:	605a      	str	r2, [r3, #4]
}
 8000f7e:	bf00      	nop
 8000f80:	46bd      	mov	sp, r7
 8000f82:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f86:	b004      	add	sp, #16
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	200001fc 	.word	0x200001fc
 8000f90:	20000250 	.word	0x20000250

08000f94 <HTU21D_Soft_Reset>:

/**
  * @brief  Reboots the HTU21D sensor switching the power off and on again.
  * @retval none
  */
void HTU21D_Soft_Reset(){
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af02      	add	r7, sp, #8
char reg_command[1];
  reg_command[0] = SOFT_RESET;
 8000f9a:	23fe      	movs	r3, #254	; 0xfe
 8000f9c:	713b      	strb	r3, [r7, #4]
  HAL_I2C_Master_Transmit(&i2cDef, HTU21D_ADDR << 1, (uint8_t *)reg_command, sizeof(reg_command), I2C_TIMEOUT);
 8000f9e:	1d3a      	adds	r2, r7, #4
 8000fa0:	2332      	movs	r3, #50	; 0x32
 8000fa2:	9300      	str	r3, [sp, #0]
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	2180      	movs	r1, #128	; 0x80
 8000fa8:	4804      	ldr	r0, [pc, #16]	; (8000fbc <HTU21D_Soft_Reset+0x28>)
 8000faa:	f001 fc4b 	bl	8002844 <HAL_I2C_Master_Transmit>
  HAL_Delay(15);
 8000fae:	200f      	movs	r0, #15
 8000fb0:	f001 f85c 	bl	800206c <HAL_Delay>
}
 8000fb4:	bf00      	nop
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	200001fc 	.word	0x200001fc

08000fc0 <HTU21D_ReadValue>:
/**
  * @brief  Receives an amount of data from the specified register.
  * @param  regSelect register adress.
  * @retval register value cleared of the status bit.
  */
unsigned HTU21D_ReadValue(char regSelect){
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b086      	sub	sp, #24
 8000fc4:	af02      	add	r7, sp, #8
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	71fb      	strb	r3, [r7, #7]
unsigned value = 0;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	60fb      	str	r3, [r7, #12]
char reg_data[3];

  reg_data[0] = regSelect;
 8000fce:	79fb      	ldrb	r3, [r7, #7]
 8000fd0:	723b      	strb	r3, [r7, #8]
  HAL_I2C_Master_Transmit(&i2cDef, HTU21D_ADDR << 1, (uint8_t *)reg_data, 1, I2C_TIMEOUT);
 8000fd2:	f107 0208 	add.w	r2, r7, #8
 8000fd6:	2332      	movs	r3, #50	; 0x32
 8000fd8:	9300      	str	r3, [sp, #0]
 8000fda:	2301      	movs	r3, #1
 8000fdc:	2180      	movs	r1, #128	; 0x80
 8000fde:	480c      	ldr	r0, [pc, #48]	; (8001010 <HTU21D_ReadValue+0x50>)
 8000fe0:	f001 fc30 	bl	8002844 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&i2cDef, HTU21D_ADDR << 1, (uint8_t *)reg_data, sizeof(reg_data), I2C_TIMEOUT);
 8000fe4:	f107 0208 	add.w	r2, r7, #8
 8000fe8:	2332      	movs	r3, #50	; 0x32
 8000fea:	9300      	str	r3, [sp, #0]
 8000fec:	2303      	movs	r3, #3
 8000fee:	2180      	movs	r1, #128	; 0x80
 8000ff0:	4807      	ldr	r0, [pc, #28]	; (8001010 <HTU21D_ReadValue+0x50>)
 8000ff2:	f001 fd1b 	bl	8002a2c <HAL_I2C_Master_Receive>
	itoa(reg_data[2], output, 2);
	if(HAL_UART_Transmit(&huart2, (uint8_t*) output, strlen(output), 1000)==HAL_ERROR)Error_Handler();
	if(HAL_UART_Transmit(&huart2, (uint8_t *)spaceMsg, strlen(spaceMsg), 1000)==HAL_ERROR)Error_Handler();
*/

  value = ((unsigned)reg_data[0] << 8) | reg_data[1] ;
 8000ff6:	7a3b      	ldrb	r3, [r7, #8]
 8000ff8:	021b      	lsls	r3, r3, #8
 8000ffa:	7a7a      	ldrb	r2, [r7, #9]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	60fb      	str	r3, [r7, #12]
  return value & 0xFFFC;            // Clear status bits
 8001000:	68fa      	ldr	r2, [r7, #12]
 8001002:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8001006:	4013      	ands	r3, r2
  //return value;
}
 8001008:	4618      	mov	r0, r3
 800100a:	3710      	adds	r7, #16
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	200001fc 	.word	0x200001fc
 8001014:	00000000 	.word	0x00000000

08001018 <procTemperatureValue>:
/**
  * @brief  Calculates the temperature from the raw data
  * @param  sensorValue data value from sensor
  * @retval temperature
  */
float procTemperatureValue(unsigned sensorValue){
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  float calc;
  calc = -46.85 + 175.72 * sensorValue / 65536.0;
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f7ff fa6f 	bl	8000504 <__aeabi_ui2d>
 8001026:	a317      	add	r3, pc, #92	; (adr r3, 8001084 <procTemperatureValue+0x6c>)
 8001028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800102c:	f7ff fae4 	bl	80005f8 <__aeabi_dmul>
 8001030:	4602      	mov	r2, r0
 8001032:	460b      	mov	r3, r1
 8001034:	4610      	mov	r0, r2
 8001036:	4619      	mov	r1, r3
 8001038:	f04f 0200 	mov.w	r2, #0
 800103c:	4b10      	ldr	r3, [pc, #64]	; (8001080 <procTemperatureValue+0x68>)
 800103e:	f7ff fc05 	bl	800084c <__aeabi_ddiv>
 8001042:	4602      	mov	r2, r0
 8001044:	460b      	mov	r3, r1
 8001046:	4610      	mov	r0, r2
 8001048:	4619      	mov	r1, r3
 800104a:	a30b      	add	r3, pc, #44	; (adr r3, 8001078 <procTemperatureValue+0x60>)
 800104c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001050:	f7ff f91a 	bl	8000288 <__aeabi_dsub>
 8001054:	4602      	mov	r2, r0
 8001056:	460b      	mov	r3, r1
 8001058:	4610      	mov	r0, r2
 800105a:	4619      	mov	r1, r3
 800105c:	f7ff fda4 	bl	8000ba8 <__aeabi_d2f>
 8001060:	4603      	mov	r3, r0
 8001062:	60fb      	str	r3, [r7, #12]
  return calc;
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	ee07 3a90 	vmov	s15, r3
}
 800106a:	eeb0 0a67 	vmov.f32	s0, s15
 800106e:	3710      	adds	r7, #16
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	f3af 8000 	nop.w
 8001078:	cccccccd 	.word	0xcccccccd
 800107c:	40476ccc 	.word	0x40476ccc
 8001080:	40f00000 	.word	0x40f00000
 8001084:	3d70a3d7 	.word	0x3d70a3d7
 8001088:	4065f70a 	.word	0x4065f70a

0800108c <procHumidityValue>:
/**
  * @brief  Calculates the humidity from the raw data
  * @param  sensorValue data value from sensor
  * @retval humidity
  */
float procHumidityValue(unsigned sensorValue){
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  float calc;
  calc = -6.0 + 125.0 * sensorValue / 65536.0;
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f7ff fa35 	bl	8000504 <__aeabi_ui2d>
 800109a:	f04f 0200 	mov.w	r2, #0
 800109e:	4b12      	ldr	r3, [pc, #72]	; (80010e8 <procHumidityValue+0x5c>)
 80010a0:	f7ff faaa 	bl	80005f8 <__aeabi_dmul>
 80010a4:	4602      	mov	r2, r0
 80010a6:	460b      	mov	r3, r1
 80010a8:	4610      	mov	r0, r2
 80010aa:	4619      	mov	r1, r3
 80010ac:	f04f 0200 	mov.w	r2, #0
 80010b0:	4b0e      	ldr	r3, [pc, #56]	; (80010ec <procHumidityValue+0x60>)
 80010b2:	f7ff fbcb 	bl	800084c <__aeabi_ddiv>
 80010b6:	4602      	mov	r2, r0
 80010b8:	460b      	mov	r3, r1
 80010ba:	4610      	mov	r0, r2
 80010bc:	4619      	mov	r1, r3
 80010be:	f04f 0200 	mov.w	r2, #0
 80010c2:	4b0b      	ldr	r3, [pc, #44]	; (80010f0 <procHumidityValue+0x64>)
 80010c4:	f7ff f8e0 	bl	8000288 <__aeabi_dsub>
 80010c8:	4602      	mov	r2, r0
 80010ca:	460b      	mov	r3, r1
 80010cc:	4610      	mov	r0, r2
 80010ce:	4619      	mov	r1, r3
 80010d0:	f7ff fd6a 	bl	8000ba8 <__aeabi_d2f>
 80010d4:	4603      	mov	r3, r0
 80010d6:	60fb      	str	r3, [r7, #12]
  return calc;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	ee07 3a90 	vmov	s15, r3
}
 80010de:	eeb0 0a67 	vmov.f32	s0, s15
 80010e2:	3710      	adds	r7, #16
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	405f4000 	.word	0x405f4000
 80010ec:	40f00000 	.word	0x40f00000
 80010f0:	40180000 	.word	0x40180000
 80010f4:	00000000 	.word	0x00000000

080010f8 <calcCelsiusToFahrenheit>:
/**
  * @brief  Converts the temperature from the celsius to fahrenheit
  * @param  tempInCelsius temperature in °C
  * @retval temmperature in °F
  */
float calcCelsiusToFahrenheit(float tempInCelsius) {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	ed87 0a01 	vstr	s0, [r7, #4]
	return tempInCelsius * (9.0/5.0) + 32.0;
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f7ff fa20 	bl	8000548 <__aeabi_f2d>
 8001108:	a30e      	add	r3, pc, #56	; (adr r3, 8001144 <calcCelsiusToFahrenheit+0x4c>)
 800110a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800110e:	f7ff fa73 	bl	80005f8 <__aeabi_dmul>
 8001112:	4602      	mov	r2, r0
 8001114:	460b      	mov	r3, r1
 8001116:	4610      	mov	r0, r2
 8001118:	4619      	mov	r1, r3
 800111a:	f04f 0200 	mov.w	r2, #0
 800111e:	4b08      	ldr	r3, [pc, #32]	; (8001140 <calcCelsiusToFahrenheit+0x48>)
 8001120:	f7ff f8b4 	bl	800028c <__adddf3>
 8001124:	4602      	mov	r2, r0
 8001126:	460b      	mov	r3, r1
 8001128:	4610      	mov	r0, r2
 800112a:	4619      	mov	r1, r3
 800112c:	f7ff fd3c 	bl	8000ba8 <__aeabi_d2f>
 8001130:	4603      	mov	r3, r0
 8001132:	ee07 3a90 	vmov	s15, r3
}
 8001136:	eeb0 0a67 	vmov.f32	s0, s15
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	40400000 	.word	0x40400000
 8001144:	cccccccd 	.word	0xcccccccd
 8001148:	3ffccccc 	.word	0x3ffccccc
 800114c:	00000000 	.word	0x00000000

08001150 <calculatePartialPressure>:
/**
  * @brief  Calculates the partial pressure from the temperature
  * @param  temperature value from sensor after calculation
  * @retval partial pressure
  */
float calculatePartialPressure(float temperature) {
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	ed87 0a01 	vstr	s0, [r7, #4]
	double power = Variable_A - (Variable_B / (temperature + Variable_C));
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f7ff f9f4 	bl	8000548 <__aeabi_f2d>
 8001160:	a317      	add	r3, pc, #92	; (adr r3, 80011c0 <calculatePartialPressure+0x70>)
 8001162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001166:	f7ff f891 	bl	800028c <__adddf3>
 800116a:	4602      	mov	r2, r0
 800116c:	460b      	mov	r3, r1
 800116e:	a116      	add	r1, pc, #88	; (adr r1, 80011c8 <calculatePartialPressure+0x78>)
 8001170:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001174:	f7ff fb6a 	bl	800084c <__aeabi_ddiv>
 8001178:	4602      	mov	r2, r0
 800117a:	460b      	mov	r3, r1
 800117c:	a114      	add	r1, pc, #80	; (adr r1, 80011d0 <calculatePartialPressure+0x80>)
 800117e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001182:	f7ff f881 	bl	8000288 <__aeabi_dsub>
 8001186:	4602      	mov	r2, r0
 8001188:	460b      	mov	r3, r1
 800118a:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return (float)pow(10, power);
 800118e:	ed97 1b02 	vldr	d1, [r7, #8]
 8001192:	ed9f 0b09 	vldr	d0, [pc, #36]	; 80011b8 <calculatePartialPressure+0x68>
 8001196:	f008 f99d 	bl	80094d4 <pow>
 800119a:	ec53 2b10 	vmov	r2, r3, d0
 800119e:	4610      	mov	r0, r2
 80011a0:	4619      	mov	r1, r3
 80011a2:	f7ff fd01 	bl	8000ba8 <__aeabi_d2f>
 80011a6:	4603      	mov	r3, r0
 80011a8:	ee07 3a90 	vmov	s15, r3
}
 80011ac:	eeb0 0a67 	vmov.f32	s0, s15
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	00000000 	.word	0x00000000
 80011bc:	40240000 	.word	0x40240000
 80011c0:	b851eb85 	.word	0xb851eb85
 80011c4:	406d751e 	.word	0x406d751e
 80011c8:	5c28f5c3 	.word	0x5c28f5c3
 80011cc:	409b898f 	.word	0x409b898f
 80011d0:	ca57a787 	.word	0xca57a787
 80011d4:	40204432 	.word	0x40204432

080011d8 <calculateDewPointTemperature>:
  * @brief  Calculates the dew point temperature from the humidity and partial pressure
  * @param  humidity value from sensor after calculation
  * @param  partial pressure calculated value
  * @retval dew point temperature
  */
float calculateDewPointTemperature(float humidity, float partialPressure) {
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	ed87 0a01 	vstr	s0, [r7, #4]
 80011e2:	edc7 0a00 	vstr	s1, [r7]
	double result = (Variable_B / (log10(humidity * (partialPressure / 100))- Variable_A)) + Variable_C;
 80011e6:	edd7 7a00 	vldr	s15, [r7]
 80011ea:	eddf 6a23 	vldr	s13, [pc, #140]	; 8001278 <calculateDewPointTemperature+0xa0>
 80011ee:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80011f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80011f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011fa:	ee17 0a90 	vmov	r0, s15
 80011fe:	f7ff f9a3 	bl	8000548 <__aeabi_f2d>
 8001202:	4602      	mov	r2, r0
 8001204:	460b      	mov	r3, r1
 8001206:	ec43 2b10 	vmov	d0, r2, r3
 800120a:	f008 f925 	bl	8009458 <log10>
 800120e:	ec51 0b10 	vmov	r0, r1, d0
 8001212:	a313      	add	r3, pc, #76	; (adr r3, 8001260 <calculateDewPointTemperature+0x88>)
 8001214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001218:	f7ff f836 	bl	8000288 <__aeabi_dsub>
 800121c:	4602      	mov	r2, r0
 800121e:	460b      	mov	r3, r1
 8001220:	a111      	add	r1, pc, #68	; (adr r1, 8001268 <calculateDewPointTemperature+0x90>)
 8001222:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001226:	f7ff fb11 	bl	800084c <__aeabi_ddiv>
 800122a:	4602      	mov	r2, r0
 800122c:	460b      	mov	r3, r1
 800122e:	4610      	mov	r0, r2
 8001230:	4619      	mov	r1, r3
 8001232:	a30f      	add	r3, pc, #60	; (adr r3, 8001270 <calculateDewPointTemperature+0x98>)
 8001234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001238:	f7ff f828 	bl	800028c <__adddf3>
 800123c:	4602      	mov	r2, r0
 800123e:	460b      	mov	r3, r1
 8001240:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return (float)result * (-1);
 8001244:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001248:	f7ff fcae 	bl	8000ba8 <__aeabi_d2f>
 800124c:	4603      	mov	r3, r0
 800124e:	ee07 3a90 	vmov	s15, r3
 8001252:	eef1 7a67 	vneg.f32	s15, s15
}
 8001256:	eeb0 0a67 	vmov.f32	s0, s15
 800125a:	3710      	adds	r7, #16
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	ca57a787 	.word	0xca57a787
 8001264:	40204432 	.word	0x40204432
 8001268:	5c28f5c3 	.word	0x5c28f5c3
 800126c:	409b898f 	.word	0x409b898f
 8001270:	b851eb85 	.word	0xb851eb85
 8001274:	406d751e 	.word	0x406d751e
 8001278:	42c80000 	.word	0x42c80000

0800127c <setWarning>:
  * @param  value_type type of value that should be checked
  * @param  trigger if the warning should be triggered, when the value is below or above a certain threshold
  * @param  threshold the threshold value that needs to be checked
  * @retval none
  */
void setWarning(CHECK_VALUE_TYPE value_type, CHECK_TRIGGER trigger, float threshold) {
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	4603      	mov	r3, r0
 8001284:	460a      	mov	r2, r1
 8001286:	ed87 0a00 	vstr	s0, [r7]
 800128a:	71fb      	strb	r3, [r7, #7]
 800128c:	4613      	mov	r3, r2
 800128e:	71bb      	strb	r3, [r7, #6]
	currentWarning.check_value_type = value_type;
 8001290:	4a07      	ldr	r2, [pc, #28]	; (80012b0 <setWarning+0x34>)
 8001292:	79fb      	ldrb	r3, [r7, #7]
 8001294:	7013      	strb	r3, [r2, #0]
	currentWarning.check_trigger = trigger;
 8001296:	4a06      	ldr	r2, [pc, #24]	; (80012b0 <setWarning+0x34>)
 8001298:	79bb      	ldrb	r3, [r7, #6]
 800129a:	7053      	strb	r3, [r2, #1]
	currentWarning.check_threshold = threshold;
 800129c:	4a04      	ldr	r2, [pc, #16]	; (80012b0 <setWarning+0x34>)
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	6053      	str	r3, [r2, #4]
}
 80012a2:	bf00      	nop
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	20000250 	.word	0x20000250

080012b4 <getValue>:
/**
  * @brief  Returns the value depending on what value type was inputted
  * @param  value_type type of value that should be pulled
  * @retval sensor value of the input type
  */
float getValue(CHECK_VALUE_TYPE value_type) {
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b088      	sub	sp, #32
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	71fb      	strb	r3, [r7, #7]
	float value = 0;
 80012be:	f04f 0300 	mov.w	r3, #0
 80012c2:	61fb      	str	r3, [r7, #28]

	switch(value_type) {
 80012c4:	79fb      	ldrb	r3, [r7, #7]
 80012c6:	3b01      	subs	r3, #1
 80012c8:	2b03      	cmp	r3, #3
 80012ca:	d850      	bhi.n	800136e <getValue+0xba>
 80012cc:	a201      	add	r2, pc, #4	; (adr r2, 80012d4 <getValue+0x20>)
 80012ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012d2:	bf00      	nop
 80012d4:	080012e5 	.word	0x080012e5
 80012d8:	080012f9 	.word	0x080012f9
 80012dc:	0800130d 	.word	0x0800130d
 80012e0:	0800132d 	.word	0x0800132d
		case TEMPERATURE: {
			value = procTemperatureValue(HTU21D_ReadValue(TRIGGER_TEMP_MEASURE_HOLD));
 80012e4:	20e3      	movs	r0, #227	; 0xe3
 80012e6:	f7ff fe6b 	bl	8000fc0 <HTU21D_ReadValue>
 80012ea:	4603      	mov	r3, r0
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff fe93 	bl	8001018 <procTemperatureValue>
 80012f2:	ed87 0a07 	vstr	s0, [r7, #28]
			break;
 80012f6:	e03d      	b.n	8001374 <getValue+0xc0>
		}

		case HUMIDITY: {
			value = procHumidityValue(HTU21D_ReadValue(TRIGGER_HUMD_MEASURE_HOLD));
 80012f8:	20e5      	movs	r0, #229	; 0xe5
 80012fa:	f7ff fe61 	bl	8000fc0 <HTU21D_ReadValue>
 80012fe:	4603      	mov	r3, r0
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff fec3 	bl	800108c <procHumidityValue>
 8001306:	ed87 0a07 	vstr	s0, [r7, #28]
			break;
 800130a:	e033      	b.n	8001374 <getValue+0xc0>
		}

		case PARTIAL_PRESSURE: {
			float temp = procTemperatureValue(HTU21D_ReadValue(TRIGGER_TEMP_MEASURE_HOLD));
 800130c:	20e3      	movs	r0, #227	; 0xe3
 800130e:	f7ff fe57 	bl	8000fc0 <HTU21D_ReadValue>
 8001312:	4603      	mov	r3, r0
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff fe7f 	bl	8001018 <procTemperatureValue>
 800131a:	ed87 0a03 	vstr	s0, [r7, #12]
			value = calculatePartialPressure(temp);
 800131e:	ed97 0a03 	vldr	s0, [r7, #12]
 8001322:	f7ff ff15 	bl	8001150 <calculatePartialPressure>
 8001326:	ed87 0a07 	vstr	s0, [r7, #28]
			break;
 800132a:	e023      	b.n	8001374 <getValue+0xc0>
		}

		case DEW_POINT_TEMPERATURE: {
			float temp = procTemperatureValue(HTU21D_ReadValue(TRIGGER_TEMP_MEASURE_HOLD));
 800132c:	20e3      	movs	r0, #227	; 0xe3
 800132e:	f7ff fe47 	bl	8000fc0 <HTU21D_ReadValue>
 8001332:	4603      	mov	r3, r0
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff fe6f 	bl	8001018 <procTemperatureValue>
 800133a:	ed87 0a06 	vstr	s0, [r7, #24]
			float hum = procHumidityValue(HTU21D_ReadValue(TRIGGER_HUMD_MEASURE_HOLD));
 800133e:	20e5      	movs	r0, #229	; 0xe5
 8001340:	f7ff fe3e 	bl	8000fc0 <HTU21D_ReadValue>
 8001344:	4603      	mov	r3, r0
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff fea0 	bl	800108c <procHumidityValue>
 800134c:	ed87 0a05 	vstr	s0, [r7, #20]
			float pressure = calculatePartialPressure(temp);
 8001350:	ed97 0a06 	vldr	s0, [r7, #24]
 8001354:	f7ff fefc 	bl	8001150 <calculatePartialPressure>
 8001358:	ed87 0a04 	vstr	s0, [r7, #16]
			value = calculateDewPointTemperature(hum, pressure);
 800135c:	edd7 0a04 	vldr	s1, [r7, #16]
 8001360:	ed97 0a05 	vldr	s0, [r7, #20]
 8001364:	f7ff ff38 	bl	80011d8 <calculateDewPointTemperature>
 8001368:	ed87 0a07 	vstr	s0, [r7, #28]
			break;
 800136c:	e002      	b.n	8001374 <getValue+0xc0>
		}

		default: {
			value = 0;
 800136e:	f04f 0300 	mov.w	r3, #0
 8001372:	61fb      	str	r3, [r7, #28]
		}
	}

	return value;
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	ee07 3a90 	vmov	s15, r3
}
 800137a:	eeb0 0a67 	vmov.f32	s0, s15
 800137e:	3720      	adds	r7, #32
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}

08001384 <isTriggered>:
  * @brief  Checks if a warning is set and if the warning is triggered
  * @param  value that needs to be checked
  * @param  value type that needs to be checked
  * @retval if the warning is triggered
  */
bool isTriggered(float value, CHECK_VALUE_TYPE value_type) {
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	ed87 0a01 	vstr	s0, [r7, #4]
 800138e:	4603      	mov	r3, r0
 8001390:	70fb      	strb	r3, [r7, #3]
	if(currentWarning.check_value_type == NONE || currentWarning.check_value_type != value_type) {
 8001392:	4b19      	ldr	r3, [pc, #100]	; (80013f8 <isTriggered+0x74>)
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d004      	beq.n	80013a4 <isTriggered+0x20>
 800139a:	4b17      	ldr	r3, [pc, #92]	; (80013f8 <isTriggered+0x74>)
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	78fa      	ldrb	r2, [r7, #3]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d001      	beq.n	80013a8 <isTriggered+0x24>
		return false;
 80013a4:	2300      	movs	r3, #0
 80013a6:	e020      	b.n	80013ea <isTriggered+0x66>
	}

	if(currentWarning.check_trigger == BELOW && value < currentWarning.check_threshold) {
 80013a8:	4b13      	ldr	r3, [pc, #76]	; (80013f8 <isTriggered+0x74>)
 80013aa:	785b      	ldrb	r3, [r3, #1]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d10b      	bne.n	80013c8 <isTriggered+0x44>
 80013b0:	4b11      	ldr	r3, [pc, #68]	; (80013f8 <isTriggered+0x74>)
 80013b2:	edd3 7a01 	vldr	s15, [r3, #4]
 80013b6:	ed97 7a01 	vldr	s14, [r7, #4]
 80013ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013c2:	d501      	bpl.n	80013c8 <isTriggered+0x44>
		return true;
 80013c4:	2301      	movs	r3, #1
 80013c6:	e010      	b.n	80013ea <isTriggered+0x66>
	}

	if(currentWarning.check_trigger == ABOVE && value > currentWarning.check_threshold) {
 80013c8:	4b0b      	ldr	r3, [pc, #44]	; (80013f8 <isTriggered+0x74>)
 80013ca:	785b      	ldrb	r3, [r3, #1]
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d10b      	bne.n	80013e8 <isTriggered+0x64>
 80013d0:	4b09      	ldr	r3, [pc, #36]	; (80013f8 <isTriggered+0x74>)
 80013d2:	edd3 7a01 	vldr	s15, [r3, #4]
 80013d6:	ed97 7a01 	vldr	s14, [r7, #4]
 80013da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013e2:	dd01      	ble.n	80013e8 <isTriggered+0x64>
		return true;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e000      	b.n	80013ea <isTriggered+0x66>
	}

	return false;
 80013e8:	2300      	movs	r3, #0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	370c      	adds	r7, #12
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	20000250 	.word	0x20000250

080013fc <buttoncheck>:

// counter muss ca 45 erreichen für eine sek
// ergo 5 sek = 45*5 = 225
uint16_t fcount = 225;
bool buttoncheck()
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
	int delay = 10; // Milliseconds
 8001402:	230a      	movs	r3, #10
 8001404:	60fb      	str	r3, [r7, #12]
	int val1 = HAL_GPIO_ReadPin(Button_GPIO_Port, Button_Pin);
 8001406:	2108      	movs	r1, #8
 8001408:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800140c:	f001 f95a 	bl	80026c4 <HAL_GPIO_ReadPin>
 8001410:	4603      	mov	r3, r0
 8001412:	60bb      	str	r3, [r7, #8]
	HAL_Delay(delay);
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	4618      	mov	r0, r3
 8001418:	f000 fe28 	bl	800206c <HAL_Delay>
	int val2 = HAL_GPIO_ReadPin(Button_GPIO_Port, Button_Pin);
 800141c:	2108      	movs	r1, #8
 800141e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001422:	f001 f94f 	bl	80026c4 <HAL_GPIO_ReadPin>
 8001426:	4603      	mov	r3, r0
 8001428:	607b      	str	r3, [r7, #4]
	HAL_Delay(delay);
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	4618      	mov	r0, r3
 800142e:	f000 fe1d 	bl	800206c <HAL_Delay>
	int val3 = HAL_GPIO_ReadPin(Button_GPIO_Port, Button_Pin);
 8001432:	2108      	movs	r1, #8
 8001434:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001438:	f001 f944 	bl	80026c4 <HAL_GPIO_ReadPin>
 800143c:	4603      	mov	r3, r0
 800143e:	603b      	str	r3, [r7, #0]

	return !(val1 && val2 && val3);
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d005      	beq.n	8001452 <buttoncheck+0x56>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d002      	beq.n	8001452 <buttoncheck+0x56>
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d101      	bne.n	8001456 <buttoncheck+0x5a>
 8001452:	2301      	movs	r3, #1
 8001454:	e000      	b.n	8001458 <buttoncheck+0x5c>
 8001456:	2300      	movs	r3, #0
 8001458:	f003 0301 	and.w	r3, r3, #1
 800145c:	b2db      	uxtb	r3, r3
	// 3x switch input
	// delay between getting inputs
	// only return true if all inputs are 0
}
 800145e:	4618      	mov	r0, r3
 8001460:	3710      	adds	r7, #16
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
	...

08001468 <sendData>:

void sendData(CHECK_VALUE_TYPE value_type) {
 8001468:	b580      	push	{r7, lr}
 800146a:	b0a0      	sub	sp, #128	; 0x80
 800146c:	af02      	add	r7, sp, #8
 800146e:	4603      	mov	r3, r0
 8001470:	71fb      	strb	r3, [r7, #7]
	char msg[100];
	float htu21d_value = 0;
 8001472:	f04f 0300 	mov.w	r3, #0
 8001476:	677b      	str	r3, [r7, #116]	; 0x74

	switch(value_type) {
 8001478:	79fb      	ldrb	r3, [r7, #7]
 800147a:	3b01      	subs	r3, #1
 800147c:	2b03      	cmp	r3, #3
 800147e:	f200 80d7 	bhi.w	8001630 <sendData+0x1c8>
 8001482:	a201      	add	r2, pc, #4	; (adr r2, 8001488 <sendData+0x20>)
 8001484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001488:	08001499 	.word	0x08001499
 800148c:	08001521 	.word	0x08001521
 8001490:	08001565 	.word	0x08001565
 8001494:	080015a9 	.word	0x080015a9
		case TEMPERATURE: {
			htu21d_value = getValue(TEMPERATURE);
 8001498:	2001      	movs	r0, #1
 800149a:	f7ff ff0b 	bl	80012b4 <getValue>
 800149e:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
			bool warning = isTriggered(htu21d_value, TEMPERATURE);
 80014a2:	2001      	movs	r0, #1
 80014a4:	ed97 0a1d 	vldr	s0, [r7, #116]	; 0x74
 80014a8:	f7ff ff6c 	bl	8001384 <isTriggered>
 80014ac:	4603      	mov	r3, r0
 80014ae:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
			if(!fahrenheit) {
 80014b2:	4b6b      	ldr	r3, [pc, #428]	; (8001660 <sendData+0x1f8>)
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	f083 0301 	eor.w	r3, r3, #1
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d014      	beq.n	80014ea <sendData+0x82>
				sprintf((char*)msg, "Temp C: %0.2f%s|Warning: %s\n\r", htu21d_value, "°C", warning ? "true" : "false");
 80014c0:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80014c2:	f7ff f841 	bl	8000548 <__aeabi_f2d>
 80014c6:	4602      	mov	r2, r0
 80014c8:	460b      	mov	r3, r1
 80014ca:	f897 1070 	ldrb.w	r1, [r7, #112]	; 0x70
 80014ce:	2900      	cmp	r1, #0
 80014d0:	d001      	beq.n	80014d6 <sendData+0x6e>
 80014d2:	4964      	ldr	r1, [pc, #400]	; (8001664 <sendData+0x1fc>)
 80014d4:	e000      	b.n	80014d8 <sendData+0x70>
 80014d6:	4964      	ldr	r1, [pc, #400]	; (8001668 <sendData+0x200>)
 80014d8:	f107 000c 	add.w	r0, r7, #12
 80014dc:	9101      	str	r1, [sp, #4]
 80014de:	4963      	ldr	r1, [pc, #396]	; (800166c <sendData+0x204>)
 80014e0:	9100      	str	r1, [sp, #0]
 80014e2:	4963      	ldr	r1, [pc, #396]	; (8001670 <sendData+0x208>)
 80014e4:	f005 fd4c 	bl	8006f80 <siprintf>
			} else {
				htu21d_value = calcCelsiusToFahrenheit(htu21d_value);
				sprintf((char*)msg, "Temp F: %0.2f%s|Warning: %s\n\r", htu21d_value, "°F", warning ? "true" : "false");
			}
			break;
 80014e8:	e0a3      	b.n	8001632 <sendData+0x1ca>
				htu21d_value = calcCelsiusToFahrenheit(htu21d_value);
 80014ea:	ed97 0a1d 	vldr	s0, [r7, #116]	; 0x74
 80014ee:	f7ff fe03 	bl	80010f8 <calcCelsiusToFahrenheit>
 80014f2:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
				sprintf((char*)msg, "Temp F: %0.2f%s|Warning: %s\n\r", htu21d_value, "°F", warning ? "true" : "false");
 80014f6:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80014f8:	f7ff f826 	bl	8000548 <__aeabi_f2d>
 80014fc:	4602      	mov	r2, r0
 80014fe:	460b      	mov	r3, r1
 8001500:	f897 1070 	ldrb.w	r1, [r7, #112]	; 0x70
 8001504:	2900      	cmp	r1, #0
 8001506:	d001      	beq.n	800150c <sendData+0xa4>
 8001508:	4956      	ldr	r1, [pc, #344]	; (8001664 <sendData+0x1fc>)
 800150a:	e000      	b.n	800150e <sendData+0xa6>
 800150c:	4956      	ldr	r1, [pc, #344]	; (8001668 <sendData+0x200>)
 800150e:	f107 000c 	add.w	r0, r7, #12
 8001512:	9101      	str	r1, [sp, #4]
 8001514:	4957      	ldr	r1, [pc, #348]	; (8001674 <sendData+0x20c>)
 8001516:	9100      	str	r1, [sp, #0]
 8001518:	4957      	ldr	r1, [pc, #348]	; (8001678 <sendData+0x210>)
 800151a:	f005 fd31 	bl	8006f80 <siprintf>
			break;
 800151e:	e088      	b.n	8001632 <sendData+0x1ca>
		}
		case HUMIDITY: {
			htu21d_value = getValue(HUMIDITY);
 8001520:	2002      	movs	r0, #2
 8001522:	f7ff fec7 	bl	80012b4 <getValue>
 8001526:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
			bool warning = isTriggered(htu21d_value, HUMIDITY);
 800152a:	2002      	movs	r0, #2
 800152c:	ed97 0a1d 	vldr	s0, [r7, #116]	; 0x74
 8001530:	f7ff ff28 	bl	8001384 <isTriggered>
 8001534:	4603      	mov	r3, r0
 8001536:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
			sprintf((char*)msg, "Humid: %0.2f%s|Warning: %s\n\r", htu21d_value, "%", warning ? "true" : "false");
 800153a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800153c:	f7ff f804 	bl	8000548 <__aeabi_f2d>
 8001540:	4602      	mov	r2, r0
 8001542:	460b      	mov	r3, r1
 8001544:	f897 1071 	ldrb.w	r1, [r7, #113]	; 0x71
 8001548:	2900      	cmp	r1, #0
 800154a:	d001      	beq.n	8001550 <sendData+0xe8>
 800154c:	4945      	ldr	r1, [pc, #276]	; (8001664 <sendData+0x1fc>)
 800154e:	e000      	b.n	8001552 <sendData+0xea>
 8001550:	4945      	ldr	r1, [pc, #276]	; (8001668 <sendData+0x200>)
 8001552:	f107 000c 	add.w	r0, r7, #12
 8001556:	9101      	str	r1, [sp, #4]
 8001558:	4948      	ldr	r1, [pc, #288]	; (800167c <sendData+0x214>)
 800155a:	9100      	str	r1, [sp, #0]
 800155c:	4948      	ldr	r1, [pc, #288]	; (8001680 <sendData+0x218>)
 800155e:	f005 fd0f 	bl	8006f80 <siprintf>
			break;
 8001562:	e066      	b.n	8001632 <sendData+0x1ca>
		}
		case PARTIAL_PRESSURE: {
			htu21d_value = getValue(PARTIAL_PRESSURE);
 8001564:	2003      	movs	r0, #3
 8001566:	f7ff fea5 	bl	80012b4 <getValue>
 800156a:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
			bool warning = isTriggered(htu21d_value, PARTIAL_PRESSURE);
 800156e:	2003      	movs	r0, #3
 8001570:	ed97 0a1d 	vldr	s0, [r7, #116]	; 0x74
 8001574:	f7ff ff06 	bl	8001384 <isTriggered>
 8001578:	4603      	mov	r3, r0
 800157a:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
			sprintf((char*)msg, "Pressure: %0.2f%s|Warning: %s\n\r", htu21d_value, " kPa", warning ? "true" : "false");
 800157e:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001580:	f7fe ffe2 	bl	8000548 <__aeabi_f2d>
 8001584:	4602      	mov	r2, r0
 8001586:	460b      	mov	r3, r1
 8001588:	f897 1072 	ldrb.w	r1, [r7, #114]	; 0x72
 800158c:	2900      	cmp	r1, #0
 800158e:	d001      	beq.n	8001594 <sendData+0x12c>
 8001590:	4934      	ldr	r1, [pc, #208]	; (8001664 <sendData+0x1fc>)
 8001592:	e000      	b.n	8001596 <sendData+0x12e>
 8001594:	4934      	ldr	r1, [pc, #208]	; (8001668 <sendData+0x200>)
 8001596:	f107 000c 	add.w	r0, r7, #12
 800159a:	9101      	str	r1, [sp, #4]
 800159c:	4939      	ldr	r1, [pc, #228]	; (8001684 <sendData+0x21c>)
 800159e:	9100      	str	r1, [sp, #0]
 80015a0:	4939      	ldr	r1, [pc, #228]	; (8001688 <sendData+0x220>)
 80015a2:	f005 fced 	bl	8006f80 <siprintf>
			break;
 80015a6:	e044      	b.n	8001632 <sendData+0x1ca>
		}
		case DEW_POINT_TEMPERATURE: {
			htu21d_value = getValue(DEW_POINT_TEMPERATURE);
 80015a8:	2004      	movs	r0, #4
 80015aa:	f7ff fe83 	bl	80012b4 <getValue>
 80015ae:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
			bool warning = isTriggered(htu21d_value, DEW_POINT_TEMPERATURE);
 80015b2:	2004      	movs	r0, #4
 80015b4:	ed97 0a1d 	vldr	s0, [r7, #116]	; 0x74
 80015b8:	f7ff fee4 	bl	8001384 <isTriggered>
 80015bc:	4603      	mov	r3, r0
 80015be:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
			if(!fahrenheit) {
 80015c2:	4b27      	ldr	r3, [pc, #156]	; (8001660 <sendData+0x1f8>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	f083 0301 	eor.w	r3, r3, #1
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d014      	beq.n	80015fa <sendData+0x192>
				sprintf((char*)msg, "Dew Point C: %0.2f%s|Warning: %s\n\r", htu21d_value, "°C", warning ? "true" : "false");
 80015d0:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80015d2:	f7fe ffb9 	bl	8000548 <__aeabi_f2d>
 80015d6:	4602      	mov	r2, r0
 80015d8:	460b      	mov	r3, r1
 80015da:	f897 1073 	ldrb.w	r1, [r7, #115]	; 0x73
 80015de:	2900      	cmp	r1, #0
 80015e0:	d001      	beq.n	80015e6 <sendData+0x17e>
 80015e2:	4920      	ldr	r1, [pc, #128]	; (8001664 <sendData+0x1fc>)
 80015e4:	e000      	b.n	80015e8 <sendData+0x180>
 80015e6:	4920      	ldr	r1, [pc, #128]	; (8001668 <sendData+0x200>)
 80015e8:	f107 000c 	add.w	r0, r7, #12
 80015ec:	9101      	str	r1, [sp, #4]
 80015ee:	491f      	ldr	r1, [pc, #124]	; (800166c <sendData+0x204>)
 80015f0:	9100      	str	r1, [sp, #0]
 80015f2:	4926      	ldr	r1, [pc, #152]	; (800168c <sendData+0x224>)
 80015f4:	f005 fcc4 	bl	8006f80 <siprintf>
			} else {
				htu21d_value = calcCelsiusToFahrenheit(htu21d_value);
				sprintf((char*)msg, "Dew Point F: %0.2f%s|Warning: %s\n\r", htu21d_value, "°F", warning ? "true" : "false");
			}
			break;
 80015f8:	e01b      	b.n	8001632 <sendData+0x1ca>
				htu21d_value = calcCelsiusToFahrenheit(htu21d_value);
 80015fa:	ed97 0a1d 	vldr	s0, [r7, #116]	; 0x74
 80015fe:	f7ff fd7b 	bl	80010f8 <calcCelsiusToFahrenheit>
 8001602:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
				sprintf((char*)msg, "Dew Point F: %0.2f%s|Warning: %s\n\r", htu21d_value, "°F", warning ? "true" : "false");
 8001606:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001608:	f7fe ff9e 	bl	8000548 <__aeabi_f2d>
 800160c:	4602      	mov	r2, r0
 800160e:	460b      	mov	r3, r1
 8001610:	f897 1073 	ldrb.w	r1, [r7, #115]	; 0x73
 8001614:	2900      	cmp	r1, #0
 8001616:	d001      	beq.n	800161c <sendData+0x1b4>
 8001618:	4912      	ldr	r1, [pc, #72]	; (8001664 <sendData+0x1fc>)
 800161a:	e000      	b.n	800161e <sendData+0x1b6>
 800161c:	4912      	ldr	r1, [pc, #72]	; (8001668 <sendData+0x200>)
 800161e:	f107 000c 	add.w	r0, r7, #12
 8001622:	9101      	str	r1, [sp, #4]
 8001624:	4913      	ldr	r1, [pc, #76]	; (8001674 <sendData+0x20c>)
 8001626:	9100      	str	r1, [sp, #0]
 8001628:	4919      	ldr	r1, [pc, #100]	; (8001690 <sendData+0x228>)
 800162a:	f005 fca9 	bl	8006f80 <siprintf>
			break;
 800162e:	e000      	b.n	8001632 <sendData+0x1ca>
		}
		default:{
			break;
 8001630:	bf00      	nop
		}
	}

	if(HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), 1000)==HAL_ERROR)Error_Handler();
 8001632:	f107 030c 	add.w	r3, r7, #12
 8001636:	4618      	mov	r0, r3
 8001638:	f7fe fdca 	bl	80001d0 <strlen>
 800163c:	4603      	mov	r3, r0
 800163e:	b29a      	uxth	r2, r3
 8001640:	f107 010c 	add.w	r1, r7, #12
 8001644:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001648:	4812      	ldr	r0, [pc, #72]	; (8001694 <sendData+0x22c>)
 800164a:	f003 ffd1 	bl	80055f0 <HAL_UART_Transmit>
 800164e:	4603      	mov	r3, r0
 8001650:	2b01      	cmp	r3, #1
 8001652:	d101      	bne.n	8001658 <sendData+0x1f0>
 8001654:	f000 fa18 	bl	8001a88 <Error_Handler>
}
 8001658:	bf00      	nop
 800165a:	3778      	adds	r7, #120	; 0x78
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	2000037d 	.word	0x2000037d
 8001664:	0800a7c8 	.word	0x0800a7c8
 8001668:	0800a7d0 	.word	0x0800a7d0
 800166c:	0800a7f8 	.word	0x0800a7f8
 8001670:	0800a7d8 	.word	0x0800a7d8
 8001674:	0800a81c 	.word	0x0800a81c
 8001678:	0800a7fc 	.word	0x0800a7fc
 800167c:	0800a840 	.word	0x0800a840
 8001680:	0800a820 	.word	0x0800a820
 8001684:	0800a864 	.word	0x0800a864
 8001688:	0800a844 	.word	0x0800a844
 800168c:	0800a86c 	.word	0x0800a86c
 8001690:	0800a890 	.word	0x0800a890
 8001694:	200002f8 	.word	0x200002f8

08001698 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001698:	b590      	push	{r4, r7, lr}
 800169a:	b097      	sub	sp, #92	; 0x5c
 800169c:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800169e:	f000 fc70 	bl	8001f82 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016a2:	f000 f887 	bl	80017b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016a6:	f000 f97f 	bl	80019a8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80016aa:	f000 f94d 	bl	8001948 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80016ae:	f000 f8e3 	bl	8001878 <MX_I2C1_Init>
  MX_TIM16_Init();
 80016b2:	f000 f921 	bl	80018f8 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  uint16_t value_type = 1;
 80016b6:	2301      	movs	r3, #1
 80016b8:	81fb      	strh	r3, [r7, #14]
  int counter = 0;
 80016ba:	2300      	movs	r3, #0
 80016bc:	60bb      	str	r3, [r7, #8]
  bool buttonpress = false;
 80016be:	2300      	movs	r3, #0
 80016c0:	71fb      	strb	r3, [r7, #7]
  HTU21D_Init(hi2c1);
 80016c2:	4c37      	ldr	r4, [pc, #220]	; (80017a0 <main+0x108>)
 80016c4:	4668      	mov	r0, sp
 80016c6:	f104 0310 	add.w	r3, r4, #16
 80016ca:	2244      	movs	r2, #68	; 0x44
 80016cc:	4619      	mov	r1, r3
 80016ce:	f004 ffd7 	bl	8006680 <memcpy>
 80016d2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80016d6:	f7ff fc39 	bl	8000f4c <HTU21D_Init>

  setWarning(TEMPERATURE, ABOVE, 28);
 80016da:	eeb3 0a0c 	vmov.f32	s0, #60	; 0x41e00000  28.0
 80016de:	2101      	movs	r1, #1
 80016e0:	2001      	movs	r0, #1
 80016e2:	f7ff fdcb 	bl	800127c <setWarning>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Base_Start_IT(&htim16);
 80016e6:	482f      	ldr	r0, [pc, #188]	; (80017a4 <main+0x10c>)
 80016e8:	f003 fd16 	bl	8005118 <HAL_TIM_Base_Start_IT>
  HTU21D_Soft_Reset();
 80016ec:	f7ff fc52 	bl	8000f94 <HTU21D_Soft_Reset>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 80016f0:	2201      	movs	r2, #1
 80016f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016fa:	f000 fffb 	bl	80026f4 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 80016fe:	2032      	movs	r0, #50	; 0x32
 8001700:	f000 fcb4 	bl	800206c <HAL_Delay>
  while (1)
  {
	buttonpress = buttoncheck();
 8001704:	f7ff fe7a 	bl	80013fc <buttoncheck>
 8001708:	4603      	mov	r3, r0
 800170a:	71fb      	strb	r3, [r7, #7]

	if(buttonpress) {
 800170c:	79fb      	ldrb	r3, [r7, #7]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d029      	beq.n	8001766 <main+0xce>
		//Nur für den ersten press soll der value type sich ändern (man will das durchcyclen verhindern)
		if(counter == 0) {
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d106      	bne.n	8001726 <main+0x8e>
			value_type = value_type % 4;
 8001718:	89fb      	ldrh	r3, [r7, #14]
 800171a:	f003 0303 	and.w	r3, r3, #3
 800171e:	81fb      	strh	r3, [r7, #14]
			// das enum beginnt mit NONE, wir wollen also 0 überspringen aber 1-4 haben
			value_type++;
 8001720:	89fb      	ldrh	r3, [r7, #14]
 8001722:	3301      	adds	r3, #1
 8001724:	81fb      	strh	r3, [r7, #14]
		}

		if(counter != -1) {
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800172c:	d002      	beq.n	8001734 <main+0x9c>
			counter++;
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	3301      	adds	r3, #1
 8001732:	60bb      	str	r3, [r7, #8]
		}
		// Umstellen von C auf F und vize versa
		if(counter >= fcount) {
 8001734:	4b1c      	ldr	r3, [pc, #112]	; (80017a8 <main+0x110>)
 8001736:	881b      	ldrh	r3, [r3, #0]
 8001738:	461a      	mov	r2, r3
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	4293      	cmp	r3, r2
 800173e:	db21      	blt.n	8001784 <main+0xec>
			fahrenheit = !fahrenheit;
 8001740:	4b1a      	ldr	r3, [pc, #104]	; (80017ac <main+0x114>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	2b00      	cmp	r3, #0
 8001746:	bf14      	ite	ne
 8001748:	2301      	movne	r3, #1
 800174a:	2300      	moveq	r3, #0
 800174c:	b2db      	uxtb	r3, r3
 800174e:	f083 0301 	eor.w	r3, r3, #1
 8001752:	b2db      	uxtb	r3, r3
 8001754:	f003 0301 	and.w	r3, r3, #1
 8001758:	b2da      	uxtb	r2, r3
 800175a:	4b14      	ldr	r3, [pc, #80]	; (80017ac <main+0x114>)
 800175c:	701a      	strb	r2, [r3, #0]
			// Verhindert, dass nach dem umsetzen die value types wieder geändert werden
			// Man muss den Button danach loslassen um wieder value types zu ändern
			counter = -1;
 800175e:	f04f 33ff 	mov.w	r3, #4294967295
 8001762:	60bb      	str	r3, [r7, #8]
 8001764:	e00e      	b.n	8001784 <main+0xec>
		}
	} else {
		//Zurücksetzen des counters, wenn er zu kurz gedrückt wurde
		if((counter > 0 || counter == -1) && counter < fcount) {
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	2b00      	cmp	r3, #0
 800176a:	dc03      	bgt.n	8001774 <main+0xdc>
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001772:	d107      	bne.n	8001784 <main+0xec>
 8001774:	4b0c      	ldr	r3, [pc, #48]	; (80017a8 <main+0x110>)
 8001776:	881b      	ldrh	r3, [r3, #0]
 8001778:	461a      	mov	r2, r3
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	4293      	cmp	r3, r2
 800177e:	da01      	bge.n	8001784 <main+0xec>
			counter = 0;
 8001780:	2300      	movs	r3, #0
 8001782:	60bb      	str	r3, [r7, #8]
		}
	}

	if(send_data)
 8001784:	4b0a      	ldr	r3, [pc, #40]	; (80017b0 <main+0x118>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d0bb      	beq.n	8001704 <main+0x6c>
	{
		send_data = false;
 800178c:	4b08      	ldr	r3, [pc, #32]	; (80017b0 <main+0x118>)
 800178e:	2200      	movs	r2, #0
 8001790:	701a      	strb	r2, [r3, #0]
		sendData(value_type);
 8001792:	89fb      	ldrh	r3, [r7, #14]
 8001794:	b2db      	uxtb	r3, r3
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff fe66 	bl	8001468 <sendData>
	buttonpress = buttoncheck();
 800179c:	e7b2      	b.n	8001704 <main+0x6c>
 800179e:	bf00      	nop
 80017a0:	20000258 	.word	0x20000258
 80017a4:	200002ac 	.word	0x200002ac
 80017a8:	20000000 	.word	0x20000000
 80017ac:	2000037d 	.word	0x2000037d
 80017b0:	2000037c 	.word	0x2000037c

080017b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b096      	sub	sp, #88	; 0x58
 80017b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017ba:	f107 0314 	add.w	r3, r7, #20
 80017be:	2244      	movs	r2, #68	; 0x44
 80017c0:	2100      	movs	r1, #0
 80017c2:	4618      	mov	r0, r3
 80017c4:	f004 ff6a 	bl	800669c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017c8:	463b      	mov	r3, r7
 80017ca:	2200      	movs	r2, #0
 80017cc:	601a      	str	r2, [r3, #0]
 80017ce:	605a      	str	r2, [r3, #4]
 80017d0:	609a      	str	r2, [r3, #8]
 80017d2:	60da      	str	r2, [r3, #12]
 80017d4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80017d6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80017da:	f002 fabf 	bl	8003d5c <HAL_PWREx_ControlVoltageScaling>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80017e4:	f000 f950 	bl	8001a88 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80017e8:	f002 fa9a 	bl	8003d20 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80017ec:	4b21      	ldr	r3, [pc, #132]	; (8001874 <SystemClock_Config+0xc0>)
 80017ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017f2:	4a20      	ldr	r2, [pc, #128]	; (8001874 <SystemClock_Config+0xc0>)
 80017f4:	f023 0318 	bic.w	r3, r3, #24
 80017f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80017fc:	2314      	movs	r3, #20
 80017fe:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001800:	2301      	movs	r3, #1
 8001802:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001804:	2301      	movs	r3, #1
 8001806:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001808:	2300      	movs	r3, #0
 800180a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800180c:	2360      	movs	r3, #96	; 0x60
 800180e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001810:	2302      	movs	r3, #2
 8001812:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001814:	2301      	movs	r3, #1
 8001816:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001818:	2301      	movs	r3, #1
 800181a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 800181c:	2310      	movs	r3, #16
 800181e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001820:	2307      	movs	r3, #7
 8001822:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001824:	2302      	movs	r3, #2
 8001826:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001828:	2302      	movs	r3, #2
 800182a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800182c:	f107 0314 	add.w	r3, r7, #20
 8001830:	4618      	mov	r0, r3
 8001832:	f002 fae9 	bl	8003e08 <HAL_RCC_OscConfig>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800183c:	f000 f924 	bl	8001a88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001840:	230f      	movs	r3, #15
 8001842:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001844:	2303      	movs	r3, #3
 8001846:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001848:	2300      	movs	r3, #0
 800184a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800184c:	2300      	movs	r3, #0
 800184e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001850:	2300      	movs	r3, #0
 8001852:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001854:	463b      	mov	r3, r7
 8001856:	2101      	movs	r1, #1
 8001858:	4618      	mov	r0, r3
 800185a:	f002 fee9 	bl	8004630 <HAL_RCC_ClockConfig>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001864:	f000 f910 	bl	8001a88 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001868:	f003 fafc 	bl	8004e64 <HAL_RCCEx_EnableMSIPLLMode>
}
 800186c:	bf00      	nop
 800186e:	3758      	adds	r7, #88	; 0x58
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	40021000 	.word	0x40021000

08001878 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800187c:	4b1b      	ldr	r3, [pc, #108]	; (80018ec <MX_I2C1_Init+0x74>)
 800187e:	4a1c      	ldr	r2, [pc, #112]	; (80018f0 <MX_I2C1_Init+0x78>)
 8001880:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8001882:	4b1a      	ldr	r3, [pc, #104]	; (80018ec <MX_I2C1_Init+0x74>)
 8001884:	4a1b      	ldr	r2, [pc, #108]	; (80018f4 <MX_I2C1_Init+0x7c>)
 8001886:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001888:	4b18      	ldr	r3, [pc, #96]	; (80018ec <MX_I2C1_Init+0x74>)
 800188a:	2200      	movs	r2, #0
 800188c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800188e:	4b17      	ldr	r3, [pc, #92]	; (80018ec <MX_I2C1_Init+0x74>)
 8001890:	2201      	movs	r2, #1
 8001892:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001894:	4b15      	ldr	r3, [pc, #84]	; (80018ec <MX_I2C1_Init+0x74>)
 8001896:	2200      	movs	r2, #0
 8001898:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800189a:	4b14      	ldr	r3, [pc, #80]	; (80018ec <MX_I2C1_Init+0x74>)
 800189c:	2200      	movs	r2, #0
 800189e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80018a0:	4b12      	ldr	r3, [pc, #72]	; (80018ec <MX_I2C1_Init+0x74>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018a6:	4b11      	ldr	r3, [pc, #68]	; (80018ec <MX_I2C1_Init+0x74>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018ac:	4b0f      	ldr	r3, [pc, #60]	; (80018ec <MX_I2C1_Init+0x74>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018b2:	480e      	ldr	r0, [pc, #56]	; (80018ec <MX_I2C1_Init+0x74>)
 80018b4:	f000 ff36 	bl	8002724 <HAL_I2C_Init>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80018be:	f000 f8e3 	bl	8001a88 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80018c2:	2100      	movs	r1, #0
 80018c4:	4809      	ldr	r0, [pc, #36]	; (80018ec <MX_I2C1_Init+0x74>)
 80018c6:	f002 f993 	bl	8003bf0 <HAL_I2CEx_ConfigAnalogFilter>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80018d0:	f000 f8da 	bl	8001a88 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80018d4:	2100      	movs	r1, #0
 80018d6:	4805      	ldr	r0, [pc, #20]	; (80018ec <MX_I2C1_Init+0x74>)
 80018d8:	f002 f9d5 	bl	8003c86 <HAL_I2CEx_ConfigDigitalFilter>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80018e2:	f000 f8d1 	bl	8001a88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	20000258 	.word	0x20000258
 80018f0:	40005400 	.word	0x40005400
 80018f4:	00707cbb 	.word	0x00707cbb

080018f8 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80018fc:	4b10      	ldr	r3, [pc, #64]	; (8001940 <MX_TIM16_Init+0x48>)
 80018fe:	4a11      	ldr	r2, [pc, #68]	; (8001944 <MX_TIM16_Init+0x4c>)
 8001900:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 31999;
 8001902:	4b0f      	ldr	r3, [pc, #60]	; (8001940 <MX_TIM16_Init+0x48>)
 8001904:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8001908:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800190a:	4b0d      	ldr	r3, [pc, #52]	; (8001940 <MX_TIM16_Init+0x48>)
 800190c:	2200      	movs	r2, #0
 800190e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1001;
 8001910:	4b0b      	ldr	r3, [pc, #44]	; (8001940 <MX_TIM16_Init+0x48>)
 8001912:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8001916:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001918:	4b09      	ldr	r3, [pc, #36]	; (8001940 <MX_TIM16_Init+0x48>)
 800191a:	2200      	movs	r2, #0
 800191c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800191e:	4b08      	ldr	r3, [pc, #32]	; (8001940 <MX_TIM16_Init+0x48>)
 8001920:	2200      	movs	r2, #0
 8001922:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001924:	4b06      	ldr	r3, [pc, #24]	; (8001940 <MX_TIM16_Init+0x48>)
 8001926:	2280      	movs	r2, #128	; 0x80
 8001928:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800192a:	4805      	ldr	r0, [pc, #20]	; (8001940 <MX_TIM16_Init+0x48>)
 800192c:	f003 fb9c 	bl	8005068 <HAL_TIM_Base_Init>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8001936:	f000 f8a7 	bl	8001a88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800193a:	bf00      	nop
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	200002ac 	.word	0x200002ac
 8001944:	40014400 	.word	0x40014400

08001948 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800194c:	4b14      	ldr	r3, [pc, #80]	; (80019a0 <MX_USART2_UART_Init+0x58>)
 800194e:	4a15      	ldr	r2, [pc, #84]	; (80019a4 <MX_USART2_UART_Init+0x5c>)
 8001950:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001952:	4b13      	ldr	r3, [pc, #76]	; (80019a0 <MX_USART2_UART_Init+0x58>)
 8001954:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001958:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800195a:	4b11      	ldr	r3, [pc, #68]	; (80019a0 <MX_USART2_UART_Init+0x58>)
 800195c:	2200      	movs	r2, #0
 800195e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001960:	4b0f      	ldr	r3, [pc, #60]	; (80019a0 <MX_USART2_UART_Init+0x58>)
 8001962:	2200      	movs	r2, #0
 8001964:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001966:	4b0e      	ldr	r3, [pc, #56]	; (80019a0 <MX_USART2_UART_Init+0x58>)
 8001968:	2200      	movs	r2, #0
 800196a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800196c:	4b0c      	ldr	r3, [pc, #48]	; (80019a0 <MX_USART2_UART_Init+0x58>)
 800196e:	220c      	movs	r2, #12
 8001970:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001972:	4b0b      	ldr	r3, [pc, #44]	; (80019a0 <MX_USART2_UART_Init+0x58>)
 8001974:	2200      	movs	r2, #0
 8001976:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001978:	4b09      	ldr	r3, [pc, #36]	; (80019a0 <MX_USART2_UART_Init+0x58>)
 800197a:	2200      	movs	r2, #0
 800197c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800197e:	4b08      	ldr	r3, [pc, #32]	; (80019a0 <MX_USART2_UART_Init+0x58>)
 8001980:	2200      	movs	r2, #0
 8001982:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001984:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <MX_USART2_UART_Init+0x58>)
 8001986:	2200      	movs	r2, #0
 8001988:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800198a:	4805      	ldr	r0, [pc, #20]	; (80019a0 <MX_USART2_UART_Init+0x58>)
 800198c:	f003 fde2 	bl	8005554 <HAL_UART_Init>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001996:	f000 f877 	bl	8001a88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800199a:	bf00      	nop
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	200002f8 	.word	0x200002f8
 80019a4:	40004400 	.word	0x40004400

080019a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b088      	sub	sp, #32
 80019ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ae:	f107 030c 	add.w	r3, r7, #12
 80019b2:	2200      	movs	r2, #0
 80019b4:	601a      	str	r2, [r3, #0]
 80019b6:	605a      	str	r2, [r3, #4]
 80019b8:	609a      	str	r2, [r3, #8]
 80019ba:	60da      	str	r2, [r3, #12]
 80019bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019be:	4b26      	ldr	r3, [pc, #152]	; (8001a58 <MX_GPIO_Init+0xb0>)
 80019c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019c2:	4a25      	ldr	r2, [pc, #148]	; (8001a58 <MX_GPIO_Init+0xb0>)
 80019c4:	f043 0304 	orr.w	r3, r3, #4
 80019c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019ca:	4b23      	ldr	r3, [pc, #140]	; (8001a58 <MX_GPIO_Init+0xb0>)
 80019cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ce:	f003 0304 	and.w	r3, r3, #4
 80019d2:	60bb      	str	r3, [r7, #8]
 80019d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d6:	4b20      	ldr	r3, [pc, #128]	; (8001a58 <MX_GPIO_Init+0xb0>)
 80019d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019da:	4a1f      	ldr	r2, [pc, #124]	; (8001a58 <MX_GPIO_Init+0xb0>)
 80019dc:	f043 0301 	orr.w	r3, r3, #1
 80019e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019e2:	4b1d      	ldr	r3, [pc, #116]	; (8001a58 <MX_GPIO_Init+0xb0>)
 80019e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019e6:	f003 0301 	and.w	r3, r3, #1
 80019ea:	607b      	str	r3, [r7, #4]
 80019ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ee:	4b1a      	ldr	r3, [pc, #104]	; (8001a58 <MX_GPIO_Init+0xb0>)
 80019f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f2:	4a19      	ldr	r2, [pc, #100]	; (8001a58 <MX_GPIO_Init+0xb0>)
 80019f4:	f043 0302 	orr.w	r3, r3, #2
 80019f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019fa:	4b17      	ldr	r3, [pc, #92]	; (8001a58 <MX_GPIO_Init+0xb0>)
 80019fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	603b      	str	r3, [r7, #0]
 8001a04:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001a06:	2200      	movs	r2, #0
 8001a08:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a10:	f000 fe70 	bl	80026f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 8001a14:	2308      	movs	r3, #8
 8001a16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8001a20:	f107 030c 	add.w	r3, r7, #12
 8001a24:	4619      	mov	r1, r3
 8001a26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a2a:	f000 fce1 	bl	80023f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001a2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a34:	2301      	movs	r3, #1
 8001a36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001a40:	f107 030c 	add.w	r3, r7, #12
 8001a44:	4619      	mov	r1, r3
 8001a46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a4a:	f000 fcd1 	bl	80023f0 <HAL_GPIO_Init>

}
 8001a4e:	bf00      	nop
 8001a50:	3720      	adds	r7, #32
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	40021000 	.word	0x40021000

08001a5c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]

	 if(htim == &htim16) {
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	4a06      	ldr	r2, [pc, #24]	; (8001a80 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d102      	bne.n	8001a72 <HAL_TIM_PeriodElapsedCallback+0x16>
		 send_data = true;
 8001a6c:	4b05      	ldr	r3, [pc, #20]	; (8001a84 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001a6e:	2201      	movs	r2, #1
 8001a70:	701a      	strb	r2, [r3, #0]
	 }

}
 8001a72:	bf00      	nop
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	200002ac 	.word	0x200002ac
 8001a84:	2000037c 	.word	0x2000037c

08001a88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a8c:	b672      	cpsid	i
}
 8001a8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a90:	e7fe      	b.n	8001a90 <Error_Handler+0x8>
	...

08001a94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a9a:	4b0f      	ldr	r3, [pc, #60]	; (8001ad8 <HAL_MspInit+0x44>)
 8001a9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a9e:	4a0e      	ldr	r2, [pc, #56]	; (8001ad8 <HAL_MspInit+0x44>)
 8001aa0:	f043 0301 	orr.w	r3, r3, #1
 8001aa4:	6613      	str	r3, [r2, #96]	; 0x60
 8001aa6:	4b0c      	ldr	r3, [pc, #48]	; (8001ad8 <HAL_MspInit+0x44>)
 8001aa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	607b      	str	r3, [r7, #4]
 8001ab0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ab2:	4b09      	ldr	r3, [pc, #36]	; (8001ad8 <HAL_MspInit+0x44>)
 8001ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab6:	4a08      	ldr	r2, [pc, #32]	; (8001ad8 <HAL_MspInit+0x44>)
 8001ab8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001abc:	6593      	str	r3, [r2, #88]	; 0x58
 8001abe:	4b06      	ldr	r3, [pc, #24]	; (8001ad8 <HAL_MspInit+0x44>)
 8001ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ac6:	603b      	str	r3, [r7, #0]
 8001ac8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aca:	bf00      	nop
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	40021000 	.word	0x40021000

08001adc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b09e      	sub	sp, #120	; 0x78
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]
 8001aec:	605a      	str	r2, [r3, #4]
 8001aee:	609a      	str	r2, [r3, #8]
 8001af0:	60da      	str	r2, [r3, #12]
 8001af2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001af4:	f107 0310 	add.w	r3, r7, #16
 8001af8:	2254      	movs	r2, #84	; 0x54
 8001afa:	2100      	movs	r1, #0
 8001afc:	4618      	mov	r0, r3
 8001afe:	f004 fdcd 	bl	800669c <memset>
  if(hi2c->Instance==I2C1)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a26      	ldr	r2, [pc, #152]	; (8001ba0 <HAL_I2C_MspInit+0xc4>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d145      	bne.n	8001b98 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001b0c:	2340      	movs	r3, #64	; 0x40
 8001b0e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001b10:	2300      	movs	r3, #0
 8001b12:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b14:	f107 0310 	add.w	r3, r7, #16
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f002 ffad 	bl	8004a78 <HAL_RCCEx_PeriphCLKConfig>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001b24:	f7ff ffb0 	bl	8001a88 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b28:	4b1e      	ldr	r3, [pc, #120]	; (8001ba4 <HAL_I2C_MspInit+0xc8>)
 8001b2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b2c:	4a1d      	ldr	r2, [pc, #116]	; (8001ba4 <HAL_I2C_MspInit+0xc8>)
 8001b2e:	f043 0302 	orr.w	r3, r3, #2
 8001b32:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b34:	4b1b      	ldr	r3, [pc, #108]	; (8001ba4 <HAL_I2C_MspInit+0xc8>)
 8001b36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b38:	f003 0302 	and.w	r3, r3, #2
 8001b3c:	60fb      	str	r3, [r7, #12]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b40:	23c0      	movs	r3, #192	; 0xc0
 8001b42:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b44:	2312      	movs	r3, #18
 8001b46:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b50:	2304      	movs	r3, #4
 8001b52:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b54:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001b58:	4619      	mov	r1, r3
 8001b5a:	4813      	ldr	r0, [pc, #76]	; (8001ba8 <HAL_I2C_MspInit+0xcc>)
 8001b5c:	f000 fc48 	bl	80023f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b60:	4b10      	ldr	r3, [pc, #64]	; (8001ba4 <HAL_I2C_MspInit+0xc8>)
 8001b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b64:	4a0f      	ldr	r2, [pc, #60]	; (8001ba4 <HAL_I2C_MspInit+0xc8>)
 8001b66:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b6a:	6593      	str	r3, [r2, #88]	; 0x58
 8001b6c:	4b0d      	ldr	r3, [pc, #52]	; (8001ba4 <HAL_I2C_MspInit+0xc8>)
 8001b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b74:	60bb      	str	r3, [r7, #8]
 8001b76:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001b78:	2200      	movs	r2, #0
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	201f      	movs	r0, #31
 8001b7e:	f000 fb74 	bl	800226a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001b82:	201f      	movs	r0, #31
 8001b84:	f000 fb8d 	bl	80022a2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001b88:	2200      	movs	r2, #0
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	2020      	movs	r0, #32
 8001b8e:	f000 fb6c 	bl	800226a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001b92:	2020      	movs	r0, #32
 8001b94:	f000 fb85 	bl	80022a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001b98:	bf00      	nop
 8001b9a:	3778      	adds	r7, #120	; 0x78
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	40005400 	.word	0x40005400
 8001ba4:	40021000 	.word	0x40021000
 8001ba8:	48000400 	.word	0x48000400

08001bac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a0d      	ldr	r2, [pc, #52]	; (8001bf0 <HAL_TIM_Base_MspInit+0x44>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d113      	bne.n	8001be6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001bbe:	4b0d      	ldr	r3, [pc, #52]	; (8001bf4 <HAL_TIM_Base_MspInit+0x48>)
 8001bc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bc2:	4a0c      	ldr	r2, [pc, #48]	; (8001bf4 <HAL_TIM_Base_MspInit+0x48>)
 8001bc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bc8:	6613      	str	r3, [r2, #96]	; 0x60
 8001bca:	4b0a      	ldr	r3, [pc, #40]	; (8001bf4 <HAL_TIM_Base_MspInit+0x48>)
 8001bcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd2:	60fb      	str	r3, [r7, #12]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	2100      	movs	r1, #0
 8001bda:	2019      	movs	r0, #25
 8001bdc:	f000 fb45 	bl	800226a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001be0:	2019      	movs	r0, #25
 8001be2:	f000 fb5e 	bl	80022a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001be6:	bf00      	nop
 8001be8:	3710      	adds	r7, #16
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	40014400 	.word	0x40014400
 8001bf4:	40021000 	.word	0x40021000

08001bf8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b09e      	sub	sp, #120	; 0x78
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c00:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	605a      	str	r2, [r3, #4]
 8001c0a:	609a      	str	r2, [r3, #8]
 8001c0c:	60da      	str	r2, [r3, #12]
 8001c0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c10:	f107 0310 	add.w	r3, r7, #16
 8001c14:	2254      	movs	r2, #84	; 0x54
 8001c16:	2100      	movs	r1, #0
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f004 fd3f 	bl	800669c <memset>
  if(huart->Instance==USART2)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a2c      	ldr	r2, [pc, #176]	; (8001cd4 <HAL_UART_MspInit+0xdc>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d150      	bne.n	8001cca <HAL_UART_MspInit+0xd2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001c28:	2302      	movs	r3, #2
 8001c2a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c30:	f107 0310 	add.w	r3, r7, #16
 8001c34:	4618      	mov	r0, r3
 8001c36:	f002 ff1f 	bl	8004a78 <HAL_RCCEx_PeriphCLKConfig>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001c40:	f7ff ff22 	bl	8001a88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c44:	4b24      	ldr	r3, [pc, #144]	; (8001cd8 <HAL_UART_MspInit+0xe0>)
 8001c46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c48:	4a23      	ldr	r2, [pc, #140]	; (8001cd8 <HAL_UART_MspInit+0xe0>)
 8001c4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c4e:	6593      	str	r3, [r2, #88]	; 0x58
 8001c50:	4b21      	ldr	r3, [pc, #132]	; (8001cd8 <HAL_UART_MspInit+0xe0>)
 8001c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c58:	60fb      	str	r3, [r7, #12]
 8001c5a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c5c:	4b1e      	ldr	r3, [pc, #120]	; (8001cd8 <HAL_UART_MspInit+0xe0>)
 8001c5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c60:	4a1d      	ldr	r2, [pc, #116]	; (8001cd8 <HAL_UART_MspInit+0xe0>)
 8001c62:	f043 0301 	orr.w	r3, r3, #1
 8001c66:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c68:	4b1b      	ldr	r3, [pc, #108]	; (8001cd8 <HAL_UART_MspInit+0xe0>)
 8001c6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c6c:	f003 0301 	and.w	r3, r3, #1
 8001c70:	60bb      	str	r3, [r7, #8]
 8001c72:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001c74:	2304      	movs	r3, #4
 8001c76:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c78:	2302      	movs	r3, #2
 8001c7a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c80:	2303      	movs	r3, #3
 8001c82:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c84:	2307      	movs	r3, #7
 8001c86:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001c88:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c92:	f000 fbad 	bl	80023f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001c96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c9a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001cac:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cb6:	f000 fb9b 	bl	80023f0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001cba:	2200      	movs	r2, #0
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	2026      	movs	r0, #38	; 0x26
 8001cc0:	f000 fad3 	bl	800226a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001cc4:	2026      	movs	r0, #38	; 0x26
 8001cc6:	f000 faec 	bl	80022a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001cca:	bf00      	nop
 8001ccc:	3778      	adds	r7, #120	; 0x78
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	40004400 	.word	0x40004400
 8001cd8:	40021000 	.word	0x40021000

08001cdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ce0:	e7fe      	b.n	8001ce0 <NMI_Handler+0x4>

08001ce2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ce6:	e7fe      	b.n	8001ce6 <HardFault_Handler+0x4>

08001ce8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cec:	e7fe      	b.n	8001cec <MemManage_Handler+0x4>

08001cee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cf2:	e7fe      	b.n	8001cf2 <BusFault_Handler+0x4>

08001cf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cf8:	e7fe      	b.n	8001cf8 <UsageFault_Handler+0x4>

08001cfa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cfe:	bf00      	nop
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d0c:	bf00      	nop
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr

08001d16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d16:	b480      	push	{r7}
 8001d18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d1a:	bf00      	nop
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d28:	f000 f980 	bl	800202c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d2c:	bf00      	nop
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001d34:	4802      	ldr	r0, [pc, #8]	; (8001d40 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001d36:	f003 fa43 	bl	80051c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001d3a:	bf00      	nop
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	200002ac 	.word	0x200002ac

08001d44 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001d48:	4802      	ldr	r0, [pc, #8]	; (8001d54 <I2C1_EV_IRQHandler+0x10>)
 8001d4a:	f000 ff65 	bl	8002c18 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001d4e:	bf00      	nop
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	20000258 	.word	0x20000258

08001d58 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001d5c:	4802      	ldr	r0, [pc, #8]	; (8001d68 <I2C1_ER_IRQHandler+0x10>)
 8001d5e:	f000 ff75 	bl	8002c4c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001d62:	bf00      	nop
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	20000258 	.word	0x20000258

08001d6c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d70:	4802      	ldr	r0, [pc, #8]	; (8001d7c <USART2_IRQHandler+0x10>)
 8001d72:	f003 fcd1 	bl	8005718 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d76:	bf00      	nop
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	200002f8 	.word	0x200002f8

08001d80 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
	return 1;
 8001d84:	2301      	movs	r3, #1
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <_kill>:

int _kill(int pid, int sig)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001d9a:	f004 fc47 	bl	800662c <__errno>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2216      	movs	r2, #22
 8001da2:	601a      	str	r2, [r3, #0]
	return -1;
 8001da4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3708      	adds	r7, #8
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <_exit>:

void _exit (int status)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001db8:	f04f 31ff 	mov.w	r1, #4294967295
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f7ff ffe7 	bl	8001d90 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001dc2:	e7fe      	b.n	8001dc2 <_exit+0x12>

08001dc4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b086      	sub	sp, #24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	60f8      	str	r0, [r7, #12]
 8001dcc:	60b9      	str	r1, [r7, #8]
 8001dce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	617b      	str	r3, [r7, #20]
 8001dd4:	e00a      	b.n	8001dec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001dd6:	f3af 8000 	nop.w
 8001dda:	4601      	mov	r1, r0
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	1c5a      	adds	r2, r3, #1
 8001de0:	60ba      	str	r2, [r7, #8]
 8001de2:	b2ca      	uxtb	r2, r1
 8001de4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	3301      	adds	r3, #1
 8001dea:	617b      	str	r3, [r7, #20]
 8001dec:	697a      	ldr	r2, [r7, #20]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	dbf0      	blt.n	8001dd6 <_read+0x12>
	}

return len;
 8001df4:	687b      	ldr	r3, [r7, #4]
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3718      	adds	r7, #24
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b086      	sub	sp, #24
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	60f8      	str	r0, [r7, #12]
 8001e06:	60b9      	str	r1, [r7, #8]
 8001e08:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	617b      	str	r3, [r7, #20]
 8001e0e:	e009      	b.n	8001e24 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	1c5a      	adds	r2, r3, #1
 8001e14:	60ba      	str	r2, [r7, #8]
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	3301      	adds	r3, #1
 8001e22:	617b      	str	r3, [r7, #20]
 8001e24:	697a      	ldr	r2, [r7, #20]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	dbf1      	blt.n	8001e10 <_write+0x12>
	}
	return len;
 8001e2c:	687b      	ldr	r3, [r7, #4]
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3718      	adds	r7, #24
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <_close>:

int _close(int file)
{
 8001e36:	b480      	push	{r7}
 8001e38:	b083      	sub	sp, #12
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
	return -1;
 8001e3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	370c      	adds	r7, #12
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr

08001e4e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	b083      	sub	sp, #12
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
 8001e56:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e5e:	605a      	str	r2, [r3, #4]
	return 0;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr

08001e6e <_isatty>:

int _isatty(int file)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	b083      	sub	sp, #12
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
	return 1;
 8001e76:	2301      	movs	r3, #1
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	60b9      	str	r1, [r7, #8]
 8001e8e:	607a      	str	r2, [r7, #4]
	return 0;
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3714      	adds	r7, #20
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
	...

08001ea0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b086      	sub	sp, #24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ea8:	4a14      	ldr	r2, [pc, #80]	; (8001efc <_sbrk+0x5c>)
 8001eaa:	4b15      	ldr	r3, [pc, #84]	; (8001f00 <_sbrk+0x60>)
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001eb4:	4b13      	ldr	r3, [pc, #76]	; (8001f04 <_sbrk+0x64>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d102      	bne.n	8001ec2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ebc:	4b11      	ldr	r3, [pc, #68]	; (8001f04 <_sbrk+0x64>)
 8001ebe:	4a12      	ldr	r2, [pc, #72]	; (8001f08 <_sbrk+0x68>)
 8001ec0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ec2:	4b10      	ldr	r3, [pc, #64]	; (8001f04 <_sbrk+0x64>)
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4413      	add	r3, r2
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d207      	bcs.n	8001ee0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ed0:	f004 fbac 	bl	800662c <__errno>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	220c      	movs	r2, #12
 8001ed8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001eda:	f04f 33ff 	mov.w	r3, #4294967295
 8001ede:	e009      	b.n	8001ef4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ee0:	4b08      	ldr	r3, [pc, #32]	; (8001f04 <_sbrk+0x64>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ee6:	4b07      	ldr	r3, [pc, #28]	; (8001f04 <_sbrk+0x64>)
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4413      	add	r3, r2
 8001eee:	4a05      	ldr	r2, [pc, #20]	; (8001f04 <_sbrk+0x64>)
 8001ef0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3718      	adds	r7, #24
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	20010000 	.word	0x20010000
 8001f00:	00000400 	.word	0x00000400
 8001f04:	20000380 	.word	0x20000380
 8001f08:	20000398 	.word	0x20000398

08001f0c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001f10:	4b06      	ldr	r3, [pc, #24]	; (8001f2c <SystemInit+0x20>)
 8001f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f16:	4a05      	ldr	r2, [pc, #20]	; (8001f2c <SystemInit+0x20>)
 8001f18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001f20:	bf00      	nop
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	e000ed00 	.word	0xe000ed00

08001f30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001f30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f68 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f34:	f7ff ffea 	bl	8001f0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f38:	480c      	ldr	r0, [pc, #48]	; (8001f6c <LoopForever+0x6>)
  ldr r1, =_edata
 8001f3a:	490d      	ldr	r1, [pc, #52]	; (8001f70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f3c:	4a0d      	ldr	r2, [pc, #52]	; (8001f74 <LoopForever+0xe>)
  movs r3, #0
 8001f3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f40:	e002      	b.n	8001f48 <LoopCopyDataInit>

08001f42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f46:	3304      	adds	r3, #4

08001f48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f4c:	d3f9      	bcc.n	8001f42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f4e:	4a0a      	ldr	r2, [pc, #40]	; (8001f78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f50:	4c0a      	ldr	r4, [pc, #40]	; (8001f7c <LoopForever+0x16>)
  movs r3, #0
 8001f52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f54:	e001      	b.n	8001f5a <LoopFillZerobss>

08001f56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f58:	3204      	adds	r2, #4

08001f5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f5c:	d3fb      	bcc.n	8001f56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f5e:	f004 fb6b 	bl	8006638 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f62:	f7ff fb99 	bl	8001698 <main>

08001f66 <LoopForever>:

LoopForever:
    b LoopForever
 8001f66:	e7fe      	b.n	8001f66 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001f68:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001f6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f70:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001f74:	0800ad18 	.word	0x0800ad18
  ldr r2, =_sbss
 8001f78:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001f7c:	20000398 	.word	0x20000398

08001f80 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f80:	e7fe      	b.n	8001f80 <ADC1_IRQHandler>

08001f82 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b082      	sub	sp, #8
 8001f86:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f8c:	2003      	movs	r0, #3
 8001f8e:	f000 f961 	bl	8002254 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f92:	2000      	movs	r0, #0
 8001f94:	f000 f80e 	bl	8001fb4 <HAL_InitTick>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d002      	beq.n	8001fa4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	71fb      	strb	r3, [r7, #7]
 8001fa2:	e001      	b.n	8001fa8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001fa4:	f7ff fd76 	bl	8001a94 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001fa8:	79fb      	ldrb	r3, [r7, #7]
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
	...

08001fb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001fc0:	4b17      	ldr	r3, [pc, #92]	; (8002020 <HAL_InitTick+0x6c>)
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d023      	beq.n	8002010 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001fc8:	4b16      	ldr	r3, [pc, #88]	; (8002024 <HAL_InitTick+0x70>)
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	4b14      	ldr	r3, [pc, #80]	; (8002020 <HAL_InitTick+0x6c>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f000 f96d 	bl	80022be <HAL_SYSTICK_Config>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d10f      	bne.n	800200a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2b0f      	cmp	r3, #15
 8001fee:	d809      	bhi.n	8002004 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	6879      	ldr	r1, [r7, #4]
 8001ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ff8:	f000 f937 	bl	800226a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ffc:	4a0a      	ldr	r2, [pc, #40]	; (8002028 <HAL_InitTick+0x74>)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6013      	str	r3, [r2, #0]
 8002002:	e007      	b.n	8002014 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	73fb      	strb	r3, [r7, #15]
 8002008:	e004      	b.n	8002014 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	73fb      	strb	r3, [r7, #15]
 800200e:	e001      	b.n	8002014 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002014:	7bfb      	ldrb	r3, [r7, #15]
}
 8002016:	4618      	mov	r0, r3
 8002018:	3710      	adds	r7, #16
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	2000000c 	.word	0x2000000c
 8002024:	20000004 	.word	0x20000004
 8002028:	20000008 	.word	0x20000008

0800202c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002030:	4b06      	ldr	r3, [pc, #24]	; (800204c <HAL_IncTick+0x20>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	461a      	mov	r2, r3
 8002036:	4b06      	ldr	r3, [pc, #24]	; (8002050 <HAL_IncTick+0x24>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4413      	add	r3, r2
 800203c:	4a04      	ldr	r2, [pc, #16]	; (8002050 <HAL_IncTick+0x24>)
 800203e:	6013      	str	r3, [r2, #0]
}
 8002040:	bf00      	nop
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	2000000c 	.word	0x2000000c
 8002050:	20000384 	.word	0x20000384

08002054 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  return uwTick;
 8002058:	4b03      	ldr	r3, [pc, #12]	; (8002068 <HAL_GetTick+0x14>)
 800205a:	681b      	ldr	r3, [r3, #0]
}
 800205c:	4618      	mov	r0, r3
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	20000384 	.word	0x20000384

0800206c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002074:	f7ff ffee 	bl	8002054 <HAL_GetTick>
 8002078:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002084:	d005      	beq.n	8002092 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002086:	4b0a      	ldr	r3, [pc, #40]	; (80020b0 <HAL_Delay+0x44>)
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	461a      	mov	r2, r3
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	4413      	add	r3, r2
 8002090:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002092:	bf00      	nop
 8002094:	f7ff ffde 	bl	8002054 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	68fa      	ldr	r2, [r7, #12]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d8f7      	bhi.n	8002094 <HAL_Delay+0x28>
  {
  }
}
 80020a4:	bf00      	nop
 80020a6:	bf00      	nop
 80020a8:	3710      	adds	r7, #16
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	2000000c 	.word	0x2000000c

080020b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b085      	sub	sp, #20
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f003 0307 	and.w	r3, r3, #7
 80020c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020c4:	4b0c      	ldr	r3, [pc, #48]	; (80020f8 <__NVIC_SetPriorityGrouping+0x44>)
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020ca:	68ba      	ldr	r2, [r7, #8]
 80020cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020d0:	4013      	ands	r3, r2
 80020d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020e6:	4a04      	ldr	r2, [pc, #16]	; (80020f8 <__NVIC_SetPriorityGrouping+0x44>)
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	60d3      	str	r3, [r2, #12]
}
 80020ec:	bf00      	nop
 80020ee:	3714      	adds	r7, #20
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr
 80020f8:	e000ed00 	.word	0xe000ed00

080020fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002100:	4b04      	ldr	r3, [pc, #16]	; (8002114 <__NVIC_GetPriorityGrouping+0x18>)
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	0a1b      	lsrs	r3, r3, #8
 8002106:	f003 0307 	and.w	r3, r3, #7
}
 800210a:	4618      	mov	r0, r3
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr
 8002114:	e000ed00 	.word	0xe000ed00

08002118 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	4603      	mov	r3, r0
 8002120:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002126:	2b00      	cmp	r3, #0
 8002128:	db0b      	blt.n	8002142 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800212a:	79fb      	ldrb	r3, [r7, #7]
 800212c:	f003 021f 	and.w	r2, r3, #31
 8002130:	4907      	ldr	r1, [pc, #28]	; (8002150 <__NVIC_EnableIRQ+0x38>)
 8002132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002136:	095b      	lsrs	r3, r3, #5
 8002138:	2001      	movs	r0, #1
 800213a:	fa00 f202 	lsl.w	r2, r0, r2
 800213e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002142:	bf00      	nop
 8002144:	370c      	adds	r7, #12
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	e000e100 	.word	0xe000e100

08002154 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	4603      	mov	r3, r0
 800215c:	6039      	str	r1, [r7, #0]
 800215e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002164:	2b00      	cmp	r3, #0
 8002166:	db0a      	blt.n	800217e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	b2da      	uxtb	r2, r3
 800216c:	490c      	ldr	r1, [pc, #48]	; (80021a0 <__NVIC_SetPriority+0x4c>)
 800216e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002172:	0112      	lsls	r2, r2, #4
 8002174:	b2d2      	uxtb	r2, r2
 8002176:	440b      	add	r3, r1
 8002178:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800217c:	e00a      	b.n	8002194 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	b2da      	uxtb	r2, r3
 8002182:	4908      	ldr	r1, [pc, #32]	; (80021a4 <__NVIC_SetPriority+0x50>)
 8002184:	79fb      	ldrb	r3, [r7, #7]
 8002186:	f003 030f 	and.w	r3, r3, #15
 800218a:	3b04      	subs	r3, #4
 800218c:	0112      	lsls	r2, r2, #4
 800218e:	b2d2      	uxtb	r2, r2
 8002190:	440b      	add	r3, r1
 8002192:	761a      	strb	r2, [r3, #24]
}
 8002194:	bf00      	nop
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr
 80021a0:	e000e100 	.word	0xe000e100
 80021a4:	e000ed00 	.word	0xe000ed00

080021a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b089      	sub	sp, #36	; 0x24
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	60f8      	str	r0, [r7, #12]
 80021b0:	60b9      	str	r1, [r7, #8]
 80021b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	f003 0307 	and.w	r3, r3, #7
 80021ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	f1c3 0307 	rsb	r3, r3, #7
 80021c2:	2b04      	cmp	r3, #4
 80021c4:	bf28      	it	cs
 80021c6:	2304      	movcs	r3, #4
 80021c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	3304      	adds	r3, #4
 80021ce:	2b06      	cmp	r3, #6
 80021d0:	d902      	bls.n	80021d8 <NVIC_EncodePriority+0x30>
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	3b03      	subs	r3, #3
 80021d6:	e000      	b.n	80021da <NVIC_EncodePriority+0x32>
 80021d8:	2300      	movs	r3, #0
 80021da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021dc:	f04f 32ff 	mov.w	r2, #4294967295
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	fa02 f303 	lsl.w	r3, r2, r3
 80021e6:	43da      	mvns	r2, r3
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	401a      	ands	r2, r3
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021f0:	f04f 31ff 	mov.w	r1, #4294967295
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	fa01 f303 	lsl.w	r3, r1, r3
 80021fa:	43d9      	mvns	r1, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002200:	4313      	orrs	r3, r2
         );
}
 8002202:	4618      	mov	r0, r3
 8002204:	3724      	adds	r7, #36	; 0x24
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
	...

08002210 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	3b01      	subs	r3, #1
 800221c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002220:	d301      	bcc.n	8002226 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002222:	2301      	movs	r3, #1
 8002224:	e00f      	b.n	8002246 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002226:	4a0a      	ldr	r2, [pc, #40]	; (8002250 <SysTick_Config+0x40>)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	3b01      	subs	r3, #1
 800222c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800222e:	210f      	movs	r1, #15
 8002230:	f04f 30ff 	mov.w	r0, #4294967295
 8002234:	f7ff ff8e 	bl	8002154 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002238:	4b05      	ldr	r3, [pc, #20]	; (8002250 <SysTick_Config+0x40>)
 800223a:	2200      	movs	r2, #0
 800223c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800223e:	4b04      	ldr	r3, [pc, #16]	; (8002250 <SysTick_Config+0x40>)
 8002240:	2207      	movs	r2, #7
 8002242:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002244:	2300      	movs	r3, #0
}
 8002246:	4618      	mov	r0, r3
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	e000e010 	.word	0xe000e010

08002254 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f7ff ff29 	bl	80020b4 <__NVIC_SetPriorityGrouping>
}
 8002262:	bf00      	nop
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}

0800226a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800226a:	b580      	push	{r7, lr}
 800226c:	b086      	sub	sp, #24
 800226e:	af00      	add	r7, sp, #0
 8002270:	4603      	mov	r3, r0
 8002272:	60b9      	str	r1, [r7, #8]
 8002274:	607a      	str	r2, [r7, #4]
 8002276:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002278:	2300      	movs	r3, #0
 800227a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800227c:	f7ff ff3e 	bl	80020fc <__NVIC_GetPriorityGrouping>
 8002280:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	68b9      	ldr	r1, [r7, #8]
 8002286:	6978      	ldr	r0, [r7, #20]
 8002288:	f7ff ff8e 	bl	80021a8 <NVIC_EncodePriority>
 800228c:	4602      	mov	r2, r0
 800228e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002292:	4611      	mov	r1, r2
 8002294:	4618      	mov	r0, r3
 8002296:	f7ff ff5d 	bl	8002154 <__NVIC_SetPriority>
}
 800229a:	bf00      	nop
 800229c:	3718      	adds	r7, #24
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022a2:	b580      	push	{r7, lr}
 80022a4:	b082      	sub	sp, #8
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	4603      	mov	r3, r0
 80022aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7ff ff31 	bl	8002118 <__NVIC_EnableIRQ>
}
 80022b6:	bf00      	nop
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022be:	b580      	push	{r7, lr}
 80022c0:	b082      	sub	sp, #8
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f7ff ffa2 	bl	8002210 <SysTick_Config>
 80022cc:	4603      	mov	r3, r0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}

080022d6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80022d6:	b480      	push	{r7}
 80022d8:	b085      	sub	sp, #20
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022de:	2300      	movs	r3, #0
 80022e0:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d008      	beq.n	8002300 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2204      	movs	r2, #4
 80022f2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2200      	movs	r2, #0
 80022f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e022      	b.n	8002346 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f022 020e 	bic.w	r2, r2, #14
 800230e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f022 0201 	bic.w	r2, r2, #1
 800231e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002324:	f003 021c 	and.w	r2, r3, #28
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232c:	2101      	movs	r1, #1
 800232e:	fa01 f202 	lsl.w	r2, r1, r2
 8002332:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002344:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002346:	4618      	mov	r0, r3
 8002348:	3714      	adds	r7, #20
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr

08002352 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002352:	b580      	push	{r7, lr}
 8002354:	b084      	sub	sp, #16
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800235a:	2300      	movs	r3, #0
 800235c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002364:	b2db      	uxtb	r3, r3
 8002366:	2b02      	cmp	r3, #2
 8002368:	d005      	beq.n	8002376 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2204      	movs	r2, #4
 800236e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	73fb      	strb	r3, [r7, #15]
 8002374:	e029      	b.n	80023ca <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f022 020e 	bic.w	r2, r2, #14
 8002384:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f022 0201 	bic.w	r2, r2, #1
 8002394:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800239a:	f003 021c 	and.w	r2, r3, #28
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a2:	2101      	movs	r1, #1
 80023a4:	fa01 f202 	lsl.w	r2, r1, r2
 80023a8:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2201      	movs	r2, #1
 80023ae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d003      	beq.n	80023ca <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	4798      	blx	r3
    }
  }
  return status;
 80023ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3710      	adds	r7, #16
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80023e2:	b2db      	uxtb	r3, r3
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b087      	sub	sp, #28
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023fa:	2300      	movs	r3, #0
 80023fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023fe:	e148      	b.n	8002692 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	2101      	movs	r1, #1
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	fa01 f303 	lsl.w	r3, r1, r3
 800240c:	4013      	ands	r3, r2
 800240e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2b00      	cmp	r3, #0
 8002414:	f000 813a 	beq.w	800268c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f003 0303 	and.w	r3, r3, #3
 8002420:	2b01      	cmp	r3, #1
 8002422:	d005      	beq.n	8002430 <HAL_GPIO_Init+0x40>
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f003 0303 	and.w	r3, r3, #3
 800242c:	2b02      	cmp	r3, #2
 800242e:	d130      	bne.n	8002492 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	2203      	movs	r2, #3
 800243c:	fa02 f303 	lsl.w	r3, r2, r3
 8002440:	43db      	mvns	r3, r3
 8002442:	693a      	ldr	r2, [r7, #16]
 8002444:	4013      	ands	r3, r2
 8002446:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	68da      	ldr	r2, [r3, #12]
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	005b      	lsls	r3, r3, #1
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	693a      	ldr	r2, [r7, #16]
 8002456:	4313      	orrs	r3, r2
 8002458:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	693a      	ldr	r2, [r7, #16]
 800245e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002466:	2201      	movs	r2, #1
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	fa02 f303 	lsl.w	r3, r2, r3
 800246e:	43db      	mvns	r3, r3
 8002470:	693a      	ldr	r2, [r7, #16]
 8002472:	4013      	ands	r3, r2
 8002474:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	091b      	lsrs	r3, r3, #4
 800247c:	f003 0201 	and.w	r2, r3, #1
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	fa02 f303 	lsl.w	r3, r2, r3
 8002486:	693a      	ldr	r2, [r7, #16]
 8002488:	4313      	orrs	r3, r2
 800248a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	693a      	ldr	r2, [r7, #16]
 8002490:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f003 0303 	and.w	r3, r3, #3
 800249a:	2b03      	cmp	r3, #3
 800249c:	d017      	beq.n	80024ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	005b      	lsls	r3, r3, #1
 80024a8:	2203      	movs	r2, #3
 80024aa:	fa02 f303 	lsl.w	r3, r2, r3
 80024ae:	43db      	mvns	r3, r3
 80024b0:	693a      	ldr	r2, [r7, #16]
 80024b2:	4013      	ands	r3, r2
 80024b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	689a      	ldr	r2, [r3, #8]
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	005b      	lsls	r3, r3, #1
 80024be:	fa02 f303 	lsl.w	r3, r2, r3
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f003 0303 	and.w	r3, r3, #3
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d123      	bne.n	8002522 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	08da      	lsrs	r2, r3, #3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	3208      	adds	r2, #8
 80024e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	f003 0307 	and.w	r3, r3, #7
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	220f      	movs	r2, #15
 80024f2:	fa02 f303 	lsl.w	r3, r2, r3
 80024f6:	43db      	mvns	r3, r3
 80024f8:	693a      	ldr	r2, [r7, #16]
 80024fa:	4013      	ands	r3, r2
 80024fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	691a      	ldr	r2, [r3, #16]
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	f003 0307 	and.w	r3, r3, #7
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	fa02 f303 	lsl.w	r3, r2, r3
 800250e:	693a      	ldr	r2, [r7, #16]
 8002510:	4313      	orrs	r3, r2
 8002512:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	08da      	lsrs	r2, r3, #3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	3208      	adds	r2, #8
 800251c:	6939      	ldr	r1, [r7, #16]
 800251e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	005b      	lsls	r3, r3, #1
 800252c:	2203      	movs	r2, #3
 800252e:	fa02 f303 	lsl.w	r3, r2, r3
 8002532:	43db      	mvns	r3, r3
 8002534:	693a      	ldr	r2, [r7, #16]
 8002536:	4013      	ands	r3, r2
 8002538:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f003 0203 	and.w	r2, r3, #3
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	fa02 f303 	lsl.w	r3, r2, r3
 800254a:	693a      	ldr	r2, [r7, #16]
 800254c:	4313      	orrs	r3, r2
 800254e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	693a      	ldr	r2, [r7, #16]
 8002554:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800255e:	2b00      	cmp	r3, #0
 8002560:	f000 8094 	beq.w	800268c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002564:	4b52      	ldr	r3, [pc, #328]	; (80026b0 <HAL_GPIO_Init+0x2c0>)
 8002566:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002568:	4a51      	ldr	r2, [pc, #324]	; (80026b0 <HAL_GPIO_Init+0x2c0>)
 800256a:	f043 0301 	orr.w	r3, r3, #1
 800256e:	6613      	str	r3, [r2, #96]	; 0x60
 8002570:	4b4f      	ldr	r3, [pc, #316]	; (80026b0 <HAL_GPIO_Init+0x2c0>)
 8002572:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002574:	f003 0301 	and.w	r3, r3, #1
 8002578:	60bb      	str	r3, [r7, #8]
 800257a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800257c:	4a4d      	ldr	r2, [pc, #308]	; (80026b4 <HAL_GPIO_Init+0x2c4>)
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	089b      	lsrs	r3, r3, #2
 8002582:	3302      	adds	r3, #2
 8002584:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002588:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	f003 0303 	and.w	r3, r3, #3
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	220f      	movs	r2, #15
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	43db      	mvns	r3, r3
 800259a:	693a      	ldr	r2, [r7, #16]
 800259c:	4013      	ands	r3, r2
 800259e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80025a6:	d00d      	beq.n	80025c4 <HAL_GPIO_Init+0x1d4>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	4a43      	ldr	r2, [pc, #268]	; (80026b8 <HAL_GPIO_Init+0x2c8>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d007      	beq.n	80025c0 <HAL_GPIO_Init+0x1d0>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	4a42      	ldr	r2, [pc, #264]	; (80026bc <HAL_GPIO_Init+0x2cc>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d101      	bne.n	80025bc <HAL_GPIO_Init+0x1cc>
 80025b8:	2302      	movs	r3, #2
 80025ba:	e004      	b.n	80025c6 <HAL_GPIO_Init+0x1d6>
 80025bc:	2307      	movs	r3, #7
 80025be:	e002      	b.n	80025c6 <HAL_GPIO_Init+0x1d6>
 80025c0:	2301      	movs	r3, #1
 80025c2:	e000      	b.n	80025c6 <HAL_GPIO_Init+0x1d6>
 80025c4:	2300      	movs	r3, #0
 80025c6:	697a      	ldr	r2, [r7, #20]
 80025c8:	f002 0203 	and.w	r2, r2, #3
 80025cc:	0092      	lsls	r2, r2, #2
 80025ce:	4093      	lsls	r3, r2
 80025d0:	693a      	ldr	r2, [r7, #16]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80025d6:	4937      	ldr	r1, [pc, #220]	; (80026b4 <HAL_GPIO_Init+0x2c4>)
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	089b      	lsrs	r3, r3, #2
 80025dc:	3302      	adds	r3, #2
 80025de:	693a      	ldr	r2, [r7, #16]
 80025e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80025e4:	4b36      	ldr	r3, [pc, #216]	; (80026c0 <HAL_GPIO_Init+0x2d0>)
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	43db      	mvns	r3, r3
 80025ee:	693a      	ldr	r2, [r7, #16]
 80025f0:	4013      	ands	r3, r2
 80025f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d003      	beq.n	8002608 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002600:	693a      	ldr	r2, [r7, #16]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	4313      	orrs	r3, r2
 8002606:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002608:	4a2d      	ldr	r2, [pc, #180]	; (80026c0 <HAL_GPIO_Init+0x2d0>)
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800260e:	4b2c      	ldr	r3, [pc, #176]	; (80026c0 <HAL_GPIO_Init+0x2d0>)
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	43db      	mvns	r3, r3
 8002618:	693a      	ldr	r2, [r7, #16]
 800261a:	4013      	ands	r3, r2
 800261c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d003      	beq.n	8002632 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800262a:	693a      	ldr	r2, [r7, #16]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	4313      	orrs	r3, r2
 8002630:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002632:	4a23      	ldr	r2, [pc, #140]	; (80026c0 <HAL_GPIO_Init+0x2d0>)
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002638:	4b21      	ldr	r3, [pc, #132]	; (80026c0 <HAL_GPIO_Init+0x2d0>)
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	43db      	mvns	r3, r3
 8002642:	693a      	ldr	r2, [r7, #16]
 8002644:	4013      	ands	r3, r2
 8002646:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d003      	beq.n	800265c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002654:	693a      	ldr	r2, [r7, #16]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	4313      	orrs	r3, r2
 800265a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800265c:	4a18      	ldr	r2, [pc, #96]	; (80026c0 <HAL_GPIO_Init+0x2d0>)
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002662:	4b17      	ldr	r3, [pc, #92]	; (80026c0 <HAL_GPIO_Init+0x2d0>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	43db      	mvns	r3, r3
 800266c:	693a      	ldr	r2, [r7, #16]
 800266e:	4013      	ands	r3, r2
 8002670:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d003      	beq.n	8002686 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800267e:	693a      	ldr	r2, [r7, #16]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	4313      	orrs	r3, r2
 8002684:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002686:	4a0e      	ldr	r2, [pc, #56]	; (80026c0 <HAL_GPIO_Init+0x2d0>)
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	3301      	adds	r3, #1
 8002690:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	fa22 f303 	lsr.w	r3, r2, r3
 800269c:	2b00      	cmp	r3, #0
 800269e:	f47f aeaf 	bne.w	8002400 <HAL_GPIO_Init+0x10>
  }
}
 80026a2:	bf00      	nop
 80026a4:	bf00      	nop
 80026a6:	371c      	adds	r7, #28
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr
 80026b0:	40021000 	.word	0x40021000
 80026b4:	40010000 	.word	0x40010000
 80026b8:	48000400 	.word	0x48000400
 80026bc:	48000800 	.word	0x48000800
 80026c0:	40010400 	.word	0x40010400

080026c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b085      	sub	sp, #20
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	460b      	mov	r3, r1
 80026ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	691a      	ldr	r2, [r3, #16]
 80026d4:	887b      	ldrh	r3, [r7, #2]
 80026d6:	4013      	ands	r3, r2
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d002      	beq.n	80026e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80026dc:	2301      	movs	r3, #1
 80026de:	73fb      	strb	r3, [r7, #15]
 80026e0:	e001      	b.n	80026e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80026e2:	2300      	movs	r3, #0
 80026e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80026e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3714      	adds	r7, #20
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	460b      	mov	r3, r1
 80026fe:	807b      	strh	r3, [r7, #2]
 8002700:	4613      	mov	r3, r2
 8002702:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002704:	787b      	ldrb	r3, [r7, #1]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d003      	beq.n	8002712 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800270a:	887a      	ldrh	r2, [r7, #2]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002710:	e002      	b.n	8002718 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002712:	887a      	ldrh	r2, [r7, #2]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002718:	bf00      	nop
 800271a:	370c      	adds	r7, #12
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr

08002724 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d101      	bne.n	8002736 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e081      	b.n	800283a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b00      	cmp	r3, #0
 8002740:	d106      	bne.n	8002750 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f7ff f9c6 	bl	8001adc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2224      	movs	r2, #36	; 0x24
 8002754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f022 0201 	bic.w	r2, r2, #1
 8002766:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	685a      	ldr	r2, [r3, #4]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002774:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	689a      	ldr	r2, [r3, #8]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002784:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	2b01      	cmp	r3, #1
 800278c:	d107      	bne.n	800279e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	689a      	ldr	r2, [r3, #8]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800279a:	609a      	str	r2, [r3, #8]
 800279c:	e006      	b.n	80027ac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	689a      	ldr	r2, [r3, #8]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80027aa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d104      	bne.n	80027be <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80027bc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	6812      	ldr	r2, [r2, #0]
 80027c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027d0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	68da      	ldr	r2, [r3, #12]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027e0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	691a      	ldr	r2, [r3, #16]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	695b      	ldr	r3, [r3, #20]
 80027ea:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	699b      	ldr	r3, [r3, #24]
 80027f2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	430a      	orrs	r2, r1
 80027fa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	69d9      	ldr	r1, [r3, #28]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6a1a      	ldr	r2, [r3, #32]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	430a      	orrs	r2, r1
 800280a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f042 0201 	orr.w	r2, r2, #1
 800281a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2220      	movs	r2, #32
 8002826:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2200      	movs	r2, #0
 8002834:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	3708      	adds	r7, #8
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
	...

08002844 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b088      	sub	sp, #32
 8002848:	af02      	add	r7, sp, #8
 800284a:	60f8      	str	r0, [r7, #12]
 800284c:	607a      	str	r2, [r7, #4]
 800284e:	461a      	mov	r2, r3
 8002850:	460b      	mov	r3, r1
 8002852:	817b      	strh	r3, [r7, #10]
 8002854:	4613      	mov	r3, r2
 8002856:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800285e:	b2db      	uxtb	r3, r3
 8002860:	2b20      	cmp	r3, #32
 8002862:	f040 80da 	bne.w	8002a1a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800286c:	2b01      	cmp	r3, #1
 800286e:	d101      	bne.n	8002874 <HAL_I2C_Master_Transmit+0x30>
 8002870:	2302      	movs	r3, #2
 8002872:	e0d3      	b.n	8002a1c <HAL_I2C_Master_Transmit+0x1d8>
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800287c:	f7ff fbea 	bl	8002054 <HAL_GetTick>
 8002880:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	9300      	str	r3, [sp, #0]
 8002886:	2319      	movs	r3, #25
 8002888:	2201      	movs	r2, #1
 800288a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800288e:	68f8      	ldr	r0, [r7, #12]
 8002890:	f000 fefb 	bl	800368a <I2C_WaitOnFlagUntilTimeout>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e0be      	b.n	8002a1c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2221      	movs	r2, #33	; 0x21
 80028a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2210      	movs	r2, #16
 80028aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2200      	movs	r2, #0
 80028b2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	893a      	ldrh	r2, [r7, #8]
 80028be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2200      	movs	r2, #0
 80028c4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	2bff      	cmp	r3, #255	; 0xff
 80028ce:	d90e      	bls.n	80028ee <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	22ff      	movs	r2, #255	; 0xff
 80028d4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028da:	b2da      	uxtb	r2, r3
 80028dc:	8979      	ldrh	r1, [r7, #10]
 80028de:	4b51      	ldr	r3, [pc, #324]	; (8002a24 <HAL_I2C_Master_Transmit+0x1e0>)
 80028e0:	9300      	str	r3, [sp, #0]
 80028e2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028e6:	68f8      	ldr	r0, [r7, #12]
 80028e8:	f001 f8f2 	bl	8003ad0 <I2C_TransferConfig>
 80028ec:	e06c      	b.n	80029c8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028f2:	b29a      	uxth	r2, r3
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028fc:	b2da      	uxtb	r2, r3
 80028fe:	8979      	ldrh	r1, [r7, #10]
 8002900:	4b48      	ldr	r3, [pc, #288]	; (8002a24 <HAL_I2C_Master_Transmit+0x1e0>)
 8002902:	9300      	str	r3, [sp, #0]
 8002904:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002908:	68f8      	ldr	r0, [r7, #12]
 800290a:	f001 f8e1 	bl	8003ad0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800290e:	e05b      	b.n	80029c8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002910:	697a      	ldr	r2, [r7, #20]
 8002912:	6a39      	ldr	r1, [r7, #32]
 8002914:	68f8      	ldr	r0, [r7, #12]
 8002916:	f000 fef8 	bl	800370a <I2C_WaitOnTXISFlagUntilTimeout>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d001      	beq.n	8002924 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e07b      	b.n	8002a1c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002928:	781a      	ldrb	r2, [r3, #0]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002934:	1c5a      	adds	r2, r3, #1
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800293e:	b29b      	uxth	r3, r3
 8002940:	3b01      	subs	r3, #1
 8002942:	b29a      	uxth	r2, r3
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800294c:	3b01      	subs	r3, #1
 800294e:	b29a      	uxth	r2, r3
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002958:	b29b      	uxth	r3, r3
 800295a:	2b00      	cmp	r3, #0
 800295c:	d034      	beq.n	80029c8 <HAL_I2C_Master_Transmit+0x184>
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002962:	2b00      	cmp	r3, #0
 8002964:	d130      	bne.n	80029c8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	9300      	str	r3, [sp, #0]
 800296a:	6a3b      	ldr	r3, [r7, #32]
 800296c:	2200      	movs	r2, #0
 800296e:	2180      	movs	r1, #128	; 0x80
 8002970:	68f8      	ldr	r0, [r7, #12]
 8002972:	f000 fe8a 	bl	800368a <I2C_WaitOnFlagUntilTimeout>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d001      	beq.n	8002980 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e04d      	b.n	8002a1c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002984:	b29b      	uxth	r3, r3
 8002986:	2bff      	cmp	r3, #255	; 0xff
 8002988:	d90e      	bls.n	80029a8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	22ff      	movs	r2, #255	; 0xff
 800298e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002994:	b2da      	uxtb	r2, r3
 8002996:	8979      	ldrh	r1, [r7, #10]
 8002998:	2300      	movs	r3, #0
 800299a:	9300      	str	r3, [sp, #0]
 800299c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029a0:	68f8      	ldr	r0, [r7, #12]
 80029a2:	f001 f895 	bl	8003ad0 <I2C_TransferConfig>
 80029a6:	e00f      	b.n	80029c8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ac:	b29a      	uxth	r2, r3
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029b6:	b2da      	uxtb	r2, r3
 80029b8:	8979      	ldrh	r1, [r7, #10]
 80029ba:	2300      	movs	r3, #0
 80029bc:	9300      	str	r3, [sp, #0]
 80029be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029c2:	68f8      	ldr	r0, [r7, #12]
 80029c4:	f001 f884 	bl	8003ad0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d19e      	bne.n	8002910 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029d2:	697a      	ldr	r2, [r7, #20]
 80029d4:	6a39      	ldr	r1, [r7, #32]
 80029d6:	68f8      	ldr	r0, [r7, #12]
 80029d8:	f000 fed7 	bl	800378a <I2C_WaitOnSTOPFlagUntilTimeout>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e01a      	b.n	8002a1c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2220      	movs	r2, #32
 80029ec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	6859      	ldr	r1, [r3, #4]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	4b0b      	ldr	r3, [pc, #44]	; (8002a28 <HAL_I2C_Master_Transmit+0x1e4>)
 80029fa:	400b      	ands	r3, r1
 80029fc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2220      	movs	r2, #32
 8002a02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a16:	2300      	movs	r3, #0
 8002a18:	e000      	b.n	8002a1c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002a1a:	2302      	movs	r3, #2
  }
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3718      	adds	r7, #24
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	80002000 	.word	0x80002000
 8002a28:	fe00e800 	.word	0xfe00e800

08002a2c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b088      	sub	sp, #32
 8002a30:	af02      	add	r7, sp, #8
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	607a      	str	r2, [r7, #4]
 8002a36:	461a      	mov	r2, r3
 8002a38:	460b      	mov	r3, r1
 8002a3a:	817b      	strh	r3, [r7, #10]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	2b20      	cmp	r3, #32
 8002a4a:	f040 80db 	bne.w	8002c04 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d101      	bne.n	8002a5c <HAL_I2C_Master_Receive+0x30>
 8002a58:	2302      	movs	r3, #2
 8002a5a:	e0d4      	b.n	8002c06 <HAL_I2C_Master_Receive+0x1da>
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002a64:	f7ff faf6 	bl	8002054 <HAL_GetTick>
 8002a68:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	9300      	str	r3, [sp, #0]
 8002a6e:	2319      	movs	r3, #25
 8002a70:	2201      	movs	r2, #1
 8002a72:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a76:	68f8      	ldr	r0, [r7, #12]
 8002a78:	f000 fe07 	bl	800368a <I2C_WaitOnFlagUntilTimeout>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e0bf      	b.n	8002c06 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2222      	movs	r2, #34	; 0x22
 8002a8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2210      	movs	r2, #16
 8002a92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	893a      	ldrh	r2, [r7, #8]
 8002aa6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	2bff      	cmp	r3, #255	; 0xff
 8002ab6:	d90e      	bls.n	8002ad6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	22ff      	movs	r2, #255	; 0xff
 8002abc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ac2:	b2da      	uxtb	r2, r3
 8002ac4:	8979      	ldrh	r1, [r7, #10]
 8002ac6:	4b52      	ldr	r3, [pc, #328]	; (8002c10 <HAL_I2C_Master_Receive+0x1e4>)
 8002ac8:	9300      	str	r3, [sp, #0]
 8002aca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ace:	68f8      	ldr	r0, [r7, #12]
 8002ad0:	f000 fffe 	bl	8003ad0 <I2C_TransferConfig>
 8002ad4:	e06d      	b.n	8002bb2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ada:	b29a      	uxth	r2, r3
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ae4:	b2da      	uxtb	r2, r3
 8002ae6:	8979      	ldrh	r1, [r7, #10]
 8002ae8:	4b49      	ldr	r3, [pc, #292]	; (8002c10 <HAL_I2C_Master_Receive+0x1e4>)
 8002aea:	9300      	str	r3, [sp, #0]
 8002aec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002af0:	68f8      	ldr	r0, [r7, #12]
 8002af2:	f000 ffed 	bl	8003ad0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002af6:	e05c      	b.n	8002bb2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002af8:	697a      	ldr	r2, [r7, #20]
 8002afa:	6a39      	ldr	r1, [r7, #32]
 8002afc:	68f8      	ldr	r0, [r7, #12]
 8002afe:	f000 fe81 	bl	8003804 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d001      	beq.n	8002b0c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e07c      	b.n	8002c06 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b16:	b2d2      	uxtb	r2, r2
 8002b18:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1e:	1c5a      	adds	r2, r3, #1
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b28:	3b01      	subs	r3, #1
 8002b2a:	b29a      	uxth	r2, r3
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	3b01      	subs	r3, #1
 8002b38:	b29a      	uxth	r2, r3
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d034      	beq.n	8002bb2 <HAL_I2C_Master_Receive+0x186>
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d130      	bne.n	8002bb2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	9300      	str	r3, [sp, #0]
 8002b54:	6a3b      	ldr	r3, [r7, #32]
 8002b56:	2200      	movs	r2, #0
 8002b58:	2180      	movs	r1, #128	; 0x80
 8002b5a:	68f8      	ldr	r0, [r7, #12]
 8002b5c:	f000 fd95 	bl	800368a <I2C_WaitOnFlagUntilTimeout>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d001      	beq.n	8002b6a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e04d      	b.n	8002c06 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	2bff      	cmp	r3, #255	; 0xff
 8002b72:	d90e      	bls.n	8002b92 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	22ff      	movs	r2, #255	; 0xff
 8002b78:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b7e:	b2da      	uxtb	r2, r3
 8002b80:	8979      	ldrh	r1, [r7, #10]
 8002b82:	2300      	movs	r3, #0
 8002b84:	9300      	str	r3, [sp, #0]
 8002b86:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b8a:	68f8      	ldr	r0, [r7, #12]
 8002b8c:	f000 ffa0 	bl	8003ad0 <I2C_TransferConfig>
 8002b90:	e00f      	b.n	8002bb2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b96:	b29a      	uxth	r2, r3
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ba0:	b2da      	uxtb	r2, r3
 8002ba2:	8979      	ldrh	r1, [r7, #10]
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	9300      	str	r3, [sp, #0]
 8002ba8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bac:	68f8      	ldr	r0, [r7, #12]
 8002bae:	f000 ff8f 	bl	8003ad0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d19d      	bne.n	8002af8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bbc:	697a      	ldr	r2, [r7, #20]
 8002bbe:	6a39      	ldr	r1, [r7, #32]
 8002bc0:	68f8      	ldr	r0, [r7, #12]
 8002bc2:	f000 fde2 	bl	800378a <I2C_WaitOnSTOPFlagUntilTimeout>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d001      	beq.n	8002bd0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e01a      	b.n	8002c06 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2220      	movs	r2, #32
 8002bd6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	6859      	ldr	r1, [r3, #4]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	4b0c      	ldr	r3, [pc, #48]	; (8002c14 <HAL_I2C_Master_Receive+0x1e8>)
 8002be4:	400b      	ands	r3, r1
 8002be6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2220      	movs	r2, #32
 8002bec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c00:	2300      	movs	r3, #0
 8002c02:	e000      	b.n	8002c06 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002c04:	2302      	movs	r3, #2
  }
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3718      	adds	r7, #24
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	80002400 	.word	0x80002400
 8002c14:	fe00e800 	.word	0xfe00e800

08002c18 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	699b      	ldr	r3, [r3, #24]
 8002c26:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d005      	beq.n	8002c44 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c3c:	68ba      	ldr	r2, [r7, #8]
 8002c3e:	68f9      	ldr	r1, [r7, #12]
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	4798      	blx	r3
  }
}
 8002c44:	bf00      	nop
 8002c46:	3710      	adds	r7, #16
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b086      	sub	sp, #24
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	699b      	ldr	r3, [r3, #24]
 8002c5a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	0a1b      	lsrs	r3, r3, #8
 8002c68:	f003 0301 	and.w	r3, r3, #1
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d010      	beq.n	8002c92 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	09db      	lsrs	r3, r3, #7
 8002c74:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d00a      	beq.n	8002c92 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c80:	f043 0201 	orr.w	r2, r3, #1
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c90:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	0a9b      	lsrs	r3, r3, #10
 8002c96:	f003 0301 	and.w	r3, r3, #1
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d010      	beq.n	8002cc0 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	09db      	lsrs	r3, r3, #7
 8002ca2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d00a      	beq.n	8002cc0 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cae:	f043 0208 	orr.w	r2, r3, #8
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cbe:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	0a5b      	lsrs	r3, r3, #9
 8002cc4:	f003 0301 	and.w	r3, r3, #1
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d010      	beq.n	8002cee <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	09db      	lsrs	r3, r3, #7
 8002cd0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d00a      	beq.n	8002cee <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cdc:	f043 0202 	orr.w	r2, r3, #2
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cec:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf2:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f003 030b 	and.w	r3, r3, #11
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d003      	beq.n	8002d06 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8002cfe:	68f9      	ldr	r1, [r7, #12]
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f000 fb89 	bl	8003418 <I2C_ITError>
  }
}
 8002d06:	bf00      	nop
 8002d08:	3718      	adds	r7, #24
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d0e:	b480      	push	{r7}
 8002d10:	b083      	sub	sp, #12
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002d16:	bf00      	nop
 8002d18:	370c      	adds	r7, #12
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr

08002d22 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d22:	b480      	push	{r7}
 8002d24:	b083      	sub	sp, #12
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002d2a:	bf00      	nop
 8002d2c:	370c      	adds	r7, #12
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr

08002d36 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002d36:	b480      	push	{r7}
 8002d38:	b083      	sub	sp, #12
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
 8002d3e:	460b      	mov	r3, r1
 8002d40:	70fb      	strb	r3, [r7, #3]
 8002d42:	4613      	mov	r3, r2
 8002d44:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002d46:	bf00      	nop
 8002d48:	370c      	adds	r7, #12
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr

08002d52 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d52:	b480      	push	{r7}
 8002d54:	b083      	sub	sp, #12
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002d5a:	bf00      	nop
 8002d5c:	370c      	adds	r7, #12
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr

08002d66 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002d66:	b480      	push	{r7}
 8002d68:	b083      	sub	sp, #12
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002d6e:	bf00      	nop
 8002d70:	370c      	adds	r7, #12
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr

08002d7a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d7a:	b480      	push	{r7}
 8002d7c:	b083      	sub	sp, #12
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002d82:	bf00      	nop
 8002d84:	370c      	adds	r7, #12
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr

08002d8e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002d8e:	b580      	push	{r7, lr}
 8002d90:	b086      	sub	sp, #24
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	60f8      	str	r0, [r7, #12]
 8002d96:	60b9      	str	r1, [r7, #8]
 8002d98:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d9e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d101      	bne.n	8002db2 <I2C_Slave_ISR_IT+0x24>
 8002dae:	2302      	movs	r3, #2
 8002db0:	e0ec      	b.n	8002f8c <I2C_Slave_ISR_IT+0x1fe>
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2201      	movs	r2, #1
 8002db6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	095b      	lsrs	r3, r3, #5
 8002dbe:	f003 0301 	and.w	r3, r3, #1
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d009      	beq.n	8002dda <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	095b      	lsrs	r3, r3, #5
 8002dca:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d003      	beq.n	8002dda <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002dd2:	6939      	ldr	r1, [r7, #16]
 8002dd4:	68f8      	ldr	r0, [r7, #12]
 8002dd6:	f000 f9bf 	bl	8003158 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	091b      	lsrs	r3, r3, #4
 8002dde:	f003 0301 	and.w	r3, r3, #1
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d04d      	beq.n	8002e82 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	091b      	lsrs	r3, r3, #4
 8002dea:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d047      	beq.n	8002e82 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d128      	bne.n	8002e4e <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	2b28      	cmp	r3, #40	; 0x28
 8002e06:	d108      	bne.n	8002e1a <I2C_Slave_ISR_IT+0x8c>
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e0e:	d104      	bne.n	8002e1a <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002e10:	6939      	ldr	r1, [r7, #16]
 8002e12:	68f8      	ldr	r0, [r7, #12]
 8002e14:	f000 faaa 	bl	800336c <I2C_ITListenCplt>
 8002e18:	e032      	b.n	8002e80 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	2b29      	cmp	r3, #41	; 0x29
 8002e24:	d10e      	bne.n	8002e44 <I2C_Slave_ISR_IT+0xb6>
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e2c:	d00a      	beq.n	8002e44 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	2210      	movs	r2, #16
 8002e34:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002e36:	68f8      	ldr	r0, [r7, #12]
 8002e38:	f000 fbe5 	bl	8003606 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002e3c:	68f8      	ldr	r0, [r7, #12]
 8002e3e:	f000 f92d 	bl	800309c <I2C_ITSlaveSeqCplt>
 8002e42:	e01d      	b.n	8002e80 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2210      	movs	r2, #16
 8002e4a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002e4c:	e096      	b.n	8002f7c <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	2210      	movs	r2, #16
 8002e54:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e5a:	f043 0204 	orr.w	r2, r3, #4
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d004      	beq.n	8002e72 <I2C_Slave_ISR_IT+0xe4>
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e6e:	f040 8085 	bne.w	8002f7c <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e76:	4619      	mov	r1, r3
 8002e78:	68f8      	ldr	r0, [r7, #12]
 8002e7a:	f000 facd 	bl	8003418 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002e7e:	e07d      	b.n	8002f7c <I2C_Slave_ISR_IT+0x1ee>
 8002e80:	e07c      	b.n	8002f7c <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	089b      	lsrs	r3, r3, #2
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d030      	beq.n	8002ef0 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	089b      	lsrs	r3, r3, #2
 8002e92:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d02a      	beq.n	8002ef0 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d018      	beq.n	8002ed6 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eae:	b2d2      	uxtb	r2, r2
 8002eb0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb6:	1c5a      	adds	r2, r3, #1
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ec0:	3b01      	subs	r3, #1
 8002ec2:	b29a      	uxth	r2, r3
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	3b01      	subs	r3, #1
 8002ed0:	b29a      	uxth	r2, r3
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d14f      	bne.n	8002f80 <I2C_Slave_ISR_IT+0x1f2>
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ee6:	d04b      	beq.n	8002f80 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002ee8:	68f8      	ldr	r0, [r7, #12]
 8002eea:	f000 f8d7 	bl	800309c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002eee:	e047      	b.n	8002f80 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	08db      	lsrs	r3, r3, #3
 8002ef4:	f003 0301 	and.w	r3, r3, #1
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d00a      	beq.n	8002f12 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	08db      	lsrs	r3, r3, #3
 8002f00:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d004      	beq.n	8002f12 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002f08:	6939      	ldr	r1, [r7, #16]
 8002f0a:	68f8      	ldr	r0, [r7, #12]
 8002f0c:	f000 f842 	bl	8002f94 <I2C_ITAddrCplt>
 8002f10:	e037      	b.n	8002f82 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	085b      	lsrs	r3, r3, #1
 8002f16:	f003 0301 	and.w	r3, r3, #1
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d031      	beq.n	8002f82 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	085b      	lsrs	r3, r3, #1
 8002f22:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d02b      	beq.n	8002f82 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d018      	beq.n	8002f66 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f38:	781a      	ldrb	r2, [r3, #0]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f44:	1c5a      	adds	r2, r3, #1
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	3b01      	subs	r3, #1
 8002f52:	b29a      	uxth	r2, r3
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f5c:	3b01      	subs	r3, #1
 8002f5e:	b29a      	uxth	r2, r3
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	851a      	strh	r2, [r3, #40]	; 0x28
 8002f64:	e00d      	b.n	8002f82 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f6c:	d002      	beq.n	8002f74 <I2C_Slave_ISR_IT+0x1e6>
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d106      	bne.n	8002f82 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002f74:	68f8      	ldr	r0, [r7, #12]
 8002f76:	f000 f891 	bl	800309c <I2C_ITSlaveSeqCplt>
 8002f7a:	e002      	b.n	8002f82 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8002f7c:	bf00      	nop
 8002f7e:	e000      	b.n	8002f82 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8002f80:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002f8a:	2300      	movs	r3, #0
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3718      	adds	r7, #24
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002faa:	2b28      	cmp	r3, #40	; 0x28
 8002fac:	d16a      	bne.n	8003084 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	699b      	ldr	r3, [r3, #24]
 8002fb4:	0c1b      	lsrs	r3, r3, #16
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	f003 0301 	and.w	r3, r3, #1
 8002fbc:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	699b      	ldr	r3, [r3, #24]
 8002fc4:	0c1b      	lsrs	r3, r3, #16
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002fcc:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fda:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002fe8:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d138      	bne.n	8003064 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002ff2:	897b      	ldrh	r3, [r7, #10]
 8002ff4:	09db      	lsrs	r3, r3, #7
 8002ff6:	b29a      	uxth	r2, r3
 8002ff8:	89bb      	ldrh	r3, [r7, #12]
 8002ffa:	4053      	eors	r3, r2
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	f003 0306 	and.w	r3, r3, #6
 8003002:	2b00      	cmp	r3, #0
 8003004:	d11c      	bne.n	8003040 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8003006:	897b      	ldrh	r3, [r7, #10]
 8003008:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800300e:	1c5a      	adds	r2, r3, #1
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003018:	2b02      	cmp	r3, #2
 800301a:	d13b      	bne.n	8003094 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	2208      	movs	r2, #8
 8003028:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003032:	89ba      	ldrh	r2, [r7, #12]
 8003034:	7bfb      	ldrb	r3, [r7, #15]
 8003036:	4619      	mov	r1, r3
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f7ff fe7c 	bl	8002d36 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800303e:	e029      	b.n	8003094 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003040:	893b      	ldrh	r3, [r7, #8]
 8003042:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003044:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f000 fd73 	bl	8003b34 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003056:	89ba      	ldrh	r2, [r7, #12]
 8003058:	7bfb      	ldrb	r3, [r7, #15]
 800305a:	4619      	mov	r1, r3
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f7ff fe6a 	bl	8002d36 <HAL_I2C_AddrCallback>
}
 8003062:	e017      	b.n	8003094 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003064:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f000 fd63 	bl	8003b34 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003076:	89ba      	ldrh	r2, [r7, #12]
 8003078:	7bfb      	ldrb	r3, [r7, #15]
 800307a:	4619      	mov	r1, r3
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f7ff fe5a 	bl	8002d36 <HAL_I2C_AddrCallback>
}
 8003082:	e007      	b.n	8003094 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2208      	movs	r2, #8
 800308a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8003094:	bf00      	nop
 8003096:	3710      	adds	r7, #16
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}

0800309c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	0b9b      	lsrs	r3, r3, #14
 80030b8:	f003 0301 	and.w	r3, r3, #1
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d008      	beq.n	80030d2 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80030ce:	601a      	str	r2, [r3, #0]
 80030d0:	e00d      	b.n	80030ee <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	0bdb      	lsrs	r3, r3, #15
 80030d6:	f003 0301 	and.w	r3, r3, #1
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d007      	beq.n	80030ee <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030ec:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	2b29      	cmp	r3, #41	; 0x29
 80030f8:	d112      	bne.n	8003120 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2228      	movs	r2, #40	; 0x28
 80030fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2221      	movs	r2, #33	; 0x21
 8003106:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003108:	2101      	movs	r1, #1
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 fd12 	bl	8003b34 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f7ff fdf8 	bl	8002d0e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800311e:	e017      	b.n	8003150 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003126:	b2db      	uxtb	r3, r3
 8003128:	2b2a      	cmp	r3, #42	; 0x2a
 800312a:	d111      	bne.n	8003150 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2228      	movs	r2, #40	; 0x28
 8003130:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2222      	movs	r2, #34	; 0x22
 8003138:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800313a:	2102      	movs	r1, #2
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f000 fcf9 	bl	8003b34 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f7ff fde9 	bl	8002d22 <HAL_I2C_SlaveRxCpltCallback>
}
 8003150:	bf00      	nop
 8003152:	3710      	adds	r7, #16
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b086      	sub	sp, #24
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003174:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2220      	movs	r2, #32
 800317c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800317e:	7bfb      	ldrb	r3, [r7, #15]
 8003180:	2b21      	cmp	r3, #33	; 0x21
 8003182:	d002      	beq.n	800318a <I2C_ITSlaveCplt+0x32>
 8003184:	7bfb      	ldrb	r3, [r7, #15]
 8003186:	2b29      	cmp	r3, #41	; 0x29
 8003188:	d108      	bne.n	800319c <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800318a:	f248 0101 	movw	r1, #32769	; 0x8001
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f000 fcd0 	bl	8003b34 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2221      	movs	r2, #33	; 0x21
 8003198:	631a      	str	r2, [r3, #48]	; 0x30
 800319a:	e00d      	b.n	80031b8 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800319c:	7bfb      	ldrb	r3, [r7, #15]
 800319e:	2b22      	cmp	r3, #34	; 0x22
 80031a0:	d002      	beq.n	80031a8 <I2C_ITSlaveCplt+0x50>
 80031a2:	7bfb      	ldrb	r3, [r7, #15]
 80031a4:	2b2a      	cmp	r3, #42	; 0x2a
 80031a6:	d107      	bne.n	80031b8 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80031a8:	f248 0102 	movw	r1, #32770	; 0x8002
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f000 fcc1 	bl	8003b34 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2222      	movs	r2, #34	; 0x22
 80031b6:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	685a      	ldr	r2, [r3, #4]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031c6:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	6859      	ldr	r1, [r3, #4]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	4b64      	ldr	r3, [pc, #400]	; (8003364 <I2C_ITSlaveCplt+0x20c>)
 80031d4:	400b      	ands	r3, r1
 80031d6:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f000 fa14 	bl	8003606 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	0b9b      	lsrs	r3, r3, #14
 80031e2:	f003 0301 	and.w	r3, r3, #1
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d013      	beq.n	8003212 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80031f8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d020      	beq.n	8003244 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	b29a      	uxth	r2, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003210:	e018      	b.n	8003244 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	0bdb      	lsrs	r3, r3, #15
 8003216:	f003 0301 	and.w	r3, r3, #1
 800321a:	2b00      	cmp	r3, #0
 800321c:	d012      	beq.n	8003244 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800322c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003232:	2b00      	cmp	r3, #0
 8003234:	d006      	beq.n	8003244 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	b29a      	uxth	r2, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	089b      	lsrs	r3, r3, #2
 8003248:	f003 0301 	and.w	r3, r3, #1
 800324c:	2b00      	cmp	r3, #0
 800324e:	d020      	beq.n	8003292 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	f023 0304 	bic.w	r3, r3, #4
 8003256:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003262:	b2d2      	uxtb	r2, r2
 8003264:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326a:	1c5a      	adds	r2, r3, #1
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003274:	2b00      	cmp	r3, #0
 8003276:	d00c      	beq.n	8003292 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800327c:	3b01      	subs	r3, #1
 800327e:	b29a      	uxth	r2, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003288:	b29b      	uxth	r3, r3
 800328a:	3b01      	subs	r3, #1
 800328c:	b29a      	uxth	r2, r3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003296:	b29b      	uxth	r3, r3
 8003298:	2b00      	cmp	r3, #0
 800329a:	d005      	beq.n	80032a8 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a0:	f043 0204 	orr.w	r2, r3, #4
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d010      	beq.n	80032e0 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c2:	4619      	mov	r1, r3
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f000 f8a7 	bl	8003418 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	2b28      	cmp	r3, #40	; 0x28
 80032d4:	d141      	bne.n	800335a <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80032d6:	6979      	ldr	r1, [r7, #20]
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f000 f847 	bl	800336c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80032de:	e03c      	b.n	800335a <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80032e8:	d014      	beq.n	8003314 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f7ff fed6 	bl	800309c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4a1d      	ldr	r2, [pc, #116]	; (8003368 <I2C_ITSlaveCplt+0x210>)
 80032f4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2220      	movs	r2, #32
 80032fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f7ff fd20 	bl	8002d52 <HAL_I2C_ListenCpltCallback>
}
 8003312:	e022      	b.n	800335a <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800331a:	b2db      	uxtb	r3, r3
 800331c:	2b22      	cmp	r3, #34	; 0x22
 800331e:	d10e      	bne.n	800333e <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2220      	movs	r2, #32
 8003324:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f7ff fcf3 	bl	8002d22 <HAL_I2C_SlaveRxCpltCallback>
}
 800333c:	e00d      	b.n	800335a <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2220      	movs	r2, #32
 8003342:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f7ff fcda 	bl	8002d0e <HAL_I2C_SlaveTxCpltCallback>
}
 800335a:	bf00      	nop
 800335c:	3718      	adds	r7, #24
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	fe00e800 	.word	0xfe00e800
 8003368:	ffff0000 	.word	0xffff0000

0800336c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a26      	ldr	r2, [pc, #152]	; (8003414 <I2C_ITListenCplt+0xa8>)
 800337a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2220      	movs	r2, #32
 8003386:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	089b      	lsrs	r3, r3, #2
 800339c:	f003 0301 	and.w	r3, r3, #1
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d022      	beq.n	80033ea <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ae:	b2d2      	uxtb	r2, r2
 80033b0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b6:	1c5a      	adds	r2, r3, #1
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d012      	beq.n	80033ea <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033c8:	3b01      	subs	r3, #1
 80033ca:	b29a      	uxth	r2, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	3b01      	subs	r3, #1
 80033d8:	b29a      	uxth	r2, r3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033e2:	f043 0204 	orr.w	r2, r3, #4
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80033ea:	f248 0103 	movw	r1, #32771	; 0x8003
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f000 fba0 	bl	8003b34 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2210      	movs	r2, #16
 80033fa:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f7ff fca4 	bl	8002d52 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800340a:	bf00      	nop
 800340c:	3708      	adds	r7, #8
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	ffff0000 	.word	0xffff0000

08003418 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003428:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a5d      	ldr	r2, [pc, #372]	; (80035ac <I2C_ITError+0x194>)
 8003436:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	431a      	orrs	r2, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800344a:	7bfb      	ldrb	r3, [r7, #15]
 800344c:	2b28      	cmp	r3, #40	; 0x28
 800344e:	d005      	beq.n	800345c <I2C_ITError+0x44>
 8003450:	7bfb      	ldrb	r3, [r7, #15]
 8003452:	2b29      	cmp	r3, #41	; 0x29
 8003454:	d002      	beq.n	800345c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003456:	7bfb      	ldrb	r3, [r7, #15]
 8003458:	2b2a      	cmp	r3, #42	; 0x2a
 800345a:	d10b      	bne.n	8003474 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800345c:	2103      	movs	r1, #3
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 fb68 	bl	8003b34 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2228      	movs	r2, #40	; 0x28
 8003468:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4a50      	ldr	r2, [pc, #320]	; (80035b0 <I2C_ITError+0x198>)
 8003470:	635a      	str	r2, [r3, #52]	; 0x34
 8003472:	e011      	b.n	8003498 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003474:	f248 0103 	movw	r1, #32771	; 0x8003
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f000 fb5b 	bl	8003b34 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b60      	cmp	r3, #96	; 0x60
 8003488:	d003      	beq.n	8003492 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2220      	movs	r2, #32
 800348e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349c:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d039      	beq.n	800351a <I2C_ITError+0x102>
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	2b11      	cmp	r3, #17
 80034aa:	d002      	beq.n	80034b2 <I2C_ITError+0x9a>
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	2b21      	cmp	r3, #33	; 0x21
 80034b0:	d133      	bne.n	800351a <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034c0:	d107      	bne.n	80034d2 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80034d0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7fe ff7c 	bl	80023d4 <HAL_DMA_GetState>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d017      	beq.n	8003512 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e6:	4a33      	ldr	r2, [pc, #204]	; (80035b4 <I2C_ITError+0x19c>)
 80034e8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f6:	4618      	mov	r0, r3
 80034f8:	f7fe ff2b 	bl	8002352 <HAL_DMA_Abort_IT>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d04d      	beq.n	800359e <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800350c:	4610      	mov	r0, r2
 800350e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003510:	e045      	b.n	800359e <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f000 f850 	bl	80035b8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003518:	e041      	b.n	800359e <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800351e:	2b00      	cmp	r3, #0
 8003520:	d039      	beq.n	8003596 <I2C_ITError+0x17e>
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	2b12      	cmp	r3, #18
 8003526:	d002      	beq.n	800352e <I2C_ITError+0x116>
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	2b22      	cmp	r3, #34	; 0x22
 800352c:	d133      	bne.n	8003596 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003538:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800353c:	d107      	bne.n	800354e <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800354c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003552:	4618      	mov	r0, r3
 8003554:	f7fe ff3e 	bl	80023d4 <HAL_DMA_GetState>
 8003558:	4603      	mov	r3, r0
 800355a:	2b01      	cmp	r3, #1
 800355c:	d017      	beq.n	800358e <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003562:	4a14      	ldr	r2, [pc, #80]	; (80035b4 <I2C_ITError+0x19c>)
 8003564:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003572:	4618      	mov	r0, r3
 8003574:	f7fe feed 	bl	8002352 <HAL_DMA_Abort_IT>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d011      	beq.n	80035a2 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003588:	4610      	mov	r0, r2
 800358a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800358c:	e009      	b.n	80035a2 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f000 f812 	bl	80035b8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003594:	e005      	b.n	80035a2 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f000 f80e 	bl	80035b8 <I2C_TreatErrorCallback>
  }
}
 800359c:	e002      	b.n	80035a4 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800359e:	bf00      	nop
 80035a0:	e000      	b.n	80035a4 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80035a2:	bf00      	nop
}
 80035a4:	bf00      	nop
 80035a6:	3710      	adds	r7, #16
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	ffff0000 	.word	0xffff0000
 80035b0:	08002d8f 	.word	0x08002d8f
 80035b4:	0800364f 	.word	0x0800364f

080035b8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	2b60      	cmp	r3, #96	; 0x60
 80035ca:	d10e      	bne.n	80035ea <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2220      	movs	r2, #32
 80035d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f7ff fbc9 	bl	8002d7a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80035e8:	e009      	b.n	80035fe <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f7ff fbb4 	bl	8002d66 <HAL_I2C_ErrorCallback>
}
 80035fe:	bf00      	nop
 8003600:	3708      	adds	r7, #8
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}

08003606 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003606:	b480      	push	{r7}
 8003608:	b083      	sub	sp, #12
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	699b      	ldr	r3, [r3, #24]
 8003614:	f003 0302 	and.w	r3, r3, #2
 8003618:	2b02      	cmp	r3, #2
 800361a:	d103      	bne.n	8003624 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2200      	movs	r2, #0
 8003622:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	2b01      	cmp	r3, #1
 8003630:	d007      	beq.n	8003642 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	699a      	ldr	r2, [r3, #24]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f042 0201 	orr.w	r2, r2, #1
 8003640:	619a      	str	r2, [r3, #24]
  }
}
 8003642:	bf00      	nop
 8003644:	370c      	adds	r7, #12
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr

0800364e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800364e:	b580      	push	{r7, lr}
 8003650:	b084      	sub	sp, #16
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800365a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003660:	2b00      	cmp	r3, #0
 8003662:	d003      	beq.n	800366c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003668:	2200      	movs	r2, #0
 800366a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003670:	2b00      	cmp	r3, #0
 8003672:	d003      	beq.n	800367c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003678:	2200      	movs	r2, #0
 800367a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800367c:	68f8      	ldr	r0, [r7, #12]
 800367e:	f7ff ff9b 	bl	80035b8 <I2C_TreatErrorCallback>
}
 8003682:	bf00      	nop
 8003684:	3710      	adds	r7, #16
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}

0800368a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800368a:	b580      	push	{r7, lr}
 800368c:	b084      	sub	sp, #16
 800368e:	af00      	add	r7, sp, #0
 8003690:	60f8      	str	r0, [r7, #12]
 8003692:	60b9      	str	r1, [r7, #8]
 8003694:	603b      	str	r3, [r7, #0]
 8003696:	4613      	mov	r3, r2
 8003698:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800369a:	e022      	b.n	80036e2 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036a2:	d01e      	beq.n	80036e2 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036a4:	f7fe fcd6 	bl	8002054 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	683a      	ldr	r2, [r7, #0]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d302      	bcc.n	80036ba <I2C_WaitOnFlagUntilTimeout+0x30>
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d113      	bne.n	80036e2 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036be:	f043 0220 	orr.w	r2, r3, #32
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2220      	movs	r2, #32
 80036ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e00f      	b.n	8003702 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	699a      	ldr	r2, [r3, #24]
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	4013      	ands	r3, r2
 80036ec:	68ba      	ldr	r2, [r7, #8]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	bf0c      	ite	eq
 80036f2:	2301      	moveq	r3, #1
 80036f4:	2300      	movne	r3, #0
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	461a      	mov	r2, r3
 80036fa:	79fb      	ldrb	r3, [r7, #7]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d0cd      	beq.n	800369c <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3710      	adds	r7, #16
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}

0800370a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800370a:	b580      	push	{r7, lr}
 800370c:	b084      	sub	sp, #16
 800370e:	af00      	add	r7, sp, #0
 8003710:	60f8      	str	r0, [r7, #12]
 8003712:	60b9      	str	r1, [r7, #8]
 8003714:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003716:	e02c      	b.n	8003772 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	68b9      	ldr	r1, [r7, #8]
 800371c:	68f8      	ldr	r0, [r7, #12]
 800371e:	f000 f8eb 	bl	80038f8 <I2C_IsErrorOccurred>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d001      	beq.n	800372c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e02a      	b.n	8003782 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003732:	d01e      	beq.n	8003772 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003734:	f7fe fc8e 	bl	8002054 <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	68ba      	ldr	r2, [r7, #8]
 8003740:	429a      	cmp	r2, r3
 8003742:	d302      	bcc.n	800374a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d113      	bne.n	8003772 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800374e:	f043 0220 	orr.w	r2, r3, #32
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2220      	movs	r2, #32
 800375a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e007      	b.n	8003782 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	699b      	ldr	r3, [r3, #24]
 8003778:	f003 0302 	and.w	r3, r3, #2
 800377c:	2b02      	cmp	r3, #2
 800377e:	d1cb      	bne.n	8003718 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	3710      	adds	r7, #16
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}

0800378a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800378a:	b580      	push	{r7, lr}
 800378c:	b084      	sub	sp, #16
 800378e:	af00      	add	r7, sp, #0
 8003790:	60f8      	str	r0, [r7, #12]
 8003792:	60b9      	str	r1, [r7, #8]
 8003794:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003796:	e028      	b.n	80037ea <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	68b9      	ldr	r1, [r7, #8]
 800379c:	68f8      	ldr	r0, [r7, #12]
 800379e:	f000 f8ab 	bl	80038f8 <I2C_IsErrorOccurred>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d001      	beq.n	80037ac <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e026      	b.n	80037fa <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037ac:	f7fe fc52 	bl	8002054 <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	68ba      	ldr	r2, [r7, #8]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d302      	bcc.n	80037c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d113      	bne.n	80037ea <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c6:	f043 0220 	orr.w	r2, r3, #32
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2220      	movs	r2, #32
 80037d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e007      	b.n	80037fa <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	699b      	ldr	r3, [r3, #24]
 80037f0:	f003 0320 	and.w	r3, r3, #32
 80037f4:	2b20      	cmp	r3, #32
 80037f6:	d1cf      	bne.n	8003798 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3710      	adds	r7, #16
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
	...

08003804 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b084      	sub	sp, #16
 8003808:	af00      	add	r7, sp, #0
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	60b9      	str	r1, [r7, #8]
 800380e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003810:	e064      	b.n	80038dc <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	68b9      	ldr	r1, [r7, #8]
 8003816:	68f8      	ldr	r0, [r7, #12]
 8003818:	f000 f86e 	bl	80038f8 <I2C_IsErrorOccurred>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d001      	beq.n	8003826 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e062      	b.n	80038ec <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	699b      	ldr	r3, [r3, #24]
 800382c:	f003 0320 	and.w	r3, r3, #32
 8003830:	2b20      	cmp	r3, #32
 8003832:	d138      	bne.n	80038a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	699b      	ldr	r3, [r3, #24]
 800383a:	f003 0304 	and.w	r3, r3, #4
 800383e:	2b04      	cmp	r3, #4
 8003840:	d105      	bne.n	800384e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003846:	2b00      	cmp	r3, #0
 8003848:	d001      	beq.n	800384e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800384a:	2300      	movs	r3, #0
 800384c:	e04e      	b.n	80038ec <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	699b      	ldr	r3, [r3, #24]
 8003854:	f003 0310 	and.w	r3, r3, #16
 8003858:	2b10      	cmp	r3, #16
 800385a:	d107      	bne.n	800386c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2210      	movs	r2, #16
 8003862:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2204      	movs	r2, #4
 8003868:	645a      	str	r2, [r3, #68]	; 0x44
 800386a:	e002      	b.n	8003872 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2200      	movs	r2, #0
 8003870:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2220      	movs	r2, #32
 8003878:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	6859      	ldr	r1, [r3, #4]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	4b1b      	ldr	r3, [pc, #108]	; (80038f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8003886:	400b      	ands	r3, r1
 8003888:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2220      	movs	r2, #32
 800388e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2200      	movs	r2, #0
 800389e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e022      	b.n	80038ec <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038a6:	f7fe fbd5 	bl	8002054 <HAL_GetTick>
 80038aa:	4602      	mov	r2, r0
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	68ba      	ldr	r2, [r7, #8]
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d302      	bcc.n	80038bc <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d10f      	bne.n	80038dc <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c0:	f043 0220 	orr.w	r2, r3, #32
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2220      	movs	r2, #32
 80038cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e007      	b.n	80038ec <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	699b      	ldr	r3, [r3, #24]
 80038e2:	f003 0304 	and.w	r3, r3, #4
 80038e6:	2b04      	cmp	r3, #4
 80038e8:	d193      	bne.n	8003812 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80038ea:	2300      	movs	r3, #0
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3710      	adds	r7, #16
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	fe00e800 	.word	0xfe00e800

080038f8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b08a      	sub	sp, #40	; 0x28
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	60b9      	str	r1, [r7, #8]
 8003902:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003904:	2300      	movs	r3, #0
 8003906:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	699b      	ldr	r3, [r3, #24]
 8003910:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003912:	2300      	movs	r3, #0
 8003914:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	f003 0310 	and.w	r3, r3, #16
 8003920:	2b00      	cmp	r3, #0
 8003922:	d075      	beq.n	8003a10 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2210      	movs	r2, #16
 800392a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800392c:	e056      	b.n	80039dc <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003934:	d052      	beq.n	80039dc <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003936:	f7fe fb8d 	bl	8002054 <HAL_GetTick>
 800393a:	4602      	mov	r2, r0
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	68ba      	ldr	r2, [r7, #8]
 8003942:	429a      	cmp	r2, r3
 8003944:	d302      	bcc.n	800394c <I2C_IsErrorOccurred+0x54>
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d147      	bne.n	80039dc <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003956:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800395e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	699b      	ldr	r3, [r3, #24]
 8003966:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800396a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800396e:	d12e      	bne.n	80039ce <I2C_IsErrorOccurred+0xd6>
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003976:	d02a      	beq.n	80039ce <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003978:	7cfb      	ldrb	r3, [r7, #19]
 800397a:	2b20      	cmp	r3, #32
 800397c:	d027      	beq.n	80039ce <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	685a      	ldr	r2, [r3, #4]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800398c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800398e:	f7fe fb61 	bl	8002054 <HAL_GetTick>
 8003992:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003994:	e01b      	b.n	80039ce <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003996:	f7fe fb5d 	bl	8002054 <HAL_GetTick>
 800399a:	4602      	mov	r2, r0
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	2b19      	cmp	r3, #25
 80039a2:	d914      	bls.n	80039ce <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a8:	f043 0220 	orr.w	r2, r3, #32
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2220      	movs	r2, #32
 80039b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2200      	movs	r2, #0
 80039c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	699b      	ldr	r3, [r3, #24]
 80039d4:	f003 0320 	and.w	r3, r3, #32
 80039d8:	2b20      	cmp	r3, #32
 80039da:	d1dc      	bne.n	8003996 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	699b      	ldr	r3, [r3, #24]
 80039e2:	f003 0320 	and.w	r3, r3, #32
 80039e6:	2b20      	cmp	r3, #32
 80039e8:	d003      	beq.n	80039f2 <I2C_IsErrorOccurred+0xfa>
 80039ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d09d      	beq.n	800392e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80039f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d103      	bne.n	8003a02 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	2220      	movs	r2, #32
 8003a00:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003a02:	6a3b      	ldr	r3, [r7, #32]
 8003a04:	f043 0304 	orr.w	r3, r3, #4
 8003a08:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	699b      	ldr	r3, [r3, #24]
 8003a16:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d00b      	beq.n	8003a3a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003a22:	6a3b      	ldr	r3, [r7, #32]
 8003a24:	f043 0301 	orr.w	r3, r3, #1
 8003a28:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a32:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d00b      	beq.n	8003a5c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003a44:	6a3b      	ldr	r3, [r7, #32]
 8003a46:	f043 0308 	orr.w	r3, r3, #8
 8003a4a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a54:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d00b      	beq.n	8003a7e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003a66:	6a3b      	ldr	r3, [r7, #32]
 8003a68:	f043 0302 	orr.w	r3, r3, #2
 8003a6c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a76:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003a7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d01c      	beq.n	8003ac0 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003a86:	68f8      	ldr	r0, [r7, #12]
 8003a88:	f7ff fdbd 	bl	8003606 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	6859      	ldr	r1, [r3, #4]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	4b0d      	ldr	r3, [pc, #52]	; (8003acc <I2C_IsErrorOccurred+0x1d4>)
 8003a98:	400b      	ands	r3, r1
 8003a9a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003aa0:	6a3b      	ldr	r3, [r7, #32]
 8003aa2:	431a      	orrs	r2, r3
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2220      	movs	r2, #32
 8003aac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2200      	movs	r2, #0
 8003abc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003ac0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3728      	adds	r7, #40	; 0x28
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	fe00e800 	.word	0xfe00e800

08003ad0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b087      	sub	sp, #28
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	607b      	str	r3, [r7, #4]
 8003ada:	460b      	mov	r3, r1
 8003adc:	817b      	strh	r3, [r7, #10]
 8003ade:	4613      	mov	r3, r2
 8003ae0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003ae2:	897b      	ldrh	r3, [r7, #10]
 8003ae4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003ae8:	7a7b      	ldrb	r3, [r7, #9]
 8003aea:	041b      	lsls	r3, r3, #16
 8003aec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003af0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003af6:	6a3b      	ldr	r3, [r7, #32]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003afe:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	685a      	ldr	r2, [r3, #4]
 8003b06:	6a3b      	ldr	r3, [r7, #32]
 8003b08:	0d5b      	lsrs	r3, r3, #21
 8003b0a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003b0e:	4b08      	ldr	r3, [pc, #32]	; (8003b30 <I2C_TransferConfig+0x60>)
 8003b10:	430b      	orrs	r3, r1
 8003b12:	43db      	mvns	r3, r3
 8003b14:	ea02 0103 	and.w	r1, r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	697a      	ldr	r2, [r7, #20]
 8003b1e:	430a      	orrs	r2, r1
 8003b20:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003b22:	bf00      	nop
 8003b24:	371c      	adds	r7, #28
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop
 8003b30:	03ff63ff 	.word	0x03ff63ff

08003b34 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b085      	sub	sp, #20
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	460b      	mov	r3, r1
 8003b3e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003b40:	2300      	movs	r3, #0
 8003b42:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003b44:	887b      	ldrh	r3, [r7, #2]
 8003b46:	f003 0301 	and.w	r3, r3, #1
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00f      	beq.n	8003b6e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8003b54:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003b62:	2b28      	cmp	r3, #40	; 0x28
 8003b64:	d003      	beq.n	8003b6e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003b6c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003b6e:	887b      	ldrh	r3, [r7, #2]
 8003b70:	f003 0302 	and.w	r3, r3, #2
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d00f      	beq.n	8003b98 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8003b7e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003b8c:	2b28      	cmp	r3, #40	; 0x28
 8003b8e:	d003      	beq.n	8003b98 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003b96:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003b98:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	da03      	bge.n	8003ba8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003ba6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003ba8:	887b      	ldrh	r3, [r7, #2]
 8003baa:	2b10      	cmp	r3, #16
 8003bac:	d103      	bne.n	8003bb6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003bb4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003bb6:	887b      	ldrh	r3, [r7, #2]
 8003bb8:	2b20      	cmp	r3, #32
 8003bba:	d103      	bne.n	8003bc4 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f043 0320 	orr.w	r3, r3, #32
 8003bc2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003bc4:	887b      	ldrh	r3, [r7, #2]
 8003bc6:	2b40      	cmp	r3, #64	; 0x40
 8003bc8:	d103      	bne.n	8003bd2 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003bd0:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	6819      	ldr	r1, [r3, #0]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	43da      	mvns	r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	400a      	ands	r2, r1
 8003be2:	601a      	str	r2, [r3, #0]
}
 8003be4:	bf00      	nop
 8003be6:	3714      	adds	r7, #20
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	2b20      	cmp	r3, #32
 8003c04:	d138      	bne.n	8003c78 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d101      	bne.n	8003c14 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003c10:	2302      	movs	r3, #2
 8003c12:	e032      	b.n	8003c7a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2224      	movs	r2, #36	; 0x24
 8003c20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f022 0201 	bic.w	r2, r2, #1
 8003c32:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003c42:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	6819      	ldr	r1, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	683a      	ldr	r2, [r7, #0]
 8003c50:	430a      	orrs	r2, r1
 8003c52:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f042 0201 	orr.w	r2, r2, #1
 8003c62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2220      	movs	r2, #32
 8003c68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c74:	2300      	movs	r3, #0
 8003c76:	e000      	b.n	8003c7a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003c78:	2302      	movs	r3, #2
  }
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	370c      	adds	r7, #12
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr

08003c86 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003c86:	b480      	push	{r7}
 8003c88:	b085      	sub	sp, #20
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
 8003c8e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	2b20      	cmp	r3, #32
 8003c9a:	d139      	bne.n	8003d10 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d101      	bne.n	8003caa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003ca6:	2302      	movs	r3, #2
 8003ca8:	e033      	b.n	8003d12 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2201      	movs	r2, #1
 8003cae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2224      	movs	r2, #36	; 0x24
 8003cb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f022 0201 	bic.w	r2, r2, #1
 8003cc8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003cd8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	021b      	lsls	r3, r3, #8
 8003cde:	68fa      	ldr	r2, [r7, #12]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	68fa      	ldr	r2, [r7, #12]
 8003cea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f042 0201 	orr.w	r2, r2, #1
 8003cfa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2220      	movs	r2, #32
 8003d00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	e000      	b.n	8003d12 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003d10:	2302      	movs	r3, #2
  }
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3714      	adds	r7, #20
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
	...

08003d20 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003d20:	b480      	push	{r7}
 8003d22:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d24:	4b05      	ldr	r3, [pc, #20]	; (8003d3c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a04      	ldr	r2, [pc, #16]	; (8003d3c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003d2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d2e:	6013      	str	r3, [r2, #0]
}
 8003d30:	bf00      	nop
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
 8003d3a:	bf00      	nop
 8003d3c:	40007000 	.word	0x40007000

08003d40 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003d40:	b480      	push	{r7}
 8003d42:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003d44:	4b04      	ldr	r3, [pc, #16]	; (8003d58 <HAL_PWREx_GetVoltageRange+0x18>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr
 8003d56:	bf00      	nop
 8003d58:	40007000 	.word	0x40007000

08003d5c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b085      	sub	sp, #20
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d6a:	d130      	bne.n	8003dce <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d6c:	4b23      	ldr	r3, [pc, #140]	; (8003dfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d78:	d038      	beq.n	8003dec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d7a:	4b20      	ldr	r3, [pc, #128]	; (8003dfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d82:	4a1e      	ldr	r2, [pc, #120]	; (8003dfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d84:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d88:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003d8a:	4b1d      	ldr	r3, [pc, #116]	; (8003e00 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	2232      	movs	r2, #50	; 0x32
 8003d90:	fb02 f303 	mul.w	r3, r2, r3
 8003d94:	4a1b      	ldr	r2, [pc, #108]	; (8003e04 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003d96:	fba2 2303 	umull	r2, r3, r2, r3
 8003d9a:	0c9b      	lsrs	r3, r3, #18
 8003d9c:	3301      	adds	r3, #1
 8003d9e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003da0:	e002      	b.n	8003da8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	3b01      	subs	r3, #1
 8003da6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003da8:	4b14      	ldr	r3, [pc, #80]	; (8003dfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003daa:	695b      	ldr	r3, [r3, #20]
 8003dac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003db0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003db4:	d102      	bne.n	8003dbc <HAL_PWREx_ControlVoltageScaling+0x60>
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d1f2      	bne.n	8003da2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003dbc:	4b0f      	ldr	r3, [pc, #60]	; (8003dfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003dbe:	695b      	ldr	r3, [r3, #20]
 8003dc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dc8:	d110      	bne.n	8003dec <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003dca:	2303      	movs	r3, #3
 8003dcc:	e00f      	b.n	8003dee <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003dce:	4b0b      	ldr	r3, [pc, #44]	; (8003dfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003dd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dda:	d007      	beq.n	8003dec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003ddc:	4b07      	ldr	r3, [pc, #28]	; (8003dfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003de4:	4a05      	ldr	r2, [pc, #20]	; (8003dfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003de6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003dea:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003dec:	2300      	movs	r3, #0
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3714      	adds	r7, #20
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	40007000 	.word	0x40007000
 8003e00:	20000004 	.word	0x20000004
 8003e04:	431bde83 	.word	0x431bde83

08003e08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b088      	sub	sp, #32
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d102      	bne.n	8003e1c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	f000 bc02 	b.w	8004620 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e1c:	4b96      	ldr	r3, [pc, #600]	; (8004078 <HAL_RCC_OscConfig+0x270>)
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	f003 030c 	and.w	r3, r3, #12
 8003e24:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e26:	4b94      	ldr	r3, [pc, #592]	; (8004078 <HAL_RCC_OscConfig+0x270>)
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	f003 0303 	and.w	r3, r3, #3
 8003e2e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0310 	and.w	r3, r3, #16
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	f000 80e4 	beq.w	8004006 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d007      	beq.n	8003e54 <HAL_RCC_OscConfig+0x4c>
 8003e44:	69bb      	ldr	r3, [r7, #24]
 8003e46:	2b0c      	cmp	r3, #12
 8003e48:	f040 808b 	bne.w	8003f62 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	f040 8087 	bne.w	8003f62 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e54:	4b88      	ldr	r3, [pc, #544]	; (8004078 <HAL_RCC_OscConfig+0x270>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0302 	and.w	r3, r3, #2
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d005      	beq.n	8003e6c <HAL_RCC_OscConfig+0x64>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	699b      	ldr	r3, [r3, #24]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d101      	bne.n	8003e6c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e3d9      	b.n	8004620 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a1a      	ldr	r2, [r3, #32]
 8003e70:	4b81      	ldr	r3, [pc, #516]	; (8004078 <HAL_RCC_OscConfig+0x270>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0308 	and.w	r3, r3, #8
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d004      	beq.n	8003e86 <HAL_RCC_OscConfig+0x7e>
 8003e7c:	4b7e      	ldr	r3, [pc, #504]	; (8004078 <HAL_RCC_OscConfig+0x270>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e84:	e005      	b.n	8003e92 <HAL_RCC_OscConfig+0x8a>
 8003e86:	4b7c      	ldr	r3, [pc, #496]	; (8004078 <HAL_RCC_OscConfig+0x270>)
 8003e88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e8c:	091b      	lsrs	r3, r3, #4
 8003e8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d223      	bcs.n	8003ede <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6a1b      	ldr	r3, [r3, #32]
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f000 fd8c 	bl	80049b8 <RCC_SetFlashLatencyFromMSIRange>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d001      	beq.n	8003eaa <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e3ba      	b.n	8004620 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003eaa:	4b73      	ldr	r3, [pc, #460]	; (8004078 <HAL_RCC_OscConfig+0x270>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a72      	ldr	r2, [pc, #456]	; (8004078 <HAL_RCC_OscConfig+0x270>)
 8003eb0:	f043 0308 	orr.w	r3, r3, #8
 8003eb4:	6013      	str	r3, [r2, #0]
 8003eb6:	4b70      	ldr	r3, [pc, #448]	; (8004078 <HAL_RCC_OscConfig+0x270>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6a1b      	ldr	r3, [r3, #32]
 8003ec2:	496d      	ldr	r1, [pc, #436]	; (8004078 <HAL_RCC_OscConfig+0x270>)
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ec8:	4b6b      	ldr	r3, [pc, #428]	; (8004078 <HAL_RCC_OscConfig+0x270>)
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	69db      	ldr	r3, [r3, #28]
 8003ed4:	021b      	lsls	r3, r3, #8
 8003ed6:	4968      	ldr	r1, [pc, #416]	; (8004078 <HAL_RCC_OscConfig+0x270>)
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	604b      	str	r3, [r1, #4]
 8003edc:	e025      	b.n	8003f2a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ede:	4b66      	ldr	r3, [pc, #408]	; (8004078 <HAL_RCC_OscConfig+0x270>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a65      	ldr	r2, [pc, #404]	; (8004078 <HAL_RCC_OscConfig+0x270>)
 8003ee4:	f043 0308 	orr.w	r3, r3, #8
 8003ee8:	6013      	str	r3, [r2, #0]
 8003eea:	4b63      	ldr	r3, [pc, #396]	; (8004078 <HAL_RCC_OscConfig+0x270>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a1b      	ldr	r3, [r3, #32]
 8003ef6:	4960      	ldr	r1, [pc, #384]	; (8004078 <HAL_RCC_OscConfig+0x270>)
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003efc:	4b5e      	ldr	r3, [pc, #376]	; (8004078 <HAL_RCC_OscConfig+0x270>)
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	69db      	ldr	r3, [r3, #28]
 8003f08:	021b      	lsls	r3, r3, #8
 8003f0a:	495b      	ldr	r1, [pc, #364]	; (8004078 <HAL_RCC_OscConfig+0x270>)
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f10:	69bb      	ldr	r3, [r7, #24]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d109      	bne.n	8003f2a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a1b      	ldr	r3, [r3, #32]
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f000 fd4c 	bl	80049b8 <RCC_SetFlashLatencyFromMSIRange>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d001      	beq.n	8003f2a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e37a      	b.n	8004620 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f2a:	f000 fc81 	bl	8004830 <HAL_RCC_GetSysClockFreq>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	4b51      	ldr	r3, [pc, #324]	; (8004078 <HAL_RCC_OscConfig+0x270>)
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	091b      	lsrs	r3, r3, #4
 8003f36:	f003 030f 	and.w	r3, r3, #15
 8003f3a:	4950      	ldr	r1, [pc, #320]	; (800407c <HAL_RCC_OscConfig+0x274>)
 8003f3c:	5ccb      	ldrb	r3, [r1, r3]
 8003f3e:	f003 031f 	and.w	r3, r3, #31
 8003f42:	fa22 f303 	lsr.w	r3, r2, r3
 8003f46:	4a4e      	ldr	r2, [pc, #312]	; (8004080 <HAL_RCC_OscConfig+0x278>)
 8003f48:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003f4a:	4b4e      	ldr	r3, [pc, #312]	; (8004084 <HAL_RCC_OscConfig+0x27c>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f7fe f830 	bl	8001fb4 <HAL_InitTick>
 8003f54:	4603      	mov	r3, r0
 8003f56:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003f58:	7bfb      	ldrb	r3, [r7, #15]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d052      	beq.n	8004004 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003f5e:	7bfb      	ldrb	r3, [r7, #15]
 8003f60:	e35e      	b.n	8004620 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	699b      	ldr	r3, [r3, #24]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d032      	beq.n	8003fd0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003f6a:	4b43      	ldr	r3, [pc, #268]	; (8004078 <HAL_RCC_OscConfig+0x270>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a42      	ldr	r2, [pc, #264]	; (8004078 <HAL_RCC_OscConfig+0x270>)
 8003f70:	f043 0301 	orr.w	r3, r3, #1
 8003f74:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003f76:	f7fe f86d 	bl	8002054 <HAL_GetTick>
 8003f7a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f7c:	e008      	b.n	8003f90 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f7e:	f7fe f869 	bl	8002054 <HAL_GetTick>
 8003f82:	4602      	mov	r2, r0
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	d901      	bls.n	8003f90 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	e347      	b.n	8004620 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f90:	4b39      	ldr	r3, [pc, #228]	; (8004078 <HAL_RCC_OscConfig+0x270>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0302 	and.w	r3, r3, #2
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d0f0      	beq.n	8003f7e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f9c:	4b36      	ldr	r3, [pc, #216]	; (8004078 <HAL_RCC_OscConfig+0x270>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a35      	ldr	r2, [pc, #212]	; (8004078 <HAL_RCC_OscConfig+0x270>)
 8003fa2:	f043 0308 	orr.w	r3, r3, #8
 8003fa6:	6013      	str	r3, [r2, #0]
 8003fa8:	4b33      	ldr	r3, [pc, #204]	; (8004078 <HAL_RCC_OscConfig+0x270>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6a1b      	ldr	r3, [r3, #32]
 8003fb4:	4930      	ldr	r1, [pc, #192]	; (8004078 <HAL_RCC_OscConfig+0x270>)
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003fba:	4b2f      	ldr	r3, [pc, #188]	; (8004078 <HAL_RCC_OscConfig+0x270>)
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	69db      	ldr	r3, [r3, #28]
 8003fc6:	021b      	lsls	r3, r3, #8
 8003fc8:	492b      	ldr	r1, [pc, #172]	; (8004078 <HAL_RCC_OscConfig+0x270>)
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	604b      	str	r3, [r1, #4]
 8003fce:	e01a      	b.n	8004006 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003fd0:	4b29      	ldr	r3, [pc, #164]	; (8004078 <HAL_RCC_OscConfig+0x270>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a28      	ldr	r2, [pc, #160]	; (8004078 <HAL_RCC_OscConfig+0x270>)
 8003fd6:	f023 0301 	bic.w	r3, r3, #1
 8003fda:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003fdc:	f7fe f83a 	bl	8002054 <HAL_GetTick>
 8003fe0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003fe2:	e008      	b.n	8003ff6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003fe4:	f7fe f836 	bl	8002054 <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d901      	bls.n	8003ff6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e314      	b.n	8004620 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ff6:	4b20      	ldr	r3, [pc, #128]	; (8004078 <HAL_RCC_OscConfig+0x270>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0302 	and.w	r3, r3, #2
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d1f0      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x1dc>
 8004002:	e000      	b.n	8004006 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004004:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0301 	and.w	r3, r3, #1
 800400e:	2b00      	cmp	r3, #0
 8004010:	d073      	beq.n	80040fa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004012:	69bb      	ldr	r3, [r7, #24]
 8004014:	2b08      	cmp	r3, #8
 8004016:	d005      	beq.n	8004024 <HAL_RCC_OscConfig+0x21c>
 8004018:	69bb      	ldr	r3, [r7, #24]
 800401a:	2b0c      	cmp	r3, #12
 800401c:	d10e      	bne.n	800403c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	2b03      	cmp	r3, #3
 8004022:	d10b      	bne.n	800403c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004024:	4b14      	ldr	r3, [pc, #80]	; (8004078 <HAL_RCC_OscConfig+0x270>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800402c:	2b00      	cmp	r3, #0
 800402e:	d063      	beq.n	80040f8 <HAL_RCC_OscConfig+0x2f0>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d15f      	bne.n	80040f8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e2f1      	b.n	8004620 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004044:	d106      	bne.n	8004054 <HAL_RCC_OscConfig+0x24c>
 8004046:	4b0c      	ldr	r3, [pc, #48]	; (8004078 <HAL_RCC_OscConfig+0x270>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a0b      	ldr	r2, [pc, #44]	; (8004078 <HAL_RCC_OscConfig+0x270>)
 800404c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004050:	6013      	str	r3, [r2, #0]
 8004052:	e025      	b.n	80040a0 <HAL_RCC_OscConfig+0x298>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800405c:	d114      	bne.n	8004088 <HAL_RCC_OscConfig+0x280>
 800405e:	4b06      	ldr	r3, [pc, #24]	; (8004078 <HAL_RCC_OscConfig+0x270>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a05      	ldr	r2, [pc, #20]	; (8004078 <HAL_RCC_OscConfig+0x270>)
 8004064:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004068:	6013      	str	r3, [r2, #0]
 800406a:	4b03      	ldr	r3, [pc, #12]	; (8004078 <HAL_RCC_OscConfig+0x270>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a02      	ldr	r2, [pc, #8]	; (8004078 <HAL_RCC_OscConfig+0x270>)
 8004070:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004074:	6013      	str	r3, [r2, #0]
 8004076:	e013      	b.n	80040a0 <HAL_RCC_OscConfig+0x298>
 8004078:	40021000 	.word	0x40021000
 800407c:	0800a8b4 	.word	0x0800a8b4
 8004080:	20000004 	.word	0x20000004
 8004084:	20000008 	.word	0x20000008
 8004088:	4ba0      	ldr	r3, [pc, #640]	; (800430c <HAL_RCC_OscConfig+0x504>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a9f      	ldr	r2, [pc, #636]	; (800430c <HAL_RCC_OscConfig+0x504>)
 800408e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004092:	6013      	str	r3, [r2, #0]
 8004094:	4b9d      	ldr	r3, [pc, #628]	; (800430c <HAL_RCC_OscConfig+0x504>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a9c      	ldr	r2, [pc, #624]	; (800430c <HAL_RCC_OscConfig+0x504>)
 800409a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800409e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d013      	beq.n	80040d0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040a8:	f7fd ffd4 	bl	8002054 <HAL_GetTick>
 80040ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040ae:	e008      	b.n	80040c2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040b0:	f7fd ffd0 	bl	8002054 <HAL_GetTick>
 80040b4:	4602      	mov	r2, r0
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	2b64      	cmp	r3, #100	; 0x64
 80040bc:	d901      	bls.n	80040c2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e2ae      	b.n	8004620 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040c2:	4b92      	ldr	r3, [pc, #584]	; (800430c <HAL_RCC_OscConfig+0x504>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d0f0      	beq.n	80040b0 <HAL_RCC_OscConfig+0x2a8>
 80040ce:	e014      	b.n	80040fa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d0:	f7fd ffc0 	bl	8002054 <HAL_GetTick>
 80040d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040d6:	e008      	b.n	80040ea <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040d8:	f7fd ffbc 	bl	8002054 <HAL_GetTick>
 80040dc:	4602      	mov	r2, r0
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	2b64      	cmp	r3, #100	; 0x64
 80040e4:	d901      	bls.n	80040ea <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	e29a      	b.n	8004620 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040ea:	4b88      	ldr	r3, [pc, #544]	; (800430c <HAL_RCC_OscConfig+0x504>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d1f0      	bne.n	80040d8 <HAL_RCC_OscConfig+0x2d0>
 80040f6:	e000      	b.n	80040fa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0302 	and.w	r3, r3, #2
 8004102:	2b00      	cmp	r3, #0
 8004104:	d060      	beq.n	80041c8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	2b04      	cmp	r3, #4
 800410a:	d005      	beq.n	8004118 <HAL_RCC_OscConfig+0x310>
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	2b0c      	cmp	r3, #12
 8004110:	d119      	bne.n	8004146 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	2b02      	cmp	r3, #2
 8004116:	d116      	bne.n	8004146 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004118:	4b7c      	ldr	r3, [pc, #496]	; (800430c <HAL_RCC_OscConfig+0x504>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004120:	2b00      	cmp	r3, #0
 8004122:	d005      	beq.n	8004130 <HAL_RCC_OscConfig+0x328>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d101      	bne.n	8004130 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e277      	b.n	8004620 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004130:	4b76      	ldr	r3, [pc, #472]	; (800430c <HAL_RCC_OscConfig+0x504>)
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	691b      	ldr	r3, [r3, #16]
 800413c:	061b      	lsls	r3, r3, #24
 800413e:	4973      	ldr	r1, [pc, #460]	; (800430c <HAL_RCC_OscConfig+0x504>)
 8004140:	4313      	orrs	r3, r2
 8004142:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004144:	e040      	b.n	80041c8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d023      	beq.n	8004196 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800414e:	4b6f      	ldr	r3, [pc, #444]	; (800430c <HAL_RCC_OscConfig+0x504>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a6e      	ldr	r2, [pc, #440]	; (800430c <HAL_RCC_OscConfig+0x504>)
 8004154:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004158:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800415a:	f7fd ff7b 	bl	8002054 <HAL_GetTick>
 800415e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004160:	e008      	b.n	8004174 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004162:	f7fd ff77 	bl	8002054 <HAL_GetTick>
 8004166:	4602      	mov	r2, r0
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	2b02      	cmp	r3, #2
 800416e:	d901      	bls.n	8004174 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004170:	2303      	movs	r3, #3
 8004172:	e255      	b.n	8004620 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004174:	4b65      	ldr	r3, [pc, #404]	; (800430c <HAL_RCC_OscConfig+0x504>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800417c:	2b00      	cmp	r3, #0
 800417e:	d0f0      	beq.n	8004162 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004180:	4b62      	ldr	r3, [pc, #392]	; (800430c <HAL_RCC_OscConfig+0x504>)
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	691b      	ldr	r3, [r3, #16]
 800418c:	061b      	lsls	r3, r3, #24
 800418e:	495f      	ldr	r1, [pc, #380]	; (800430c <HAL_RCC_OscConfig+0x504>)
 8004190:	4313      	orrs	r3, r2
 8004192:	604b      	str	r3, [r1, #4]
 8004194:	e018      	b.n	80041c8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004196:	4b5d      	ldr	r3, [pc, #372]	; (800430c <HAL_RCC_OscConfig+0x504>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a5c      	ldr	r2, [pc, #368]	; (800430c <HAL_RCC_OscConfig+0x504>)
 800419c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041a2:	f7fd ff57 	bl	8002054 <HAL_GetTick>
 80041a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041a8:	e008      	b.n	80041bc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041aa:	f7fd ff53 	bl	8002054 <HAL_GetTick>
 80041ae:	4602      	mov	r2, r0
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	d901      	bls.n	80041bc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80041b8:	2303      	movs	r3, #3
 80041ba:	e231      	b.n	8004620 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041bc:	4b53      	ldr	r3, [pc, #332]	; (800430c <HAL_RCC_OscConfig+0x504>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d1f0      	bne.n	80041aa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 0308 	and.w	r3, r3, #8
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d03c      	beq.n	800424e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	695b      	ldr	r3, [r3, #20]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d01c      	beq.n	8004216 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041dc:	4b4b      	ldr	r3, [pc, #300]	; (800430c <HAL_RCC_OscConfig+0x504>)
 80041de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041e2:	4a4a      	ldr	r2, [pc, #296]	; (800430c <HAL_RCC_OscConfig+0x504>)
 80041e4:	f043 0301 	orr.w	r3, r3, #1
 80041e8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041ec:	f7fd ff32 	bl	8002054 <HAL_GetTick>
 80041f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041f2:	e008      	b.n	8004206 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041f4:	f7fd ff2e 	bl	8002054 <HAL_GetTick>
 80041f8:	4602      	mov	r2, r0
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	2b02      	cmp	r3, #2
 8004200:	d901      	bls.n	8004206 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e20c      	b.n	8004620 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004206:	4b41      	ldr	r3, [pc, #260]	; (800430c <HAL_RCC_OscConfig+0x504>)
 8004208:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800420c:	f003 0302 	and.w	r3, r3, #2
 8004210:	2b00      	cmp	r3, #0
 8004212:	d0ef      	beq.n	80041f4 <HAL_RCC_OscConfig+0x3ec>
 8004214:	e01b      	b.n	800424e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004216:	4b3d      	ldr	r3, [pc, #244]	; (800430c <HAL_RCC_OscConfig+0x504>)
 8004218:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800421c:	4a3b      	ldr	r2, [pc, #236]	; (800430c <HAL_RCC_OscConfig+0x504>)
 800421e:	f023 0301 	bic.w	r3, r3, #1
 8004222:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004226:	f7fd ff15 	bl	8002054 <HAL_GetTick>
 800422a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800422c:	e008      	b.n	8004240 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800422e:	f7fd ff11 	bl	8002054 <HAL_GetTick>
 8004232:	4602      	mov	r2, r0
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	1ad3      	subs	r3, r2, r3
 8004238:	2b02      	cmp	r3, #2
 800423a:	d901      	bls.n	8004240 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800423c:	2303      	movs	r3, #3
 800423e:	e1ef      	b.n	8004620 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004240:	4b32      	ldr	r3, [pc, #200]	; (800430c <HAL_RCC_OscConfig+0x504>)
 8004242:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004246:	f003 0302 	and.w	r3, r3, #2
 800424a:	2b00      	cmp	r3, #0
 800424c:	d1ef      	bne.n	800422e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0304 	and.w	r3, r3, #4
 8004256:	2b00      	cmp	r3, #0
 8004258:	f000 80a6 	beq.w	80043a8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800425c:	2300      	movs	r3, #0
 800425e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004260:	4b2a      	ldr	r3, [pc, #168]	; (800430c <HAL_RCC_OscConfig+0x504>)
 8004262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004264:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d10d      	bne.n	8004288 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800426c:	4b27      	ldr	r3, [pc, #156]	; (800430c <HAL_RCC_OscConfig+0x504>)
 800426e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004270:	4a26      	ldr	r2, [pc, #152]	; (800430c <HAL_RCC_OscConfig+0x504>)
 8004272:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004276:	6593      	str	r3, [r2, #88]	; 0x58
 8004278:	4b24      	ldr	r3, [pc, #144]	; (800430c <HAL_RCC_OscConfig+0x504>)
 800427a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800427c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004280:	60bb      	str	r3, [r7, #8]
 8004282:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004284:	2301      	movs	r3, #1
 8004286:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004288:	4b21      	ldr	r3, [pc, #132]	; (8004310 <HAL_RCC_OscConfig+0x508>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004290:	2b00      	cmp	r3, #0
 8004292:	d118      	bne.n	80042c6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004294:	4b1e      	ldr	r3, [pc, #120]	; (8004310 <HAL_RCC_OscConfig+0x508>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a1d      	ldr	r2, [pc, #116]	; (8004310 <HAL_RCC_OscConfig+0x508>)
 800429a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800429e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042a0:	f7fd fed8 	bl	8002054 <HAL_GetTick>
 80042a4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042a6:	e008      	b.n	80042ba <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042a8:	f7fd fed4 	bl	8002054 <HAL_GetTick>
 80042ac:	4602      	mov	r2, r0
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d901      	bls.n	80042ba <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e1b2      	b.n	8004620 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042ba:	4b15      	ldr	r3, [pc, #84]	; (8004310 <HAL_RCC_OscConfig+0x508>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d0f0      	beq.n	80042a8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d108      	bne.n	80042e0 <HAL_RCC_OscConfig+0x4d8>
 80042ce:	4b0f      	ldr	r3, [pc, #60]	; (800430c <HAL_RCC_OscConfig+0x504>)
 80042d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042d4:	4a0d      	ldr	r2, [pc, #52]	; (800430c <HAL_RCC_OscConfig+0x504>)
 80042d6:	f043 0301 	orr.w	r3, r3, #1
 80042da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042de:	e029      	b.n	8004334 <HAL_RCC_OscConfig+0x52c>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	2b05      	cmp	r3, #5
 80042e6:	d115      	bne.n	8004314 <HAL_RCC_OscConfig+0x50c>
 80042e8:	4b08      	ldr	r3, [pc, #32]	; (800430c <HAL_RCC_OscConfig+0x504>)
 80042ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ee:	4a07      	ldr	r2, [pc, #28]	; (800430c <HAL_RCC_OscConfig+0x504>)
 80042f0:	f043 0304 	orr.w	r3, r3, #4
 80042f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042f8:	4b04      	ldr	r3, [pc, #16]	; (800430c <HAL_RCC_OscConfig+0x504>)
 80042fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042fe:	4a03      	ldr	r2, [pc, #12]	; (800430c <HAL_RCC_OscConfig+0x504>)
 8004300:	f043 0301 	orr.w	r3, r3, #1
 8004304:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004308:	e014      	b.n	8004334 <HAL_RCC_OscConfig+0x52c>
 800430a:	bf00      	nop
 800430c:	40021000 	.word	0x40021000
 8004310:	40007000 	.word	0x40007000
 8004314:	4b9a      	ldr	r3, [pc, #616]	; (8004580 <HAL_RCC_OscConfig+0x778>)
 8004316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800431a:	4a99      	ldr	r2, [pc, #612]	; (8004580 <HAL_RCC_OscConfig+0x778>)
 800431c:	f023 0301 	bic.w	r3, r3, #1
 8004320:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004324:	4b96      	ldr	r3, [pc, #600]	; (8004580 <HAL_RCC_OscConfig+0x778>)
 8004326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800432a:	4a95      	ldr	r2, [pc, #596]	; (8004580 <HAL_RCC_OscConfig+0x778>)
 800432c:	f023 0304 	bic.w	r3, r3, #4
 8004330:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d016      	beq.n	800436a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800433c:	f7fd fe8a 	bl	8002054 <HAL_GetTick>
 8004340:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004342:	e00a      	b.n	800435a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004344:	f7fd fe86 	bl	8002054 <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004352:	4293      	cmp	r3, r2
 8004354:	d901      	bls.n	800435a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	e162      	b.n	8004620 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800435a:	4b89      	ldr	r3, [pc, #548]	; (8004580 <HAL_RCC_OscConfig+0x778>)
 800435c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004360:	f003 0302 	and.w	r3, r3, #2
 8004364:	2b00      	cmp	r3, #0
 8004366:	d0ed      	beq.n	8004344 <HAL_RCC_OscConfig+0x53c>
 8004368:	e015      	b.n	8004396 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800436a:	f7fd fe73 	bl	8002054 <HAL_GetTick>
 800436e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004370:	e00a      	b.n	8004388 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004372:	f7fd fe6f 	bl	8002054 <HAL_GetTick>
 8004376:	4602      	mov	r2, r0
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004380:	4293      	cmp	r3, r2
 8004382:	d901      	bls.n	8004388 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004384:	2303      	movs	r3, #3
 8004386:	e14b      	b.n	8004620 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004388:	4b7d      	ldr	r3, [pc, #500]	; (8004580 <HAL_RCC_OscConfig+0x778>)
 800438a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800438e:	f003 0302 	and.w	r3, r3, #2
 8004392:	2b00      	cmp	r3, #0
 8004394:	d1ed      	bne.n	8004372 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004396:	7ffb      	ldrb	r3, [r7, #31]
 8004398:	2b01      	cmp	r3, #1
 800439a:	d105      	bne.n	80043a8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800439c:	4b78      	ldr	r3, [pc, #480]	; (8004580 <HAL_RCC_OscConfig+0x778>)
 800439e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043a0:	4a77      	ldr	r2, [pc, #476]	; (8004580 <HAL_RCC_OscConfig+0x778>)
 80043a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043a6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0320 	and.w	r3, r3, #32
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d03c      	beq.n	800442e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d01c      	beq.n	80043f6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80043bc:	4b70      	ldr	r3, [pc, #448]	; (8004580 <HAL_RCC_OscConfig+0x778>)
 80043be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043c2:	4a6f      	ldr	r2, [pc, #444]	; (8004580 <HAL_RCC_OscConfig+0x778>)
 80043c4:	f043 0301 	orr.w	r3, r3, #1
 80043c8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043cc:	f7fd fe42 	bl	8002054 <HAL_GetTick>
 80043d0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80043d2:	e008      	b.n	80043e6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80043d4:	f7fd fe3e 	bl	8002054 <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	2b02      	cmp	r3, #2
 80043e0:	d901      	bls.n	80043e6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e11c      	b.n	8004620 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80043e6:	4b66      	ldr	r3, [pc, #408]	; (8004580 <HAL_RCC_OscConfig+0x778>)
 80043e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043ec:	f003 0302 	and.w	r3, r3, #2
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d0ef      	beq.n	80043d4 <HAL_RCC_OscConfig+0x5cc>
 80043f4:	e01b      	b.n	800442e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80043f6:	4b62      	ldr	r3, [pc, #392]	; (8004580 <HAL_RCC_OscConfig+0x778>)
 80043f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043fc:	4a60      	ldr	r2, [pc, #384]	; (8004580 <HAL_RCC_OscConfig+0x778>)
 80043fe:	f023 0301 	bic.w	r3, r3, #1
 8004402:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004406:	f7fd fe25 	bl	8002054 <HAL_GetTick>
 800440a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800440c:	e008      	b.n	8004420 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800440e:	f7fd fe21 	bl	8002054 <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	2b02      	cmp	r3, #2
 800441a:	d901      	bls.n	8004420 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800441c:	2303      	movs	r3, #3
 800441e:	e0ff      	b.n	8004620 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004420:	4b57      	ldr	r3, [pc, #348]	; (8004580 <HAL_RCC_OscConfig+0x778>)
 8004422:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004426:	f003 0302 	and.w	r3, r3, #2
 800442a:	2b00      	cmp	r3, #0
 800442c:	d1ef      	bne.n	800440e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004432:	2b00      	cmp	r3, #0
 8004434:	f000 80f3 	beq.w	800461e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800443c:	2b02      	cmp	r3, #2
 800443e:	f040 80c9 	bne.w	80045d4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004442:	4b4f      	ldr	r3, [pc, #316]	; (8004580 <HAL_RCC_OscConfig+0x778>)
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	f003 0203 	and.w	r2, r3, #3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004452:	429a      	cmp	r2, r3
 8004454:	d12c      	bne.n	80044b0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004460:	3b01      	subs	r3, #1
 8004462:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004464:	429a      	cmp	r2, r3
 8004466:	d123      	bne.n	80044b0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004472:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004474:	429a      	cmp	r2, r3
 8004476:	d11b      	bne.n	80044b0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004482:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004484:	429a      	cmp	r2, r3
 8004486:	d113      	bne.n	80044b0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004492:	085b      	lsrs	r3, r3, #1
 8004494:	3b01      	subs	r3, #1
 8004496:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004498:	429a      	cmp	r2, r3
 800449a:	d109      	bne.n	80044b0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a6:	085b      	lsrs	r3, r3, #1
 80044a8:	3b01      	subs	r3, #1
 80044aa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d06b      	beq.n	8004588 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80044b0:	69bb      	ldr	r3, [r7, #24]
 80044b2:	2b0c      	cmp	r3, #12
 80044b4:	d062      	beq.n	800457c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80044b6:	4b32      	ldr	r3, [pc, #200]	; (8004580 <HAL_RCC_OscConfig+0x778>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d001      	beq.n	80044c6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e0ac      	b.n	8004620 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80044c6:	4b2e      	ldr	r3, [pc, #184]	; (8004580 <HAL_RCC_OscConfig+0x778>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a2d      	ldr	r2, [pc, #180]	; (8004580 <HAL_RCC_OscConfig+0x778>)
 80044cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044d0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80044d2:	f7fd fdbf 	bl	8002054 <HAL_GetTick>
 80044d6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044d8:	e008      	b.n	80044ec <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044da:	f7fd fdbb 	bl	8002054 <HAL_GetTick>
 80044de:	4602      	mov	r2, r0
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	d901      	bls.n	80044ec <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80044e8:	2303      	movs	r3, #3
 80044ea:	e099      	b.n	8004620 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044ec:	4b24      	ldr	r3, [pc, #144]	; (8004580 <HAL_RCC_OscConfig+0x778>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d1f0      	bne.n	80044da <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044f8:	4b21      	ldr	r3, [pc, #132]	; (8004580 <HAL_RCC_OscConfig+0x778>)
 80044fa:	68da      	ldr	r2, [r3, #12]
 80044fc:	4b21      	ldr	r3, [pc, #132]	; (8004584 <HAL_RCC_OscConfig+0x77c>)
 80044fe:	4013      	ands	r3, r2
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004508:	3a01      	subs	r2, #1
 800450a:	0112      	lsls	r2, r2, #4
 800450c:	4311      	orrs	r1, r2
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004512:	0212      	lsls	r2, r2, #8
 8004514:	4311      	orrs	r1, r2
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800451a:	0852      	lsrs	r2, r2, #1
 800451c:	3a01      	subs	r2, #1
 800451e:	0552      	lsls	r2, r2, #21
 8004520:	4311      	orrs	r1, r2
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004526:	0852      	lsrs	r2, r2, #1
 8004528:	3a01      	subs	r2, #1
 800452a:	0652      	lsls	r2, r2, #25
 800452c:	4311      	orrs	r1, r2
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004532:	06d2      	lsls	r2, r2, #27
 8004534:	430a      	orrs	r2, r1
 8004536:	4912      	ldr	r1, [pc, #72]	; (8004580 <HAL_RCC_OscConfig+0x778>)
 8004538:	4313      	orrs	r3, r2
 800453a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800453c:	4b10      	ldr	r3, [pc, #64]	; (8004580 <HAL_RCC_OscConfig+0x778>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a0f      	ldr	r2, [pc, #60]	; (8004580 <HAL_RCC_OscConfig+0x778>)
 8004542:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004546:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004548:	4b0d      	ldr	r3, [pc, #52]	; (8004580 <HAL_RCC_OscConfig+0x778>)
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	4a0c      	ldr	r2, [pc, #48]	; (8004580 <HAL_RCC_OscConfig+0x778>)
 800454e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004552:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004554:	f7fd fd7e 	bl	8002054 <HAL_GetTick>
 8004558:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800455a:	e008      	b.n	800456e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800455c:	f7fd fd7a 	bl	8002054 <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	2b02      	cmp	r3, #2
 8004568:	d901      	bls.n	800456e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e058      	b.n	8004620 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800456e:	4b04      	ldr	r3, [pc, #16]	; (8004580 <HAL_RCC_OscConfig+0x778>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d0f0      	beq.n	800455c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800457a:	e050      	b.n	800461e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e04f      	b.n	8004620 <HAL_RCC_OscConfig+0x818>
 8004580:	40021000 	.word	0x40021000
 8004584:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004588:	4b27      	ldr	r3, [pc, #156]	; (8004628 <HAL_RCC_OscConfig+0x820>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004590:	2b00      	cmp	r3, #0
 8004592:	d144      	bne.n	800461e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004594:	4b24      	ldr	r3, [pc, #144]	; (8004628 <HAL_RCC_OscConfig+0x820>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a23      	ldr	r2, [pc, #140]	; (8004628 <HAL_RCC_OscConfig+0x820>)
 800459a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800459e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80045a0:	4b21      	ldr	r3, [pc, #132]	; (8004628 <HAL_RCC_OscConfig+0x820>)
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	4a20      	ldr	r2, [pc, #128]	; (8004628 <HAL_RCC_OscConfig+0x820>)
 80045a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045aa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80045ac:	f7fd fd52 	bl	8002054 <HAL_GetTick>
 80045b0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045b2:	e008      	b.n	80045c6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045b4:	f7fd fd4e 	bl	8002054 <HAL_GetTick>
 80045b8:	4602      	mov	r2, r0
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	2b02      	cmp	r3, #2
 80045c0:	d901      	bls.n	80045c6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80045c2:	2303      	movs	r3, #3
 80045c4:	e02c      	b.n	8004620 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045c6:	4b18      	ldr	r3, [pc, #96]	; (8004628 <HAL_RCC_OscConfig+0x820>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d0f0      	beq.n	80045b4 <HAL_RCC_OscConfig+0x7ac>
 80045d2:	e024      	b.n	800461e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80045d4:	69bb      	ldr	r3, [r7, #24]
 80045d6:	2b0c      	cmp	r3, #12
 80045d8:	d01f      	beq.n	800461a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045da:	4b13      	ldr	r3, [pc, #76]	; (8004628 <HAL_RCC_OscConfig+0x820>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a12      	ldr	r2, [pc, #72]	; (8004628 <HAL_RCC_OscConfig+0x820>)
 80045e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e6:	f7fd fd35 	bl	8002054 <HAL_GetTick>
 80045ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045ec:	e008      	b.n	8004600 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045ee:	f7fd fd31 	bl	8002054 <HAL_GetTick>
 80045f2:	4602      	mov	r2, r0
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	2b02      	cmp	r3, #2
 80045fa:	d901      	bls.n	8004600 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80045fc:	2303      	movs	r3, #3
 80045fe:	e00f      	b.n	8004620 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004600:	4b09      	ldr	r3, [pc, #36]	; (8004628 <HAL_RCC_OscConfig+0x820>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004608:	2b00      	cmp	r3, #0
 800460a:	d1f0      	bne.n	80045ee <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800460c:	4b06      	ldr	r3, [pc, #24]	; (8004628 <HAL_RCC_OscConfig+0x820>)
 800460e:	68da      	ldr	r2, [r3, #12]
 8004610:	4905      	ldr	r1, [pc, #20]	; (8004628 <HAL_RCC_OscConfig+0x820>)
 8004612:	4b06      	ldr	r3, [pc, #24]	; (800462c <HAL_RCC_OscConfig+0x824>)
 8004614:	4013      	ands	r3, r2
 8004616:	60cb      	str	r3, [r1, #12]
 8004618:	e001      	b.n	800461e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e000      	b.n	8004620 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800461e:	2300      	movs	r3, #0
}
 8004620:	4618      	mov	r0, r3
 8004622:	3720      	adds	r7, #32
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}
 8004628:	40021000 	.word	0x40021000
 800462c:	feeefffc 	.word	0xfeeefffc

08004630 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b084      	sub	sp, #16
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d101      	bne.n	8004644 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e0e7      	b.n	8004814 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004644:	4b75      	ldr	r3, [pc, #468]	; (800481c <HAL_RCC_ClockConfig+0x1ec>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0307 	and.w	r3, r3, #7
 800464c:	683a      	ldr	r2, [r7, #0]
 800464e:	429a      	cmp	r2, r3
 8004650:	d910      	bls.n	8004674 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004652:	4b72      	ldr	r3, [pc, #456]	; (800481c <HAL_RCC_ClockConfig+0x1ec>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f023 0207 	bic.w	r2, r3, #7
 800465a:	4970      	ldr	r1, [pc, #448]	; (800481c <HAL_RCC_ClockConfig+0x1ec>)
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	4313      	orrs	r3, r2
 8004660:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004662:	4b6e      	ldr	r3, [pc, #440]	; (800481c <HAL_RCC_ClockConfig+0x1ec>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 0307 	and.w	r3, r3, #7
 800466a:	683a      	ldr	r2, [r7, #0]
 800466c:	429a      	cmp	r2, r3
 800466e:	d001      	beq.n	8004674 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e0cf      	b.n	8004814 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0302 	and.w	r3, r3, #2
 800467c:	2b00      	cmp	r3, #0
 800467e:	d010      	beq.n	80046a2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	689a      	ldr	r2, [r3, #8]
 8004684:	4b66      	ldr	r3, [pc, #408]	; (8004820 <HAL_RCC_ClockConfig+0x1f0>)
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800468c:	429a      	cmp	r2, r3
 800468e:	d908      	bls.n	80046a2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004690:	4b63      	ldr	r3, [pc, #396]	; (8004820 <HAL_RCC_ClockConfig+0x1f0>)
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	4960      	ldr	r1, [pc, #384]	; (8004820 <HAL_RCC_ClockConfig+0x1f0>)
 800469e:	4313      	orrs	r3, r2
 80046a0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0301 	and.w	r3, r3, #1
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d04c      	beq.n	8004748 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	2b03      	cmp	r3, #3
 80046b4:	d107      	bne.n	80046c6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046b6:	4b5a      	ldr	r3, [pc, #360]	; (8004820 <HAL_RCC_ClockConfig+0x1f0>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d121      	bne.n	8004706 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e0a6      	b.n	8004814 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d107      	bne.n	80046de <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80046ce:	4b54      	ldr	r3, [pc, #336]	; (8004820 <HAL_RCC_ClockConfig+0x1f0>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d115      	bne.n	8004706 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e09a      	b.n	8004814 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d107      	bne.n	80046f6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80046e6:	4b4e      	ldr	r3, [pc, #312]	; (8004820 <HAL_RCC_ClockConfig+0x1f0>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0302 	and.w	r3, r3, #2
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d109      	bne.n	8004706 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e08e      	b.n	8004814 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046f6:	4b4a      	ldr	r3, [pc, #296]	; (8004820 <HAL_RCC_ClockConfig+0x1f0>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d101      	bne.n	8004706 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e086      	b.n	8004814 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004706:	4b46      	ldr	r3, [pc, #280]	; (8004820 <HAL_RCC_ClockConfig+0x1f0>)
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	f023 0203 	bic.w	r2, r3, #3
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	4943      	ldr	r1, [pc, #268]	; (8004820 <HAL_RCC_ClockConfig+0x1f0>)
 8004714:	4313      	orrs	r3, r2
 8004716:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004718:	f7fd fc9c 	bl	8002054 <HAL_GetTick>
 800471c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800471e:	e00a      	b.n	8004736 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004720:	f7fd fc98 	bl	8002054 <HAL_GetTick>
 8004724:	4602      	mov	r2, r0
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	f241 3288 	movw	r2, #5000	; 0x1388
 800472e:	4293      	cmp	r3, r2
 8004730:	d901      	bls.n	8004736 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e06e      	b.n	8004814 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004736:	4b3a      	ldr	r3, [pc, #232]	; (8004820 <HAL_RCC_ClockConfig+0x1f0>)
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	f003 020c 	and.w	r2, r3, #12
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	429a      	cmp	r2, r3
 8004746:	d1eb      	bne.n	8004720 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 0302 	and.w	r3, r3, #2
 8004750:	2b00      	cmp	r3, #0
 8004752:	d010      	beq.n	8004776 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	689a      	ldr	r2, [r3, #8]
 8004758:	4b31      	ldr	r3, [pc, #196]	; (8004820 <HAL_RCC_ClockConfig+0x1f0>)
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004760:	429a      	cmp	r2, r3
 8004762:	d208      	bcs.n	8004776 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004764:	4b2e      	ldr	r3, [pc, #184]	; (8004820 <HAL_RCC_ClockConfig+0x1f0>)
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	492b      	ldr	r1, [pc, #172]	; (8004820 <HAL_RCC_ClockConfig+0x1f0>)
 8004772:	4313      	orrs	r3, r2
 8004774:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004776:	4b29      	ldr	r3, [pc, #164]	; (800481c <HAL_RCC_ClockConfig+0x1ec>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0307 	and.w	r3, r3, #7
 800477e:	683a      	ldr	r2, [r7, #0]
 8004780:	429a      	cmp	r2, r3
 8004782:	d210      	bcs.n	80047a6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004784:	4b25      	ldr	r3, [pc, #148]	; (800481c <HAL_RCC_ClockConfig+0x1ec>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f023 0207 	bic.w	r2, r3, #7
 800478c:	4923      	ldr	r1, [pc, #140]	; (800481c <HAL_RCC_ClockConfig+0x1ec>)
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	4313      	orrs	r3, r2
 8004792:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004794:	4b21      	ldr	r3, [pc, #132]	; (800481c <HAL_RCC_ClockConfig+0x1ec>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 0307 	and.w	r3, r3, #7
 800479c:	683a      	ldr	r2, [r7, #0]
 800479e:	429a      	cmp	r2, r3
 80047a0:	d001      	beq.n	80047a6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e036      	b.n	8004814 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 0304 	and.w	r3, r3, #4
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d008      	beq.n	80047c4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047b2:	4b1b      	ldr	r3, [pc, #108]	; (8004820 <HAL_RCC_ClockConfig+0x1f0>)
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	4918      	ldr	r1, [pc, #96]	; (8004820 <HAL_RCC_ClockConfig+0x1f0>)
 80047c0:	4313      	orrs	r3, r2
 80047c2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 0308 	and.w	r3, r3, #8
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d009      	beq.n	80047e4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047d0:	4b13      	ldr	r3, [pc, #76]	; (8004820 <HAL_RCC_ClockConfig+0x1f0>)
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	691b      	ldr	r3, [r3, #16]
 80047dc:	00db      	lsls	r3, r3, #3
 80047de:	4910      	ldr	r1, [pc, #64]	; (8004820 <HAL_RCC_ClockConfig+0x1f0>)
 80047e0:	4313      	orrs	r3, r2
 80047e2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80047e4:	f000 f824 	bl	8004830 <HAL_RCC_GetSysClockFreq>
 80047e8:	4602      	mov	r2, r0
 80047ea:	4b0d      	ldr	r3, [pc, #52]	; (8004820 <HAL_RCC_ClockConfig+0x1f0>)
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	091b      	lsrs	r3, r3, #4
 80047f0:	f003 030f 	and.w	r3, r3, #15
 80047f4:	490b      	ldr	r1, [pc, #44]	; (8004824 <HAL_RCC_ClockConfig+0x1f4>)
 80047f6:	5ccb      	ldrb	r3, [r1, r3]
 80047f8:	f003 031f 	and.w	r3, r3, #31
 80047fc:	fa22 f303 	lsr.w	r3, r2, r3
 8004800:	4a09      	ldr	r2, [pc, #36]	; (8004828 <HAL_RCC_ClockConfig+0x1f8>)
 8004802:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004804:	4b09      	ldr	r3, [pc, #36]	; (800482c <HAL_RCC_ClockConfig+0x1fc>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4618      	mov	r0, r3
 800480a:	f7fd fbd3 	bl	8001fb4 <HAL_InitTick>
 800480e:	4603      	mov	r3, r0
 8004810:	72fb      	strb	r3, [r7, #11]

  return status;
 8004812:	7afb      	ldrb	r3, [r7, #11]
}
 8004814:	4618      	mov	r0, r3
 8004816:	3710      	adds	r7, #16
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}
 800481c:	40022000 	.word	0x40022000
 8004820:	40021000 	.word	0x40021000
 8004824:	0800a8b4 	.word	0x0800a8b4
 8004828:	20000004 	.word	0x20000004
 800482c:	20000008 	.word	0x20000008

08004830 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004830:	b480      	push	{r7}
 8004832:	b089      	sub	sp, #36	; 0x24
 8004834:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004836:	2300      	movs	r3, #0
 8004838:	61fb      	str	r3, [r7, #28]
 800483a:	2300      	movs	r3, #0
 800483c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800483e:	4b3e      	ldr	r3, [pc, #248]	; (8004938 <HAL_RCC_GetSysClockFreq+0x108>)
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	f003 030c 	and.w	r3, r3, #12
 8004846:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004848:	4b3b      	ldr	r3, [pc, #236]	; (8004938 <HAL_RCC_GetSysClockFreq+0x108>)
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	f003 0303 	and.w	r3, r3, #3
 8004850:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d005      	beq.n	8004864 <HAL_RCC_GetSysClockFreq+0x34>
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	2b0c      	cmp	r3, #12
 800485c:	d121      	bne.n	80048a2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2b01      	cmp	r3, #1
 8004862:	d11e      	bne.n	80048a2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004864:	4b34      	ldr	r3, [pc, #208]	; (8004938 <HAL_RCC_GetSysClockFreq+0x108>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 0308 	and.w	r3, r3, #8
 800486c:	2b00      	cmp	r3, #0
 800486e:	d107      	bne.n	8004880 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004870:	4b31      	ldr	r3, [pc, #196]	; (8004938 <HAL_RCC_GetSysClockFreq+0x108>)
 8004872:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004876:	0a1b      	lsrs	r3, r3, #8
 8004878:	f003 030f 	and.w	r3, r3, #15
 800487c:	61fb      	str	r3, [r7, #28]
 800487e:	e005      	b.n	800488c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004880:	4b2d      	ldr	r3, [pc, #180]	; (8004938 <HAL_RCC_GetSysClockFreq+0x108>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	091b      	lsrs	r3, r3, #4
 8004886:	f003 030f 	and.w	r3, r3, #15
 800488a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800488c:	4a2b      	ldr	r2, [pc, #172]	; (800493c <HAL_RCC_GetSysClockFreq+0x10c>)
 800488e:	69fb      	ldr	r3, [r7, #28]
 8004890:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004894:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d10d      	bne.n	80048b8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80048a0:	e00a      	b.n	80048b8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	2b04      	cmp	r3, #4
 80048a6:	d102      	bne.n	80048ae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80048a8:	4b25      	ldr	r3, [pc, #148]	; (8004940 <HAL_RCC_GetSysClockFreq+0x110>)
 80048aa:	61bb      	str	r3, [r7, #24]
 80048ac:	e004      	b.n	80048b8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	2b08      	cmp	r3, #8
 80048b2:	d101      	bne.n	80048b8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80048b4:	4b23      	ldr	r3, [pc, #140]	; (8004944 <HAL_RCC_GetSysClockFreq+0x114>)
 80048b6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	2b0c      	cmp	r3, #12
 80048bc:	d134      	bne.n	8004928 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80048be:	4b1e      	ldr	r3, [pc, #120]	; (8004938 <HAL_RCC_GetSysClockFreq+0x108>)
 80048c0:	68db      	ldr	r3, [r3, #12]
 80048c2:	f003 0303 	and.w	r3, r3, #3
 80048c6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	2b02      	cmp	r3, #2
 80048cc:	d003      	beq.n	80048d6 <HAL_RCC_GetSysClockFreq+0xa6>
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	2b03      	cmp	r3, #3
 80048d2:	d003      	beq.n	80048dc <HAL_RCC_GetSysClockFreq+0xac>
 80048d4:	e005      	b.n	80048e2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80048d6:	4b1a      	ldr	r3, [pc, #104]	; (8004940 <HAL_RCC_GetSysClockFreq+0x110>)
 80048d8:	617b      	str	r3, [r7, #20]
      break;
 80048da:	e005      	b.n	80048e8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80048dc:	4b19      	ldr	r3, [pc, #100]	; (8004944 <HAL_RCC_GetSysClockFreq+0x114>)
 80048de:	617b      	str	r3, [r7, #20]
      break;
 80048e0:	e002      	b.n	80048e8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	617b      	str	r3, [r7, #20]
      break;
 80048e6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80048e8:	4b13      	ldr	r3, [pc, #76]	; (8004938 <HAL_RCC_GetSysClockFreq+0x108>)
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	091b      	lsrs	r3, r3, #4
 80048ee:	f003 0307 	and.w	r3, r3, #7
 80048f2:	3301      	adds	r3, #1
 80048f4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80048f6:	4b10      	ldr	r3, [pc, #64]	; (8004938 <HAL_RCC_GetSysClockFreq+0x108>)
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	0a1b      	lsrs	r3, r3, #8
 80048fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004900:	697a      	ldr	r2, [r7, #20]
 8004902:	fb03 f202 	mul.w	r2, r3, r2
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	fbb2 f3f3 	udiv	r3, r2, r3
 800490c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800490e:	4b0a      	ldr	r3, [pc, #40]	; (8004938 <HAL_RCC_GetSysClockFreq+0x108>)
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	0e5b      	lsrs	r3, r3, #25
 8004914:	f003 0303 	and.w	r3, r3, #3
 8004918:	3301      	adds	r3, #1
 800491a:	005b      	lsls	r3, r3, #1
 800491c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800491e:	697a      	ldr	r2, [r7, #20]
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	fbb2 f3f3 	udiv	r3, r2, r3
 8004926:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004928:	69bb      	ldr	r3, [r7, #24]
}
 800492a:	4618      	mov	r0, r3
 800492c:	3724      	adds	r7, #36	; 0x24
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr
 8004936:	bf00      	nop
 8004938:	40021000 	.word	0x40021000
 800493c:	0800a8cc 	.word	0x0800a8cc
 8004940:	00f42400 	.word	0x00f42400
 8004944:	007a1200 	.word	0x007a1200

08004948 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004948:	b480      	push	{r7}
 800494a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800494c:	4b03      	ldr	r3, [pc, #12]	; (800495c <HAL_RCC_GetHCLKFreq+0x14>)
 800494e:	681b      	ldr	r3, [r3, #0]
}
 8004950:	4618      	mov	r0, r3
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr
 800495a:	bf00      	nop
 800495c:	20000004 	.word	0x20000004

08004960 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004964:	f7ff fff0 	bl	8004948 <HAL_RCC_GetHCLKFreq>
 8004968:	4602      	mov	r2, r0
 800496a:	4b06      	ldr	r3, [pc, #24]	; (8004984 <HAL_RCC_GetPCLK1Freq+0x24>)
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	0a1b      	lsrs	r3, r3, #8
 8004970:	f003 0307 	and.w	r3, r3, #7
 8004974:	4904      	ldr	r1, [pc, #16]	; (8004988 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004976:	5ccb      	ldrb	r3, [r1, r3]
 8004978:	f003 031f 	and.w	r3, r3, #31
 800497c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004980:	4618      	mov	r0, r3
 8004982:	bd80      	pop	{r7, pc}
 8004984:	40021000 	.word	0x40021000
 8004988:	0800a8c4 	.word	0x0800a8c4

0800498c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004990:	f7ff ffda 	bl	8004948 <HAL_RCC_GetHCLKFreq>
 8004994:	4602      	mov	r2, r0
 8004996:	4b06      	ldr	r3, [pc, #24]	; (80049b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	0adb      	lsrs	r3, r3, #11
 800499c:	f003 0307 	and.w	r3, r3, #7
 80049a0:	4904      	ldr	r1, [pc, #16]	; (80049b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80049a2:	5ccb      	ldrb	r3, [r1, r3]
 80049a4:	f003 031f 	and.w	r3, r3, #31
 80049a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	bd80      	pop	{r7, pc}
 80049b0:	40021000 	.word	0x40021000
 80049b4:	0800a8c4 	.word	0x0800a8c4

080049b8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b086      	sub	sp, #24
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80049c0:	2300      	movs	r3, #0
 80049c2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80049c4:	4b2a      	ldr	r3, [pc, #168]	; (8004a70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d003      	beq.n	80049d8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80049d0:	f7ff f9b6 	bl	8003d40 <HAL_PWREx_GetVoltageRange>
 80049d4:	6178      	str	r0, [r7, #20]
 80049d6:	e014      	b.n	8004a02 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80049d8:	4b25      	ldr	r3, [pc, #148]	; (8004a70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049dc:	4a24      	ldr	r2, [pc, #144]	; (8004a70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049e2:	6593      	str	r3, [r2, #88]	; 0x58
 80049e4:	4b22      	ldr	r3, [pc, #136]	; (8004a70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049ec:	60fb      	str	r3, [r7, #12]
 80049ee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80049f0:	f7ff f9a6 	bl	8003d40 <HAL_PWREx_GetVoltageRange>
 80049f4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80049f6:	4b1e      	ldr	r3, [pc, #120]	; (8004a70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049fa:	4a1d      	ldr	r2, [pc, #116]	; (8004a70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a00:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a08:	d10b      	bne.n	8004a22 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2b80      	cmp	r3, #128	; 0x80
 8004a0e:	d919      	bls.n	8004a44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2ba0      	cmp	r3, #160	; 0xa0
 8004a14:	d902      	bls.n	8004a1c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004a16:	2302      	movs	r3, #2
 8004a18:	613b      	str	r3, [r7, #16]
 8004a1a:	e013      	b.n	8004a44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	613b      	str	r3, [r7, #16]
 8004a20:	e010      	b.n	8004a44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2b80      	cmp	r3, #128	; 0x80
 8004a26:	d902      	bls.n	8004a2e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004a28:	2303      	movs	r3, #3
 8004a2a:	613b      	str	r3, [r7, #16]
 8004a2c:	e00a      	b.n	8004a44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2b80      	cmp	r3, #128	; 0x80
 8004a32:	d102      	bne.n	8004a3a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004a34:	2302      	movs	r3, #2
 8004a36:	613b      	str	r3, [r7, #16]
 8004a38:	e004      	b.n	8004a44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2b70      	cmp	r3, #112	; 0x70
 8004a3e:	d101      	bne.n	8004a44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004a40:	2301      	movs	r3, #1
 8004a42:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004a44:	4b0b      	ldr	r3, [pc, #44]	; (8004a74 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f023 0207 	bic.w	r2, r3, #7
 8004a4c:	4909      	ldr	r1, [pc, #36]	; (8004a74 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004a54:	4b07      	ldr	r3, [pc, #28]	; (8004a74 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 0307 	and.w	r3, r3, #7
 8004a5c:	693a      	ldr	r2, [r7, #16]
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d001      	beq.n	8004a66 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e000      	b.n	8004a68 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004a66:	2300      	movs	r3, #0
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3718      	adds	r7, #24
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}
 8004a70:	40021000 	.word	0x40021000
 8004a74:	40022000 	.word	0x40022000

08004a78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b086      	sub	sp, #24
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004a80:	2300      	movs	r3, #0
 8004a82:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004a84:	2300      	movs	r3, #0
 8004a86:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d031      	beq.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a98:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004a9c:	d01a      	beq.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004a9e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004aa2:	d814      	bhi.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d009      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004aa8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004aac:	d10f      	bne.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004aae:	4b5d      	ldr	r3, [pc, #372]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	4a5c      	ldr	r2, [pc, #368]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ab4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ab8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004aba:	e00c      	b.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	3304      	adds	r3, #4
 8004ac0:	2100      	movs	r1, #0
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f000 f9de 	bl	8004e84 <RCCEx_PLLSAI1_Config>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004acc:	e003      	b.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	74fb      	strb	r3, [r7, #19]
      break;
 8004ad2:	e000      	b.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004ad4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ad6:	7cfb      	ldrb	r3, [r7, #19]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d10b      	bne.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004adc:	4b51      	ldr	r3, [pc, #324]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ae2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aea:	494e      	ldr	r1, [pc, #312]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004aec:	4313      	orrs	r3, r2
 8004aee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004af2:	e001      	b.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004af4:	7cfb      	ldrb	r3, [r7, #19]
 8004af6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	f000 809e 	beq.w	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b06:	2300      	movs	r3, #0
 8004b08:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004b0a:	4b46      	ldr	r3, [pc, #280]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d101      	bne.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004b16:	2301      	movs	r3, #1
 8004b18:	e000      	b.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d00d      	beq.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b20:	4b40      	ldr	r3, [pc, #256]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b24:	4a3f      	ldr	r2, [pc, #252]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b2a:	6593      	str	r3, [r2, #88]	; 0x58
 8004b2c:	4b3d      	ldr	r3, [pc, #244]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b34:	60bb      	str	r3, [r7, #8]
 8004b36:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b3c:	4b3a      	ldr	r3, [pc, #232]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a39      	ldr	r2, [pc, #228]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004b42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b46:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b48:	f7fd fa84 	bl	8002054 <HAL_GetTick>
 8004b4c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b4e:	e009      	b.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b50:	f7fd fa80 	bl	8002054 <HAL_GetTick>
 8004b54:	4602      	mov	r2, r0
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d902      	bls.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	74fb      	strb	r3, [r7, #19]
        break;
 8004b62:	e005      	b.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b64:	4b30      	ldr	r3, [pc, #192]	; (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d0ef      	beq.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004b70:	7cfb      	ldrb	r3, [r7, #19]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d15a      	bne.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004b76:	4b2b      	ldr	r3, [pc, #172]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b80:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d01e      	beq.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b8c:	697a      	ldr	r2, [r7, #20]
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d019      	beq.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004b92:	4b24      	ldr	r3, [pc, #144]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b9c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004b9e:	4b21      	ldr	r3, [pc, #132]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ba4:	4a1f      	ldr	r2, [pc, #124]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ba6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004baa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004bae:	4b1d      	ldr	r3, [pc, #116]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bb4:	4a1b      	ldr	r2, [pc, #108]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004bb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004bbe:	4a19      	ldr	r2, [pc, #100]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	f003 0301 	and.w	r3, r3, #1
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d016      	beq.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bd0:	f7fd fa40 	bl	8002054 <HAL_GetTick>
 8004bd4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bd6:	e00b      	b.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bd8:	f7fd fa3c 	bl	8002054 <HAL_GetTick>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d902      	bls.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004bea:	2303      	movs	r3, #3
 8004bec:	74fb      	strb	r3, [r7, #19]
            break;
 8004bee:	e006      	b.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bf0:	4b0c      	ldr	r3, [pc, #48]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bf6:	f003 0302 	and.w	r3, r3, #2
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d0ec      	beq.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004bfe:	7cfb      	ldrb	r3, [r7, #19]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d10b      	bne.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c04:	4b07      	ldr	r3, [pc, #28]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c0a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c12:	4904      	ldr	r1, [pc, #16]	; (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c14:	4313      	orrs	r3, r2
 8004c16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004c1a:	e009      	b.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004c1c:	7cfb      	ldrb	r3, [r7, #19]
 8004c1e:	74bb      	strb	r3, [r7, #18]
 8004c20:	e006      	b.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004c22:	bf00      	nop
 8004c24:	40021000 	.word	0x40021000
 8004c28:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c2c:	7cfb      	ldrb	r3, [r7, #19]
 8004c2e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c30:	7c7b      	ldrb	r3, [r7, #17]
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d105      	bne.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c36:	4b8a      	ldr	r3, [pc, #552]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c3a:	4a89      	ldr	r2, [pc, #548]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004c3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c40:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 0301 	and.w	r3, r3, #1
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d00a      	beq.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c4e:	4b84      	ldr	r3, [pc, #528]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c54:	f023 0203 	bic.w	r2, r3, #3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6a1b      	ldr	r3, [r3, #32]
 8004c5c:	4980      	ldr	r1, [pc, #512]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 0302 	and.w	r3, r3, #2
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d00a      	beq.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c70:	4b7b      	ldr	r3, [pc, #492]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c76:	f023 020c 	bic.w	r2, r3, #12
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7e:	4978      	ldr	r1, [pc, #480]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004c80:	4313      	orrs	r3, r2
 8004c82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f003 0320 	and.w	r3, r3, #32
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d00a      	beq.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004c92:	4b73      	ldr	r3, [pc, #460]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c98:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ca0:	496f      	ldr	r1, [pc, #444]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d00a      	beq.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004cb4:	4b6a      	ldr	r3, [pc, #424]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cba:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cc2:	4967      	ldr	r1, [pc, #412]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d00a      	beq.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004cd6:	4b62      	ldr	r3, [pc, #392]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cdc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce4:	495e      	ldr	r1, [pc, #376]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d00a      	beq.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004cf8:	4b59      	ldr	r3, [pc, #356]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cfe:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d06:	4956      	ldr	r1, [pc, #344]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d00a      	beq.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d1a:	4b51      	ldr	r3, [pc, #324]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d20:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d28:	494d      	ldr	r1, [pc, #308]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d028      	beq.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d3c:	4b48      	ldr	r3, [pc, #288]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d42:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4a:	4945      	ldr	r1, [pc, #276]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d5a:	d106      	bne.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d5c:	4b40      	ldr	r3, [pc, #256]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	4a3f      	ldr	r2, [pc, #252]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004d62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d66:	60d3      	str	r3, [r2, #12]
 8004d68:	e011      	b.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d72:	d10c      	bne.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	3304      	adds	r3, #4
 8004d78:	2101      	movs	r1, #1
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f000 f882 	bl	8004e84 <RCCEx_PLLSAI1_Config>
 8004d80:	4603      	mov	r3, r0
 8004d82:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004d84:	7cfb      	ldrb	r3, [r7, #19]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d001      	beq.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8004d8a:	7cfb      	ldrb	r3, [r7, #19]
 8004d8c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d028      	beq.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004d9a:	4b31      	ldr	r3, [pc, #196]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004da0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004da8:	492d      	ldr	r1, [pc, #180]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004daa:	4313      	orrs	r3, r2
 8004dac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004db4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004db8:	d106      	bne.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004dba:	4b29      	ldr	r3, [pc, #164]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004dbc:	68db      	ldr	r3, [r3, #12]
 8004dbe:	4a28      	ldr	r2, [pc, #160]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004dc0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004dc4:	60d3      	str	r3, [r2, #12]
 8004dc6:	e011      	b.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dcc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004dd0:	d10c      	bne.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	3304      	adds	r3, #4
 8004dd6:	2101      	movs	r1, #1
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f000 f853 	bl	8004e84 <RCCEx_PLLSAI1_Config>
 8004dde:	4603      	mov	r3, r0
 8004de0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004de2:	7cfb      	ldrb	r3, [r7, #19]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d001      	beq.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8004de8:	7cfb      	ldrb	r3, [r7, #19]
 8004dea:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d01c      	beq.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004df8:	4b19      	ldr	r3, [pc, #100]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dfe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e06:	4916      	ldr	r1, [pc, #88]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e16:	d10c      	bne.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	3304      	adds	r3, #4
 8004e1c:	2102      	movs	r1, #2
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f000 f830 	bl	8004e84 <RCCEx_PLLSAI1_Config>
 8004e24:	4603      	mov	r3, r0
 8004e26:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e28:	7cfb      	ldrb	r3, [r7, #19]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d001      	beq.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8004e2e:	7cfb      	ldrb	r3, [r7, #19]
 8004e30:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d00a      	beq.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004e3e:	4b08      	ldr	r3, [pc, #32]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e44:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e4c:	4904      	ldr	r1, [pc, #16]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004e54:	7cbb      	ldrb	r3, [r7, #18]
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3718      	adds	r7, #24
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	bf00      	nop
 8004e60:	40021000 	.word	0x40021000

08004e64 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004e64:	b480      	push	{r7}
 8004e66:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004e68:	4b05      	ldr	r3, [pc, #20]	; (8004e80 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a04      	ldr	r2, [pc, #16]	; (8004e80 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004e6e:	f043 0304 	orr.w	r3, r3, #4
 8004e72:	6013      	str	r3, [r2, #0]
}
 8004e74:	bf00      	nop
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr
 8004e7e:	bf00      	nop
 8004e80:	40021000 	.word	0x40021000

08004e84 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004e92:	4b74      	ldr	r3, [pc, #464]	; (8005064 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	f003 0303 	and.w	r3, r3, #3
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d018      	beq.n	8004ed0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004e9e:	4b71      	ldr	r3, [pc, #452]	; (8005064 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ea0:	68db      	ldr	r3, [r3, #12]
 8004ea2:	f003 0203 	and.w	r2, r3, #3
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d10d      	bne.n	8004eca <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
       ||
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d009      	beq.n	8004eca <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004eb6:	4b6b      	ldr	r3, [pc, #428]	; (8005064 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004eb8:	68db      	ldr	r3, [r3, #12]
 8004eba:	091b      	lsrs	r3, r3, #4
 8004ebc:	f003 0307 	and.w	r3, r3, #7
 8004ec0:	1c5a      	adds	r2, r3, #1
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	685b      	ldr	r3, [r3, #4]
       ||
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d047      	beq.n	8004f5a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	73fb      	strb	r3, [r7, #15]
 8004ece:	e044      	b.n	8004f5a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2b03      	cmp	r3, #3
 8004ed6:	d018      	beq.n	8004f0a <RCCEx_PLLSAI1_Config+0x86>
 8004ed8:	2b03      	cmp	r3, #3
 8004eda:	d825      	bhi.n	8004f28 <RCCEx_PLLSAI1_Config+0xa4>
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d002      	beq.n	8004ee6 <RCCEx_PLLSAI1_Config+0x62>
 8004ee0:	2b02      	cmp	r3, #2
 8004ee2:	d009      	beq.n	8004ef8 <RCCEx_PLLSAI1_Config+0x74>
 8004ee4:	e020      	b.n	8004f28 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004ee6:	4b5f      	ldr	r3, [pc, #380]	; (8005064 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f003 0302 	and.w	r3, r3, #2
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d11d      	bne.n	8004f2e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ef6:	e01a      	b.n	8004f2e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004ef8:	4b5a      	ldr	r3, [pc, #360]	; (8005064 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d116      	bne.n	8004f32 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f08:	e013      	b.n	8004f32 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004f0a:	4b56      	ldr	r3, [pc, #344]	; (8005064 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d10f      	bne.n	8004f36 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004f16:	4b53      	ldr	r3, [pc, #332]	; (8005064 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d109      	bne.n	8004f36 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004f26:	e006      	b.n	8004f36 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	73fb      	strb	r3, [r7, #15]
      break;
 8004f2c:	e004      	b.n	8004f38 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004f2e:	bf00      	nop
 8004f30:	e002      	b.n	8004f38 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004f32:	bf00      	nop
 8004f34:	e000      	b.n	8004f38 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004f36:	bf00      	nop
    }

    if(status == HAL_OK)
 8004f38:	7bfb      	ldrb	r3, [r7, #15]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d10d      	bne.n	8004f5a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004f3e:	4b49      	ldr	r3, [pc, #292]	; (8005064 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6819      	ldr	r1, [r3, #0]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	3b01      	subs	r3, #1
 8004f50:	011b      	lsls	r3, r3, #4
 8004f52:	430b      	orrs	r3, r1
 8004f54:	4943      	ldr	r1, [pc, #268]	; (8005064 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f56:	4313      	orrs	r3, r2
 8004f58:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004f5a:	7bfb      	ldrb	r3, [r7, #15]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d17c      	bne.n	800505a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004f60:	4b40      	ldr	r3, [pc, #256]	; (8005064 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a3f      	ldr	r2, [pc, #252]	; (8005064 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f66:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004f6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f6c:	f7fd f872 	bl	8002054 <HAL_GetTick>
 8004f70:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004f72:	e009      	b.n	8004f88 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f74:	f7fd f86e 	bl	8002054 <HAL_GetTick>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	2b02      	cmp	r3, #2
 8004f80:	d902      	bls.n	8004f88 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004f82:	2303      	movs	r3, #3
 8004f84:	73fb      	strb	r3, [r7, #15]
        break;
 8004f86:	e005      	b.n	8004f94 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004f88:	4b36      	ldr	r3, [pc, #216]	; (8005064 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d1ef      	bne.n	8004f74 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004f94:	7bfb      	ldrb	r3, [r7, #15]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d15f      	bne.n	800505a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d110      	bne.n	8004fc2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004fa0:	4b30      	ldr	r3, [pc, #192]	; (8005064 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004fa2:	691b      	ldr	r3, [r3, #16]
 8004fa4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004fa8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	6892      	ldr	r2, [r2, #8]
 8004fb0:	0211      	lsls	r1, r2, #8
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	68d2      	ldr	r2, [r2, #12]
 8004fb6:	06d2      	lsls	r2, r2, #27
 8004fb8:	430a      	orrs	r2, r1
 8004fba:	492a      	ldr	r1, [pc, #168]	; (8005064 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	610b      	str	r3, [r1, #16]
 8004fc0:	e027      	b.n	8005012 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d112      	bne.n	8004fee <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004fc8:	4b26      	ldr	r3, [pc, #152]	; (8005064 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004fca:	691b      	ldr	r3, [r3, #16]
 8004fcc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004fd0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	6892      	ldr	r2, [r2, #8]
 8004fd8:	0211      	lsls	r1, r2, #8
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	6912      	ldr	r2, [r2, #16]
 8004fde:	0852      	lsrs	r2, r2, #1
 8004fe0:	3a01      	subs	r2, #1
 8004fe2:	0552      	lsls	r2, r2, #21
 8004fe4:	430a      	orrs	r2, r1
 8004fe6:	491f      	ldr	r1, [pc, #124]	; (8005064 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	610b      	str	r3, [r1, #16]
 8004fec:	e011      	b.n	8005012 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004fee:	4b1d      	ldr	r3, [pc, #116]	; (8005064 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ff0:	691b      	ldr	r3, [r3, #16]
 8004ff2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004ff6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	6892      	ldr	r2, [r2, #8]
 8004ffe:	0211      	lsls	r1, r2, #8
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	6952      	ldr	r2, [r2, #20]
 8005004:	0852      	lsrs	r2, r2, #1
 8005006:	3a01      	subs	r2, #1
 8005008:	0652      	lsls	r2, r2, #25
 800500a:	430a      	orrs	r2, r1
 800500c:	4915      	ldr	r1, [pc, #84]	; (8005064 <RCCEx_PLLSAI1_Config+0x1e0>)
 800500e:	4313      	orrs	r3, r2
 8005010:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005012:	4b14      	ldr	r3, [pc, #80]	; (8005064 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a13      	ldr	r2, [pc, #76]	; (8005064 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005018:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800501c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800501e:	f7fd f819 	bl	8002054 <HAL_GetTick>
 8005022:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005024:	e009      	b.n	800503a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005026:	f7fd f815 	bl	8002054 <HAL_GetTick>
 800502a:	4602      	mov	r2, r0
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	1ad3      	subs	r3, r2, r3
 8005030:	2b02      	cmp	r3, #2
 8005032:	d902      	bls.n	800503a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005034:	2303      	movs	r3, #3
 8005036:	73fb      	strb	r3, [r7, #15]
          break;
 8005038:	e005      	b.n	8005046 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800503a:	4b0a      	ldr	r3, [pc, #40]	; (8005064 <RCCEx_PLLSAI1_Config+0x1e0>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005042:	2b00      	cmp	r3, #0
 8005044:	d0ef      	beq.n	8005026 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005046:	7bfb      	ldrb	r3, [r7, #15]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d106      	bne.n	800505a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800504c:	4b05      	ldr	r3, [pc, #20]	; (8005064 <RCCEx_PLLSAI1_Config+0x1e0>)
 800504e:	691a      	ldr	r2, [r3, #16]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	699b      	ldr	r3, [r3, #24]
 8005054:	4903      	ldr	r1, [pc, #12]	; (8005064 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005056:	4313      	orrs	r3, r2
 8005058:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800505a:	7bfb      	ldrb	r3, [r7, #15]
}
 800505c:	4618      	mov	r0, r3
 800505e:	3710      	adds	r7, #16
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}
 8005064:	40021000 	.word	0x40021000

08005068 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b082      	sub	sp, #8
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d101      	bne.n	800507a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e049      	b.n	800510e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005080:	b2db      	uxtb	r3, r3
 8005082:	2b00      	cmp	r3, #0
 8005084:	d106      	bne.n	8005094 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2200      	movs	r2, #0
 800508a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f7fc fd8c 	bl	8001bac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2202      	movs	r2, #2
 8005098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	3304      	adds	r3, #4
 80050a4:	4619      	mov	r1, r3
 80050a6:	4610      	mov	r0, r2
 80050a8:	f000 f9d2 	bl	8005450 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2201      	movs	r2, #1
 80050f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2201      	movs	r2, #1
 8005100:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800510c:	2300      	movs	r3, #0
}
 800510e:	4618      	mov	r0, r3
 8005110:	3708      	adds	r7, #8
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
	...

08005118 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005118:	b480      	push	{r7}
 800511a:	b085      	sub	sp, #20
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005126:	b2db      	uxtb	r3, r3
 8005128:	2b01      	cmp	r3, #1
 800512a:	d001      	beq.n	8005130 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	e03b      	b.n	80051a8 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2202      	movs	r2, #2
 8005134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	68da      	ldr	r2, [r3, #12]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f042 0201 	orr.w	r2, r2, #1
 8005146:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a19      	ldr	r2, [pc, #100]	; (80051b4 <HAL_TIM_Base_Start_IT+0x9c>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d009      	beq.n	8005166 <HAL_TIM_Base_Start_IT+0x4e>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800515a:	d004      	beq.n	8005166 <HAL_TIM_Base_Start_IT+0x4e>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a15      	ldr	r2, [pc, #84]	; (80051b8 <HAL_TIM_Base_Start_IT+0xa0>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d115      	bne.n	8005192 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	689a      	ldr	r2, [r3, #8]
 800516c:	4b13      	ldr	r3, [pc, #76]	; (80051bc <HAL_TIM_Base_Start_IT+0xa4>)
 800516e:	4013      	ands	r3, r2
 8005170:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2b06      	cmp	r3, #6
 8005176:	d015      	beq.n	80051a4 <HAL_TIM_Base_Start_IT+0x8c>
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800517e:	d011      	beq.n	80051a4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f042 0201 	orr.w	r2, r2, #1
 800518e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005190:	e008      	b.n	80051a4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f042 0201 	orr.w	r2, r2, #1
 80051a0:	601a      	str	r2, [r3, #0]
 80051a2:	e000      	b.n	80051a6 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051a4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80051a6:	2300      	movs	r3, #0
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3714      	adds	r7, #20
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr
 80051b4:	40012c00 	.word	0x40012c00
 80051b8:	40014000 	.word	0x40014000
 80051bc:	00010007 	.word	0x00010007

080051c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b082      	sub	sp, #8
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	691b      	ldr	r3, [r3, #16]
 80051ce:	f003 0302 	and.w	r3, r3, #2
 80051d2:	2b02      	cmp	r3, #2
 80051d4:	d122      	bne.n	800521c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	f003 0302 	and.w	r3, r3, #2
 80051e0:	2b02      	cmp	r3, #2
 80051e2:	d11b      	bne.n	800521c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f06f 0202 	mvn.w	r2, #2
 80051ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2201      	movs	r2, #1
 80051f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	699b      	ldr	r3, [r3, #24]
 80051fa:	f003 0303 	and.w	r3, r3, #3
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d003      	beq.n	800520a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f000 f905 	bl	8005412 <HAL_TIM_IC_CaptureCallback>
 8005208:	e005      	b.n	8005216 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f000 f8f7 	bl	80053fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	f000 f908 	bl	8005426 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	691b      	ldr	r3, [r3, #16]
 8005222:	f003 0304 	and.w	r3, r3, #4
 8005226:	2b04      	cmp	r3, #4
 8005228:	d122      	bne.n	8005270 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	f003 0304 	and.w	r3, r3, #4
 8005234:	2b04      	cmp	r3, #4
 8005236:	d11b      	bne.n	8005270 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f06f 0204 	mvn.w	r2, #4
 8005240:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2202      	movs	r2, #2
 8005246:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	699b      	ldr	r3, [r3, #24]
 800524e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005252:	2b00      	cmp	r3, #0
 8005254:	d003      	beq.n	800525e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f000 f8db 	bl	8005412 <HAL_TIM_IC_CaptureCallback>
 800525c:	e005      	b.n	800526a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f000 f8cd 	bl	80053fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f000 f8de 	bl	8005426 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	691b      	ldr	r3, [r3, #16]
 8005276:	f003 0308 	and.w	r3, r3, #8
 800527a:	2b08      	cmp	r3, #8
 800527c:	d122      	bne.n	80052c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	f003 0308 	and.w	r3, r3, #8
 8005288:	2b08      	cmp	r3, #8
 800528a:	d11b      	bne.n	80052c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f06f 0208 	mvn.w	r2, #8
 8005294:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2204      	movs	r2, #4
 800529a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	69db      	ldr	r3, [r3, #28]
 80052a2:	f003 0303 	and.w	r3, r3, #3
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d003      	beq.n	80052b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f000 f8b1 	bl	8005412 <HAL_TIM_IC_CaptureCallback>
 80052b0:	e005      	b.n	80052be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f000 f8a3 	bl	80053fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f000 f8b4 	bl	8005426 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	691b      	ldr	r3, [r3, #16]
 80052ca:	f003 0310 	and.w	r3, r3, #16
 80052ce:	2b10      	cmp	r3, #16
 80052d0:	d122      	bne.n	8005318 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	f003 0310 	and.w	r3, r3, #16
 80052dc:	2b10      	cmp	r3, #16
 80052de:	d11b      	bne.n	8005318 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f06f 0210 	mvn.w	r2, #16
 80052e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2208      	movs	r2, #8
 80052ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	69db      	ldr	r3, [r3, #28]
 80052f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d003      	beq.n	8005306 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f000 f887 	bl	8005412 <HAL_TIM_IC_CaptureCallback>
 8005304:	e005      	b.n	8005312 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f000 f879 	bl	80053fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f000 f88a 	bl	8005426 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	691b      	ldr	r3, [r3, #16]
 800531e:	f003 0301 	and.w	r3, r3, #1
 8005322:	2b01      	cmp	r3, #1
 8005324:	d10e      	bne.n	8005344 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	f003 0301 	and.w	r3, r3, #1
 8005330:	2b01      	cmp	r3, #1
 8005332:	d107      	bne.n	8005344 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f06f 0201 	mvn.w	r2, #1
 800533c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f7fc fb8c 	bl	8001a5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	691b      	ldr	r3, [r3, #16]
 800534a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800534e:	2b80      	cmp	r3, #128	; 0x80
 8005350:	d10e      	bne.n	8005370 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800535c:	2b80      	cmp	r3, #128	; 0x80
 800535e:	d107      	bne.n	8005370 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005368:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f000 f8de 	bl	800552c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800537a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800537e:	d10e      	bne.n	800539e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800538a:	2b80      	cmp	r3, #128	; 0x80
 800538c:	d107      	bne.n	800539e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005396:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f000 f8d1 	bl	8005540 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	691b      	ldr	r3, [r3, #16]
 80053a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053a8:	2b40      	cmp	r3, #64	; 0x40
 80053aa:	d10e      	bne.n	80053ca <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68db      	ldr	r3, [r3, #12]
 80053b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053b6:	2b40      	cmp	r3, #64	; 0x40
 80053b8:	d107      	bne.n	80053ca <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80053c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f000 f838 	bl	800543a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	691b      	ldr	r3, [r3, #16]
 80053d0:	f003 0320 	and.w	r3, r3, #32
 80053d4:	2b20      	cmp	r3, #32
 80053d6:	d10e      	bne.n	80053f6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	f003 0320 	and.w	r3, r3, #32
 80053e2:	2b20      	cmp	r3, #32
 80053e4:	d107      	bne.n	80053f6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f06f 0220 	mvn.w	r2, #32
 80053ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f000 f891 	bl	8005518 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053f6:	bf00      	nop
 80053f8:	3708      	adds	r7, #8
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}

080053fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053fe:	b480      	push	{r7}
 8005400:	b083      	sub	sp, #12
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005406:	bf00      	nop
 8005408:	370c      	adds	r7, #12
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr

08005412 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005412:	b480      	push	{r7}
 8005414:	b083      	sub	sp, #12
 8005416:	af00      	add	r7, sp, #0
 8005418:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800541a:	bf00      	nop
 800541c:	370c      	adds	r7, #12
 800541e:	46bd      	mov	sp, r7
 8005420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005424:	4770      	bx	lr

08005426 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005426:	b480      	push	{r7}
 8005428:	b083      	sub	sp, #12
 800542a:	af00      	add	r7, sp, #0
 800542c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800542e:	bf00      	nop
 8005430:	370c      	adds	r7, #12
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr

0800543a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800543a:	b480      	push	{r7}
 800543c:	b083      	sub	sp, #12
 800543e:	af00      	add	r7, sp, #0
 8005440:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005442:	bf00      	nop
 8005444:	370c      	adds	r7, #12
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr
	...

08005450 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005450:	b480      	push	{r7}
 8005452:	b085      	sub	sp, #20
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	4a2a      	ldr	r2, [pc, #168]	; (800550c <TIM_Base_SetConfig+0xbc>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d003      	beq.n	8005470 <TIM_Base_SetConfig+0x20>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800546e:	d108      	bne.n	8005482 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005476:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	68fa      	ldr	r2, [r7, #12]
 800547e:	4313      	orrs	r3, r2
 8005480:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4a21      	ldr	r2, [pc, #132]	; (800550c <TIM_Base_SetConfig+0xbc>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d00b      	beq.n	80054a2 <TIM_Base_SetConfig+0x52>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005490:	d007      	beq.n	80054a2 <TIM_Base_SetConfig+0x52>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	4a1e      	ldr	r2, [pc, #120]	; (8005510 <TIM_Base_SetConfig+0xc0>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d003      	beq.n	80054a2 <TIM_Base_SetConfig+0x52>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	4a1d      	ldr	r2, [pc, #116]	; (8005514 <TIM_Base_SetConfig+0xc4>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d108      	bne.n	80054b4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	68db      	ldr	r3, [r3, #12]
 80054ae:	68fa      	ldr	r2, [r7, #12]
 80054b0:	4313      	orrs	r3, r2
 80054b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	695b      	ldr	r3, [r3, #20]
 80054be:	4313      	orrs	r3, r2
 80054c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	68fa      	ldr	r2, [r7, #12]
 80054c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	689a      	ldr	r2, [r3, #8]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	4a0c      	ldr	r2, [pc, #48]	; (800550c <TIM_Base_SetConfig+0xbc>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d007      	beq.n	80054f0 <TIM_Base_SetConfig+0xa0>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	4a0b      	ldr	r2, [pc, #44]	; (8005510 <TIM_Base_SetConfig+0xc0>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d003      	beq.n	80054f0 <TIM_Base_SetConfig+0xa0>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4a0a      	ldr	r2, [pc, #40]	; (8005514 <TIM_Base_SetConfig+0xc4>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d103      	bne.n	80054f8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	691a      	ldr	r2, [r3, #16]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2201      	movs	r2, #1
 80054fc:	615a      	str	r2, [r3, #20]
}
 80054fe:	bf00      	nop
 8005500:	3714      	adds	r7, #20
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr
 800550a:	bf00      	nop
 800550c:	40012c00 	.word	0x40012c00
 8005510:	40014000 	.word	0x40014000
 8005514:	40014400 	.word	0x40014400

08005518 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005518:	b480      	push	{r7}
 800551a:	b083      	sub	sp, #12
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005520:	bf00      	nop
 8005522:	370c      	adds	r7, #12
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr

0800552c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800552c:	b480      	push	{r7}
 800552e:	b083      	sub	sp, #12
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005534:	bf00      	nop
 8005536:	370c      	adds	r7, #12
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr

08005540 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005540:	b480      	push	{r7}
 8005542:	b083      	sub	sp, #12
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005548:	bf00      	nop
 800554a:	370c      	adds	r7, #12
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr

08005554 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b082      	sub	sp, #8
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d101      	bne.n	8005566 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e040      	b.n	80055e8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800556a:	2b00      	cmp	r3, #0
 800556c:	d106      	bne.n	800557c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f7fc fb3e 	bl	8001bf8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2224      	movs	r2, #36	; 0x24
 8005580:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f022 0201 	bic.w	r2, r2, #1
 8005590:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 fbc2 	bl	8005d1c <UART_SetConfig>
 8005598:	4603      	mov	r3, r0
 800559a:	2b01      	cmp	r3, #1
 800559c:	d101      	bne.n	80055a2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	e022      	b.n	80055e8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d002      	beq.n	80055b0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f000 fde2 	bl	8006174 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	685a      	ldr	r2, [r3, #4]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80055be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	689a      	ldr	r2, [r3, #8]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80055ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f042 0201 	orr.w	r2, r2, #1
 80055de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f000 fe69 	bl	80062b8 <UART_CheckIdleState>
 80055e6:	4603      	mov	r3, r0
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3708      	adds	r7, #8
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}

080055f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b08a      	sub	sp, #40	; 0x28
 80055f4:	af02      	add	r7, sp, #8
 80055f6:	60f8      	str	r0, [r7, #12]
 80055f8:	60b9      	str	r1, [r7, #8]
 80055fa:	603b      	str	r3, [r7, #0]
 80055fc:	4613      	mov	r3, r2
 80055fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005604:	2b20      	cmp	r3, #32
 8005606:	f040 8082 	bne.w	800570e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d002      	beq.n	8005616 <HAL_UART_Transmit+0x26>
 8005610:	88fb      	ldrh	r3, [r7, #6]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d101      	bne.n	800561a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	e07a      	b.n	8005710 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005620:	2b01      	cmp	r3, #1
 8005622:	d101      	bne.n	8005628 <HAL_UART_Transmit+0x38>
 8005624:	2302      	movs	r3, #2
 8005626:	e073      	b.n	8005710 <HAL_UART_Transmit+0x120>
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2201      	movs	r2, #1
 800562c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2200      	movs	r2, #0
 8005634:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2221      	movs	r2, #33	; 0x21
 800563c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800563e:	f7fc fd09 	bl	8002054 <HAL_GetTick>
 8005642:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	88fa      	ldrh	r2, [r7, #6]
 8005648:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	88fa      	ldrh	r2, [r7, #6]
 8005650:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800565c:	d108      	bne.n	8005670 <HAL_UART_Transmit+0x80>
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	691b      	ldr	r3, [r3, #16]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d104      	bne.n	8005670 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005666:	2300      	movs	r3, #0
 8005668:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	61bb      	str	r3, [r7, #24]
 800566e:	e003      	b.n	8005678 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005674:	2300      	movs	r3, #0
 8005676:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2200      	movs	r2, #0
 800567c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005680:	e02d      	b.n	80056de <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	9300      	str	r3, [sp, #0]
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	2200      	movs	r2, #0
 800568a:	2180      	movs	r1, #128	; 0x80
 800568c:	68f8      	ldr	r0, [r7, #12]
 800568e:	f000 fe5c 	bl	800634a <UART_WaitOnFlagUntilTimeout>
 8005692:	4603      	mov	r3, r0
 8005694:	2b00      	cmp	r3, #0
 8005696:	d001      	beq.n	800569c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005698:	2303      	movs	r3, #3
 800569a:	e039      	b.n	8005710 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800569c:	69fb      	ldr	r3, [r7, #28]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d10b      	bne.n	80056ba <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80056a2:	69bb      	ldr	r3, [r7, #24]
 80056a4:	881a      	ldrh	r2, [r3, #0]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056ae:	b292      	uxth	r2, r2
 80056b0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80056b2:	69bb      	ldr	r3, [r7, #24]
 80056b4:	3302      	adds	r3, #2
 80056b6:	61bb      	str	r3, [r7, #24]
 80056b8:	e008      	b.n	80056cc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80056ba:	69fb      	ldr	r3, [r7, #28]
 80056bc:	781a      	ldrb	r2, [r3, #0]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	b292      	uxth	r2, r2
 80056c4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80056c6:	69fb      	ldr	r3, [r7, #28]
 80056c8:	3301      	adds	r3, #1
 80056ca:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	3b01      	subs	r3, #1
 80056d6:	b29a      	uxth	r2, r3
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d1cb      	bne.n	8005682 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	9300      	str	r3, [sp, #0]
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	2200      	movs	r2, #0
 80056f2:	2140      	movs	r1, #64	; 0x40
 80056f4:	68f8      	ldr	r0, [r7, #12]
 80056f6:	f000 fe28 	bl	800634a <UART_WaitOnFlagUntilTimeout>
 80056fa:	4603      	mov	r3, r0
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d001      	beq.n	8005704 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005700:	2303      	movs	r3, #3
 8005702:	e005      	b.n	8005710 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2220      	movs	r2, #32
 8005708:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800570a:	2300      	movs	r3, #0
 800570c:	e000      	b.n	8005710 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800570e:	2302      	movs	r3, #2
  }
}
 8005710:	4618      	mov	r0, r3
 8005712:	3720      	adds	r7, #32
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}

08005718 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b0ba      	sub	sp, #232	; 0xe8
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	69db      	ldr	r3, [r3, #28]
 8005726:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800573e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005742:	f640 030f 	movw	r3, #2063	; 0x80f
 8005746:	4013      	ands	r3, r2
 8005748:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800574c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005750:	2b00      	cmp	r3, #0
 8005752:	d115      	bne.n	8005780 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005754:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005758:	f003 0320 	and.w	r3, r3, #32
 800575c:	2b00      	cmp	r3, #0
 800575e:	d00f      	beq.n	8005780 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005760:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005764:	f003 0320 	and.w	r3, r3, #32
 8005768:	2b00      	cmp	r3, #0
 800576a:	d009      	beq.n	8005780 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005770:	2b00      	cmp	r3, #0
 8005772:	f000 82a6 	beq.w	8005cc2 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	4798      	blx	r3
      }
      return;
 800577e:	e2a0      	b.n	8005cc2 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005780:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005784:	2b00      	cmp	r3, #0
 8005786:	f000 8117 	beq.w	80059b8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800578a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800578e:	f003 0301 	and.w	r3, r3, #1
 8005792:	2b00      	cmp	r3, #0
 8005794:	d106      	bne.n	80057a4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005796:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800579a:	4b85      	ldr	r3, [pc, #532]	; (80059b0 <HAL_UART_IRQHandler+0x298>)
 800579c:	4013      	ands	r3, r2
 800579e:	2b00      	cmp	r3, #0
 80057a0:	f000 810a 	beq.w	80059b8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80057a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057a8:	f003 0301 	and.w	r3, r3, #1
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d011      	beq.n	80057d4 <HAL_UART_IRQHandler+0xbc>
 80057b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d00b      	beq.n	80057d4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	2201      	movs	r2, #1
 80057c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057ca:	f043 0201 	orr.w	r2, r3, #1
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80057d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057d8:	f003 0302 	and.w	r3, r3, #2
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d011      	beq.n	8005804 <HAL_UART_IRQHandler+0xec>
 80057e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057e4:	f003 0301 	and.w	r3, r3, #1
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d00b      	beq.n	8005804 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	2202      	movs	r2, #2
 80057f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057fa:	f043 0204 	orr.w	r2, r3, #4
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005804:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005808:	f003 0304 	and.w	r3, r3, #4
 800580c:	2b00      	cmp	r3, #0
 800580e:	d011      	beq.n	8005834 <HAL_UART_IRQHandler+0x11c>
 8005810:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005814:	f003 0301 	and.w	r3, r3, #1
 8005818:	2b00      	cmp	r3, #0
 800581a:	d00b      	beq.n	8005834 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	2204      	movs	r2, #4
 8005822:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800582a:	f043 0202 	orr.w	r2, r3, #2
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005834:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005838:	f003 0308 	and.w	r3, r3, #8
 800583c:	2b00      	cmp	r3, #0
 800583e:	d017      	beq.n	8005870 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005840:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005844:	f003 0320 	and.w	r3, r3, #32
 8005848:	2b00      	cmp	r3, #0
 800584a:	d105      	bne.n	8005858 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800584c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005850:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005854:	2b00      	cmp	r3, #0
 8005856:	d00b      	beq.n	8005870 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	2208      	movs	r2, #8
 800585e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005866:	f043 0208 	orr.w	r2, r3, #8
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005870:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005874:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005878:	2b00      	cmp	r3, #0
 800587a:	d012      	beq.n	80058a2 <HAL_UART_IRQHandler+0x18a>
 800587c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005880:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005884:	2b00      	cmp	r3, #0
 8005886:	d00c      	beq.n	80058a2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005890:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005898:	f043 0220 	orr.w	r2, r3, #32
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	f000 820c 	beq.w	8005cc6 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80058ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058b2:	f003 0320 	and.w	r3, r3, #32
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d00d      	beq.n	80058d6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80058ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058be:	f003 0320 	and.w	r3, r3, #32
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d007      	beq.n	80058d6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d003      	beq.n	80058d6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058dc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ea:	2b40      	cmp	r3, #64	; 0x40
 80058ec:	d005      	beq.n	80058fa <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80058ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80058f2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d04f      	beq.n	800599a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f000 fde9 	bl	80064d2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800590a:	2b40      	cmp	r3, #64	; 0x40
 800590c:	d141      	bne.n	8005992 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	3308      	adds	r3, #8
 8005914:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005918:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800591c:	e853 3f00 	ldrex	r3, [r3]
 8005920:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005924:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005928:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800592c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	3308      	adds	r3, #8
 8005936:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800593a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800593e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005942:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005946:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800594a:	e841 2300 	strex	r3, r2, [r1]
 800594e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005952:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005956:	2b00      	cmp	r3, #0
 8005958:	d1d9      	bne.n	800590e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800595e:	2b00      	cmp	r3, #0
 8005960:	d013      	beq.n	800598a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005966:	4a13      	ldr	r2, [pc, #76]	; (80059b4 <HAL_UART_IRQHandler+0x29c>)
 8005968:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800596e:	4618      	mov	r0, r3
 8005970:	f7fc fcef 	bl	8002352 <HAL_DMA_Abort_IT>
 8005974:	4603      	mov	r3, r0
 8005976:	2b00      	cmp	r3, #0
 8005978:	d017      	beq.n	80059aa <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800597e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005984:	4610      	mov	r0, r2
 8005986:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005988:	e00f      	b.n	80059aa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 f9b0 	bl	8005cf0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005990:	e00b      	b.n	80059aa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f000 f9ac 	bl	8005cf0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005998:	e007      	b.n	80059aa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f000 f9a8 	bl	8005cf0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2200      	movs	r2, #0
 80059a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80059a8:	e18d      	b.n	8005cc6 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059aa:	bf00      	nop
    return;
 80059ac:	e18b      	b.n	8005cc6 <HAL_UART_IRQHandler+0x5ae>
 80059ae:	bf00      	nop
 80059b0:	04000120 	.word	0x04000120
 80059b4:	08006599 	.word	0x08006599

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059bc:	2b01      	cmp	r3, #1
 80059be:	f040 8146 	bne.w	8005c4e <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80059c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059c6:	f003 0310 	and.w	r3, r3, #16
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	f000 813f 	beq.w	8005c4e <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80059d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059d4:	f003 0310 	and.w	r3, r3, #16
 80059d8:	2b00      	cmp	r3, #0
 80059da:	f000 8138 	beq.w	8005c4e <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	2210      	movs	r2, #16
 80059e4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059f0:	2b40      	cmp	r3, #64	; 0x40
 80059f2:	f040 80b4 	bne.w	8005b5e <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005a02:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	f000 815f 	beq.w	8005cca <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005a12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005a16:	429a      	cmp	r2, r3
 8005a18:	f080 8157 	bcs.w	8005cca <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005a22:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f003 0320 	and.w	r3, r3, #32
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	f040 8085 	bne.w	8005b42 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a40:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005a44:	e853 3f00 	ldrex	r3, [r3]
 8005a48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005a4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a54:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	461a      	mov	r2, r3
 8005a5e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005a62:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005a66:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a6a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005a6e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005a72:	e841 2300 	strex	r3, r2, [r1]
 8005a76:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005a7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d1da      	bne.n	8005a38 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	3308      	adds	r3, #8
 8005a88:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a8c:	e853 3f00 	ldrex	r3, [r3]
 8005a90:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005a92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a94:	f023 0301 	bic.w	r3, r3, #1
 8005a98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	3308      	adds	r3, #8
 8005aa2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005aa6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005aaa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005aae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005ab2:	e841 2300 	strex	r3, r2, [r1]
 8005ab6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005ab8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d1e1      	bne.n	8005a82 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	3308      	adds	r3, #8
 8005ac4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ac8:	e853 3f00 	ldrex	r3, [r3]
 8005acc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005ace:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ad0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ad4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	3308      	adds	r3, #8
 8005ade:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005ae2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005ae4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ae6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005ae8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005aea:	e841 2300 	strex	r3, r2, [r1]
 8005aee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005af0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d1e3      	bne.n	8005abe <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2220      	movs	r2, #32
 8005afa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2200      	movs	r2, #0
 8005b00:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b0a:	e853 3f00 	ldrex	r3, [r3]
 8005b0e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005b10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b12:	f023 0310 	bic.w	r3, r3, #16
 8005b16:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	461a      	mov	r2, r3
 8005b20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005b24:	65bb      	str	r3, [r7, #88]	; 0x58
 8005b26:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b28:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005b2a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005b2c:	e841 2300 	strex	r3, r2, [r1]
 8005b30:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005b32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d1e4      	bne.n	8005b02 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f7fc fbca 	bl	80022d6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	1ad3      	subs	r3, r2, r3
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	4619      	mov	r1, r3
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 f8d4 	bl	8005d04 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005b5c:	e0b5      	b.n	8005cca <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005b6a:	b29b      	uxth	r3, r3
 8005b6c:	1ad3      	subs	r3, r2, r3
 8005b6e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	f000 80a7 	beq.w	8005cce <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8005b80:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	f000 80a2 	beq.w	8005cce <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b92:	e853 3f00 	ldrex	r3, [r3]
 8005b96:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b9a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b9e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005bac:	647b      	str	r3, [r7, #68]	; 0x44
 8005bae:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bb0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005bb2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005bb4:	e841 2300 	strex	r3, r2, [r1]
 8005bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005bba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d1e4      	bne.n	8005b8a <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	3308      	adds	r3, #8
 8005bc6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bca:	e853 3f00 	ldrex	r3, [r3]
 8005bce:	623b      	str	r3, [r7, #32]
   return(result);
 8005bd0:	6a3b      	ldr	r3, [r7, #32]
 8005bd2:	f023 0301 	bic.w	r3, r3, #1
 8005bd6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	3308      	adds	r3, #8
 8005be0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005be4:	633a      	str	r2, [r7, #48]	; 0x30
 8005be6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005bea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bec:	e841 2300 	strex	r3, r2, [r1]
 8005bf0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d1e3      	bne.n	8005bc0 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2220      	movs	r2, #32
 8005bfc:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2200      	movs	r2, #0
 8005c02:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2200      	movs	r2, #0
 8005c08:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	e853 3f00 	ldrex	r3, [r3]
 8005c16:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f023 0310 	bic.w	r3, r3, #16
 8005c1e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	461a      	mov	r2, r3
 8005c28:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005c2c:	61fb      	str	r3, [r7, #28]
 8005c2e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c30:	69b9      	ldr	r1, [r7, #24]
 8005c32:	69fa      	ldr	r2, [r7, #28]
 8005c34:	e841 2300 	strex	r3, r2, [r1]
 8005c38:	617b      	str	r3, [r7, #20]
   return(result);
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d1e4      	bne.n	8005c0a <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005c40:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005c44:	4619      	mov	r1, r3
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f000 f85c 	bl	8005d04 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005c4c:	e03f      	b.n	8005cce <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005c4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d00e      	beq.n	8005c78 <HAL_UART_IRQHandler+0x560>
 8005c5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d008      	beq.n	8005c78 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005c6e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f000 fcd1 	bl	8006618 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005c76:	e02d      	b.n	8005cd4 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005c78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d00e      	beq.n	8005ca2 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005c84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d008      	beq.n	8005ca2 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d01c      	beq.n	8005cd2 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	4798      	blx	r3
    }
    return;
 8005ca0:	e017      	b.n	8005cd2 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005ca2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d012      	beq.n	8005cd4 <HAL_UART_IRQHandler+0x5bc>
 8005cae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d00c      	beq.n	8005cd4 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f000 fc82 	bl	80065c4 <UART_EndTransmit_IT>
    return;
 8005cc0:	e008      	b.n	8005cd4 <HAL_UART_IRQHandler+0x5bc>
      return;
 8005cc2:	bf00      	nop
 8005cc4:	e006      	b.n	8005cd4 <HAL_UART_IRQHandler+0x5bc>
    return;
 8005cc6:	bf00      	nop
 8005cc8:	e004      	b.n	8005cd4 <HAL_UART_IRQHandler+0x5bc>
      return;
 8005cca:	bf00      	nop
 8005ccc:	e002      	b.n	8005cd4 <HAL_UART_IRQHandler+0x5bc>
      return;
 8005cce:	bf00      	nop
 8005cd0:	e000      	b.n	8005cd4 <HAL_UART_IRQHandler+0x5bc>
    return;
 8005cd2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005cd4:	37e8      	adds	r7, #232	; 0xe8
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
 8005cda:	bf00      	nop

08005cdc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b083      	sub	sp, #12
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005ce4:	bf00      	nop
 8005ce6:	370c      	adds	r7, #12
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr

08005cf0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b083      	sub	sp, #12
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005cf8:	bf00      	nop
 8005cfa:	370c      	adds	r7, #12
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d02:	4770      	bx	lr

08005d04 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b083      	sub	sp, #12
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	460b      	mov	r3, r1
 8005d0e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005d10:	bf00      	nop
 8005d12:	370c      	adds	r7, #12
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr

08005d1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d20:	b08a      	sub	sp, #40	; 0x28
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d26:	2300      	movs	r3, #0
 8005d28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	689a      	ldr	r2, [r3, #8]
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	691b      	ldr	r3, [r3, #16]
 8005d34:	431a      	orrs	r2, r3
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	695b      	ldr	r3, [r3, #20]
 8005d3a:	431a      	orrs	r2, r3
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	69db      	ldr	r3, [r3, #28]
 8005d40:	4313      	orrs	r3, r2
 8005d42:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	4bb4      	ldr	r3, [pc, #720]	; (800601c <UART_SetConfig+0x300>)
 8005d4c:	4013      	ands	r3, r2
 8005d4e:	68fa      	ldr	r2, [r7, #12]
 8005d50:	6812      	ldr	r2, [r2, #0]
 8005d52:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005d54:	430b      	orrs	r3, r1
 8005d56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	68da      	ldr	r2, [r3, #12]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	430a      	orrs	r2, r1
 8005d6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	699b      	ldr	r3, [r3, #24]
 8005d72:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4aa9      	ldr	r2, [pc, #676]	; (8006020 <UART_SetConfig+0x304>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d004      	beq.n	8005d88 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	6a1b      	ldr	r3, [r3, #32]
 8005d82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d84:	4313      	orrs	r3, r2
 8005d86:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d98:	430a      	orrs	r2, r1
 8005d9a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4aa0      	ldr	r2, [pc, #640]	; (8006024 <UART_SetConfig+0x308>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d126      	bne.n	8005df4 <UART_SetConfig+0xd8>
 8005da6:	4ba0      	ldr	r3, [pc, #640]	; (8006028 <UART_SetConfig+0x30c>)
 8005da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dac:	f003 0303 	and.w	r3, r3, #3
 8005db0:	2b03      	cmp	r3, #3
 8005db2:	d81b      	bhi.n	8005dec <UART_SetConfig+0xd0>
 8005db4:	a201      	add	r2, pc, #4	; (adr r2, 8005dbc <UART_SetConfig+0xa0>)
 8005db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dba:	bf00      	nop
 8005dbc:	08005dcd 	.word	0x08005dcd
 8005dc0:	08005ddd 	.word	0x08005ddd
 8005dc4:	08005dd5 	.word	0x08005dd5
 8005dc8:	08005de5 	.word	0x08005de5
 8005dcc:	2301      	movs	r3, #1
 8005dce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dd2:	e080      	b.n	8005ed6 <UART_SetConfig+0x1ba>
 8005dd4:	2302      	movs	r3, #2
 8005dd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dda:	e07c      	b.n	8005ed6 <UART_SetConfig+0x1ba>
 8005ddc:	2304      	movs	r3, #4
 8005dde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005de2:	e078      	b.n	8005ed6 <UART_SetConfig+0x1ba>
 8005de4:	2308      	movs	r3, #8
 8005de6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dea:	e074      	b.n	8005ed6 <UART_SetConfig+0x1ba>
 8005dec:	2310      	movs	r3, #16
 8005dee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005df2:	e070      	b.n	8005ed6 <UART_SetConfig+0x1ba>
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a8c      	ldr	r2, [pc, #560]	; (800602c <UART_SetConfig+0x310>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d138      	bne.n	8005e70 <UART_SetConfig+0x154>
 8005dfe:	4b8a      	ldr	r3, [pc, #552]	; (8006028 <UART_SetConfig+0x30c>)
 8005e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e04:	f003 030c 	and.w	r3, r3, #12
 8005e08:	2b0c      	cmp	r3, #12
 8005e0a:	d82d      	bhi.n	8005e68 <UART_SetConfig+0x14c>
 8005e0c:	a201      	add	r2, pc, #4	; (adr r2, 8005e14 <UART_SetConfig+0xf8>)
 8005e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e12:	bf00      	nop
 8005e14:	08005e49 	.word	0x08005e49
 8005e18:	08005e69 	.word	0x08005e69
 8005e1c:	08005e69 	.word	0x08005e69
 8005e20:	08005e69 	.word	0x08005e69
 8005e24:	08005e59 	.word	0x08005e59
 8005e28:	08005e69 	.word	0x08005e69
 8005e2c:	08005e69 	.word	0x08005e69
 8005e30:	08005e69 	.word	0x08005e69
 8005e34:	08005e51 	.word	0x08005e51
 8005e38:	08005e69 	.word	0x08005e69
 8005e3c:	08005e69 	.word	0x08005e69
 8005e40:	08005e69 	.word	0x08005e69
 8005e44:	08005e61 	.word	0x08005e61
 8005e48:	2300      	movs	r3, #0
 8005e4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e4e:	e042      	b.n	8005ed6 <UART_SetConfig+0x1ba>
 8005e50:	2302      	movs	r3, #2
 8005e52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e56:	e03e      	b.n	8005ed6 <UART_SetConfig+0x1ba>
 8005e58:	2304      	movs	r3, #4
 8005e5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e5e:	e03a      	b.n	8005ed6 <UART_SetConfig+0x1ba>
 8005e60:	2308      	movs	r3, #8
 8005e62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e66:	e036      	b.n	8005ed6 <UART_SetConfig+0x1ba>
 8005e68:	2310      	movs	r3, #16
 8005e6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e6e:	e032      	b.n	8005ed6 <UART_SetConfig+0x1ba>
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a6a      	ldr	r2, [pc, #424]	; (8006020 <UART_SetConfig+0x304>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d12a      	bne.n	8005ed0 <UART_SetConfig+0x1b4>
 8005e7a:	4b6b      	ldr	r3, [pc, #428]	; (8006028 <UART_SetConfig+0x30c>)
 8005e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e80:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005e84:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e88:	d01a      	beq.n	8005ec0 <UART_SetConfig+0x1a4>
 8005e8a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e8e:	d81b      	bhi.n	8005ec8 <UART_SetConfig+0x1ac>
 8005e90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e94:	d00c      	beq.n	8005eb0 <UART_SetConfig+0x194>
 8005e96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e9a:	d815      	bhi.n	8005ec8 <UART_SetConfig+0x1ac>
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d003      	beq.n	8005ea8 <UART_SetConfig+0x18c>
 8005ea0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ea4:	d008      	beq.n	8005eb8 <UART_SetConfig+0x19c>
 8005ea6:	e00f      	b.n	8005ec8 <UART_SetConfig+0x1ac>
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005eae:	e012      	b.n	8005ed6 <UART_SetConfig+0x1ba>
 8005eb0:	2302      	movs	r3, #2
 8005eb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005eb6:	e00e      	b.n	8005ed6 <UART_SetConfig+0x1ba>
 8005eb8:	2304      	movs	r3, #4
 8005eba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ebe:	e00a      	b.n	8005ed6 <UART_SetConfig+0x1ba>
 8005ec0:	2308      	movs	r3, #8
 8005ec2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ec6:	e006      	b.n	8005ed6 <UART_SetConfig+0x1ba>
 8005ec8:	2310      	movs	r3, #16
 8005eca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ece:	e002      	b.n	8005ed6 <UART_SetConfig+0x1ba>
 8005ed0:	2310      	movs	r3, #16
 8005ed2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a51      	ldr	r2, [pc, #324]	; (8006020 <UART_SetConfig+0x304>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d17a      	bne.n	8005fd6 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005ee0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005ee4:	2b08      	cmp	r3, #8
 8005ee6:	d824      	bhi.n	8005f32 <UART_SetConfig+0x216>
 8005ee8:	a201      	add	r2, pc, #4	; (adr r2, 8005ef0 <UART_SetConfig+0x1d4>)
 8005eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eee:	bf00      	nop
 8005ef0:	08005f15 	.word	0x08005f15
 8005ef4:	08005f33 	.word	0x08005f33
 8005ef8:	08005f1d 	.word	0x08005f1d
 8005efc:	08005f33 	.word	0x08005f33
 8005f00:	08005f23 	.word	0x08005f23
 8005f04:	08005f33 	.word	0x08005f33
 8005f08:	08005f33 	.word	0x08005f33
 8005f0c:	08005f33 	.word	0x08005f33
 8005f10:	08005f2b 	.word	0x08005f2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f14:	f7fe fd24 	bl	8004960 <HAL_RCC_GetPCLK1Freq>
 8005f18:	61f8      	str	r0, [r7, #28]
        break;
 8005f1a:	e010      	b.n	8005f3e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f1c:	4b44      	ldr	r3, [pc, #272]	; (8006030 <UART_SetConfig+0x314>)
 8005f1e:	61fb      	str	r3, [r7, #28]
        break;
 8005f20:	e00d      	b.n	8005f3e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f22:	f7fe fc85 	bl	8004830 <HAL_RCC_GetSysClockFreq>
 8005f26:	61f8      	str	r0, [r7, #28]
        break;
 8005f28:	e009      	b.n	8005f3e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f2e:	61fb      	str	r3, [r7, #28]
        break;
 8005f30:	e005      	b.n	8005f3e <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8005f32:	2300      	movs	r3, #0
 8005f34:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005f3c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005f3e:	69fb      	ldr	r3, [r7, #28]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	f000 8107 	beq.w	8006154 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	685a      	ldr	r2, [r3, #4]
 8005f4a:	4613      	mov	r3, r2
 8005f4c:	005b      	lsls	r3, r3, #1
 8005f4e:	4413      	add	r3, r2
 8005f50:	69fa      	ldr	r2, [r7, #28]
 8005f52:	429a      	cmp	r2, r3
 8005f54:	d305      	bcc.n	8005f62 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005f5c:	69fa      	ldr	r2, [r7, #28]
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	d903      	bls.n	8005f6a <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005f68:	e0f4      	b.n	8006154 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005f6a:	69fb      	ldr	r3, [r7, #28]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	461c      	mov	r4, r3
 8005f70:	4615      	mov	r5, r2
 8005f72:	f04f 0200 	mov.w	r2, #0
 8005f76:	f04f 0300 	mov.w	r3, #0
 8005f7a:	022b      	lsls	r3, r5, #8
 8005f7c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005f80:	0222      	lsls	r2, r4, #8
 8005f82:	68f9      	ldr	r1, [r7, #12]
 8005f84:	6849      	ldr	r1, [r1, #4]
 8005f86:	0849      	lsrs	r1, r1, #1
 8005f88:	2000      	movs	r0, #0
 8005f8a:	4688      	mov	r8, r1
 8005f8c:	4681      	mov	r9, r0
 8005f8e:	eb12 0a08 	adds.w	sl, r2, r8
 8005f92:	eb43 0b09 	adc.w	fp, r3, r9
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	603b      	str	r3, [r7, #0]
 8005f9e:	607a      	str	r2, [r7, #4]
 8005fa0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fa4:	4650      	mov	r0, sl
 8005fa6:	4659      	mov	r1, fp
 8005fa8:	f7fa fe4e 	bl	8000c48 <__aeabi_uldivmod>
 8005fac:	4602      	mov	r2, r0
 8005fae:	460b      	mov	r3, r1
 8005fb0:	4613      	mov	r3, r2
 8005fb2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005fb4:	69bb      	ldr	r3, [r7, #24]
 8005fb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005fba:	d308      	bcc.n	8005fce <UART_SetConfig+0x2b2>
 8005fbc:	69bb      	ldr	r3, [r7, #24]
 8005fbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fc2:	d204      	bcs.n	8005fce <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	69ba      	ldr	r2, [r7, #24]
 8005fca:	60da      	str	r2, [r3, #12]
 8005fcc:	e0c2      	b.n	8006154 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005fd4:	e0be      	b.n	8006154 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	69db      	ldr	r3, [r3, #28]
 8005fda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fde:	d16a      	bne.n	80060b6 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8005fe0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005fe4:	2b08      	cmp	r3, #8
 8005fe6:	d834      	bhi.n	8006052 <UART_SetConfig+0x336>
 8005fe8:	a201      	add	r2, pc, #4	; (adr r2, 8005ff0 <UART_SetConfig+0x2d4>)
 8005fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fee:	bf00      	nop
 8005ff0:	08006015 	.word	0x08006015
 8005ff4:	08006035 	.word	0x08006035
 8005ff8:	0800603d 	.word	0x0800603d
 8005ffc:	08006053 	.word	0x08006053
 8006000:	08006043 	.word	0x08006043
 8006004:	08006053 	.word	0x08006053
 8006008:	08006053 	.word	0x08006053
 800600c:	08006053 	.word	0x08006053
 8006010:	0800604b 	.word	0x0800604b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006014:	f7fe fca4 	bl	8004960 <HAL_RCC_GetPCLK1Freq>
 8006018:	61f8      	str	r0, [r7, #28]
        break;
 800601a:	e020      	b.n	800605e <UART_SetConfig+0x342>
 800601c:	efff69f3 	.word	0xefff69f3
 8006020:	40008000 	.word	0x40008000
 8006024:	40013800 	.word	0x40013800
 8006028:	40021000 	.word	0x40021000
 800602c:	40004400 	.word	0x40004400
 8006030:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006034:	f7fe fcaa 	bl	800498c <HAL_RCC_GetPCLK2Freq>
 8006038:	61f8      	str	r0, [r7, #28]
        break;
 800603a:	e010      	b.n	800605e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800603c:	4b4c      	ldr	r3, [pc, #304]	; (8006170 <UART_SetConfig+0x454>)
 800603e:	61fb      	str	r3, [r7, #28]
        break;
 8006040:	e00d      	b.n	800605e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006042:	f7fe fbf5 	bl	8004830 <HAL_RCC_GetSysClockFreq>
 8006046:	61f8      	str	r0, [r7, #28]
        break;
 8006048:	e009      	b.n	800605e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800604a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800604e:	61fb      	str	r3, [r7, #28]
        break;
 8006050:	e005      	b.n	800605e <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8006052:	2300      	movs	r3, #0
 8006054:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800605c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800605e:	69fb      	ldr	r3, [r7, #28]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d077      	beq.n	8006154 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006064:	69fb      	ldr	r3, [r7, #28]
 8006066:	005a      	lsls	r2, r3, #1
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	085b      	lsrs	r3, r3, #1
 800606e:	441a      	add	r2, r3
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	fbb2 f3f3 	udiv	r3, r2, r3
 8006078:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800607a:	69bb      	ldr	r3, [r7, #24]
 800607c:	2b0f      	cmp	r3, #15
 800607e:	d916      	bls.n	80060ae <UART_SetConfig+0x392>
 8006080:	69bb      	ldr	r3, [r7, #24]
 8006082:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006086:	d212      	bcs.n	80060ae <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006088:	69bb      	ldr	r3, [r7, #24]
 800608a:	b29b      	uxth	r3, r3
 800608c:	f023 030f 	bic.w	r3, r3, #15
 8006090:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006092:	69bb      	ldr	r3, [r7, #24]
 8006094:	085b      	lsrs	r3, r3, #1
 8006096:	b29b      	uxth	r3, r3
 8006098:	f003 0307 	and.w	r3, r3, #7
 800609c:	b29a      	uxth	r2, r3
 800609e:	8afb      	ldrh	r3, [r7, #22]
 80060a0:	4313      	orrs	r3, r2
 80060a2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	8afa      	ldrh	r2, [r7, #22]
 80060aa:	60da      	str	r2, [r3, #12]
 80060ac:	e052      	b.n	8006154 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80060b4:	e04e      	b.n	8006154 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80060b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80060ba:	2b08      	cmp	r3, #8
 80060bc:	d827      	bhi.n	800610e <UART_SetConfig+0x3f2>
 80060be:	a201      	add	r2, pc, #4	; (adr r2, 80060c4 <UART_SetConfig+0x3a8>)
 80060c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060c4:	080060e9 	.word	0x080060e9
 80060c8:	080060f1 	.word	0x080060f1
 80060cc:	080060f9 	.word	0x080060f9
 80060d0:	0800610f 	.word	0x0800610f
 80060d4:	080060ff 	.word	0x080060ff
 80060d8:	0800610f 	.word	0x0800610f
 80060dc:	0800610f 	.word	0x0800610f
 80060e0:	0800610f 	.word	0x0800610f
 80060e4:	08006107 	.word	0x08006107
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060e8:	f7fe fc3a 	bl	8004960 <HAL_RCC_GetPCLK1Freq>
 80060ec:	61f8      	str	r0, [r7, #28]
        break;
 80060ee:	e014      	b.n	800611a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060f0:	f7fe fc4c 	bl	800498c <HAL_RCC_GetPCLK2Freq>
 80060f4:	61f8      	str	r0, [r7, #28]
        break;
 80060f6:	e010      	b.n	800611a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060f8:	4b1d      	ldr	r3, [pc, #116]	; (8006170 <UART_SetConfig+0x454>)
 80060fa:	61fb      	str	r3, [r7, #28]
        break;
 80060fc:	e00d      	b.n	800611a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060fe:	f7fe fb97 	bl	8004830 <HAL_RCC_GetSysClockFreq>
 8006102:	61f8      	str	r0, [r7, #28]
        break;
 8006104:	e009      	b.n	800611a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006106:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800610a:	61fb      	str	r3, [r7, #28]
        break;
 800610c:	e005      	b.n	800611a <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800610e:	2300      	movs	r3, #0
 8006110:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006118:	bf00      	nop
    }

    if (pclk != 0U)
 800611a:	69fb      	ldr	r3, [r7, #28]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d019      	beq.n	8006154 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	085a      	lsrs	r2, r3, #1
 8006126:	69fb      	ldr	r3, [r7, #28]
 8006128:	441a      	add	r2, r3
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006132:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006134:	69bb      	ldr	r3, [r7, #24]
 8006136:	2b0f      	cmp	r3, #15
 8006138:	d909      	bls.n	800614e <UART_SetConfig+0x432>
 800613a:	69bb      	ldr	r3, [r7, #24]
 800613c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006140:	d205      	bcs.n	800614e <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006142:	69bb      	ldr	r3, [r7, #24]
 8006144:	b29a      	uxth	r2, r3
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	60da      	str	r2, [r3, #12]
 800614c:	e002      	b.n	8006154 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800614e:	2301      	movs	r3, #1
 8006150:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2200      	movs	r2, #0
 8006158:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2200      	movs	r2, #0
 800615e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006160:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006164:	4618      	mov	r0, r3
 8006166:	3728      	adds	r7, #40	; 0x28
 8006168:	46bd      	mov	sp, r7
 800616a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800616e:	bf00      	nop
 8006170:	00f42400 	.word	0x00f42400

08006174 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006174:	b480      	push	{r7}
 8006176:	b083      	sub	sp, #12
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006180:	f003 0301 	and.w	r3, r3, #1
 8006184:	2b00      	cmp	r3, #0
 8006186:	d00a      	beq.n	800619e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	430a      	orrs	r2, r1
 800619c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a2:	f003 0302 	and.w	r3, r3, #2
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d00a      	beq.n	80061c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	430a      	orrs	r2, r1
 80061be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c4:	f003 0304 	and.w	r3, r3, #4
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d00a      	beq.n	80061e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	430a      	orrs	r2, r1
 80061e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e6:	f003 0308 	and.w	r3, r3, #8
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d00a      	beq.n	8006204 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	430a      	orrs	r2, r1
 8006202:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006208:	f003 0310 	and.w	r3, r3, #16
 800620c:	2b00      	cmp	r3, #0
 800620e:	d00a      	beq.n	8006226 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	689b      	ldr	r3, [r3, #8]
 8006216:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	430a      	orrs	r2, r1
 8006224:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800622a:	f003 0320 	and.w	r3, r3, #32
 800622e:	2b00      	cmp	r3, #0
 8006230:	d00a      	beq.n	8006248 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	430a      	orrs	r2, r1
 8006246:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800624c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006250:	2b00      	cmp	r3, #0
 8006252:	d01a      	beq.n	800628a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	430a      	orrs	r2, r1
 8006268:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800626e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006272:	d10a      	bne.n	800628a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	430a      	orrs	r2, r1
 8006288:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800628e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006292:	2b00      	cmp	r3, #0
 8006294:	d00a      	beq.n	80062ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	430a      	orrs	r2, r1
 80062aa:	605a      	str	r2, [r3, #4]
  }
}
 80062ac:	bf00      	nop
 80062ae:	370c      	adds	r7, #12
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr

080062b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b086      	sub	sp, #24
 80062bc:	af02      	add	r7, sp, #8
 80062be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2200      	movs	r2, #0
 80062c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80062c8:	f7fb fec4 	bl	8002054 <HAL_GetTick>
 80062cc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f003 0308 	and.w	r3, r3, #8
 80062d8:	2b08      	cmp	r3, #8
 80062da:	d10e      	bne.n	80062fa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80062e0:	9300      	str	r3, [sp, #0]
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2200      	movs	r2, #0
 80062e6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f000 f82d 	bl	800634a <UART_WaitOnFlagUntilTimeout>
 80062f0:	4603      	mov	r3, r0
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d001      	beq.n	80062fa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062f6:	2303      	movs	r3, #3
 80062f8:	e023      	b.n	8006342 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f003 0304 	and.w	r3, r3, #4
 8006304:	2b04      	cmp	r3, #4
 8006306:	d10e      	bne.n	8006326 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006308:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800630c:	9300      	str	r3, [sp, #0]
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2200      	movs	r2, #0
 8006312:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f000 f817 	bl	800634a <UART_WaitOnFlagUntilTimeout>
 800631c:	4603      	mov	r3, r0
 800631e:	2b00      	cmp	r3, #0
 8006320:	d001      	beq.n	8006326 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006322:	2303      	movs	r3, #3
 8006324:	e00d      	b.n	8006342 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2220      	movs	r2, #32
 800632a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2220      	movs	r2, #32
 8006330:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2200      	movs	r2, #0
 8006336:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2200      	movs	r2, #0
 800633c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006340:	2300      	movs	r3, #0
}
 8006342:	4618      	mov	r0, r3
 8006344:	3710      	adds	r7, #16
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}

0800634a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800634a:	b580      	push	{r7, lr}
 800634c:	b09c      	sub	sp, #112	; 0x70
 800634e:	af00      	add	r7, sp, #0
 8006350:	60f8      	str	r0, [r7, #12]
 8006352:	60b9      	str	r1, [r7, #8]
 8006354:	603b      	str	r3, [r7, #0]
 8006356:	4613      	mov	r3, r2
 8006358:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800635a:	e0a5      	b.n	80064a8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800635c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800635e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006362:	f000 80a1 	beq.w	80064a8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006366:	f7fb fe75 	bl	8002054 <HAL_GetTick>
 800636a:	4602      	mov	r2, r0
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	1ad3      	subs	r3, r2, r3
 8006370:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006372:	429a      	cmp	r2, r3
 8006374:	d302      	bcc.n	800637c <UART_WaitOnFlagUntilTimeout+0x32>
 8006376:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006378:	2b00      	cmp	r3, #0
 800637a:	d13e      	bne.n	80063fa <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006382:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006384:	e853 3f00 	ldrex	r3, [r3]
 8006388:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800638a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800638c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006390:	667b      	str	r3, [r7, #100]	; 0x64
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	461a      	mov	r2, r3
 8006398:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800639a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800639c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800639e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80063a0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80063a2:	e841 2300 	strex	r3, r2, [r1]
 80063a6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80063a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d1e6      	bne.n	800637c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	3308      	adds	r3, #8
 80063b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063b8:	e853 3f00 	ldrex	r3, [r3]
 80063bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80063be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063c0:	f023 0301 	bic.w	r3, r3, #1
 80063c4:	663b      	str	r3, [r7, #96]	; 0x60
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	3308      	adds	r3, #8
 80063cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80063ce:	64ba      	str	r2, [r7, #72]	; 0x48
 80063d0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063d2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80063d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80063d6:	e841 2300 	strex	r3, r2, [r1]
 80063da:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80063dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d1e5      	bne.n	80063ae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2220      	movs	r2, #32
 80063e6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2220      	movs	r2, #32
 80063ec:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2200      	movs	r2, #0
 80063f2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80063f6:	2303      	movs	r3, #3
 80063f8:	e067      	b.n	80064ca <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f003 0304 	and.w	r3, r3, #4
 8006404:	2b00      	cmp	r3, #0
 8006406:	d04f      	beq.n	80064a8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	69db      	ldr	r3, [r3, #28]
 800640e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006412:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006416:	d147      	bne.n	80064a8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006420:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800642a:	e853 3f00 	ldrex	r3, [r3]
 800642e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006432:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006436:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	461a      	mov	r2, r3
 800643e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006440:	637b      	str	r3, [r7, #52]	; 0x34
 8006442:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006444:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006446:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006448:	e841 2300 	strex	r3, r2, [r1]
 800644c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800644e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006450:	2b00      	cmp	r3, #0
 8006452:	d1e6      	bne.n	8006422 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	3308      	adds	r3, #8
 800645a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	e853 3f00 	ldrex	r3, [r3]
 8006462:	613b      	str	r3, [r7, #16]
   return(result);
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	f023 0301 	bic.w	r3, r3, #1
 800646a:	66bb      	str	r3, [r7, #104]	; 0x68
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	3308      	adds	r3, #8
 8006472:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006474:	623a      	str	r2, [r7, #32]
 8006476:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006478:	69f9      	ldr	r1, [r7, #28]
 800647a:	6a3a      	ldr	r2, [r7, #32]
 800647c:	e841 2300 	strex	r3, r2, [r1]
 8006480:	61bb      	str	r3, [r7, #24]
   return(result);
 8006482:	69bb      	ldr	r3, [r7, #24]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d1e5      	bne.n	8006454 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2220      	movs	r2, #32
 800648c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2220      	movs	r2, #32
 8006492:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2220      	movs	r2, #32
 8006498:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	2200      	movs	r2, #0
 80064a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80064a4:	2303      	movs	r3, #3
 80064a6:	e010      	b.n	80064ca <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	69da      	ldr	r2, [r3, #28]
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	4013      	ands	r3, r2
 80064b2:	68ba      	ldr	r2, [r7, #8]
 80064b4:	429a      	cmp	r2, r3
 80064b6:	bf0c      	ite	eq
 80064b8:	2301      	moveq	r3, #1
 80064ba:	2300      	movne	r3, #0
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	461a      	mov	r2, r3
 80064c0:	79fb      	ldrb	r3, [r7, #7]
 80064c2:	429a      	cmp	r2, r3
 80064c4:	f43f af4a 	beq.w	800635c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80064c8:	2300      	movs	r3, #0
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3770      	adds	r7, #112	; 0x70
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}

080064d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80064d2:	b480      	push	{r7}
 80064d4:	b095      	sub	sp, #84	; 0x54
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064e2:	e853 3f00 	ldrex	r3, [r3]
 80064e6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80064e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80064ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	461a      	mov	r2, r3
 80064f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064f8:	643b      	str	r3, [r7, #64]	; 0x40
 80064fa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80064fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006500:	e841 2300 	strex	r3, r2, [r1]
 8006504:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006508:	2b00      	cmp	r3, #0
 800650a:	d1e6      	bne.n	80064da <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	3308      	adds	r3, #8
 8006512:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006514:	6a3b      	ldr	r3, [r7, #32]
 8006516:	e853 3f00 	ldrex	r3, [r3]
 800651a:	61fb      	str	r3, [r7, #28]
   return(result);
 800651c:	69fb      	ldr	r3, [r7, #28]
 800651e:	f023 0301 	bic.w	r3, r3, #1
 8006522:	64bb      	str	r3, [r7, #72]	; 0x48
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	3308      	adds	r3, #8
 800652a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800652c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800652e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006530:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006532:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006534:	e841 2300 	strex	r3, r2, [r1]
 8006538:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800653a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800653c:	2b00      	cmp	r3, #0
 800653e:	d1e5      	bne.n	800650c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006544:	2b01      	cmp	r3, #1
 8006546:	d118      	bne.n	800657a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	e853 3f00 	ldrex	r3, [r3]
 8006554:	60bb      	str	r3, [r7, #8]
   return(result);
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	f023 0310 	bic.w	r3, r3, #16
 800655c:	647b      	str	r3, [r7, #68]	; 0x44
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	461a      	mov	r2, r3
 8006564:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006566:	61bb      	str	r3, [r7, #24]
 8006568:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800656a:	6979      	ldr	r1, [r7, #20]
 800656c:	69ba      	ldr	r2, [r7, #24]
 800656e:	e841 2300 	strex	r3, r2, [r1]
 8006572:	613b      	str	r3, [r7, #16]
   return(result);
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d1e6      	bne.n	8006548 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2220      	movs	r2, #32
 800657e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2200      	movs	r2, #0
 8006584:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2200      	movs	r2, #0
 800658a:	665a      	str	r2, [r3, #100]	; 0x64
}
 800658c:	bf00      	nop
 800658e:	3754      	adds	r7, #84	; 0x54
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr

08006598 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b084      	sub	sp, #16
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065a4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2200      	movs	r2, #0
 80065aa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2200      	movs	r2, #0
 80065b2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80065b6:	68f8      	ldr	r0, [r7, #12]
 80065b8:	f7ff fb9a 	bl	8005cf0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80065bc:	bf00      	nop
 80065be:	3710      	adds	r7, #16
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}

080065c4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b088      	sub	sp, #32
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	e853 3f00 	ldrex	r3, [r3]
 80065d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065e0:	61fb      	str	r3, [r7, #28]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	461a      	mov	r2, r3
 80065e8:	69fb      	ldr	r3, [r7, #28]
 80065ea:	61bb      	str	r3, [r7, #24]
 80065ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ee:	6979      	ldr	r1, [r7, #20]
 80065f0:	69ba      	ldr	r2, [r7, #24]
 80065f2:	e841 2300 	strex	r3, r2, [r1]
 80065f6:	613b      	str	r3, [r7, #16]
   return(result);
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d1e6      	bne.n	80065cc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2220      	movs	r2, #32
 8006602:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2200      	movs	r2, #0
 8006608:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f7ff fb66 	bl	8005cdc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006610:	bf00      	nop
 8006612:	3720      	adds	r7, #32
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}

08006618 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006618:	b480      	push	{r7}
 800661a:	b083      	sub	sp, #12
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006620:	bf00      	nop
 8006622:	370c      	adds	r7, #12
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr

0800662c <__errno>:
 800662c:	4b01      	ldr	r3, [pc, #4]	; (8006634 <__errno+0x8>)
 800662e:	6818      	ldr	r0, [r3, #0]
 8006630:	4770      	bx	lr
 8006632:	bf00      	nop
 8006634:	20000010 	.word	0x20000010

08006638 <__libc_init_array>:
 8006638:	b570      	push	{r4, r5, r6, lr}
 800663a:	4d0d      	ldr	r5, [pc, #52]	; (8006670 <__libc_init_array+0x38>)
 800663c:	4c0d      	ldr	r4, [pc, #52]	; (8006674 <__libc_init_array+0x3c>)
 800663e:	1b64      	subs	r4, r4, r5
 8006640:	10a4      	asrs	r4, r4, #2
 8006642:	2600      	movs	r6, #0
 8006644:	42a6      	cmp	r6, r4
 8006646:	d109      	bne.n	800665c <__libc_init_array+0x24>
 8006648:	4d0b      	ldr	r5, [pc, #44]	; (8006678 <__libc_init_array+0x40>)
 800664a:	4c0c      	ldr	r4, [pc, #48]	; (800667c <__libc_init_array+0x44>)
 800664c:	f004 f8ae 	bl	800a7ac <_init>
 8006650:	1b64      	subs	r4, r4, r5
 8006652:	10a4      	asrs	r4, r4, #2
 8006654:	2600      	movs	r6, #0
 8006656:	42a6      	cmp	r6, r4
 8006658:	d105      	bne.n	8006666 <__libc_init_array+0x2e>
 800665a:	bd70      	pop	{r4, r5, r6, pc}
 800665c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006660:	4798      	blx	r3
 8006662:	3601      	adds	r6, #1
 8006664:	e7ee      	b.n	8006644 <__libc_init_array+0xc>
 8006666:	f855 3b04 	ldr.w	r3, [r5], #4
 800666a:	4798      	blx	r3
 800666c:	3601      	adds	r6, #1
 800666e:	e7f2      	b.n	8006656 <__libc_init_array+0x1e>
 8006670:	0800ad10 	.word	0x0800ad10
 8006674:	0800ad10 	.word	0x0800ad10
 8006678:	0800ad10 	.word	0x0800ad10
 800667c:	0800ad14 	.word	0x0800ad14

08006680 <memcpy>:
 8006680:	440a      	add	r2, r1
 8006682:	4291      	cmp	r1, r2
 8006684:	f100 33ff 	add.w	r3, r0, #4294967295
 8006688:	d100      	bne.n	800668c <memcpy+0xc>
 800668a:	4770      	bx	lr
 800668c:	b510      	push	{r4, lr}
 800668e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006692:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006696:	4291      	cmp	r1, r2
 8006698:	d1f9      	bne.n	800668e <memcpy+0xe>
 800669a:	bd10      	pop	{r4, pc}

0800669c <memset>:
 800669c:	4402      	add	r2, r0
 800669e:	4603      	mov	r3, r0
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d100      	bne.n	80066a6 <memset+0xa>
 80066a4:	4770      	bx	lr
 80066a6:	f803 1b01 	strb.w	r1, [r3], #1
 80066aa:	e7f9      	b.n	80066a0 <memset+0x4>

080066ac <__cvt>:
 80066ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80066b0:	ec55 4b10 	vmov	r4, r5, d0
 80066b4:	2d00      	cmp	r5, #0
 80066b6:	460e      	mov	r6, r1
 80066b8:	4619      	mov	r1, r3
 80066ba:	462b      	mov	r3, r5
 80066bc:	bfbb      	ittet	lt
 80066be:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80066c2:	461d      	movlt	r5, r3
 80066c4:	2300      	movge	r3, #0
 80066c6:	232d      	movlt	r3, #45	; 0x2d
 80066c8:	700b      	strb	r3, [r1, #0]
 80066ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80066cc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80066d0:	4691      	mov	r9, r2
 80066d2:	f023 0820 	bic.w	r8, r3, #32
 80066d6:	bfbc      	itt	lt
 80066d8:	4622      	movlt	r2, r4
 80066da:	4614      	movlt	r4, r2
 80066dc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80066e0:	d005      	beq.n	80066ee <__cvt+0x42>
 80066e2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80066e6:	d100      	bne.n	80066ea <__cvt+0x3e>
 80066e8:	3601      	adds	r6, #1
 80066ea:	2102      	movs	r1, #2
 80066ec:	e000      	b.n	80066f0 <__cvt+0x44>
 80066ee:	2103      	movs	r1, #3
 80066f0:	ab03      	add	r3, sp, #12
 80066f2:	9301      	str	r3, [sp, #4]
 80066f4:	ab02      	add	r3, sp, #8
 80066f6:	9300      	str	r3, [sp, #0]
 80066f8:	ec45 4b10 	vmov	d0, r4, r5
 80066fc:	4653      	mov	r3, sl
 80066fe:	4632      	mov	r2, r6
 8006700:	f000 fcea 	bl	80070d8 <_dtoa_r>
 8006704:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006708:	4607      	mov	r7, r0
 800670a:	d102      	bne.n	8006712 <__cvt+0x66>
 800670c:	f019 0f01 	tst.w	r9, #1
 8006710:	d022      	beq.n	8006758 <__cvt+0xac>
 8006712:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006716:	eb07 0906 	add.w	r9, r7, r6
 800671a:	d110      	bne.n	800673e <__cvt+0x92>
 800671c:	783b      	ldrb	r3, [r7, #0]
 800671e:	2b30      	cmp	r3, #48	; 0x30
 8006720:	d10a      	bne.n	8006738 <__cvt+0x8c>
 8006722:	2200      	movs	r2, #0
 8006724:	2300      	movs	r3, #0
 8006726:	4620      	mov	r0, r4
 8006728:	4629      	mov	r1, r5
 800672a:	f7fa f9cd 	bl	8000ac8 <__aeabi_dcmpeq>
 800672e:	b918      	cbnz	r0, 8006738 <__cvt+0x8c>
 8006730:	f1c6 0601 	rsb	r6, r6, #1
 8006734:	f8ca 6000 	str.w	r6, [sl]
 8006738:	f8da 3000 	ldr.w	r3, [sl]
 800673c:	4499      	add	r9, r3
 800673e:	2200      	movs	r2, #0
 8006740:	2300      	movs	r3, #0
 8006742:	4620      	mov	r0, r4
 8006744:	4629      	mov	r1, r5
 8006746:	f7fa f9bf 	bl	8000ac8 <__aeabi_dcmpeq>
 800674a:	b108      	cbz	r0, 8006750 <__cvt+0xa4>
 800674c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006750:	2230      	movs	r2, #48	; 0x30
 8006752:	9b03      	ldr	r3, [sp, #12]
 8006754:	454b      	cmp	r3, r9
 8006756:	d307      	bcc.n	8006768 <__cvt+0xbc>
 8006758:	9b03      	ldr	r3, [sp, #12]
 800675a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800675c:	1bdb      	subs	r3, r3, r7
 800675e:	4638      	mov	r0, r7
 8006760:	6013      	str	r3, [r2, #0]
 8006762:	b004      	add	sp, #16
 8006764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006768:	1c59      	adds	r1, r3, #1
 800676a:	9103      	str	r1, [sp, #12]
 800676c:	701a      	strb	r2, [r3, #0]
 800676e:	e7f0      	b.n	8006752 <__cvt+0xa6>

08006770 <__exponent>:
 8006770:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006772:	4603      	mov	r3, r0
 8006774:	2900      	cmp	r1, #0
 8006776:	bfb8      	it	lt
 8006778:	4249      	neglt	r1, r1
 800677a:	f803 2b02 	strb.w	r2, [r3], #2
 800677e:	bfb4      	ite	lt
 8006780:	222d      	movlt	r2, #45	; 0x2d
 8006782:	222b      	movge	r2, #43	; 0x2b
 8006784:	2909      	cmp	r1, #9
 8006786:	7042      	strb	r2, [r0, #1]
 8006788:	dd2a      	ble.n	80067e0 <__exponent+0x70>
 800678a:	f10d 0407 	add.w	r4, sp, #7
 800678e:	46a4      	mov	ip, r4
 8006790:	270a      	movs	r7, #10
 8006792:	46a6      	mov	lr, r4
 8006794:	460a      	mov	r2, r1
 8006796:	fb91 f6f7 	sdiv	r6, r1, r7
 800679a:	fb07 1516 	mls	r5, r7, r6, r1
 800679e:	3530      	adds	r5, #48	; 0x30
 80067a0:	2a63      	cmp	r2, #99	; 0x63
 80067a2:	f104 34ff 	add.w	r4, r4, #4294967295
 80067a6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80067aa:	4631      	mov	r1, r6
 80067ac:	dcf1      	bgt.n	8006792 <__exponent+0x22>
 80067ae:	3130      	adds	r1, #48	; 0x30
 80067b0:	f1ae 0502 	sub.w	r5, lr, #2
 80067b4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80067b8:	1c44      	adds	r4, r0, #1
 80067ba:	4629      	mov	r1, r5
 80067bc:	4561      	cmp	r1, ip
 80067be:	d30a      	bcc.n	80067d6 <__exponent+0x66>
 80067c0:	f10d 0209 	add.w	r2, sp, #9
 80067c4:	eba2 020e 	sub.w	r2, r2, lr
 80067c8:	4565      	cmp	r5, ip
 80067ca:	bf88      	it	hi
 80067cc:	2200      	movhi	r2, #0
 80067ce:	4413      	add	r3, r2
 80067d0:	1a18      	subs	r0, r3, r0
 80067d2:	b003      	add	sp, #12
 80067d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80067da:	f804 2f01 	strb.w	r2, [r4, #1]!
 80067de:	e7ed      	b.n	80067bc <__exponent+0x4c>
 80067e0:	2330      	movs	r3, #48	; 0x30
 80067e2:	3130      	adds	r1, #48	; 0x30
 80067e4:	7083      	strb	r3, [r0, #2]
 80067e6:	70c1      	strb	r1, [r0, #3]
 80067e8:	1d03      	adds	r3, r0, #4
 80067ea:	e7f1      	b.n	80067d0 <__exponent+0x60>

080067ec <_printf_float>:
 80067ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067f0:	ed2d 8b02 	vpush	{d8}
 80067f4:	b08d      	sub	sp, #52	; 0x34
 80067f6:	460c      	mov	r4, r1
 80067f8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80067fc:	4616      	mov	r6, r2
 80067fe:	461f      	mov	r7, r3
 8006800:	4605      	mov	r5, r0
 8006802:	f001 fa57 	bl	8007cb4 <_localeconv_r>
 8006806:	f8d0 a000 	ldr.w	sl, [r0]
 800680a:	4650      	mov	r0, sl
 800680c:	f7f9 fce0 	bl	80001d0 <strlen>
 8006810:	2300      	movs	r3, #0
 8006812:	930a      	str	r3, [sp, #40]	; 0x28
 8006814:	6823      	ldr	r3, [r4, #0]
 8006816:	9305      	str	r3, [sp, #20]
 8006818:	f8d8 3000 	ldr.w	r3, [r8]
 800681c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006820:	3307      	adds	r3, #7
 8006822:	f023 0307 	bic.w	r3, r3, #7
 8006826:	f103 0208 	add.w	r2, r3, #8
 800682a:	f8c8 2000 	str.w	r2, [r8]
 800682e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006832:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006836:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800683a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800683e:	9307      	str	r3, [sp, #28]
 8006840:	f8cd 8018 	str.w	r8, [sp, #24]
 8006844:	ee08 0a10 	vmov	s16, r0
 8006848:	4b9f      	ldr	r3, [pc, #636]	; (8006ac8 <_printf_float+0x2dc>)
 800684a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800684e:	f04f 32ff 	mov.w	r2, #4294967295
 8006852:	f7fa f96b 	bl	8000b2c <__aeabi_dcmpun>
 8006856:	bb88      	cbnz	r0, 80068bc <_printf_float+0xd0>
 8006858:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800685c:	4b9a      	ldr	r3, [pc, #616]	; (8006ac8 <_printf_float+0x2dc>)
 800685e:	f04f 32ff 	mov.w	r2, #4294967295
 8006862:	f7fa f945 	bl	8000af0 <__aeabi_dcmple>
 8006866:	bb48      	cbnz	r0, 80068bc <_printf_float+0xd0>
 8006868:	2200      	movs	r2, #0
 800686a:	2300      	movs	r3, #0
 800686c:	4640      	mov	r0, r8
 800686e:	4649      	mov	r1, r9
 8006870:	f7fa f934 	bl	8000adc <__aeabi_dcmplt>
 8006874:	b110      	cbz	r0, 800687c <_printf_float+0x90>
 8006876:	232d      	movs	r3, #45	; 0x2d
 8006878:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800687c:	4b93      	ldr	r3, [pc, #588]	; (8006acc <_printf_float+0x2e0>)
 800687e:	4894      	ldr	r0, [pc, #592]	; (8006ad0 <_printf_float+0x2e4>)
 8006880:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006884:	bf94      	ite	ls
 8006886:	4698      	movls	r8, r3
 8006888:	4680      	movhi	r8, r0
 800688a:	2303      	movs	r3, #3
 800688c:	6123      	str	r3, [r4, #16]
 800688e:	9b05      	ldr	r3, [sp, #20]
 8006890:	f023 0204 	bic.w	r2, r3, #4
 8006894:	6022      	str	r2, [r4, #0]
 8006896:	f04f 0900 	mov.w	r9, #0
 800689a:	9700      	str	r7, [sp, #0]
 800689c:	4633      	mov	r3, r6
 800689e:	aa0b      	add	r2, sp, #44	; 0x2c
 80068a0:	4621      	mov	r1, r4
 80068a2:	4628      	mov	r0, r5
 80068a4:	f000 f9d8 	bl	8006c58 <_printf_common>
 80068a8:	3001      	adds	r0, #1
 80068aa:	f040 8090 	bne.w	80069ce <_printf_float+0x1e2>
 80068ae:	f04f 30ff 	mov.w	r0, #4294967295
 80068b2:	b00d      	add	sp, #52	; 0x34
 80068b4:	ecbd 8b02 	vpop	{d8}
 80068b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068bc:	4642      	mov	r2, r8
 80068be:	464b      	mov	r3, r9
 80068c0:	4640      	mov	r0, r8
 80068c2:	4649      	mov	r1, r9
 80068c4:	f7fa f932 	bl	8000b2c <__aeabi_dcmpun>
 80068c8:	b140      	cbz	r0, 80068dc <_printf_float+0xf0>
 80068ca:	464b      	mov	r3, r9
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	bfbc      	itt	lt
 80068d0:	232d      	movlt	r3, #45	; 0x2d
 80068d2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80068d6:	487f      	ldr	r0, [pc, #508]	; (8006ad4 <_printf_float+0x2e8>)
 80068d8:	4b7f      	ldr	r3, [pc, #508]	; (8006ad8 <_printf_float+0x2ec>)
 80068da:	e7d1      	b.n	8006880 <_printf_float+0x94>
 80068dc:	6863      	ldr	r3, [r4, #4]
 80068de:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80068e2:	9206      	str	r2, [sp, #24]
 80068e4:	1c5a      	adds	r2, r3, #1
 80068e6:	d13f      	bne.n	8006968 <_printf_float+0x17c>
 80068e8:	2306      	movs	r3, #6
 80068ea:	6063      	str	r3, [r4, #4]
 80068ec:	9b05      	ldr	r3, [sp, #20]
 80068ee:	6861      	ldr	r1, [r4, #4]
 80068f0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80068f4:	2300      	movs	r3, #0
 80068f6:	9303      	str	r3, [sp, #12]
 80068f8:	ab0a      	add	r3, sp, #40	; 0x28
 80068fa:	e9cd b301 	strd	fp, r3, [sp, #4]
 80068fe:	ab09      	add	r3, sp, #36	; 0x24
 8006900:	ec49 8b10 	vmov	d0, r8, r9
 8006904:	9300      	str	r3, [sp, #0]
 8006906:	6022      	str	r2, [r4, #0]
 8006908:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800690c:	4628      	mov	r0, r5
 800690e:	f7ff fecd 	bl	80066ac <__cvt>
 8006912:	9b06      	ldr	r3, [sp, #24]
 8006914:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006916:	2b47      	cmp	r3, #71	; 0x47
 8006918:	4680      	mov	r8, r0
 800691a:	d108      	bne.n	800692e <_printf_float+0x142>
 800691c:	1cc8      	adds	r0, r1, #3
 800691e:	db02      	blt.n	8006926 <_printf_float+0x13a>
 8006920:	6863      	ldr	r3, [r4, #4]
 8006922:	4299      	cmp	r1, r3
 8006924:	dd41      	ble.n	80069aa <_printf_float+0x1be>
 8006926:	f1ab 0b02 	sub.w	fp, fp, #2
 800692a:	fa5f fb8b 	uxtb.w	fp, fp
 800692e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006932:	d820      	bhi.n	8006976 <_printf_float+0x18a>
 8006934:	3901      	subs	r1, #1
 8006936:	465a      	mov	r2, fp
 8006938:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800693c:	9109      	str	r1, [sp, #36]	; 0x24
 800693e:	f7ff ff17 	bl	8006770 <__exponent>
 8006942:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006944:	1813      	adds	r3, r2, r0
 8006946:	2a01      	cmp	r2, #1
 8006948:	4681      	mov	r9, r0
 800694a:	6123      	str	r3, [r4, #16]
 800694c:	dc02      	bgt.n	8006954 <_printf_float+0x168>
 800694e:	6822      	ldr	r2, [r4, #0]
 8006950:	07d2      	lsls	r2, r2, #31
 8006952:	d501      	bpl.n	8006958 <_printf_float+0x16c>
 8006954:	3301      	adds	r3, #1
 8006956:	6123      	str	r3, [r4, #16]
 8006958:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800695c:	2b00      	cmp	r3, #0
 800695e:	d09c      	beq.n	800689a <_printf_float+0xae>
 8006960:	232d      	movs	r3, #45	; 0x2d
 8006962:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006966:	e798      	b.n	800689a <_printf_float+0xae>
 8006968:	9a06      	ldr	r2, [sp, #24]
 800696a:	2a47      	cmp	r2, #71	; 0x47
 800696c:	d1be      	bne.n	80068ec <_printf_float+0x100>
 800696e:	2b00      	cmp	r3, #0
 8006970:	d1bc      	bne.n	80068ec <_printf_float+0x100>
 8006972:	2301      	movs	r3, #1
 8006974:	e7b9      	b.n	80068ea <_printf_float+0xfe>
 8006976:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800697a:	d118      	bne.n	80069ae <_printf_float+0x1c2>
 800697c:	2900      	cmp	r1, #0
 800697e:	6863      	ldr	r3, [r4, #4]
 8006980:	dd0b      	ble.n	800699a <_printf_float+0x1ae>
 8006982:	6121      	str	r1, [r4, #16]
 8006984:	b913      	cbnz	r3, 800698c <_printf_float+0x1a0>
 8006986:	6822      	ldr	r2, [r4, #0]
 8006988:	07d0      	lsls	r0, r2, #31
 800698a:	d502      	bpl.n	8006992 <_printf_float+0x1a6>
 800698c:	3301      	adds	r3, #1
 800698e:	440b      	add	r3, r1
 8006990:	6123      	str	r3, [r4, #16]
 8006992:	65a1      	str	r1, [r4, #88]	; 0x58
 8006994:	f04f 0900 	mov.w	r9, #0
 8006998:	e7de      	b.n	8006958 <_printf_float+0x16c>
 800699a:	b913      	cbnz	r3, 80069a2 <_printf_float+0x1b6>
 800699c:	6822      	ldr	r2, [r4, #0]
 800699e:	07d2      	lsls	r2, r2, #31
 80069a0:	d501      	bpl.n	80069a6 <_printf_float+0x1ba>
 80069a2:	3302      	adds	r3, #2
 80069a4:	e7f4      	b.n	8006990 <_printf_float+0x1a4>
 80069a6:	2301      	movs	r3, #1
 80069a8:	e7f2      	b.n	8006990 <_printf_float+0x1a4>
 80069aa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80069ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069b0:	4299      	cmp	r1, r3
 80069b2:	db05      	blt.n	80069c0 <_printf_float+0x1d4>
 80069b4:	6823      	ldr	r3, [r4, #0]
 80069b6:	6121      	str	r1, [r4, #16]
 80069b8:	07d8      	lsls	r0, r3, #31
 80069ba:	d5ea      	bpl.n	8006992 <_printf_float+0x1a6>
 80069bc:	1c4b      	adds	r3, r1, #1
 80069be:	e7e7      	b.n	8006990 <_printf_float+0x1a4>
 80069c0:	2900      	cmp	r1, #0
 80069c2:	bfd4      	ite	le
 80069c4:	f1c1 0202 	rsble	r2, r1, #2
 80069c8:	2201      	movgt	r2, #1
 80069ca:	4413      	add	r3, r2
 80069cc:	e7e0      	b.n	8006990 <_printf_float+0x1a4>
 80069ce:	6823      	ldr	r3, [r4, #0]
 80069d0:	055a      	lsls	r2, r3, #21
 80069d2:	d407      	bmi.n	80069e4 <_printf_float+0x1f8>
 80069d4:	6923      	ldr	r3, [r4, #16]
 80069d6:	4642      	mov	r2, r8
 80069d8:	4631      	mov	r1, r6
 80069da:	4628      	mov	r0, r5
 80069dc:	47b8      	blx	r7
 80069de:	3001      	adds	r0, #1
 80069e0:	d12c      	bne.n	8006a3c <_printf_float+0x250>
 80069e2:	e764      	b.n	80068ae <_printf_float+0xc2>
 80069e4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80069e8:	f240 80e0 	bls.w	8006bac <_printf_float+0x3c0>
 80069ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80069f0:	2200      	movs	r2, #0
 80069f2:	2300      	movs	r3, #0
 80069f4:	f7fa f868 	bl	8000ac8 <__aeabi_dcmpeq>
 80069f8:	2800      	cmp	r0, #0
 80069fa:	d034      	beq.n	8006a66 <_printf_float+0x27a>
 80069fc:	4a37      	ldr	r2, [pc, #220]	; (8006adc <_printf_float+0x2f0>)
 80069fe:	2301      	movs	r3, #1
 8006a00:	4631      	mov	r1, r6
 8006a02:	4628      	mov	r0, r5
 8006a04:	47b8      	blx	r7
 8006a06:	3001      	adds	r0, #1
 8006a08:	f43f af51 	beq.w	80068ae <_printf_float+0xc2>
 8006a0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006a10:	429a      	cmp	r2, r3
 8006a12:	db02      	blt.n	8006a1a <_printf_float+0x22e>
 8006a14:	6823      	ldr	r3, [r4, #0]
 8006a16:	07d8      	lsls	r0, r3, #31
 8006a18:	d510      	bpl.n	8006a3c <_printf_float+0x250>
 8006a1a:	ee18 3a10 	vmov	r3, s16
 8006a1e:	4652      	mov	r2, sl
 8006a20:	4631      	mov	r1, r6
 8006a22:	4628      	mov	r0, r5
 8006a24:	47b8      	blx	r7
 8006a26:	3001      	adds	r0, #1
 8006a28:	f43f af41 	beq.w	80068ae <_printf_float+0xc2>
 8006a2c:	f04f 0800 	mov.w	r8, #0
 8006a30:	f104 091a 	add.w	r9, r4, #26
 8006a34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a36:	3b01      	subs	r3, #1
 8006a38:	4543      	cmp	r3, r8
 8006a3a:	dc09      	bgt.n	8006a50 <_printf_float+0x264>
 8006a3c:	6823      	ldr	r3, [r4, #0]
 8006a3e:	079b      	lsls	r3, r3, #30
 8006a40:	f100 8105 	bmi.w	8006c4e <_printf_float+0x462>
 8006a44:	68e0      	ldr	r0, [r4, #12]
 8006a46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a48:	4298      	cmp	r0, r3
 8006a4a:	bfb8      	it	lt
 8006a4c:	4618      	movlt	r0, r3
 8006a4e:	e730      	b.n	80068b2 <_printf_float+0xc6>
 8006a50:	2301      	movs	r3, #1
 8006a52:	464a      	mov	r2, r9
 8006a54:	4631      	mov	r1, r6
 8006a56:	4628      	mov	r0, r5
 8006a58:	47b8      	blx	r7
 8006a5a:	3001      	adds	r0, #1
 8006a5c:	f43f af27 	beq.w	80068ae <_printf_float+0xc2>
 8006a60:	f108 0801 	add.w	r8, r8, #1
 8006a64:	e7e6      	b.n	8006a34 <_printf_float+0x248>
 8006a66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	dc39      	bgt.n	8006ae0 <_printf_float+0x2f4>
 8006a6c:	4a1b      	ldr	r2, [pc, #108]	; (8006adc <_printf_float+0x2f0>)
 8006a6e:	2301      	movs	r3, #1
 8006a70:	4631      	mov	r1, r6
 8006a72:	4628      	mov	r0, r5
 8006a74:	47b8      	blx	r7
 8006a76:	3001      	adds	r0, #1
 8006a78:	f43f af19 	beq.w	80068ae <_printf_float+0xc2>
 8006a7c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006a80:	4313      	orrs	r3, r2
 8006a82:	d102      	bne.n	8006a8a <_printf_float+0x29e>
 8006a84:	6823      	ldr	r3, [r4, #0]
 8006a86:	07d9      	lsls	r1, r3, #31
 8006a88:	d5d8      	bpl.n	8006a3c <_printf_float+0x250>
 8006a8a:	ee18 3a10 	vmov	r3, s16
 8006a8e:	4652      	mov	r2, sl
 8006a90:	4631      	mov	r1, r6
 8006a92:	4628      	mov	r0, r5
 8006a94:	47b8      	blx	r7
 8006a96:	3001      	adds	r0, #1
 8006a98:	f43f af09 	beq.w	80068ae <_printf_float+0xc2>
 8006a9c:	f04f 0900 	mov.w	r9, #0
 8006aa0:	f104 0a1a 	add.w	sl, r4, #26
 8006aa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006aa6:	425b      	negs	r3, r3
 8006aa8:	454b      	cmp	r3, r9
 8006aaa:	dc01      	bgt.n	8006ab0 <_printf_float+0x2c4>
 8006aac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006aae:	e792      	b.n	80069d6 <_printf_float+0x1ea>
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	4652      	mov	r2, sl
 8006ab4:	4631      	mov	r1, r6
 8006ab6:	4628      	mov	r0, r5
 8006ab8:	47b8      	blx	r7
 8006aba:	3001      	adds	r0, #1
 8006abc:	f43f aef7 	beq.w	80068ae <_printf_float+0xc2>
 8006ac0:	f109 0901 	add.w	r9, r9, #1
 8006ac4:	e7ee      	b.n	8006aa4 <_printf_float+0x2b8>
 8006ac6:	bf00      	nop
 8006ac8:	7fefffff 	.word	0x7fefffff
 8006acc:	0800a900 	.word	0x0800a900
 8006ad0:	0800a904 	.word	0x0800a904
 8006ad4:	0800a90c 	.word	0x0800a90c
 8006ad8:	0800a908 	.word	0x0800a908
 8006adc:	0800a910 	.word	0x0800a910
 8006ae0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ae2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	bfa8      	it	ge
 8006ae8:	461a      	movge	r2, r3
 8006aea:	2a00      	cmp	r2, #0
 8006aec:	4691      	mov	r9, r2
 8006aee:	dc37      	bgt.n	8006b60 <_printf_float+0x374>
 8006af0:	f04f 0b00 	mov.w	fp, #0
 8006af4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006af8:	f104 021a 	add.w	r2, r4, #26
 8006afc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006afe:	9305      	str	r3, [sp, #20]
 8006b00:	eba3 0309 	sub.w	r3, r3, r9
 8006b04:	455b      	cmp	r3, fp
 8006b06:	dc33      	bgt.n	8006b70 <_printf_float+0x384>
 8006b08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006b0c:	429a      	cmp	r2, r3
 8006b0e:	db3b      	blt.n	8006b88 <_printf_float+0x39c>
 8006b10:	6823      	ldr	r3, [r4, #0]
 8006b12:	07da      	lsls	r2, r3, #31
 8006b14:	d438      	bmi.n	8006b88 <_printf_float+0x39c>
 8006b16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b18:	9a05      	ldr	r2, [sp, #20]
 8006b1a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006b1c:	1a9a      	subs	r2, r3, r2
 8006b1e:	eba3 0901 	sub.w	r9, r3, r1
 8006b22:	4591      	cmp	r9, r2
 8006b24:	bfa8      	it	ge
 8006b26:	4691      	movge	r9, r2
 8006b28:	f1b9 0f00 	cmp.w	r9, #0
 8006b2c:	dc35      	bgt.n	8006b9a <_printf_float+0x3ae>
 8006b2e:	f04f 0800 	mov.w	r8, #0
 8006b32:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006b36:	f104 0a1a 	add.w	sl, r4, #26
 8006b3a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006b3e:	1a9b      	subs	r3, r3, r2
 8006b40:	eba3 0309 	sub.w	r3, r3, r9
 8006b44:	4543      	cmp	r3, r8
 8006b46:	f77f af79 	ble.w	8006a3c <_printf_float+0x250>
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	4652      	mov	r2, sl
 8006b4e:	4631      	mov	r1, r6
 8006b50:	4628      	mov	r0, r5
 8006b52:	47b8      	blx	r7
 8006b54:	3001      	adds	r0, #1
 8006b56:	f43f aeaa 	beq.w	80068ae <_printf_float+0xc2>
 8006b5a:	f108 0801 	add.w	r8, r8, #1
 8006b5e:	e7ec      	b.n	8006b3a <_printf_float+0x34e>
 8006b60:	4613      	mov	r3, r2
 8006b62:	4631      	mov	r1, r6
 8006b64:	4642      	mov	r2, r8
 8006b66:	4628      	mov	r0, r5
 8006b68:	47b8      	blx	r7
 8006b6a:	3001      	adds	r0, #1
 8006b6c:	d1c0      	bne.n	8006af0 <_printf_float+0x304>
 8006b6e:	e69e      	b.n	80068ae <_printf_float+0xc2>
 8006b70:	2301      	movs	r3, #1
 8006b72:	4631      	mov	r1, r6
 8006b74:	4628      	mov	r0, r5
 8006b76:	9205      	str	r2, [sp, #20]
 8006b78:	47b8      	blx	r7
 8006b7a:	3001      	adds	r0, #1
 8006b7c:	f43f ae97 	beq.w	80068ae <_printf_float+0xc2>
 8006b80:	9a05      	ldr	r2, [sp, #20]
 8006b82:	f10b 0b01 	add.w	fp, fp, #1
 8006b86:	e7b9      	b.n	8006afc <_printf_float+0x310>
 8006b88:	ee18 3a10 	vmov	r3, s16
 8006b8c:	4652      	mov	r2, sl
 8006b8e:	4631      	mov	r1, r6
 8006b90:	4628      	mov	r0, r5
 8006b92:	47b8      	blx	r7
 8006b94:	3001      	adds	r0, #1
 8006b96:	d1be      	bne.n	8006b16 <_printf_float+0x32a>
 8006b98:	e689      	b.n	80068ae <_printf_float+0xc2>
 8006b9a:	9a05      	ldr	r2, [sp, #20]
 8006b9c:	464b      	mov	r3, r9
 8006b9e:	4442      	add	r2, r8
 8006ba0:	4631      	mov	r1, r6
 8006ba2:	4628      	mov	r0, r5
 8006ba4:	47b8      	blx	r7
 8006ba6:	3001      	adds	r0, #1
 8006ba8:	d1c1      	bne.n	8006b2e <_printf_float+0x342>
 8006baa:	e680      	b.n	80068ae <_printf_float+0xc2>
 8006bac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006bae:	2a01      	cmp	r2, #1
 8006bb0:	dc01      	bgt.n	8006bb6 <_printf_float+0x3ca>
 8006bb2:	07db      	lsls	r3, r3, #31
 8006bb4:	d538      	bpl.n	8006c28 <_printf_float+0x43c>
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	4642      	mov	r2, r8
 8006bba:	4631      	mov	r1, r6
 8006bbc:	4628      	mov	r0, r5
 8006bbe:	47b8      	blx	r7
 8006bc0:	3001      	adds	r0, #1
 8006bc2:	f43f ae74 	beq.w	80068ae <_printf_float+0xc2>
 8006bc6:	ee18 3a10 	vmov	r3, s16
 8006bca:	4652      	mov	r2, sl
 8006bcc:	4631      	mov	r1, r6
 8006bce:	4628      	mov	r0, r5
 8006bd0:	47b8      	blx	r7
 8006bd2:	3001      	adds	r0, #1
 8006bd4:	f43f ae6b 	beq.w	80068ae <_printf_float+0xc2>
 8006bd8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006bdc:	2200      	movs	r2, #0
 8006bde:	2300      	movs	r3, #0
 8006be0:	f7f9 ff72 	bl	8000ac8 <__aeabi_dcmpeq>
 8006be4:	b9d8      	cbnz	r0, 8006c1e <_printf_float+0x432>
 8006be6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006be8:	f108 0201 	add.w	r2, r8, #1
 8006bec:	3b01      	subs	r3, #1
 8006bee:	4631      	mov	r1, r6
 8006bf0:	4628      	mov	r0, r5
 8006bf2:	47b8      	blx	r7
 8006bf4:	3001      	adds	r0, #1
 8006bf6:	d10e      	bne.n	8006c16 <_printf_float+0x42a>
 8006bf8:	e659      	b.n	80068ae <_printf_float+0xc2>
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	4652      	mov	r2, sl
 8006bfe:	4631      	mov	r1, r6
 8006c00:	4628      	mov	r0, r5
 8006c02:	47b8      	blx	r7
 8006c04:	3001      	adds	r0, #1
 8006c06:	f43f ae52 	beq.w	80068ae <_printf_float+0xc2>
 8006c0a:	f108 0801 	add.w	r8, r8, #1
 8006c0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c10:	3b01      	subs	r3, #1
 8006c12:	4543      	cmp	r3, r8
 8006c14:	dcf1      	bgt.n	8006bfa <_printf_float+0x40e>
 8006c16:	464b      	mov	r3, r9
 8006c18:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006c1c:	e6dc      	b.n	80069d8 <_printf_float+0x1ec>
 8006c1e:	f04f 0800 	mov.w	r8, #0
 8006c22:	f104 0a1a 	add.w	sl, r4, #26
 8006c26:	e7f2      	b.n	8006c0e <_printf_float+0x422>
 8006c28:	2301      	movs	r3, #1
 8006c2a:	4642      	mov	r2, r8
 8006c2c:	e7df      	b.n	8006bee <_printf_float+0x402>
 8006c2e:	2301      	movs	r3, #1
 8006c30:	464a      	mov	r2, r9
 8006c32:	4631      	mov	r1, r6
 8006c34:	4628      	mov	r0, r5
 8006c36:	47b8      	blx	r7
 8006c38:	3001      	adds	r0, #1
 8006c3a:	f43f ae38 	beq.w	80068ae <_printf_float+0xc2>
 8006c3e:	f108 0801 	add.w	r8, r8, #1
 8006c42:	68e3      	ldr	r3, [r4, #12]
 8006c44:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006c46:	1a5b      	subs	r3, r3, r1
 8006c48:	4543      	cmp	r3, r8
 8006c4a:	dcf0      	bgt.n	8006c2e <_printf_float+0x442>
 8006c4c:	e6fa      	b.n	8006a44 <_printf_float+0x258>
 8006c4e:	f04f 0800 	mov.w	r8, #0
 8006c52:	f104 0919 	add.w	r9, r4, #25
 8006c56:	e7f4      	b.n	8006c42 <_printf_float+0x456>

08006c58 <_printf_common>:
 8006c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c5c:	4616      	mov	r6, r2
 8006c5e:	4699      	mov	r9, r3
 8006c60:	688a      	ldr	r2, [r1, #8]
 8006c62:	690b      	ldr	r3, [r1, #16]
 8006c64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	bfb8      	it	lt
 8006c6c:	4613      	movlt	r3, r2
 8006c6e:	6033      	str	r3, [r6, #0]
 8006c70:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006c74:	4607      	mov	r7, r0
 8006c76:	460c      	mov	r4, r1
 8006c78:	b10a      	cbz	r2, 8006c7e <_printf_common+0x26>
 8006c7a:	3301      	adds	r3, #1
 8006c7c:	6033      	str	r3, [r6, #0]
 8006c7e:	6823      	ldr	r3, [r4, #0]
 8006c80:	0699      	lsls	r1, r3, #26
 8006c82:	bf42      	ittt	mi
 8006c84:	6833      	ldrmi	r3, [r6, #0]
 8006c86:	3302      	addmi	r3, #2
 8006c88:	6033      	strmi	r3, [r6, #0]
 8006c8a:	6825      	ldr	r5, [r4, #0]
 8006c8c:	f015 0506 	ands.w	r5, r5, #6
 8006c90:	d106      	bne.n	8006ca0 <_printf_common+0x48>
 8006c92:	f104 0a19 	add.w	sl, r4, #25
 8006c96:	68e3      	ldr	r3, [r4, #12]
 8006c98:	6832      	ldr	r2, [r6, #0]
 8006c9a:	1a9b      	subs	r3, r3, r2
 8006c9c:	42ab      	cmp	r3, r5
 8006c9e:	dc26      	bgt.n	8006cee <_printf_common+0x96>
 8006ca0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006ca4:	1e13      	subs	r3, r2, #0
 8006ca6:	6822      	ldr	r2, [r4, #0]
 8006ca8:	bf18      	it	ne
 8006caa:	2301      	movne	r3, #1
 8006cac:	0692      	lsls	r2, r2, #26
 8006cae:	d42b      	bmi.n	8006d08 <_printf_common+0xb0>
 8006cb0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006cb4:	4649      	mov	r1, r9
 8006cb6:	4638      	mov	r0, r7
 8006cb8:	47c0      	blx	r8
 8006cba:	3001      	adds	r0, #1
 8006cbc:	d01e      	beq.n	8006cfc <_printf_common+0xa4>
 8006cbe:	6823      	ldr	r3, [r4, #0]
 8006cc0:	68e5      	ldr	r5, [r4, #12]
 8006cc2:	6832      	ldr	r2, [r6, #0]
 8006cc4:	f003 0306 	and.w	r3, r3, #6
 8006cc8:	2b04      	cmp	r3, #4
 8006cca:	bf08      	it	eq
 8006ccc:	1aad      	subeq	r5, r5, r2
 8006cce:	68a3      	ldr	r3, [r4, #8]
 8006cd0:	6922      	ldr	r2, [r4, #16]
 8006cd2:	bf0c      	ite	eq
 8006cd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006cd8:	2500      	movne	r5, #0
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	bfc4      	itt	gt
 8006cde:	1a9b      	subgt	r3, r3, r2
 8006ce0:	18ed      	addgt	r5, r5, r3
 8006ce2:	2600      	movs	r6, #0
 8006ce4:	341a      	adds	r4, #26
 8006ce6:	42b5      	cmp	r5, r6
 8006ce8:	d11a      	bne.n	8006d20 <_printf_common+0xc8>
 8006cea:	2000      	movs	r0, #0
 8006cec:	e008      	b.n	8006d00 <_printf_common+0xa8>
 8006cee:	2301      	movs	r3, #1
 8006cf0:	4652      	mov	r2, sl
 8006cf2:	4649      	mov	r1, r9
 8006cf4:	4638      	mov	r0, r7
 8006cf6:	47c0      	blx	r8
 8006cf8:	3001      	adds	r0, #1
 8006cfa:	d103      	bne.n	8006d04 <_printf_common+0xac>
 8006cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8006d00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d04:	3501      	adds	r5, #1
 8006d06:	e7c6      	b.n	8006c96 <_printf_common+0x3e>
 8006d08:	18e1      	adds	r1, r4, r3
 8006d0a:	1c5a      	adds	r2, r3, #1
 8006d0c:	2030      	movs	r0, #48	; 0x30
 8006d0e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006d12:	4422      	add	r2, r4
 8006d14:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006d18:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006d1c:	3302      	adds	r3, #2
 8006d1e:	e7c7      	b.n	8006cb0 <_printf_common+0x58>
 8006d20:	2301      	movs	r3, #1
 8006d22:	4622      	mov	r2, r4
 8006d24:	4649      	mov	r1, r9
 8006d26:	4638      	mov	r0, r7
 8006d28:	47c0      	blx	r8
 8006d2a:	3001      	adds	r0, #1
 8006d2c:	d0e6      	beq.n	8006cfc <_printf_common+0xa4>
 8006d2e:	3601      	adds	r6, #1
 8006d30:	e7d9      	b.n	8006ce6 <_printf_common+0x8e>
	...

08006d34 <_printf_i>:
 8006d34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d38:	7e0f      	ldrb	r7, [r1, #24]
 8006d3a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006d3c:	2f78      	cmp	r7, #120	; 0x78
 8006d3e:	4691      	mov	r9, r2
 8006d40:	4680      	mov	r8, r0
 8006d42:	460c      	mov	r4, r1
 8006d44:	469a      	mov	sl, r3
 8006d46:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006d4a:	d807      	bhi.n	8006d5c <_printf_i+0x28>
 8006d4c:	2f62      	cmp	r7, #98	; 0x62
 8006d4e:	d80a      	bhi.n	8006d66 <_printf_i+0x32>
 8006d50:	2f00      	cmp	r7, #0
 8006d52:	f000 80d8 	beq.w	8006f06 <_printf_i+0x1d2>
 8006d56:	2f58      	cmp	r7, #88	; 0x58
 8006d58:	f000 80a3 	beq.w	8006ea2 <_printf_i+0x16e>
 8006d5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006d64:	e03a      	b.n	8006ddc <_printf_i+0xa8>
 8006d66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006d6a:	2b15      	cmp	r3, #21
 8006d6c:	d8f6      	bhi.n	8006d5c <_printf_i+0x28>
 8006d6e:	a101      	add	r1, pc, #4	; (adr r1, 8006d74 <_printf_i+0x40>)
 8006d70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006d74:	08006dcd 	.word	0x08006dcd
 8006d78:	08006de1 	.word	0x08006de1
 8006d7c:	08006d5d 	.word	0x08006d5d
 8006d80:	08006d5d 	.word	0x08006d5d
 8006d84:	08006d5d 	.word	0x08006d5d
 8006d88:	08006d5d 	.word	0x08006d5d
 8006d8c:	08006de1 	.word	0x08006de1
 8006d90:	08006d5d 	.word	0x08006d5d
 8006d94:	08006d5d 	.word	0x08006d5d
 8006d98:	08006d5d 	.word	0x08006d5d
 8006d9c:	08006d5d 	.word	0x08006d5d
 8006da0:	08006eed 	.word	0x08006eed
 8006da4:	08006e11 	.word	0x08006e11
 8006da8:	08006ecf 	.word	0x08006ecf
 8006dac:	08006d5d 	.word	0x08006d5d
 8006db0:	08006d5d 	.word	0x08006d5d
 8006db4:	08006f0f 	.word	0x08006f0f
 8006db8:	08006d5d 	.word	0x08006d5d
 8006dbc:	08006e11 	.word	0x08006e11
 8006dc0:	08006d5d 	.word	0x08006d5d
 8006dc4:	08006d5d 	.word	0x08006d5d
 8006dc8:	08006ed7 	.word	0x08006ed7
 8006dcc:	682b      	ldr	r3, [r5, #0]
 8006dce:	1d1a      	adds	r2, r3, #4
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	602a      	str	r2, [r5, #0]
 8006dd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006dd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006ddc:	2301      	movs	r3, #1
 8006dde:	e0a3      	b.n	8006f28 <_printf_i+0x1f4>
 8006de0:	6820      	ldr	r0, [r4, #0]
 8006de2:	6829      	ldr	r1, [r5, #0]
 8006de4:	0606      	lsls	r6, r0, #24
 8006de6:	f101 0304 	add.w	r3, r1, #4
 8006dea:	d50a      	bpl.n	8006e02 <_printf_i+0xce>
 8006dec:	680e      	ldr	r6, [r1, #0]
 8006dee:	602b      	str	r3, [r5, #0]
 8006df0:	2e00      	cmp	r6, #0
 8006df2:	da03      	bge.n	8006dfc <_printf_i+0xc8>
 8006df4:	232d      	movs	r3, #45	; 0x2d
 8006df6:	4276      	negs	r6, r6
 8006df8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006dfc:	485e      	ldr	r0, [pc, #376]	; (8006f78 <_printf_i+0x244>)
 8006dfe:	230a      	movs	r3, #10
 8006e00:	e019      	b.n	8006e36 <_printf_i+0x102>
 8006e02:	680e      	ldr	r6, [r1, #0]
 8006e04:	602b      	str	r3, [r5, #0]
 8006e06:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006e0a:	bf18      	it	ne
 8006e0c:	b236      	sxthne	r6, r6
 8006e0e:	e7ef      	b.n	8006df0 <_printf_i+0xbc>
 8006e10:	682b      	ldr	r3, [r5, #0]
 8006e12:	6820      	ldr	r0, [r4, #0]
 8006e14:	1d19      	adds	r1, r3, #4
 8006e16:	6029      	str	r1, [r5, #0]
 8006e18:	0601      	lsls	r1, r0, #24
 8006e1a:	d501      	bpl.n	8006e20 <_printf_i+0xec>
 8006e1c:	681e      	ldr	r6, [r3, #0]
 8006e1e:	e002      	b.n	8006e26 <_printf_i+0xf2>
 8006e20:	0646      	lsls	r6, r0, #25
 8006e22:	d5fb      	bpl.n	8006e1c <_printf_i+0xe8>
 8006e24:	881e      	ldrh	r6, [r3, #0]
 8006e26:	4854      	ldr	r0, [pc, #336]	; (8006f78 <_printf_i+0x244>)
 8006e28:	2f6f      	cmp	r7, #111	; 0x6f
 8006e2a:	bf0c      	ite	eq
 8006e2c:	2308      	moveq	r3, #8
 8006e2e:	230a      	movne	r3, #10
 8006e30:	2100      	movs	r1, #0
 8006e32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006e36:	6865      	ldr	r5, [r4, #4]
 8006e38:	60a5      	str	r5, [r4, #8]
 8006e3a:	2d00      	cmp	r5, #0
 8006e3c:	bfa2      	ittt	ge
 8006e3e:	6821      	ldrge	r1, [r4, #0]
 8006e40:	f021 0104 	bicge.w	r1, r1, #4
 8006e44:	6021      	strge	r1, [r4, #0]
 8006e46:	b90e      	cbnz	r6, 8006e4c <_printf_i+0x118>
 8006e48:	2d00      	cmp	r5, #0
 8006e4a:	d04d      	beq.n	8006ee8 <_printf_i+0x1b4>
 8006e4c:	4615      	mov	r5, r2
 8006e4e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006e52:	fb03 6711 	mls	r7, r3, r1, r6
 8006e56:	5dc7      	ldrb	r7, [r0, r7]
 8006e58:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006e5c:	4637      	mov	r7, r6
 8006e5e:	42bb      	cmp	r3, r7
 8006e60:	460e      	mov	r6, r1
 8006e62:	d9f4      	bls.n	8006e4e <_printf_i+0x11a>
 8006e64:	2b08      	cmp	r3, #8
 8006e66:	d10b      	bne.n	8006e80 <_printf_i+0x14c>
 8006e68:	6823      	ldr	r3, [r4, #0]
 8006e6a:	07de      	lsls	r6, r3, #31
 8006e6c:	d508      	bpl.n	8006e80 <_printf_i+0x14c>
 8006e6e:	6923      	ldr	r3, [r4, #16]
 8006e70:	6861      	ldr	r1, [r4, #4]
 8006e72:	4299      	cmp	r1, r3
 8006e74:	bfde      	ittt	le
 8006e76:	2330      	movle	r3, #48	; 0x30
 8006e78:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006e7c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006e80:	1b52      	subs	r2, r2, r5
 8006e82:	6122      	str	r2, [r4, #16]
 8006e84:	f8cd a000 	str.w	sl, [sp]
 8006e88:	464b      	mov	r3, r9
 8006e8a:	aa03      	add	r2, sp, #12
 8006e8c:	4621      	mov	r1, r4
 8006e8e:	4640      	mov	r0, r8
 8006e90:	f7ff fee2 	bl	8006c58 <_printf_common>
 8006e94:	3001      	adds	r0, #1
 8006e96:	d14c      	bne.n	8006f32 <_printf_i+0x1fe>
 8006e98:	f04f 30ff 	mov.w	r0, #4294967295
 8006e9c:	b004      	add	sp, #16
 8006e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ea2:	4835      	ldr	r0, [pc, #212]	; (8006f78 <_printf_i+0x244>)
 8006ea4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006ea8:	6829      	ldr	r1, [r5, #0]
 8006eaa:	6823      	ldr	r3, [r4, #0]
 8006eac:	f851 6b04 	ldr.w	r6, [r1], #4
 8006eb0:	6029      	str	r1, [r5, #0]
 8006eb2:	061d      	lsls	r5, r3, #24
 8006eb4:	d514      	bpl.n	8006ee0 <_printf_i+0x1ac>
 8006eb6:	07df      	lsls	r7, r3, #31
 8006eb8:	bf44      	itt	mi
 8006eba:	f043 0320 	orrmi.w	r3, r3, #32
 8006ebe:	6023      	strmi	r3, [r4, #0]
 8006ec0:	b91e      	cbnz	r6, 8006eca <_printf_i+0x196>
 8006ec2:	6823      	ldr	r3, [r4, #0]
 8006ec4:	f023 0320 	bic.w	r3, r3, #32
 8006ec8:	6023      	str	r3, [r4, #0]
 8006eca:	2310      	movs	r3, #16
 8006ecc:	e7b0      	b.n	8006e30 <_printf_i+0xfc>
 8006ece:	6823      	ldr	r3, [r4, #0]
 8006ed0:	f043 0320 	orr.w	r3, r3, #32
 8006ed4:	6023      	str	r3, [r4, #0]
 8006ed6:	2378      	movs	r3, #120	; 0x78
 8006ed8:	4828      	ldr	r0, [pc, #160]	; (8006f7c <_printf_i+0x248>)
 8006eda:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006ede:	e7e3      	b.n	8006ea8 <_printf_i+0x174>
 8006ee0:	0659      	lsls	r1, r3, #25
 8006ee2:	bf48      	it	mi
 8006ee4:	b2b6      	uxthmi	r6, r6
 8006ee6:	e7e6      	b.n	8006eb6 <_printf_i+0x182>
 8006ee8:	4615      	mov	r5, r2
 8006eea:	e7bb      	b.n	8006e64 <_printf_i+0x130>
 8006eec:	682b      	ldr	r3, [r5, #0]
 8006eee:	6826      	ldr	r6, [r4, #0]
 8006ef0:	6961      	ldr	r1, [r4, #20]
 8006ef2:	1d18      	adds	r0, r3, #4
 8006ef4:	6028      	str	r0, [r5, #0]
 8006ef6:	0635      	lsls	r5, r6, #24
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	d501      	bpl.n	8006f00 <_printf_i+0x1cc>
 8006efc:	6019      	str	r1, [r3, #0]
 8006efe:	e002      	b.n	8006f06 <_printf_i+0x1d2>
 8006f00:	0670      	lsls	r0, r6, #25
 8006f02:	d5fb      	bpl.n	8006efc <_printf_i+0x1c8>
 8006f04:	8019      	strh	r1, [r3, #0]
 8006f06:	2300      	movs	r3, #0
 8006f08:	6123      	str	r3, [r4, #16]
 8006f0a:	4615      	mov	r5, r2
 8006f0c:	e7ba      	b.n	8006e84 <_printf_i+0x150>
 8006f0e:	682b      	ldr	r3, [r5, #0]
 8006f10:	1d1a      	adds	r2, r3, #4
 8006f12:	602a      	str	r2, [r5, #0]
 8006f14:	681d      	ldr	r5, [r3, #0]
 8006f16:	6862      	ldr	r2, [r4, #4]
 8006f18:	2100      	movs	r1, #0
 8006f1a:	4628      	mov	r0, r5
 8006f1c:	f7f9 f960 	bl	80001e0 <memchr>
 8006f20:	b108      	cbz	r0, 8006f26 <_printf_i+0x1f2>
 8006f22:	1b40      	subs	r0, r0, r5
 8006f24:	6060      	str	r0, [r4, #4]
 8006f26:	6863      	ldr	r3, [r4, #4]
 8006f28:	6123      	str	r3, [r4, #16]
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f30:	e7a8      	b.n	8006e84 <_printf_i+0x150>
 8006f32:	6923      	ldr	r3, [r4, #16]
 8006f34:	462a      	mov	r2, r5
 8006f36:	4649      	mov	r1, r9
 8006f38:	4640      	mov	r0, r8
 8006f3a:	47d0      	blx	sl
 8006f3c:	3001      	adds	r0, #1
 8006f3e:	d0ab      	beq.n	8006e98 <_printf_i+0x164>
 8006f40:	6823      	ldr	r3, [r4, #0]
 8006f42:	079b      	lsls	r3, r3, #30
 8006f44:	d413      	bmi.n	8006f6e <_printf_i+0x23a>
 8006f46:	68e0      	ldr	r0, [r4, #12]
 8006f48:	9b03      	ldr	r3, [sp, #12]
 8006f4a:	4298      	cmp	r0, r3
 8006f4c:	bfb8      	it	lt
 8006f4e:	4618      	movlt	r0, r3
 8006f50:	e7a4      	b.n	8006e9c <_printf_i+0x168>
 8006f52:	2301      	movs	r3, #1
 8006f54:	4632      	mov	r2, r6
 8006f56:	4649      	mov	r1, r9
 8006f58:	4640      	mov	r0, r8
 8006f5a:	47d0      	blx	sl
 8006f5c:	3001      	adds	r0, #1
 8006f5e:	d09b      	beq.n	8006e98 <_printf_i+0x164>
 8006f60:	3501      	adds	r5, #1
 8006f62:	68e3      	ldr	r3, [r4, #12]
 8006f64:	9903      	ldr	r1, [sp, #12]
 8006f66:	1a5b      	subs	r3, r3, r1
 8006f68:	42ab      	cmp	r3, r5
 8006f6a:	dcf2      	bgt.n	8006f52 <_printf_i+0x21e>
 8006f6c:	e7eb      	b.n	8006f46 <_printf_i+0x212>
 8006f6e:	2500      	movs	r5, #0
 8006f70:	f104 0619 	add.w	r6, r4, #25
 8006f74:	e7f5      	b.n	8006f62 <_printf_i+0x22e>
 8006f76:	bf00      	nop
 8006f78:	0800a912 	.word	0x0800a912
 8006f7c:	0800a923 	.word	0x0800a923

08006f80 <siprintf>:
 8006f80:	b40e      	push	{r1, r2, r3}
 8006f82:	b500      	push	{lr}
 8006f84:	b09c      	sub	sp, #112	; 0x70
 8006f86:	ab1d      	add	r3, sp, #116	; 0x74
 8006f88:	9002      	str	r0, [sp, #8]
 8006f8a:	9006      	str	r0, [sp, #24]
 8006f8c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006f90:	4809      	ldr	r0, [pc, #36]	; (8006fb8 <siprintf+0x38>)
 8006f92:	9107      	str	r1, [sp, #28]
 8006f94:	9104      	str	r1, [sp, #16]
 8006f96:	4909      	ldr	r1, [pc, #36]	; (8006fbc <siprintf+0x3c>)
 8006f98:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f9c:	9105      	str	r1, [sp, #20]
 8006f9e:	6800      	ldr	r0, [r0, #0]
 8006fa0:	9301      	str	r3, [sp, #4]
 8006fa2:	a902      	add	r1, sp, #8
 8006fa4:	f001 fb68 	bl	8008678 <_svfiprintf_r>
 8006fa8:	9b02      	ldr	r3, [sp, #8]
 8006faa:	2200      	movs	r2, #0
 8006fac:	701a      	strb	r2, [r3, #0]
 8006fae:	b01c      	add	sp, #112	; 0x70
 8006fb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006fb4:	b003      	add	sp, #12
 8006fb6:	4770      	bx	lr
 8006fb8:	20000010 	.word	0x20000010
 8006fbc:	ffff0208 	.word	0xffff0208

08006fc0 <quorem>:
 8006fc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fc4:	6903      	ldr	r3, [r0, #16]
 8006fc6:	690c      	ldr	r4, [r1, #16]
 8006fc8:	42a3      	cmp	r3, r4
 8006fca:	4607      	mov	r7, r0
 8006fcc:	f2c0 8081 	blt.w	80070d2 <quorem+0x112>
 8006fd0:	3c01      	subs	r4, #1
 8006fd2:	f101 0814 	add.w	r8, r1, #20
 8006fd6:	f100 0514 	add.w	r5, r0, #20
 8006fda:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006fde:	9301      	str	r3, [sp, #4]
 8006fe0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006fe4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006fe8:	3301      	adds	r3, #1
 8006fea:	429a      	cmp	r2, r3
 8006fec:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006ff0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006ff4:	fbb2 f6f3 	udiv	r6, r2, r3
 8006ff8:	d331      	bcc.n	800705e <quorem+0x9e>
 8006ffa:	f04f 0e00 	mov.w	lr, #0
 8006ffe:	4640      	mov	r0, r8
 8007000:	46ac      	mov	ip, r5
 8007002:	46f2      	mov	sl, lr
 8007004:	f850 2b04 	ldr.w	r2, [r0], #4
 8007008:	b293      	uxth	r3, r2
 800700a:	fb06 e303 	mla	r3, r6, r3, lr
 800700e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007012:	b29b      	uxth	r3, r3
 8007014:	ebaa 0303 	sub.w	r3, sl, r3
 8007018:	f8dc a000 	ldr.w	sl, [ip]
 800701c:	0c12      	lsrs	r2, r2, #16
 800701e:	fa13 f38a 	uxtah	r3, r3, sl
 8007022:	fb06 e202 	mla	r2, r6, r2, lr
 8007026:	9300      	str	r3, [sp, #0]
 8007028:	9b00      	ldr	r3, [sp, #0]
 800702a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800702e:	b292      	uxth	r2, r2
 8007030:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007034:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007038:	f8bd 3000 	ldrh.w	r3, [sp]
 800703c:	4581      	cmp	r9, r0
 800703e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007042:	f84c 3b04 	str.w	r3, [ip], #4
 8007046:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800704a:	d2db      	bcs.n	8007004 <quorem+0x44>
 800704c:	f855 300b 	ldr.w	r3, [r5, fp]
 8007050:	b92b      	cbnz	r3, 800705e <quorem+0x9e>
 8007052:	9b01      	ldr	r3, [sp, #4]
 8007054:	3b04      	subs	r3, #4
 8007056:	429d      	cmp	r5, r3
 8007058:	461a      	mov	r2, r3
 800705a:	d32e      	bcc.n	80070ba <quorem+0xfa>
 800705c:	613c      	str	r4, [r7, #16]
 800705e:	4638      	mov	r0, r7
 8007060:	f001 f8b6 	bl	80081d0 <__mcmp>
 8007064:	2800      	cmp	r0, #0
 8007066:	db24      	blt.n	80070b2 <quorem+0xf2>
 8007068:	3601      	adds	r6, #1
 800706a:	4628      	mov	r0, r5
 800706c:	f04f 0c00 	mov.w	ip, #0
 8007070:	f858 2b04 	ldr.w	r2, [r8], #4
 8007074:	f8d0 e000 	ldr.w	lr, [r0]
 8007078:	b293      	uxth	r3, r2
 800707a:	ebac 0303 	sub.w	r3, ip, r3
 800707e:	0c12      	lsrs	r2, r2, #16
 8007080:	fa13 f38e 	uxtah	r3, r3, lr
 8007084:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007088:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800708c:	b29b      	uxth	r3, r3
 800708e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007092:	45c1      	cmp	r9, r8
 8007094:	f840 3b04 	str.w	r3, [r0], #4
 8007098:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800709c:	d2e8      	bcs.n	8007070 <quorem+0xb0>
 800709e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80070a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80070a6:	b922      	cbnz	r2, 80070b2 <quorem+0xf2>
 80070a8:	3b04      	subs	r3, #4
 80070aa:	429d      	cmp	r5, r3
 80070ac:	461a      	mov	r2, r3
 80070ae:	d30a      	bcc.n	80070c6 <quorem+0x106>
 80070b0:	613c      	str	r4, [r7, #16]
 80070b2:	4630      	mov	r0, r6
 80070b4:	b003      	add	sp, #12
 80070b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070ba:	6812      	ldr	r2, [r2, #0]
 80070bc:	3b04      	subs	r3, #4
 80070be:	2a00      	cmp	r2, #0
 80070c0:	d1cc      	bne.n	800705c <quorem+0x9c>
 80070c2:	3c01      	subs	r4, #1
 80070c4:	e7c7      	b.n	8007056 <quorem+0x96>
 80070c6:	6812      	ldr	r2, [r2, #0]
 80070c8:	3b04      	subs	r3, #4
 80070ca:	2a00      	cmp	r2, #0
 80070cc:	d1f0      	bne.n	80070b0 <quorem+0xf0>
 80070ce:	3c01      	subs	r4, #1
 80070d0:	e7eb      	b.n	80070aa <quorem+0xea>
 80070d2:	2000      	movs	r0, #0
 80070d4:	e7ee      	b.n	80070b4 <quorem+0xf4>
	...

080070d8 <_dtoa_r>:
 80070d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070dc:	ed2d 8b04 	vpush	{d8-d9}
 80070e0:	ec57 6b10 	vmov	r6, r7, d0
 80070e4:	b093      	sub	sp, #76	; 0x4c
 80070e6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80070e8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80070ec:	9106      	str	r1, [sp, #24]
 80070ee:	ee10 aa10 	vmov	sl, s0
 80070f2:	4604      	mov	r4, r0
 80070f4:	9209      	str	r2, [sp, #36]	; 0x24
 80070f6:	930c      	str	r3, [sp, #48]	; 0x30
 80070f8:	46bb      	mov	fp, r7
 80070fa:	b975      	cbnz	r5, 800711a <_dtoa_r+0x42>
 80070fc:	2010      	movs	r0, #16
 80070fe:	f000 fddd 	bl	8007cbc <malloc>
 8007102:	4602      	mov	r2, r0
 8007104:	6260      	str	r0, [r4, #36]	; 0x24
 8007106:	b920      	cbnz	r0, 8007112 <_dtoa_r+0x3a>
 8007108:	4ba7      	ldr	r3, [pc, #668]	; (80073a8 <_dtoa_r+0x2d0>)
 800710a:	21ea      	movs	r1, #234	; 0xea
 800710c:	48a7      	ldr	r0, [pc, #668]	; (80073ac <_dtoa_r+0x2d4>)
 800710e:	f001 fbc3 	bl	8008898 <__assert_func>
 8007112:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007116:	6005      	str	r5, [r0, #0]
 8007118:	60c5      	str	r5, [r0, #12]
 800711a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800711c:	6819      	ldr	r1, [r3, #0]
 800711e:	b151      	cbz	r1, 8007136 <_dtoa_r+0x5e>
 8007120:	685a      	ldr	r2, [r3, #4]
 8007122:	604a      	str	r2, [r1, #4]
 8007124:	2301      	movs	r3, #1
 8007126:	4093      	lsls	r3, r2
 8007128:	608b      	str	r3, [r1, #8]
 800712a:	4620      	mov	r0, r4
 800712c:	f000 fe0e 	bl	8007d4c <_Bfree>
 8007130:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007132:	2200      	movs	r2, #0
 8007134:	601a      	str	r2, [r3, #0]
 8007136:	1e3b      	subs	r3, r7, #0
 8007138:	bfaa      	itet	ge
 800713a:	2300      	movge	r3, #0
 800713c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007140:	f8c8 3000 	strge.w	r3, [r8]
 8007144:	4b9a      	ldr	r3, [pc, #616]	; (80073b0 <_dtoa_r+0x2d8>)
 8007146:	bfbc      	itt	lt
 8007148:	2201      	movlt	r2, #1
 800714a:	f8c8 2000 	strlt.w	r2, [r8]
 800714e:	ea33 030b 	bics.w	r3, r3, fp
 8007152:	d11b      	bne.n	800718c <_dtoa_r+0xb4>
 8007154:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007156:	f242 730f 	movw	r3, #9999	; 0x270f
 800715a:	6013      	str	r3, [r2, #0]
 800715c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007160:	4333      	orrs	r3, r6
 8007162:	f000 8592 	beq.w	8007c8a <_dtoa_r+0xbb2>
 8007166:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007168:	b963      	cbnz	r3, 8007184 <_dtoa_r+0xac>
 800716a:	4b92      	ldr	r3, [pc, #584]	; (80073b4 <_dtoa_r+0x2dc>)
 800716c:	e022      	b.n	80071b4 <_dtoa_r+0xdc>
 800716e:	4b92      	ldr	r3, [pc, #584]	; (80073b8 <_dtoa_r+0x2e0>)
 8007170:	9301      	str	r3, [sp, #4]
 8007172:	3308      	adds	r3, #8
 8007174:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007176:	6013      	str	r3, [r2, #0]
 8007178:	9801      	ldr	r0, [sp, #4]
 800717a:	b013      	add	sp, #76	; 0x4c
 800717c:	ecbd 8b04 	vpop	{d8-d9}
 8007180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007184:	4b8b      	ldr	r3, [pc, #556]	; (80073b4 <_dtoa_r+0x2dc>)
 8007186:	9301      	str	r3, [sp, #4]
 8007188:	3303      	adds	r3, #3
 800718a:	e7f3      	b.n	8007174 <_dtoa_r+0x9c>
 800718c:	2200      	movs	r2, #0
 800718e:	2300      	movs	r3, #0
 8007190:	4650      	mov	r0, sl
 8007192:	4659      	mov	r1, fp
 8007194:	f7f9 fc98 	bl	8000ac8 <__aeabi_dcmpeq>
 8007198:	ec4b ab19 	vmov	d9, sl, fp
 800719c:	4680      	mov	r8, r0
 800719e:	b158      	cbz	r0, 80071b8 <_dtoa_r+0xe0>
 80071a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80071a2:	2301      	movs	r3, #1
 80071a4:	6013      	str	r3, [r2, #0]
 80071a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	f000 856b 	beq.w	8007c84 <_dtoa_r+0xbac>
 80071ae:	4883      	ldr	r0, [pc, #524]	; (80073bc <_dtoa_r+0x2e4>)
 80071b0:	6018      	str	r0, [r3, #0]
 80071b2:	1e43      	subs	r3, r0, #1
 80071b4:	9301      	str	r3, [sp, #4]
 80071b6:	e7df      	b.n	8007178 <_dtoa_r+0xa0>
 80071b8:	ec4b ab10 	vmov	d0, sl, fp
 80071bc:	aa10      	add	r2, sp, #64	; 0x40
 80071be:	a911      	add	r1, sp, #68	; 0x44
 80071c0:	4620      	mov	r0, r4
 80071c2:	f001 f8ab 	bl	800831c <__d2b>
 80071c6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80071ca:	ee08 0a10 	vmov	s16, r0
 80071ce:	2d00      	cmp	r5, #0
 80071d0:	f000 8084 	beq.w	80072dc <_dtoa_r+0x204>
 80071d4:	ee19 3a90 	vmov	r3, s19
 80071d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80071dc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80071e0:	4656      	mov	r6, sl
 80071e2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80071e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80071ea:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80071ee:	4b74      	ldr	r3, [pc, #464]	; (80073c0 <_dtoa_r+0x2e8>)
 80071f0:	2200      	movs	r2, #0
 80071f2:	4630      	mov	r0, r6
 80071f4:	4639      	mov	r1, r7
 80071f6:	f7f9 f847 	bl	8000288 <__aeabi_dsub>
 80071fa:	a365      	add	r3, pc, #404	; (adr r3, 8007390 <_dtoa_r+0x2b8>)
 80071fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007200:	f7f9 f9fa 	bl	80005f8 <__aeabi_dmul>
 8007204:	a364      	add	r3, pc, #400	; (adr r3, 8007398 <_dtoa_r+0x2c0>)
 8007206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800720a:	f7f9 f83f 	bl	800028c <__adddf3>
 800720e:	4606      	mov	r6, r0
 8007210:	4628      	mov	r0, r5
 8007212:	460f      	mov	r7, r1
 8007214:	f7f9 f986 	bl	8000524 <__aeabi_i2d>
 8007218:	a361      	add	r3, pc, #388	; (adr r3, 80073a0 <_dtoa_r+0x2c8>)
 800721a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800721e:	f7f9 f9eb 	bl	80005f8 <__aeabi_dmul>
 8007222:	4602      	mov	r2, r0
 8007224:	460b      	mov	r3, r1
 8007226:	4630      	mov	r0, r6
 8007228:	4639      	mov	r1, r7
 800722a:	f7f9 f82f 	bl	800028c <__adddf3>
 800722e:	4606      	mov	r6, r0
 8007230:	460f      	mov	r7, r1
 8007232:	f7f9 fc91 	bl	8000b58 <__aeabi_d2iz>
 8007236:	2200      	movs	r2, #0
 8007238:	9000      	str	r0, [sp, #0]
 800723a:	2300      	movs	r3, #0
 800723c:	4630      	mov	r0, r6
 800723e:	4639      	mov	r1, r7
 8007240:	f7f9 fc4c 	bl	8000adc <__aeabi_dcmplt>
 8007244:	b150      	cbz	r0, 800725c <_dtoa_r+0x184>
 8007246:	9800      	ldr	r0, [sp, #0]
 8007248:	f7f9 f96c 	bl	8000524 <__aeabi_i2d>
 800724c:	4632      	mov	r2, r6
 800724e:	463b      	mov	r3, r7
 8007250:	f7f9 fc3a 	bl	8000ac8 <__aeabi_dcmpeq>
 8007254:	b910      	cbnz	r0, 800725c <_dtoa_r+0x184>
 8007256:	9b00      	ldr	r3, [sp, #0]
 8007258:	3b01      	subs	r3, #1
 800725a:	9300      	str	r3, [sp, #0]
 800725c:	9b00      	ldr	r3, [sp, #0]
 800725e:	2b16      	cmp	r3, #22
 8007260:	d85a      	bhi.n	8007318 <_dtoa_r+0x240>
 8007262:	9a00      	ldr	r2, [sp, #0]
 8007264:	4b57      	ldr	r3, [pc, #348]	; (80073c4 <_dtoa_r+0x2ec>)
 8007266:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800726a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800726e:	ec51 0b19 	vmov	r0, r1, d9
 8007272:	f7f9 fc33 	bl	8000adc <__aeabi_dcmplt>
 8007276:	2800      	cmp	r0, #0
 8007278:	d050      	beq.n	800731c <_dtoa_r+0x244>
 800727a:	9b00      	ldr	r3, [sp, #0]
 800727c:	3b01      	subs	r3, #1
 800727e:	9300      	str	r3, [sp, #0]
 8007280:	2300      	movs	r3, #0
 8007282:	930b      	str	r3, [sp, #44]	; 0x2c
 8007284:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007286:	1b5d      	subs	r5, r3, r5
 8007288:	1e6b      	subs	r3, r5, #1
 800728a:	9305      	str	r3, [sp, #20]
 800728c:	bf45      	ittet	mi
 800728e:	f1c5 0301 	rsbmi	r3, r5, #1
 8007292:	9304      	strmi	r3, [sp, #16]
 8007294:	2300      	movpl	r3, #0
 8007296:	2300      	movmi	r3, #0
 8007298:	bf4c      	ite	mi
 800729a:	9305      	strmi	r3, [sp, #20]
 800729c:	9304      	strpl	r3, [sp, #16]
 800729e:	9b00      	ldr	r3, [sp, #0]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	db3d      	blt.n	8007320 <_dtoa_r+0x248>
 80072a4:	9b05      	ldr	r3, [sp, #20]
 80072a6:	9a00      	ldr	r2, [sp, #0]
 80072a8:	920a      	str	r2, [sp, #40]	; 0x28
 80072aa:	4413      	add	r3, r2
 80072ac:	9305      	str	r3, [sp, #20]
 80072ae:	2300      	movs	r3, #0
 80072b0:	9307      	str	r3, [sp, #28]
 80072b2:	9b06      	ldr	r3, [sp, #24]
 80072b4:	2b09      	cmp	r3, #9
 80072b6:	f200 8089 	bhi.w	80073cc <_dtoa_r+0x2f4>
 80072ba:	2b05      	cmp	r3, #5
 80072bc:	bfc4      	itt	gt
 80072be:	3b04      	subgt	r3, #4
 80072c0:	9306      	strgt	r3, [sp, #24]
 80072c2:	9b06      	ldr	r3, [sp, #24]
 80072c4:	f1a3 0302 	sub.w	r3, r3, #2
 80072c8:	bfcc      	ite	gt
 80072ca:	2500      	movgt	r5, #0
 80072cc:	2501      	movle	r5, #1
 80072ce:	2b03      	cmp	r3, #3
 80072d0:	f200 8087 	bhi.w	80073e2 <_dtoa_r+0x30a>
 80072d4:	e8df f003 	tbb	[pc, r3]
 80072d8:	59383a2d 	.word	0x59383a2d
 80072dc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80072e0:	441d      	add	r5, r3
 80072e2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80072e6:	2b20      	cmp	r3, #32
 80072e8:	bfc1      	itttt	gt
 80072ea:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80072ee:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80072f2:	fa0b f303 	lslgt.w	r3, fp, r3
 80072f6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80072fa:	bfda      	itte	le
 80072fc:	f1c3 0320 	rsble	r3, r3, #32
 8007300:	fa06 f003 	lslle.w	r0, r6, r3
 8007304:	4318      	orrgt	r0, r3
 8007306:	f7f9 f8fd 	bl	8000504 <__aeabi_ui2d>
 800730a:	2301      	movs	r3, #1
 800730c:	4606      	mov	r6, r0
 800730e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007312:	3d01      	subs	r5, #1
 8007314:	930e      	str	r3, [sp, #56]	; 0x38
 8007316:	e76a      	b.n	80071ee <_dtoa_r+0x116>
 8007318:	2301      	movs	r3, #1
 800731a:	e7b2      	b.n	8007282 <_dtoa_r+0x1aa>
 800731c:	900b      	str	r0, [sp, #44]	; 0x2c
 800731e:	e7b1      	b.n	8007284 <_dtoa_r+0x1ac>
 8007320:	9b04      	ldr	r3, [sp, #16]
 8007322:	9a00      	ldr	r2, [sp, #0]
 8007324:	1a9b      	subs	r3, r3, r2
 8007326:	9304      	str	r3, [sp, #16]
 8007328:	4253      	negs	r3, r2
 800732a:	9307      	str	r3, [sp, #28]
 800732c:	2300      	movs	r3, #0
 800732e:	930a      	str	r3, [sp, #40]	; 0x28
 8007330:	e7bf      	b.n	80072b2 <_dtoa_r+0x1da>
 8007332:	2300      	movs	r3, #0
 8007334:	9308      	str	r3, [sp, #32]
 8007336:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007338:	2b00      	cmp	r3, #0
 800733a:	dc55      	bgt.n	80073e8 <_dtoa_r+0x310>
 800733c:	2301      	movs	r3, #1
 800733e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007342:	461a      	mov	r2, r3
 8007344:	9209      	str	r2, [sp, #36]	; 0x24
 8007346:	e00c      	b.n	8007362 <_dtoa_r+0x28a>
 8007348:	2301      	movs	r3, #1
 800734a:	e7f3      	b.n	8007334 <_dtoa_r+0x25c>
 800734c:	2300      	movs	r3, #0
 800734e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007350:	9308      	str	r3, [sp, #32]
 8007352:	9b00      	ldr	r3, [sp, #0]
 8007354:	4413      	add	r3, r2
 8007356:	9302      	str	r3, [sp, #8]
 8007358:	3301      	adds	r3, #1
 800735a:	2b01      	cmp	r3, #1
 800735c:	9303      	str	r3, [sp, #12]
 800735e:	bfb8      	it	lt
 8007360:	2301      	movlt	r3, #1
 8007362:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007364:	2200      	movs	r2, #0
 8007366:	6042      	str	r2, [r0, #4]
 8007368:	2204      	movs	r2, #4
 800736a:	f102 0614 	add.w	r6, r2, #20
 800736e:	429e      	cmp	r6, r3
 8007370:	6841      	ldr	r1, [r0, #4]
 8007372:	d93d      	bls.n	80073f0 <_dtoa_r+0x318>
 8007374:	4620      	mov	r0, r4
 8007376:	f000 fca9 	bl	8007ccc <_Balloc>
 800737a:	9001      	str	r0, [sp, #4]
 800737c:	2800      	cmp	r0, #0
 800737e:	d13b      	bne.n	80073f8 <_dtoa_r+0x320>
 8007380:	4b11      	ldr	r3, [pc, #68]	; (80073c8 <_dtoa_r+0x2f0>)
 8007382:	4602      	mov	r2, r0
 8007384:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007388:	e6c0      	b.n	800710c <_dtoa_r+0x34>
 800738a:	2301      	movs	r3, #1
 800738c:	e7df      	b.n	800734e <_dtoa_r+0x276>
 800738e:	bf00      	nop
 8007390:	636f4361 	.word	0x636f4361
 8007394:	3fd287a7 	.word	0x3fd287a7
 8007398:	8b60c8b3 	.word	0x8b60c8b3
 800739c:	3fc68a28 	.word	0x3fc68a28
 80073a0:	509f79fb 	.word	0x509f79fb
 80073a4:	3fd34413 	.word	0x3fd34413
 80073a8:	0800a941 	.word	0x0800a941
 80073ac:	0800a958 	.word	0x0800a958
 80073b0:	7ff00000 	.word	0x7ff00000
 80073b4:	0800a93d 	.word	0x0800a93d
 80073b8:	0800a934 	.word	0x0800a934
 80073bc:	0800a911 	.word	0x0800a911
 80073c0:	3ff80000 	.word	0x3ff80000
 80073c4:	0800aa48 	.word	0x0800aa48
 80073c8:	0800a9b3 	.word	0x0800a9b3
 80073cc:	2501      	movs	r5, #1
 80073ce:	2300      	movs	r3, #0
 80073d0:	9306      	str	r3, [sp, #24]
 80073d2:	9508      	str	r5, [sp, #32]
 80073d4:	f04f 33ff 	mov.w	r3, #4294967295
 80073d8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80073dc:	2200      	movs	r2, #0
 80073de:	2312      	movs	r3, #18
 80073e0:	e7b0      	b.n	8007344 <_dtoa_r+0x26c>
 80073e2:	2301      	movs	r3, #1
 80073e4:	9308      	str	r3, [sp, #32]
 80073e6:	e7f5      	b.n	80073d4 <_dtoa_r+0x2fc>
 80073e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073ea:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80073ee:	e7b8      	b.n	8007362 <_dtoa_r+0x28a>
 80073f0:	3101      	adds	r1, #1
 80073f2:	6041      	str	r1, [r0, #4]
 80073f4:	0052      	lsls	r2, r2, #1
 80073f6:	e7b8      	b.n	800736a <_dtoa_r+0x292>
 80073f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80073fa:	9a01      	ldr	r2, [sp, #4]
 80073fc:	601a      	str	r2, [r3, #0]
 80073fe:	9b03      	ldr	r3, [sp, #12]
 8007400:	2b0e      	cmp	r3, #14
 8007402:	f200 809d 	bhi.w	8007540 <_dtoa_r+0x468>
 8007406:	2d00      	cmp	r5, #0
 8007408:	f000 809a 	beq.w	8007540 <_dtoa_r+0x468>
 800740c:	9b00      	ldr	r3, [sp, #0]
 800740e:	2b00      	cmp	r3, #0
 8007410:	dd32      	ble.n	8007478 <_dtoa_r+0x3a0>
 8007412:	4ab7      	ldr	r2, [pc, #732]	; (80076f0 <_dtoa_r+0x618>)
 8007414:	f003 030f 	and.w	r3, r3, #15
 8007418:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800741c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007420:	9b00      	ldr	r3, [sp, #0]
 8007422:	05d8      	lsls	r0, r3, #23
 8007424:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007428:	d516      	bpl.n	8007458 <_dtoa_r+0x380>
 800742a:	4bb2      	ldr	r3, [pc, #712]	; (80076f4 <_dtoa_r+0x61c>)
 800742c:	ec51 0b19 	vmov	r0, r1, d9
 8007430:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007434:	f7f9 fa0a 	bl	800084c <__aeabi_ddiv>
 8007438:	f007 070f 	and.w	r7, r7, #15
 800743c:	4682      	mov	sl, r0
 800743e:	468b      	mov	fp, r1
 8007440:	2503      	movs	r5, #3
 8007442:	4eac      	ldr	r6, [pc, #688]	; (80076f4 <_dtoa_r+0x61c>)
 8007444:	b957      	cbnz	r7, 800745c <_dtoa_r+0x384>
 8007446:	4642      	mov	r2, r8
 8007448:	464b      	mov	r3, r9
 800744a:	4650      	mov	r0, sl
 800744c:	4659      	mov	r1, fp
 800744e:	f7f9 f9fd 	bl	800084c <__aeabi_ddiv>
 8007452:	4682      	mov	sl, r0
 8007454:	468b      	mov	fp, r1
 8007456:	e028      	b.n	80074aa <_dtoa_r+0x3d2>
 8007458:	2502      	movs	r5, #2
 800745a:	e7f2      	b.n	8007442 <_dtoa_r+0x36a>
 800745c:	07f9      	lsls	r1, r7, #31
 800745e:	d508      	bpl.n	8007472 <_dtoa_r+0x39a>
 8007460:	4640      	mov	r0, r8
 8007462:	4649      	mov	r1, r9
 8007464:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007468:	f7f9 f8c6 	bl	80005f8 <__aeabi_dmul>
 800746c:	3501      	adds	r5, #1
 800746e:	4680      	mov	r8, r0
 8007470:	4689      	mov	r9, r1
 8007472:	107f      	asrs	r7, r7, #1
 8007474:	3608      	adds	r6, #8
 8007476:	e7e5      	b.n	8007444 <_dtoa_r+0x36c>
 8007478:	f000 809b 	beq.w	80075b2 <_dtoa_r+0x4da>
 800747c:	9b00      	ldr	r3, [sp, #0]
 800747e:	4f9d      	ldr	r7, [pc, #628]	; (80076f4 <_dtoa_r+0x61c>)
 8007480:	425e      	negs	r6, r3
 8007482:	4b9b      	ldr	r3, [pc, #620]	; (80076f0 <_dtoa_r+0x618>)
 8007484:	f006 020f 	and.w	r2, r6, #15
 8007488:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800748c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007490:	ec51 0b19 	vmov	r0, r1, d9
 8007494:	f7f9 f8b0 	bl	80005f8 <__aeabi_dmul>
 8007498:	1136      	asrs	r6, r6, #4
 800749a:	4682      	mov	sl, r0
 800749c:	468b      	mov	fp, r1
 800749e:	2300      	movs	r3, #0
 80074a0:	2502      	movs	r5, #2
 80074a2:	2e00      	cmp	r6, #0
 80074a4:	d17a      	bne.n	800759c <_dtoa_r+0x4c4>
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d1d3      	bne.n	8007452 <_dtoa_r+0x37a>
 80074aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	f000 8082 	beq.w	80075b6 <_dtoa_r+0x4de>
 80074b2:	4b91      	ldr	r3, [pc, #580]	; (80076f8 <_dtoa_r+0x620>)
 80074b4:	2200      	movs	r2, #0
 80074b6:	4650      	mov	r0, sl
 80074b8:	4659      	mov	r1, fp
 80074ba:	f7f9 fb0f 	bl	8000adc <__aeabi_dcmplt>
 80074be:	2800      	cmp	r0, #0
 80074c0:	d079      	beq.n	80075b6 <_dtoa_r+0x4de>
 80074c2:	9b03      	ldr	r3, [sp, #12]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d076      	beq.n	80075b6 <_dtoa_r+0x4de>
 80074c8:	9b02      	ldr	r3, [sp, #8]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	dd36      	ble.n	800753c <_dtoa_r+0x464>
 80074ce:	9b00      	ldr	r3, [sp, #0]
 80074d0:	4650      	mov	r0, sl
 80074d2:	4659      	mov	r1, fp
 80074d4:	1e5f      	subs	r7, r3, #1
 80074d6:	2200      	movs	r2, #0
 80074d8:	4b88      	ldr	r3, [pc, #544]	; (80076fc <_dtoa_r+0x624>)
 80074da:	f7f9 f88d 	bl	80005f8 <__aeabi_dmul>
 80074de:	9e02      	ldr	r6, [sp, #8]
 80074e0:	4682      	mov	sl, r0
 80074e2:	468b      	mov	fp, r1
 80074e4:	3501      	adds	r5, #1
 80074e6:	4628      	mov	r0, r5
 80074e8:	f7f9 f81c 	bl	8000524 <__aeabi_i2d>
 80074ec:	4652      	mov	r2, sl
 80074ee:	465b      	mov	r3, fp
 80074f0:	f7f9 f882 	bl	80005f8 <__aeabi_dmul>
 80074f4:	4b82      	ldr	r3, [pc, #520]	; (8007700 <_dtoa_r+0x628>)
 80074f6:	2200      	movs	r2, #0
 80074f8:	f7f8 fec8 	bl	800028c <__adddf3>
 80074fc:	46d0      	mov	r8, sl
 80074fe:	46d9      	mov	r9, fp
 8007500:	4682      	mov	sl, r0
 8007502:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007506:	2e00      	cmp	r6, #0
 8007508:	d158      	bne.n	80075bc <_dtoa_r+0x4e4>
 800750a:	4b7e      	ldr	r3, [pc, #504]	; (8007704 <_dtoa_r+0x62c>)
 800750c:	2200      	movs	r2, #0
 800750e:	4640      	mov	r0, r8
 8007510:	4649      	mov	r1, r9
 8007512:	f7f8 feb9 	bl	8000288 <__aeabi_dsub>
 8007516:	4652      	mov	r2, sl
 8007518:	465b      	mov	r3, fp
 800751a:	4680      	mov	r8, r0
 800751c:	4689      	mov	r9, r1
 800751e:	f7f9 fafb 	bl	8000b18 <__aeabi_dcmpgt>
 8007522:	2800      	cmp	r0, #0
 8007524:	f040 8295 	bne.w	8007a52 <_dtoa_r+0x97a>
 8007528:	4652      	mov	r2, sl
 800752a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800752e:	4640      	mov	r0, r8
 8007530:	4649      	mov	r1, r9
 8007532:	f7f9 fad3 	bl	8000adc <__aeabi_dcmplt>
 8007536:	2800      	cmp	r0, #0
 8007538:	f040 8289 	bne.w	8007a4e <_dtoa_r+0x976>
 800753c:	ec5b ab19 	vmov	sl, fp, d9
 8007540:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007542:	2b00      	cmp	r3, #0
 8007544:	f2c0 8148 	blt.w	80077d8 <_dtoa_r+0x700>
 8007548:	9a00      	ldr	r2, [sp, #0]
 800754a:	2a0e      	cmp	r2, #14
 800754c:	f300 8144 	bgt.w	80077d8 <_dtoa_r+0x700>
 8007550:	4b67      	ldr	r3, [pc, #412]	; (80076f0 <_dtoa_r+0x618>)
 8007552:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007556:	e9d3 8900 	ldrd	r8, r9, [r3]
 800755a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800755c:	2b00      	cmp	r3, #0
 800755e:	f280 80d5 	bge.w	800770c <_dtoa_r+0x634>
 8007562:	9b03      	ldr	r3, [sp, #12]
 8007564:	2b00      	cmp	r3, #0
 8007566:	f300 80d1 	bgt.w	800770c <_dtoa_r+0x634>
 800756a:	f040 826f 	bne.w	8007a4c <_dtoa_r+0x974>
 800756e:	4b65      	ldr	r3, [pc, #404]	; (8007704 <_dtoa_r+0x62c>)
 8007570:	2200      	movs	r2, #0
 8007572:	4640      	mov	r0, r8
 8007574:	4649      	mov	r1, r9
 8007576:	f7f9 f83f 	bl	80005f8 <__aeabi_dmul>
 800757a:	4652      	mov	r2, sl
 800757c:	465b      	mov	r3, fp
 800757e:	f7f9 fac1 	bl	8000b04 <__aeabi_dcmpge>
 8007582:	9e03      	ldr	r6, [sp, #12]
 8007584:	4637      	mov	r7, r6
 8007586:	2800      	cmp	r0, #0
 8007588:	f040 8245 	bne.w	8007a16 <_dtoa_r+0x93e>
 800758c:	9d01      	ldr	r5, [sp, #4]
 800758e:	2331      	movs	r3, #49	; 0x31
 8007590:	f805 3b01 	strb.w	r3, [r5], #1
 8007594:	9b00      	ldr	r3, [sp, #0]
 8007596:	3301      	adds	r3, #1
 8007598:	9300      	str	r3, [sp, #0]
 800759a:	e240      	b.n	8007a1e <_dtoa_r+0x946>
 800759c:	07f2      	lsls	r2, r6, #31
 800759e:	d505      	bpl.n	80075ac <_dtoa_r+0x4d4>
 80075a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075a4:	f7f9 f828 	bl	80005f8 <__aeabi_dmul>
 80075a8:	3501      	adds	r5, #1
 80075aa:	2301      	movs	r3, #1
 80075ac:	1076      	asrs	r6, r6, #1
 80075ae:	3708      	adds	r7, #8
 80075b0:	e777      	b.n	80074a2 <_dtoa_r+0x3ca>
 80075b2:	2502      	movs	r5, #2
 80075b4:	e779      	b.n	80074aa <_dtoa_r+0x3d2>
 80075b6:	9f00      	ldr	r7, [sp, #0]
 80075b8:	9e03      	ldr	r6, [sp, #12]
 80075ba:	e794      	b.n	80074e6 <_dtoa_r+0x40e>
 80075bc:	9901      	ldr	r1, [sp, #4]
 80075be:	4b4c      	ldr	r3, [pc, #304]	; (80076f0 <_dtoa_r+0x618>)
 80075c0:	4431      	add	r1, r6
 80075c2:	910d      	str	r1, [sp, #52]	; 0x34
 80075c4:	9908      	ldr	r1, [sp, #32]
 80075c6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80075ca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80075ce:	2900      	cmp	r1, #0
 80075d0:	d043      	beq.n	800765a <_dtoa_r+0x582>
 80075d2:	494d      	ldr	r1, [pc, #308]	; (8007708 <_dtoa_r+0x630>)
 80075d4:	2000      	movs	r0, #0
 80075d6:	f7f9 f939 	bl	800084c <__aeabi_ddiv>
 80075da:	4652      	mov	r2, sl
 80075dc:	465b      	mov	r3, fp
 80075de:	f7f8 fe53 	bl	8000288 <__aeabi_dsub>
 80075e2:	9d01      	ldr	r5, [sp, #4]
 80075e4:	4682      	mov	sl, r0
 80075e6:	468b      	mov	fp, r1
 80075e8:	4649      	mov	r1, r9
 80075ea:	4640      	mov	r0, r8
 80075ec:	f7f9 fab4 	bl	8000b58 <__aeabi_d2iz>
 80075f0:	4606      	mov	r6, r0
 80075f2:	f7f8 ff97 	bl	8000524 <__aeabi_i2d>
 80075f6:	4602      	mov	r2, r0
 80075f8:	460b      	mov	r3, r1
 80075fa:	4640      	mov	r0, r8
 80075fc:	4649      	mov	r1, r9
 80075fe:	f7f8 fe43 	bl	8000288 <__aeabi_dsub>
 8007602:	3630      	adds	r6, #48	; 0x30
 8007604:	f805 6b01 	strb.w	r6, [r5], #1
 8007608:	4652      	mov	r2, sl
 800760a:	465b      	mov	r3, fp
 800760c:	4680      	mov	r8, r0
 800760e:	4689      	mov	r9, r1
 8007610:	f7f9 fa64 	bl	8000adc <__aeabi_dcmplt>
 8007614:	2800      	cmp	r0, #0
 8007616:	d163      	bne.n	80076e0 <_dtoa_r+0x608>
 8007618:	4642      	mov	r2, r8
 800761a:	464b      	mov	r3, r9
 800761c:	4936      	ldr	r1, [pc, #216]	; (80076f8 <_dtoa_r+0x620>)
 800761e:	2000      	movs	r0, #0
 8007620:	f7f8 fe32 	bl	8000288 <__aeabi_dsub>
 8007624:	4652      	mov	r2, sl
 8007626:	465b      	mov	r3, fp
 8007628:	f7f9 fa58 	bl	8000adc <__aeabi_dcmplt>
 800762c:	2800      	cmp	r0, #0
 800762e:	f040 80b5 	bne.w	800779c <_dtoa_r+0x6c4>
 8007632:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007634:	429d      	cmp	r5, r3
 8007636:	d081      	beq.n	800753c <_dtoa_r+0x464>
 8007638:	4b30      	ldr	r3, [pc, #192]	; (80076fc <_dtoa_r+0x624>)
 800763a:	2200      	movs	r2, #0
 800763c:	4650      	mov	r0, sl
 800763e:	4659      	mov	r1, fp
 8007640:	f7f8 ffda 	bl	80005f8 <__aeabi_dmul>
 8007644:	4b2d      	ldr	r3, [pc, #180]	; (80076fc <_dtoa_r+0x624>)
 8007646:	4682      	mov	sl, r0
 8007648:	468b      	mov	fp, r1
 800764a:	4640      	mov	r0, r8
 800764c:	4649      	mov	r1, r9
 800764e:	2200      	movs	r2, #0
 8007650:	f7f8 ffd2 	bl	80005f8 <__aeabi_dmul>
 8007654:	4680      	mov	r8, r0
 8007656:	4689      	mov	r9, r1
 8007658:	e7c6      	b.n	80075e8 <_dtoa_r+0x510>
 800765a:	4650      	mov	r0, sl
 800765c:	4659      	mov	r1, fp
 800765e:	f7f8 ffcb 	bl	80005f8 <__aeabi_dmul>
 8007662:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007664:	9d01      	ldr	r5, [sp, #4]
 8007666:	930f      	str	r3, [sp, #60]	; 0x3c
 8007668:	4682      	mov	sl, r0
 800766a:	468b      	mov	fp, r1
 800766c:	4649      	mov	r1, r9
 800766e:	4640      	mov	r0, r8
 8007670:	f7f9 fa72 	bl	8000b58 <__aeabi_d2iz>
 8007674:	4606      	mov	r6, r0
 8007676:	f7f8 ff55 	bl	8000524 <__aeabi_i2d>
 800767a:	3630      	adds	r6, #48	; 0x30
 800767c:	4602      	mov	r2, r0
 800767e:	460b      	mov	r3, r1
 8007680:	4640      	mov	r0, r8
 8007682:	4649      	mov	r1, r9
 8007684:	f7f8 fe00 	bl	8000288 <__aeabi_dsub>
 8007688:	f805 6b01 	strb.w	r6, [r5], #1
 800768c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800768e:	429d      	cmp	r5, r3
 8007690:	4680      	mov	r8, r0
 8007692:	4689      	mov	r9, r1
 8007694:	f04f 0200 	mov.w	r2, #0
 8007698:	d124      	bne.n	80076e4 <_dtoa_r+0x60c>
 800769a:	4b1b      	ldr	r3, [pc, #108]	; (8007708 <_dtoa_r+0x630>)
 800769c:	4650      	mov	r0, sl
 800769e:	4659      	mov	r1, fp
 80076a0:	f7f8 fdf4 	bl	800028c <__adddf3>
 80076a4:	4602      	mov	r2, r0
 80076a6:	460b      	mov	r3, r1
 80076a8:	4640      	mov	r0, r8
 80076aa:	4649      	mov	r1, r9
 80076ac:	f7f9 fa34 	bl	8000b18 <__aeabi_dcmpgt>
 80076b0:	2800      	cmp	r0, #0
 80076b2:	d173      	bne.n	800779c <_dtoa_r+0x6c4>
 80076b4:	4652      	mov	r2, sl
 80076b6:	465b      	mov	r3, fp
 80076b8:	4913      	ldr	r1, [pc, #76]	; (8007708 <_dtoa_r+0x630>)
 80076ba:	2000      	movs	r0, #0
 80076bc:	f7f8 fde4 	bl	8000288 <__aeabi_dsub>
 80076c0:	4602      	mov	r2, r0
 80076c2:	460b      	mov	r3, r1
 80076c4:	4640      	mov	r0, r8
 80076c6:	4649      	mov	r1, r9
 80076c8:	f7f9 fa08 	bl	8000adc <__aeabi_dcmplt>
 80076cc:	2800      	cmp	r0, #0
 80076ce:	f43f af35 	beq.w	800753c <_dtoa_r+0x464>
 80076d2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80076d4:	1e6b      	subs	r3, r5, #1
 80076d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80076d8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80076dc:	2b30      	cmp	r3, #48	; 0x30
 80076de:	d0f8      	beq.n	80076d2 <_dtoa_r+0x5fa>
 80076e0:	9700      	str	r7, [sp, #0]
 80076e2:	e049      	b.n	8007778 <_dtoa_r+0x6a0>
 80076e4:	4b05      	ldr	r3, [pc, #20]	; (80076fc <_dtoa_r+0x624>)
 80076e6:	f7f8 ff87 	bl	80005f8 <__aeabi_dmul>
 80076ea:	4680      	mov	r8, r0
 80076ec:	4689      	mov	r9, r1
 80076ee:	e7bd      	b.n	800766c <_dtoa_r+0x594>
 80076f0:	0800aa48 	.word	0x0800aa48
 80076f4:	0800aa20 	.word	0x0800aa20
 80076f8:	3ff00000 	.word	0x3ff00000
 80076fc:	40240000 	.word	0x40240000
 8007700:	401c0000 	.word	0x401c0000
 8007704:	40140000 	.word	0x40140000
 8007708:	3fe00000 	.word	0x3fe00000
 800770c:	9d01      	ldr	r5, [sp, #4]
 800770e:	4656      	mov	r6, sl
 8007710:	465f      	mov	r7, fp
 8007712:	4642      	mov	r2, r8
 8007714:	464b      	mov	r3, r9
 8007716:	4630      	mov	r0, r6
 8007718:	4639      	mov	r1, r7
 800771a:	f7f9 f897 	bl	800084c <__aeabi_ddiv>
 800771e:	f7f9 fa1b 	bl	8000b58 <__aeabi_d2iz>
 8007722:	4682      	mov	sl, r0
 8007724:	f7f8 fefe 	bl	8000524 <__aeabi_i2d>
 8007728:	4642      	mov	r2, r8
 800772a:	464b      	mov	r3, r9
 800772c:	f7f8 ff64 	bl	80005f8 <__aeabi_dmul>
 8007730:	4602      	mov	r2, r0
 8007732:	460b      	mov	r3, r1
 8007734:	4630      	mov	r0, r6
 8007736:	4639      	mov	r1, r7
 8007738:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800773c:	f7f8 fda4 	bl	8000288 <__aeabi_dsub>
 8007740:	f805 6b01 	strb.w	r6, [r5], #1
 8007744:	9e01      	ldr	r6, [sp, #4]
 8007746:	9f03      	ldr	r7, [sp, #12]
 8007748:	1bae      	subs	r6, r5, r6
 800774a:	42b7      	cmp	r7, r6
 800774c:	4602      	mov	r2, r0
 800774e:	460b      	mov	r3, r1
 8007750:	d135      	bne.n	80077be <_dtoa_r+0x6e6>
 8007752:	f7f8 fd9b 	bl	800028c <__adddf3>
 8007756:	4642      	mov	r2, r8
 8007758:	464b      	mov	r3, r9
 800775a:	4606      	mov	r6, r0
 800775c:	460f      	mov	r7, r1
 800775e:	f7f9 f9db 	bl	8000b18 <__aeabi_dcmpgt>
 8007762:	b9d0      	cbnz	r0, 800779a <_dtoa_r+0x6c2>
 8007764:	4642      	mov	r2, r8
 8007766:	464b      	mov	r3, r9
 8007768:	4630      	mov	r0, r6
 800776a:	4639      	mov	r1, r7
 800776c:	f7f9 f9ac 	bl	8000ac8 <__aeabi_dcmpeq>
 8007770:	b110      	cbz	r0, 8007778 <_dtoa_r+0x6a0>
 8007772:	f01a 0f01 	tst.w	sl, #1
 8007776:	d110      	bne.n	800779a <_dtoa_r+0x6c2>
 8007778:	4620      	mov	r0, r4
 800777a:	ee18 1a10 	vmov	r1, s16
 800777e:	f000 fae5 	bl	8007d4c <_Bfree>
 8007782:	2300      	movs	r3, #0
 8007784:	9800      	ldr	r0, [sp, #0]
 8007786:	702b      	strb	r3, [r5, #0]
 8007788:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800778a:	3001      	adds	r0, #1
 800778c:	6018      	str	r0, [r3, #0]
 800778e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007790:	2b00      	cmp	r3, #0
 8007792:	f43f acf1 	beq.w	8007178 <_dtoa_r+0xa0>
 8007796:	601d      	str	r5, [r3, #0]
 8007798:	e4ee      	b.n	8007178 <_dtoa_r+0xa0>
 800779a:	9f00      	ldr	r7, [sp, #0]
 800779c:	462b      	mov	r3, r5
 800779e:	461d      	mov	r5, r3
 80077a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80077a4:	2a39      	cmp	r2, #57	; 0x39
 80077a6:	d106      	bne.n	80077b6 <_dtoa_r+0x6de>
 80077a8:	9a01      	ldr	r2, [sp, #4]
 80077aa:	429a      	cmp	r2, r3
 80077ac:	d1f7      	bne.n	800779e <_dtoa_r+0x6c6>
 80077ae:	9901      	ldr	r1, [sp, #4]
 80077b0:	2230      	movs	r2, #48	; 0x30
 80077b2:	3701      	adds	r7, #1
 80077b4:	700a      	strb	r2, [r1, #0]
 80077b6:	781a      	ldrb	r2, [r3, #0]
 80077b8:	3201      	adds	r2, #1
 80077ba:	701a      	strb	r2, [r3, #0]
 80077bc:	e790      	b.n	80076e0 <_dtoa_r+0x608>
 80077be:	4ba6      	ldr	r3, [pc, #664]	; (8007a58 <_dtoa_r+0x980>)
 80077c0:	2200      	movs	r2, #0
 80077c2:	f7f8 ff19 	bl	80005f8 <__aeabi_dmul>
 80077c6:	2200      	movs	r2, #0
 80077c8:	2300      	movs	r3, #0
 80077ca:	4606      	mov	r6, r0
 80077cc:	460f      	mov	r7, r1
 80077ce:	f7f9 f97b 	bl	8000ac8 <__aeabi_dcmpeq>
 80077d2:	2800      	cmp	r0, #0
 80077d4:	d09d      	beq.n	8007712 <_dtoa_r+0x63a>
 80077d6:	e7cf      	b.n	8007778 <_dtoa_r+0x6a0>
 80077d8:	9a08      	ldr	r2, [sp, #32]
 80077da:	2a00      	cmp	r2, #0
 80077dc:	f000 80d7 	beq.w	800798e <_dtoa_r+0x8b6>
 80077e0:	9a06      	ldr	r2, [sp, #24]
 80077e2:	2a01      	cmp	r2, #1
 80077e4:	f300 80ba 	bgt.w	800795c <_dtoa_r+0x884>
 80077e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80077ea:	2a00      	cmp	r2, #0
 80077ec:	f000 80b2 	beq.w	8007954 <_dtoa_r+0x87c>
 80077f0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80077f4:	9e07      	ldr	r6, [sp, #28]
 80077f6:	9d04      	ldr	r5, [sp, #16]
 80077f8:	9a04      	ldr	r2, [sp, #16]
 80077fa:	441a      	add	r2, r3
 80077fc:	9204      	str	r2, [sp, #16]
 80077fe:	9a05      	ldr	r2, [sp, #20]
 8007800:	2101      	movs	r1, #1
 8007802:	441a      	add	r2, r3
 8007804:	4620      	mov	r0, r4
 8007806:	9205      	str	r2, [sp, #20]
 8007808:	f000 fb58 	bl	8007ebc <__i2b>
 800780c:	4607      	mov	r7, r0
 800780e:	2d00      	cmp	r5, #0
 8007810:	dd0c      	ble.n	800782c <_dtoa_r+0x754>
 8007812:	9b05      	ldr	r3, [sp, #20]
 8007814:	2b00      	cmp	r3, #0
 8007816:	dd09      	ble.n	800782c <_dtoa_r+0x754>
 8007818:	42ab      	cmp	r3, r5
 800781a:	9a04      	ldr	r2, [sp, #16]
 800781c:	bfa8      	it	ge
 800781e:	462b      	movge	r3, r5
 8007820:	1ad2      	subs	r2, r2, r3
 8007822:	9204      	str	r2, [sp, #16]
 8007824:	9a05      	ldr	r2, [sp, #20]
 8007826:	1aed      	subs	r5, r5, r3
 8007828:	1ad3      	subs	r3, r2, r3
 800782a:	9305      	str	r3, [sp, #20]
 800782c:	9b07      	ldr	r3, [sp, #28]
 800782e:	b31b      	cbz	r3, 8007878 <_dtoa_r+0x7a0>
 8007830:	9b08      	ldr	r3, [sp, #32]
 8007832:	2b00      	cmp	r3, #0
 8007834:	f000 80af 	beq.w	8007996 <_dtoa_r+0x8be>
 8007838:	2e00      	cmp	r6, #0
 800783a:	dd13      	ble.n	8007864 <_dtoa_r+0x78c>
 800783c:	4639      	mov	r1, r7
 800783e:	4632      	mov	r2, r6
 8007840:	4620      	mov	r0, r4
 8007842:	f000 fbfb 	bl	800803c <__pow5mult>
 8007846:	ee18 2a10 	vmov	r2, s16
 800784a:	4601      	mov	r1, r0
 800784c:	4607      	mov	r7, r0
 800784e:	4620      	mov	r0, r4
 8007850:	f000 fb4a 	bl	8007ee8 <__multiply>
 8007854:	ee18 1a10 	vmov	r1, s16
 8007858:	4680      	mov	r8, r0
 800785a:	4620      	mov	r0, r4
 800785c:	f000 fa76 	bl	8007d4c <_Bfree>
 8007860:	ee08 8a10 	vmov	s16, r8
 8007864:	9b07      	ldr	r3, [sp, #28]
 8007866:	1b9a      	subs	r2, r3, r6
 8007868:	d006      	beq.n	8007878 <_dtoa_r+0x7a0>
 800786a:	ee18 1a10 	vmov	r1, s16
 800786e:	4620      	mov	r0, r4
 8007870:	f000 fbe4 	bl	800803c <__pow5mult>
 8007874:	ee08 0a10 	vmov	s16, r0
 8007878:	2101      	movs	r1, #1
 800787a:	4620      	mov	r0, r4
 800787c:	f000 fb1e 	bl	8007ebc <__i2b>
 8007880:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007882:	2b00      	cmp	r3, #0
 8007884:	4606      	mov	r6, r0
 8007886:	f340 8088 	ble.w	800799a <_dtoa_r+0x8c2>
 800788a:	461a      	mov	r2, r3
 800788c:	4601      	mov	r1, r0
 800788e:	4620      	mov	r0, r4
 8007890:	f000 fbd4 	bl	800803c <__pow5mult>
 8007894:	9b06      	ldr	r3, [sp, #24]
 8007896:	2b01      	cmp	r3, #1
 8007898:	4606      	mov	r6, r0
 800789a:	f340 8081 	ble.w	80079a0 <_dtoa_r+0x8c8>
 800789e:	f04f 0800 	mov.w	r8, #0
 80078a2:	6933      	ldr	r3, [r6, #16]
 80078a4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80078a8:	6918      	ldr	r0, [r3, #16]
 80078aa:	f000 fab7 	bl	8007e1c <__hi0bits>
 80078ae:	f1c0 0020 	rsb	r0, r0, #32
 80078b2:	9b05      	ldr	r3, [sp, #20]
 80078b4:	4418      	add	r0, r3
 80078b6:	f010 001f 	ands.w	r0, r0, #31
 80078ba:	f000 8092 	beq.w	80079e2 <_dtoa_r+0x90a>
 80078be:	f1c0 0320 	rsb	r3, r0, #32
 80078c2:	2b04      	cmp	r3, #4
 80078c4:	f340 808a 	ble.w	80079dc <_dtoa_r+0x904>
 80078c8:	f1c0 001c 	rsb	r0, r0, #28
 80078cc:	9b04      	ldr	r3, [sp, #16]
 80078ce:	4403      	add	r3, r0
 80078d0:	9304      	str	r3, [sp, #16]
 80078d2:	9b05      	ldr	r3, [sp, #20]
 80078d4:	4403      	add	r3, r0
 80078d6:	4405      	add	r5, r0
 80078d8:	9305      	str	r3, [sp, #20]
 80078da:	9b04      	ldr	r3, [sp, #16]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	dd07      	ble.n	80078f0 <_dtoa_r+0x818>
 80078e0:	ee18 1a10 	vmov	r1, s16
 80078e4:	461a      	mov	r2, r3
 80078e6:	4620      	mov	r0, r4
 80078e8:	f000 fc02 	bl	80080f0 <__lshift>
 80078ec:	ee08 0a10 	vmov	s16, r0
 80078f0:	9b05      	ldr	r3, [sp, #20]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	dd05      	ble.n	8007902 <_dtoa_r+0x82a>
 80078f6:	4631      	mov	r1, r6
 80078f8:	461a      	mov	r2, r3
 80078fa:	4620      	mov	r0, r4
 80078fc:	f000 fbf8 	bl	80080f0 <__lshift>
 8007900:	4606      	mov	r6, r0
 8007902:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007904:	2b00      	cmp	r3, #0
 8007906:	d06e      	beq.n	80079e6 <_dtoa_r+0x90e>
 8007908:	ee18 0a10 	vmov	r0, s16
 800790c:	4631      	mov	r1, r6
 800790e:	f000 fc5f 	bl	80081d0 <__mcmp>
 8007912:	2800      	cmp	r0, #0
 8007914:	da67      	bge.n	80079e6 <_dtoa_r+0x90e>
 8007916:	9b00      	ldr	r3, [sp, #0]
 8007918:	3b01      	subs	r3, #1
 800791a:	ee18 1a10 	vmov	r1, s16
 800791e:	9300      	str	r3, [sp, #0]
 8007920:	220a      	movs	r2, #10
 8007922:	2300      	movs	r3, #0
 8007924:	4620      	mov	r0, r4
 8007926:	f000 fa33 	bl	8007d90 <__multadd>
 800792a:	9b08      	ldr	r3, [sp, #32]
 800792c:	ee08 0a10 	vmov	s16, r0
 8007930:	2b00      	cmp	r3, #0
 8007932:	f000 81b1 	beq.w	8007c98 <_dtoa_r+0xbc0>
 8007936:	2300      	movs	r3, #0
 8007938:	4639      	mov	r1, r7
 800793a:	220a      	movs	r2, #10
 800793c:	4620      	mov	r0, r4
 800793e:	f000 fa27 	bl	8007d90 <__multadd>
 8007942:	9b02      	ldr	r3, [sp, #8]
 8007944:	2b00      	cmp	r3, #0
 8007946:	4607      	mov	r7, r0
 8007948:	f300 808e 	bgt.w	8007a68 <_dtoa_r+0x990>
 800794c:	9b06      	ldr	r3, [sp, #24]
 800794e:	2b02      	cmp	r3, #2
 8007950:	dc51      	bgt.n	80079f6 <_dtoa_r+0x91e>
 8007952:	e089      	b.n	8007a68 <_dtoa_r+0x990>
 8007954:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007956:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800795a:	e74b      	b.n	80077f4 <_dtoa_r+0x71c>
 800795c:	9b03      	ldr	r3, [sp, #12]
 800795e:	1e5e      	subs	r6, r3, #1
 8007960:	9b07      	ldr	r3, [sp, #28]
 8007962:	42b3      	cmp	r3, r6
 8007964:	bfbf      	itttt	lt
 8007966:	9b07      	ldrlt	r3, [sp, #28]
 8007968:	9607      	strlt	r6, [sp, #28]
 800796a:	1af2      	sublt	r2, r6, r3
 800796c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800796e:	bfb6      	itet	lt
 8007970:	189b      	addlt	r3, r3, r2
 8007972:	1b9e      	subge	r6, r3, r6
 8007974:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007976:	9b03      	ldr	r3, [sp, #12]
 8007978:	bfb8      	it	lt
 800797a:	2600      	movlt	r6, #0
 800797c:	2b00      	cmp	r3, #0
 800797e:	bfb7      	itett	lt
 8007980:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007984:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007988:	1a9d      	sublt	r5, r3, r2
 800798a:	2300      	movlt	r3, #0
 800798c:	e734      	b.n	80077f8 <_dtoa_r+0x720>
 800798e:	9e07      	ldr	r6, [sp, #28]
 8007990:	9d04      	ldr	r5, [sp, #16]
 8007992:	9f08      	ldr	r7, [sp, #32]
 8007994:	e73b      	b.n	800780e <_dtoa_r+0x736>
 8007996:	9a07      	ldr	r2, [sp, #28]
 8007998:	e767      	b.n	800786a <_dtoa_r+0x792>
 800799a:	9b06      	ldr	r3, [sp, #24]
 800799c:	2b01      	cmp	r3, #1
 800799e:	dc18      	bgt.n	80079d2 <_dtoa_r+0x8fa>
 80079a0:	f1ba 0f00 	cmp.w	sl, #0
 80079a4:	d115      	bne.n	80079d2 <_dtoa_r+0x8fa>
 80079a6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80079aa:	b993      	cbnz	r3, 80079d2 <_dtoa_r+0x8fa>
 80079ac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80079b0:	0d1b      	lsrs	r3, r3, #20
 80079b2:	051b      	lsls	r3, r3, #20
 80079b4:	b183      	cbz	r3, 80079d8 <_dtoa_r+0x900>
 80079b6:	9b04      	ldr	r3, [sp, #16]
 80079b8:	3301      	adds	r3, #1
 80079ba:	9304      	str	r3, [sp, #16]
 80079bc:	9b05      	ldr	r3, [sp, #20]
 80079be:	3301      	adds	r3, #1
 80079c0:	9305      	str	r3, [sp, #20]
 80079c2:	f04f 0801 	mov.w	r8, #1
 80079c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	f47f af6a 	bne.w	80078a2 <_dtoa_r+0x7ca>
 80079ce:	2001      	movs	r0, #1
 80079d0:	e76f      	b.n	80078b2 <_dtoa_r+0x7da>
 80079d2:	f04f 0800 	mov.w	r8, #0
 80079d6:	e7f6      	b.n	80079c6 <_dtoa_r+0x8ee>
 80079d8:	4698      	mov	r8, r3
 80079da:	e7f4      	b.n	80079c6 <_dtoa_r+0x8ee>
 80079dc:	f43f af7d 	beq.w	80078da <_dtoa_r+0x802>
 80079e0:	4618      	mov	r0, r3
 80079e2:	301c      	adds	r0, #28
 80079e4:	e772      	b.n	80078cc <_dtoa_r+0x7f4>
 80079e6:	9b03      	ldr	r3, [sp, #12]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	dc37      	bgt.n	8007a5c <_dtoa_r+0x984>
 80079ec:	9b06      	ldr	r3, [sp, #24]
 80079ee:	2b02      	cmp	r3, #2
 80079f0:	dd34      	ble.n	8007a5c <_dtoa_r+0x984>
 80079f2:	9b03      	ldr	r3, [sp, #12]
 80079f4:	9302      	str	r3, [sp, #8]
 80079f6:	9b02      	ldr	r3, [sp, #8]
 80079f8:	b96b      	cbnz	r3, 8007a16 <_dtoa_r+0x93e>
 80079fa:	4631      	mov	r1, r6
 80079fc:	2205      	movs	r2, #5
 80079fe:	4620      	mov	r0, r4
 8007a00:	f000 f9c6 	bl	8007d90 <__multadd>
 8007a04:	4601      	mov	r1, r0
 8007a06:	4606      	mov	r6, r0
 8007a08:	ee18 0a10 	vmov	r0, s16
 8007a0c:	f000 fbe0 	bl	80081d0 <__mcmp>
 8007a10:	2800      	cmp	r0, #0
 8007a12:	f73f adbb 	bgt.w	800758c <_dtoa_r+0x4b4>
 8007a16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a18:	9d01      	ldr	r5, [sp, #4]
 8007a1a:	43db      	mvns	r3, r3
 8007a1c:	9300      	str	r3, [sp, #0]
 8007a1e:	f04f 0800 	mov.w	r8, #0
 8007a22:	4631      	mov	r1, r6
 8007a24:	4620      	mov	r0, r4
 8007a26:	f000 f991 	bl	8007d4c <_Bfree>
 8007a2a:	2f00      	cmp	r7, #0
 8007a2c:	f43f aea4 	beq.w	8007778 <_dtoa_r+0x6a0>
 8007a30:	f1b8 0f00 	cmp.w	r8, #0
 8007a34:	d005      	beq.n	8007a42 <_dtoa_r+0x96a>
 8007a36:	45b8      	cmp	r8, r7
 8007a38:	d003      	beq.n	8007a42 <_dtoa_r+0x96a>
 8007a3a:	4641      	mov	r1, r8
 8007a3c:	4620      	mov	r0, r4
 8007a3e:	f000 f985 	bl	8007d4c <_Bfree>
 8007a42:	4639      	mov	r1, r7
 8007a44:	4620      	mov	r0, r4
 8007a46:	f000 f981 	bl	8007d4c <_Bfree>
 8007a4a:	e695      	b.n	8007778 <_dtoa_r+0x6a0>
 8007a4c:	2600      	movs	r6, #0
 8007a4e:	4637      	mov	r7, r6
 8007a50:	e7e1      	b.n	8007a16 <_dtoa_r+0x93e>
 8007a52:	9700      	str	r7, [sp, #0]
 8007a54:	4637      	mov	r7, r6
 8007a56:	e599      	b.n	800758c <_dtoa_r+0x4b4>
 8007a58:	40240000 	.word	0x40240000
 8007a5c:	9b08      	ldr	r3, [sp, #32]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	f000 80ca 	beq.w	8007bf8 <_dtoa_r+0xb20>
 8007a64:	9b03      	ldr	r3, [sp, #12]
 8007a66:	9302      	str	r3, [sp, #8]
 8007a68:	2d00      	cmp	r5, #0
 8007a6a:	dd05      	ble.n	8007a78 <_dtoa_r+0x9a0>
 8007a6c:	4639      	mov	r1, r7
 8007a6e:	462a      	mov	r2, r5
 8007a70:	4620      	mov	r0, r4
 8007a72:	f000 fb3d 	bl	80080f0 <__lshift>
 8007a76:	4607      	mov	r7, r0
 8007a78:	f1b8 0f00 	cmp.w	r8, #0
 8007a7c:	d05b      	beq.n	8007b36 <_dtoa_r+0xa5e>
 8007a7e:	6879      	ldr	r1, [r7, #4]
 8007a80:	4620      	mov	r0, r4
 8007a82:	f000 f923 	bl	8007ccc <_Balloc>
 8007a86:	4605      	mov	r5, r0
 8007a88:	b928      	cbnz	r0, 8007a96 <_dtoa_r+0x9be>
 8007a8a:	4b87      	ldr	r3, [pc, #540]	; (8007ca8 <_dtoa_r+0xbd0>)
 8007a8c:	4602      	mov	r2, r0
 8007a8e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007a92:	f7ff bb3b 	b.w	800710c <_dtoa_r+0x34>
 8007a96:	693a      	ldr	r2, [r7, #16]
 8007a98:	3202      	adds	r2, #2
 8007a9a:	0092      	lsls	r2, r2, #2
 8007a9c:	f107 010c 	add.w	r1, r7, #12
 8007aa0:	300c      	adds	r0, #12
 8007aa2:	f7fe fded 	bl	8006680 <memcpy>
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	4629      	mov	r1, r5
 8007aaa:	4620      	mov	r0, r4
 8007aac:	f000 fb20 	bl	80080f0 <__lshift>
 8007ab0:	9b01      	ldr	r3, [sp, #4]
 8007ab2:	f103 0901 	add.w	r9, r3, #1
 8007ab6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007aba:	4413      	add	r3, r2
 8007abc:	9305      	str	r3, [sp, #20]
 8007abe:	f00a 0301 	and.w	r3, sl, #1
 8007ac2:	46b8      	mov	r8, r7
 8007ac4:	9304      	str	r3, [sp, #16]
 8007ac6:	4607      	mov	r7, r0
 8007ac8:	4631      	mov	r1, r6
 8007aca:	ee18 0a10 	vmov	r0, s16
 8007ace:	f7ff fa77 	bl	8006fc0 <quorem>
 8007ad2:	4641      	mov	r1, r8
 8007ad4:	9002      	str	r0, [sp, #8]
 8007ad6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007ada:	ee18 0a10 	vmov	r0, s16
 8007ade:	f000 fb77 	bl	80081d0 <__mcmp>
 8007ae2:	463a      	mov	r2, r7
 8007ae4:	9003      	str	r0, [sp, #12]
 8007ae6:	4631      	mov	r1, r6
 8007ae8:	4620      	mov	r0, r4
 8007aea:	f000 fb8d 	bl	8008208 <__mdiff>
 8007aee:	68c2      	ldr	r2, [r0, #12]
 8007af0:	f109 3bff 	add.w	fp, r9, #4294967295
 8007af4:	4605      	mov	r5, r0
 8007af6:	bb02      	cbnz	r2, 8007b3a <_dtoa_r+0xa62>
 8007af8:	4601      	mov	r1, r0
 8007afa:	ee18 0a10 	vmov	r0, s16
 8007afe:	f000 fb67 	bl	80081d0 <__mcmp>
 8007b02:	4602      	mov	r2, r0
 8007b04:	4629      	mov	r1, r5
 8007b06:	4620      	mov	r0, r4
 8007b08:	9207      	str	r2, [sp, #28]
 8007b0a:	f000 f91f 	bl	8007d4c <_Bfree>
 8007b0e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007b12:	ea43 0102 	orr.w	r1, r3, r2
 8007b16:	9b04      	ldr	r3, [sp, #16]
 8007b18:	430b      	orrs	r3, r1
 8007b1a:	464d      	mov	r5, r9
 8007b1c:	d10f      	bne.n	8007b3e <_dtoa_r+0xa66>
 8007b1e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007b22:	d02a      	beq.n	8007b7a <_dtoa_r+0xaa2>
 8007b24:	9b03      	ldr	r3, [sp, #12]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	dd02      	ble.n	8007b30 <_dtoa_r+0xa58>
 8007b2a:	9b02      	ldr	r3, [sp, #8]
 8007b2c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007b30:	f88b a000 	strb.w	sl, [fp]
 8007b34:	e775      	b.n	8007a22 <_dtoa_r+0x94a>
 8007b36:	4638      	mov	r0, r7
 8007b38:	e7ba      	b.n	8007ab0 <_dtoa_r+0x9d8>
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	e7e2      	b.n	8007b04 <_dtoa_r+0xa2c>
 8007b3e:	9b03      	ldr	r3, [sp, #12]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	db04      	blt.n	8007b4e <_dtoa_r+0xa76>
 8007b44:	9906      	ldr	r1, [sp, #24]
 8007b46:	430b      	orrs	r3, r1
 8007b48:	9904      	ldr	r1, [sp, #16]
 8007b4a:	430b      	orrs	r3, r1
 8007b4c:	d122      	bne.n	8007b94 <_dtoa_r+0xabc>
 8007b4e:	2a00      	cmp	r2, #0
 8007b50:	ddee      	ble.n	8007b30 <_dtoa_r+0xa58>
 8007b52:	ee18 1a10 	vmov	r1, s16
 8007b56:	2201      	movs	r2, #1
 8007b58:	4620      	mov	r0, r4
 8007b5a:	f000 fac9 	bl	80080f0 <__lshift>
 8007b5e:	4631      	mov	r1, r6
 8007b60:	ee08 0a10 	vmov	s16, r0
 8007b64:	f000 fb34 	bl	80081d0 <__mcmp>
 8007b68:	2800      	cmp	r0, #0
 8007b6a:	dc03      	bgt.n	8007b74 <_dtoa_r+0xa9c>
 8007b6c:	d1e0      	bne.n	8007b30 <_dtoa_r+0xa58>
 8007b6e:	f01a 0f01 	tst.w	sl, #1
 8007b72:	d0dd      	beq.n	8007b30 <_dtoa_r+0xa58>
 8007b74:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007b78:	d1d7      	bne.n	8007b2a <_dtoa_r+0xa52>
 8007b7a:	2339      	movs	r3, #57	; 0x39
 8007b7c:	f88b 3000 	strb.w	r3, [fp]
 8007b80:	462b      	mov	r3, r5
 8007b82:	461d      	mov	r5, r3
 8007b84:	3b01      	subs	r3, #1
 8007b86:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007b8a:	2a39      	cmp	r2, #57	; 0x39
 8007b8c:	d071      	beq.n	8007c72 <_dtoa_r+0xb9a>
 8007b8e:	3201      	adds	r2, #1
 8007b90:	701a      	strb	r2, [r3, #0]
 8007b92:	e746      	b.n	8007a22 <_dtoa_r+0x94a>
 8007b94:	2a00      	cmp	r2, #0
 8007b96:	dd07      	ble.n	8007ba8 <_dtoa_r+0xad0>
 8007b98:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007b9c:	d0ed      	beq.n	8007b7a <_dtoa_r+0xaa2>
 8007b9e:	f10a 0301 	add.w	r3, sl, #1
 8007ba2:	f88b 3000 	strb.w	r3, [fp]
 8007ba6:	e73c      	b.n	8007a22 <_dtoa_r+0x94a>
 8007ba8:	9b05      	ldr	r3, [sp, #20]
 8007baa:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007bae:	4599      	cmp	r9, r3
 8007bb0:	d047      	beq.n	8007c42 <_dtoa_r+0xb6a>
 8007bb2:	ee18 1a10 	vmov	r1, s16
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	220a      	movs	r2, #10
 8007bba:	4620      	mov	r0, r4
 8007bbc:	f000 f8e8 	bl	8007d90 <__multadd>
 8007bc0:	45b8      	cmp	r8, r7
 8007bc2:	ee08 0a10 	vmov	s16, r0
 8007bc6:	f04f 0300 	mov.w	r3, #0
 8007bca:	f04f 020a 	mov.w	r2, #10
 8007bce:	4641      	mov	r1, r8
 8007bd0:	4620      	mov	r0, r4
 8007bd2:	d106      	bne.n	8007be2 <_dtoa_r+0xb0a>
 8007bd4:	f000 f8dc 	bl	8007d90 <__multadd>
 8007bd8:	4680      	mov	r8, r0
 8007bda:	4607      	mov	r7, r0
 8007bdc:	f109 0901 	add.w	r9, r9, #1
 8007be0:	e772      	b.n	8007ac8 <_dtoa_r+0x9f0>
 8007be2:	f000 f8d5 	bl	8007d90 <__multadd>
 8007be6:	4639      	mov	r1, r7
 8007be8:	4680      	mov	r8, r0
 8007bea:	2300      	movs	r3, #0
 8007bec:	220a      	movs	r2, #10
 8007bee:	4620      	mov	r0, r4
 8007bf0:	f000 f8ce 	bl	8007d90 <__multadd>
 8007bf4:	4607      	mov	r7, r0
 8007bf6:	e7f1      	b.n	8007bdc <_dtoa_r+0xb04>
 8007bf8:	9b03      	ldr	r3, [sp, #12]
 8007bfa:	9302      	str	r3, [sp, #8]
 8007bfc:	9d01      	ldr	r5, [sp, #4]
 8007bfe:	ee18 0a10 	vmov	r0, s16
 8007c02:	4631      	mov	r1, r6
 8007c04:	f7ff f9dc 	bl	8006fc0 <quorem>
 8007c08:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007c0c:	9b01      	ldr	r3, [sp, #4]
 8007c0e:	f805 ab01 	strb.w	sl, [r5], #1
 8007c12:	1aea      	subs	r2, r5, r3
 8007c14:	9b02      	ldr	r3, [sp, #8]
 8007c16:	4293      	cmp	r3, r2
 8007c18:	dd09      	ble.n	8007c2e <_dtoa_r+0xb56>
 8007c1a:	ee18 1a10 	vmov	r1, s16
 8007c1e:	2300      	movs	r3, #0
 8007c20:	220a      	movs	r2, #10
 8007c22:	4620      	mov	r0, r4
 8007c24:	f000 f8b4 	bl	8007d90 <__multadd>
 8007c28:	ee08 0a10 	vmov	s16, r0
 8007c2c:	e7e7      	b.n	8007bfe <_dtoa_r+0xb26>
 8007c2e:	9b02      	ldr	r3, [sp, #8]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	bfc8      	it	gt
 8007c34:	461d      	movgt	r5, r3
 8007c36:	9b01      	ldr	r3, [sp, #4]
 8007c38:	bfd8      	it	le
 8007c3a:	2501      	movle	r5, #1
 8007c3c:	441d      	add	r5, r3
 8007c3e:	f04f 0800 	mov.w	r8, #0
 8007c42:	ee18 1a10 	vmov	r1, s16
 8007c46:	2201      	movs	r2, #1
 8007c48:	4620      	mov	r0, r4
 8007c4a:	f000 fa51 	bl	80080f0 <__lshift>
 8007c4e:	4631      	mov	r1, r6
 8007c50:	ee08 0a10 	vmov	s16, r0
 8007c54:	f000 fabc 	bl	80081d0 <__mcmp>
 8007c58:	2800      	cmp	r0, #0
 8007c5a:	dc91      	bgt.n	8007b80 <_dtoa_r+0xaa8>
 8007c5c:	d102      	bne.n	8007c64 <_dtoa_r+0xb8c>
 8007c5e:	f01a 0f01 	tst.w	sl, #1
 8007c62:	d18d      	bne.n	8007b80 <_dtoa_r+0xaa8>
 8007c64:	462b      	mov	r3, r5
 8007c66:	461d      	mov	r5, r3
 8007c68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007c6c:	2a30      	cmp	r2, #48	; 0x30
 8007c6e:	d0fa      	beq.n	8007c66 <_dtoa_r+0xb8e>
 8007c70:	e6d7      	b.n	8007a22 <_dtoa_r+0x94a>
 8007c72:	9a01      	ldr	r2, [sp, #4]
 8007c74:	429a      	cmp	r2, r3
 8007c76:	d184      	bne.n	8007b82 <_dtoa_r+0xaaa>
 8007c78:	9b00      	ldr	r3, [sp, #0]
 8007c7a:	3301      	adds	r3, #1
 8007c7c:	9300      	str	r3, [sp, #0]
 8007c7e:	2331      	movs	r3, #49	; 0x31
 8007c80:	7013      	strb	r3, [r2, #0]
 8007c82:	e6ce      	b.n	8007a22 <_dtoa_r+0x94a>
 8007c84:	4b09      	ldr	r3, [pc, #36]	; (8007cac <_dtoa_r+0xbd4>)
 8007c86:	f7ff ba95 	b.w	80071b4 <_dtoa_r+0xdc>
 8007c8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	f47f aa6e 	bne.w	800716e <_dtoa_r+0x96>
 8007c92:	4b07      	ldr	r3, [pc, #28]	; (8007cb0 <_dtoa_r+0xbd8>)
 8007c94:	f7ff ba8e 	b.w	80071b4 <_dtoa_r+0xdc>
 8007c98:	9b02      	ldr	r3, [sp, #8]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	dcae      	bgt.n	8007bfc <_dtoa_r+0xb24>
 8007c9e:	9b06      	ldr	r3, [sp, #24]
 8007ca0:	2b02      	cmp	r3, #2
 8007ca2:	f73f aea8 	bgt.w	80079f6 <_dtoa_r+0x91e>
 8007ca6:	e7a9      	b.n	8007bfc <_dtoa_r+0xb24>
 8007ca8:	0800a9b3 	.word	0x0800a9b3
 8007cac:	0800a910 	.word	0x0800a910
 8007cb0:	0800a934 	.word	0x0800a934

08007cb4 <_localeconv_r>:
 8007cb4:	4800      	ldr	r0, [pc, #0]	; (8007cb8 <_localeconv_r+0x4>)
 8007cb6:	4770      	bx	lr
 8007cb8:	20000164 	.word	0x20000164

08007cbc <malloc>:
 8007cbc:	4b02      	ldr	r3, [pc, #8]	; (8007cc8 <malloc+0xc>)
 8007cbe:	4601      	mov	r1, r0
 8007cc0:	6818      	ldr	r0, [r3, #0]
 8007cc2:	f000 bc09 	b.w	80084d8 <_malloc_r>
 8007cc6:	bf00      	nop
 8007cc8:	20000010 	.word	0x20000010

08007ccc <_Balloc>:
 8007ccc:	b570      	push	{r4, r5, r6, lr}
 8007cce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007cd0:	4604      	mov	r4, r0
 8007cd2:	460d      	mov	r5, r1
 8007cd4:	b976      	cbnz	r6, 8007cf4 <_Balloc+0x28>
 8007cd6:	2010      	movs	r0, #16
 8007cd8:	f7ff fff0 	bl	8007cbc <malloc>
 8007cdc:	4602      	mov	r2, r0
 8007cde:	6260      	str	r0, [r4, #36]	; 0x24
 8007ce0:	b920      	cbnz	r0, 8007cec <_Balloc+0x20>
 8007ce2:	4b18      	ldr	r3, [pc, #96]	; (8007d44 <_Balloc+0x78>)
 8007ce4:	4818      	ldr	r0, [pc, #96]	; (8007d48 <_Balloc+0x7c>)
 8007ce6:	2166      	movs	r1, #102	; 0x66
 8007ce8:	f000 fdd6 	bl	8008898 <__assert_func>
 8007cec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007cf0:	6006      	str	r6, [r0, #0]
 8007cf2:	60c6      	str	r6, [r0, #12]
 8007cf4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007cf6:	68f3      	ldr	r3, [r6, #12]
 8007cf8:	b183      	cbz	r3, 8007d1c <_Balloc+0x50>
 8007cfa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007cfc:	68db      	ldr	r3, [r3, #12]
 8007cfe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007d02:	b9b8      	cbnz	r0, 8007d34 <_Balloc+0x68>
 8007d04:	2101      	movs	r1, #1
 8007d06:	fa01 f605 	lsl.w	r6, r1, r5
 8007d0a:	1d72      	adds	r2, r6, #5
 8007d0c:	0092      	lsls	r2, r2, #2
 8007d0e:	4620      	mov	r0, r4
 8007d10:	f000 fb60 	bl	80083d4 <_calloc_r>
 8007d14:	b160      	cbz	r0, 8007d30 <_Balloc+0x64>
 8007d16:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007d1a:	e00e      	b.n	8007d3a <_Balloc+0x6e>
 8007d1c:	2221      	movs	r2, #33	; 0x21
 8007d1e:	2104      	movs	r1, #4
 8007d20:	4620      	mov	r0, r4
 8007d22:	f000 fb57 	bl	80083d4 <_calloc_r>
 8007d26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d28:	60f0      	str	r0, [r6, #12]
 8007d2a:	68db      	ldr	r3, [r3, #12]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d1e4      	bne.n	8007cfa <_Balloc+0x2e>
 8007d30:	2000      	movs	r0, #0
 8007d32:	bd70      	pop	{r4, r5, r6, pc}
 8007d34:	6802      	ldr	r2, [r0, #0]
 8007d36:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007d40:	e7f7      	b.n	8007d32 <_Balloc+0x66>
 8007d42:	bf00      	nop
 8007d44:	0800a941 	.word	0x0800a941
 8007d48:	0800a9c4 	.word	0x0800a9c4

08007d4c <_Bfree>:
 8007d4c:	b570      	push	{r4, r5, r6, lr}
 8007d4e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007d50:	4605      	mov	r5, r0
 8007d52:	460c      	mov	r4, r1
 8007d54:	b976      	cbnz	r6, 8007d74 <_Bfree+0x28>
 8007d56:	2010      	movs	r0, #16
 8007d58:	f7ff ffb0 	bl	8007cbc <malloc>
 8007d5c:	4602      	mov	r2, r0
 8007d5e:	6268      	str	r0, [r5, #36]	; 0x24
 8007d60:	b920      	cbnz	r0, 8007d6c <_Bfree+0x20>
 8007d62:	4b09      	ldr	r3, [pc, #36]	; (8007d88 <_Bfree+0x3c>)
 8007d64:	4809      	ldr	r0, [pc, #36]	; (8007d8c <_Bfree+0x40>)
 8007d66:	218a      	movs	r1, #138	; 0x8a
 8007d68:	f000 fd96 	bl	8008898 <__assert_func>
 8007d6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007d70:	6006      	str	r6, [r0, #0]
 8007d72:	60c6      	str	r6, [r0, #12]
 8007d74:	b13c      	cbz	r4, 8007d86 <_Bfree+0x3a>
 8007d76:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007d78:	6862      	ldr	r2, [r4, #4]
 8007d7a:	68db      	ldr	r3, [r3, #12]
 8007d7c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007d80:	6021      	str	r1, [r4, #0]
 8007d82:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007d86:	bd70      	pop	{r4, r5, r6, pc}
 8007d88:	0800a941 	.word	0x0800a941
 8007d8c:	0800a9c4 	.word	0x0800a9c4

08007d90 <__multadd>:
 8007d90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d94:	690d      	ldr	r5, [r1, #16]
 8007d96:	4607      	mov	r7, r0
 8007d98:	460c      	mov	r4, r1
 8007d9a:	461e      	mov	r6, r3
 8007d9c:	f101 0c14 	add.w	ip, r1, #20
 8007da0:	2000      	movs	r0, #0
 8007da2:	f8dc 3000 	ldr.w	r3, [ip]
 8007da6:	b299      	uxth	r1, r3
 8007da8:	fb02 6101 	mla	r1, r2, r1, r6
 8007dac:	0c1e      	lsrs	r6, r3, #16
 8007dae:	0c0b      	lsrs	r3, r1, #16
 8007db0:	fb02 3306 	mla	r3, r2, r6, r3
 8007db4:	b289      	uxth	r1, r1
 8007db6:	3001      	adds	r0, #1
 8007db8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007dbc:	4285      	cmp	r5, r0
 8007dbe:	f84c 1b04 	str.w	r1, [ip], #4
 8007dc2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007dc6:	dcec      	bgt.n	8007da2 <__multadd+0x12>
 8007dc8:	b30e      	cbz	r6, 8007e0e <__multadd+0x7e>
 8007dca:	68a3      	ldr	r3, [r4, #8]
 8007dcc:	42ab      	cmp	r3, r5
 8007dce:	dc19      	bgt.n	8007e04 <__multadd+0x74>
 8007dd0:	6861      	ldr	r1, [r4, #4]
 8007dd2:	4638      	mov	r0, r7
 8007dd4:	3101      	adds	r1, #1
 8007dd6:	f7ff ff79 	bl	8007ccc <_Balloc>
 8007dda:	4680      	mov	r8, r0
 8007ddc:	b928      	cbnz	r0, 8007dea <__multadd+0x5a>
 8007dde:	4602      	mov	r2, r0
 8007de0:	4b0c      	ldr	r3, [pc, #48]	; (8007e14 <__multadd+0x84>)
 8007de2:	480d      	ldr	r0, [pc, #52]	; (8007e18 <__multadd+0x88>)
 8007de4:	21b5      	movs	r1, #181	; 0xb5
 8007de6:	f000 fd57 	bl	8008898 <__assert_func>
 8007dea:	6922      	ldr	r2, [r4, #16]
 8007dec:	3202      	adds	r2, #2
 8007dee:	f104 010c 	add.w	r1, r4, #12
 8007df2:	0092      	lsls	r2, r2, #2
 8007df4:	300c      	adds	r0, #12
 8007df6:	f7fe fc43 	bl	8006680 <memcpy>
 8007dfa:	4621      	mov	r1, r4
 8007dfc:	4638      	mov	r0, r7
 8007dfe:	f7ff ffa5 	bl	8007d4c <_Bfree>
 8007e02:	4644      	mov	r4, r8
 8007e04:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007e08:	3501      	adds	r5, #1
 8007e0a:	615e      	str	r6, [r3, #20]
 8007e0c:	6125      	str	r5, [r4, #16]
 8007e0e:	4620      	mov	r0, r4
 8007e10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e14:	0800a9b3 	.word	0x0800a9b3
 8007e18:	0800a9c4 	.word	0x0800a9c4

08007e1c <__hi0bits>:
 8007e1c:	0c03      	lsrs	r3, r0, #16
 8007e1e:	041b      	lsls	r3, r3, #16
 8007e20:	b9d3      	cbnz	r3, 8007e58 <__hi0bits+0x3c>
 8007e22:	0400      	lsls	r0, r0, #16
 8007e24:	2310      	movs	r3, #16
 8007e26:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007e2a:	bf04      	itt	eq
 8007e2c:	0200      	lsleq	r0, r0, #8
 8007e2e:	3308      	addeq	r3, #8
 8007e30:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007e34:	bf04      	itt	eq
 8007e36:	0100      	lsleq	r0, r0, #4
 8007e38:	3304      	addeq	r3, #4
 8007e3a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007e3e:	bf04      	itt	eq
 8007e40:	0080      	lsleq	r0, r0, #2
 8007e42:	3302      	addeq	r3, #2
 8007e44:	2800      	cmp	r0, #0
 8007e46:	db05      	blt.n	8007e54 <__hi0bits+0x38>
 8007e48:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007e4c:	f103 0301 	add.w	r3, r3, #1
 8007e50:	bf08      	it	eq
 8007e52:	2320      	moveq	r3, #32
 8007e54:	4618      	mov	r0, r3
 8007e56:	4770      	bx	lr
 8007e58:	2300      	movs	r3, #0
 8007e5a:	e7e4      	b.n	8007e26 <__hi0bits+0xa>

08007e5c <__lo0bits>:
 8007e5c:	6803      	ldr	r3, [r0, #0]
 8007e5e:	f013 0207 	ands.w	r2, r3, #7
 8007e62:	4601      	mov	r1, r0
 8007e64:	d00b      	beq.n	8007e7e <__lo0bits+0x22>
 8007e66:	07da      	lsls	r2, r3, #31
 8007e68:	d423      	bmi.n	8007eb2 <__lo0bits+0x56>
 8007e6a:	0798      	lsls	r0, r3, #30
 8007e6c:	bf49      	itett	mi
 8007e6e:	085b      	lsrmi	r3, r3, #1
 8007e70:	089b      	lsrpl	r3, r3, #2
 8007e72:	2001      	movmi	r0, #1
 8007e74:	600b      	strmi	r3, [r1, #0]
 8007e76:	bf5c      	itt	pl
 8007e78:	600b      	strpl	r3, [r1, #0]
 8007e7a:	2002      	movpl	r0, #2
 8007e7c:	4770      	bx	lr
 8007e7e:	b298      	uxth	r0, r3
 8007e80:	b9a8      	cbnz	r0, 8007eae <__lo0bits+0x52>
 8007e82:	0c1b      	lsrs	r3, r3, #16
 8007e84:	2010      	movs	r0, #16
 8007e86:	b2da      	uxtb	r2, r3
 8007e88:	b90a      	cbnz	r2, 8007e8e <__lo0bits+0x32>
 8007e8a:	3008      	adds	r0, #8
 8007e8c:	0a1b      	lsrs	r3, r3, #8
 8007e8e:	071a      	lsls	r2, r3, #28
 8007e90:	bf04      	itt	eq
 8007e92:	091b      	lsreq	r3, r3, #4
 8007e94:	3004      	addeq	r0, #4
 8007e96:	079a      	lsls	r2, r3, #30
 8007e98:	bf04      	itt	eq
 8007e9a:	089b      	lsreq	r3, r3, #2
 8007e9c:	3002      	addeq	r0, #2
 8007e9e:	07da      	lsls	r2, r3, #31
 8007ea0:	d403      	bmi.n	8007eaa <__lo0bits+0x4e>
 8007ea2:	085b      	lsrs	r3, r3, #1
 8007ea4:	f100 0001 	add.w	r0, r0, #1
 8007ea8:	d005      	beq.n	8007eb6 <__lo0bits+0x5a>
 8007eaa:	600b      	str	r3, [r1, #0]
 8007eac:	4770      	bx	lr
 8007eae:	4610      	mov	r0, r2
 8007eb0:	e7e9      	b.n	8007e86 <__lo0bits+0x2a>
 8007eb2:	2000      	movs	r0, #0
 8007eb4:	4770      	bx	lr
 8007eb6:	2020      	movs	r0, #32
 8007eb8:	4770      	bx	lr
	...

08007ebc <__i2b>:
 8007ebc:	b510      	push	{r4, lr}
 8007ebe:	460c      	mov	r4, r1
 8007ec0:	2101      	movs	r1, #1
 8007ec2:	f7ff ff03 	bl	8007ccc <_Balloc>
 8007ec6:	4602      	mov	r2, r0
 8007ec8:	b928      	cbnz	r0, 8007ed6 <__i2b+0x1a>
 8007eca:	4b05      	ldr	r3, [pc, #20]	; (8007ee0 <__i2b+0x24>)
 8007ecc:	4805      	ldr	r0, [pc, #20]	; (8007ee4 <__i2b+0x28>)
 8007ece:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007ed2:	f000 fce1 	bl	8008898 <__assert_func>
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	6144      	str	r4, [r0, #20]
 8007eda:	6103      	str	r3, [r0, #16]
 8007edc:	bd10      	pop	{r4, pc}
 8007ede:	bf00      	nop
 8007ee0:	0800a9b3 	.word	0x0800a9b3
 8007ee4:	0800a9c4 	.word	0x0800a9c4

08007ee8 <__multiply>:
 8007ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eec:	4691      	mov	r9, r2
 8007eee:	690a      	ldr	r2, [r1, #16]
 8007ef0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007ef4:	429a      	cmp	r2, r3
 8007ef6:	bfb8      	it	lt
 8007ef8:	460b      	movlt	r3, r1
 8007efa:	460c      	mov	r4, r1
 8007efc:	bfbc      	itt	lt
 8007efe:	464c      	movlt	r4, r9
 8007f00:	4699      	movlt	r9, r3
 8007f02:	6927      	ldr	r7, [r4, #16]
 8007f04:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007f08:	68a3      	ldr	r3, [r4, #8]
 8007f0a:	6861      	ldr	r1, [r4, #4]
 8007f0c:	eb07 060a 	add.w	r6, r7, sl
 8007f10:	42b3      	cmp	r3, r6
 8007f12:	b085      	sub	sp, #20
 8007f14:	bfb8      	it	lt
 8007f16:	3101      	addlt	r1, #1
 8007f18:	f7ff fed8 	bl	8007ccc <_Balloc>
 8007f1c:	b930      	cbnz	r0, 8007f2c <__multiply+0x44>
 8007f1e:	4602      	mov	r2, r0
 8007f20:	4b44      	ldr	r3, [pc, #272]	; (8008034 <__multiply+0x14c>)
 8007f22:	4845      	ldr	r0, [pc, #276]	; (8008038 <__multiply+0x150>)
 8007f24:	f240 115d 	movw	r1, #349	; 0x15d
 8007f28:	f000 fcb6 	bl	8008898 <__assert_func>
 8007f2c:	f100 0514 	add.w	r5, r0, #20
 8007f30:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007f34:	462b      	mov	r3, r5
 8007f36:	2200      	movs	r2, #0
 8007f38:	4543      	cmp	r3, r8
 8007f3a:	d321      	bcc.n	8007f80 <__multiply+0x98>
 8007f3c:	f104 0314 	add.w	r3, r4, #20
 8007f40:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007f44:	f109 0314 	add.w	r3, r9, #20
 8007f48:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007f4c:	9202      	str	r2, [sp, #8]
 8007f4e:	1b3a      	subs	r2, r7, r4
 8007f50:	3a15      	subs	r2, #21
 8007f52:	f022 0203 	bic.w	r2, r2, #3
 8007f56:	3204      	adds	r2, #4
 8007f58:	f104 0115 	add.w	r1, r4, #21
 8007f5c:	428f      	cmp	r7, r1
 8007f5e:	bf38      	it	cc
 8007f60:	2204      	movcc	r2, #4
 8007f62:	9201      	str	r2, [sp, #4]
 8007f64:	9a02      	ldr	r2, [sp, #8]
 8007f66:	9303      	str	r3, [sp, #12]
 8007f68:	429a      	cmp	r2, r3
 8007f6a:	d80c      	bhi.n	8007f86 <__multiply+0x9e>
 8007f6c:	2e00      	cmp	r6, #0
 8007f6e:	dd03      	ble.n	8007f78 <__multiply+0x90>
 8007f70:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d05a      	beq.n	800802e <__multiply+0x146>
 8007f78:	6106      	str	r6, [r0, #16]
 8007f7a:	b005      	add	sp, #20
 8007f7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f80:	f843 2b04 	str.w	r2, [r3], #4
 8007f84:	e7d8      	b.n	8007f38 <__multiply+0x50>
 8007f86:	f8b3 a000 	ldrh.w	sl, [r3]
 8007f8a:	f1ba 0f00 	cmp.w	sl, #0
 8007f8e:	d024      	beq.n	8007fda <__multiply+0xf2>
 8007f90:	f104 0e14 	add.w	lr, r4, #20
 8007f94:	46a9      	mov	r9, r5
 8007f96:	f04f 0c00 	mov.w	ip, #0
 8007f9a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007f9e:	f8d9 1000 	ldr.w	r1, [r9]
 8007fa2:	fa1f fb82 	uxth.w	fp, r2
 8007fa6:	b289      	uxth	r1, r1
 8007fa8:	fb0a 110b 	mla	r1, sl, fp, r1
 8007fac:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007fb0:	f8d9 2000 	ldr.w	r2, [r9]
 8007fb4:	4461      	add	r1, ip
 8007fb6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007fba:	fb0a c20b 	mla	r2, sl, fp, ip
 8007fbe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007fc2:	b289      	uxth	r1, r1
 8007fc4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007fc8:	4577      	cmp	r7, lr
 8007fca:	f849 1b04 	str.w	r1, [r9], #4
 8007fce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007fd2:	d8e2      	bhi.n	8007f9a <__multiply+0xb2>
 8007fd4:	9a01      	ldr	r2, [sp, #4]
 8007fd6:	f845 c002 	str.w	ip, [r5, r2]
 8007fda:	9a03      	ldr	r2, [sp, #12]
 8007fdc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007fe0:	3304      	adds	r3, #4
 8007fe2:	f1b9 0f00 	cmp.w	r9, #0
 8007fe6:	d020      	beq.n	800802a <__multiply+0x142>
 8007fe8:	6829      	ldr	r1, [r5, #0]
 8007fea:	f104 0c14 	add.w	ip, r4, #20
 8007fee:	46ae      	mov	lr, r5
 8007ff0:	f04f 0a00 	mov.w	sl, #0
 8007ff4:	f8bc b000 	ldrh.w	fp, [ip]
 8007ff8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007ffc:	fb09 220b 	mla	r2, r9, fp, r2
 8008000:	4492      	add	sl, r2
 8008002:	b289      	uxth	r1, r1
 8008004:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008008:	f84e 1b04 	str.w	r1, [lr], #4
 800800c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008010:	f8be 1000 	ldrh.w	r1, [lr]
 8008014:	0c12      	lsrs	r2, r2, #16
 8008016:	fb09 1102 	mla	r1, r9, r2, r1
 800801a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800801e:	4567      	cmp	r7, ip
 8008020:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008024:	d8e6      	bhi.n	8007ff4 <__multiply+0x10c>
 8008026:	9a01      	ldr	r2, [sp, #4]
 8008028:	50a9      	str	r1, [r5, r2]
 800802a:	3504      	adds	r5, #4
 800802c:	e79a      	b.n	8007f64 <__multiply+0x7c>
 800802e:	3e01      	subs	r6, #1
 8008030:	e79c      	b.n	8007f6c <__multiply+0x84>
 8008032:	bf00      	nop
 8008034:	0800a9b3 	.word	0x0800a9b3
 8008038:	0800a9c4 	.word	0x0800a9c4

0800803c <__pow5mult>:
 800803c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008040:	4615      	mov	r5, r2
 8008042:	f012 0203 	ands.w	r2, r2, #3
 8008046:	4606      	mov	r6, r0
 8008048:	460f      	mov	r7, r1
 800804a:	d007      	beq.n	800805c <__pow5mult+0x20>
 800804c:	4c25      	ldr	r4, [pc, #148]	; (80080e4 <__pow5mult+0xa8>)
 800804e:	3a01      	subs	r2, #1
 8008050:	2300      	movs	r3, #0
 8008052:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008056:	f7ff fe9b 	bl	8007d90 <__multadd>
 800805a:	4607      	mov	r7, r0
 800805c:	10ad      	asrs	r5, r5, #2
 800805e:	d03d      	beq.n	80080dc <__pow5mult+0xa0>
 8008060:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008062:	b97c      	cbnz	r4, 8008084 <__pow5mult+0x48>
 8008064:	2010      	movs	r0, #16
 8008066:	f7ff fe29 	bl	8007cbc <malloc>
 800806a:	4602      	mov	r2, r0
 800806c:	6270      	str	r0, [r6, #36]	; 0x24
 800806e:	b928      	cbnz	r0, 800807c <__pow5mult+0x40>
 8008070:	4b1d      	ldr	r3, [pc, #116]	; (80080e8 <__pow5mult+0xac>)
 8008072:	481e      	ldr	r0, [pc, #120]	; (80080ec <__pow5mult+0xb0>)
 8008074:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008078:	f000 fc0e 	bl	8008898 <__assert_func>
 800807c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008080:	6004      	str	r4, [r0, #0]
 8008082:	60c4      	str	r4, [r0, #12]
 8008084:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008088:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800808c:	b94c      	cbnz	r4, 80080a2 <__pow5mult+0x66>
 800808e:	f240 2171 	movw	r1, #625	; 0x271
 8008092:	4630      	mov	r0, r6
 8008094:	f7ff ff12 	bl	8007ebc <__i2b>
 8008098:	2300      	movs	r3, #0
 800809a:	f8c8 0008 	str.w	r0, [r8, #8]
 800809e:	4604      	mov	r4, r0
 80080a0:	6003      	str	r3, [r0, #0]
 80080a2:	f04f 0900 	mov.w	r9, #0
 80080a6:	07eb      	lsls	r3, r5, #31
 80080a8:	d50a      	bpl.n	80080c0 <__pow5mult+0x84>
 80080aa:	4639      	mov	r1, r7
 80080ac:	4622      	mov	r2, r4
 80080ae:	4630      	mov	r0, r6
 80080b0:	f7ff ff1a 	bl	8007ee8 <__multiply>
 80080b4:	4639      	mov	r1, r7
 80080b6:	4680      	mov	r8, r0
 80080b8:	4630      	mov	r0, r6
 80080ba:	f7ff fe47 	bl	8007d4c <_Bfree>
 80080be:	4647      	mov	r7, r8
 80080c0:	106d      	asrs	r5, r5, #1
 80080c2:	d00b      	beq.n	80080dc <__pow5mult+0xa0>
 80080c4:	6820      	ldr	r0, [r4, #0]
 80080c6:	b938      	cbnz	r0, 80080d8 <__pow5mult+0x9c>
 80080c8:	4622      	mov	r2, r4
 80080ca:	4621      	mov	r1, r4
 80080cc:	4630      	mov	r0, r6
 80080ce:	f7ff ff0b 	bl	8007ee8 <__multiply>
 80080d2:	6020      	str	r0, [r4, #0]
 80080d4:	f8c0 9000 	str.w	r9, [r0]
 80080d8:	4604      	mov	r4, r0
 80080da:	e7e4      	b.n	80080a6 <__pow5mult+0x6a>
 80080dc:	4638      	mov	r0, r7
 80080de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080e2:	bf00      	nop
 80080e4:	0800ab10 	.word	0x0800ab10
 80080e8:	0800a941 	.word	0x0800a941
 80080ec:	0800a9c4 	.word	0x0800a9c4

080080f0 <__lshift>:
 80080f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080f4:	460c      	mov	r4, r1
 80080f6:	6849      	ldr	r1, [r1, #4]
 80080f8:	6923      	ldr	r3, [r4, #16]
 80080fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80080fe:	68a3      	ldr	r3, [r4, #8]
 8008100:	4607      	mov	r7, r0
 8008102:	4691      	mov	r9, r2
 8008104:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008108:	f108 0601 	add.w	r6, r8, #1
 800810c:	42b3      	cmp	r3, r6
 800810e:	db0b      	blt.n	8008128 <__lshift+0x38>
 8008110:	4638      	mov	r0, r7
 8008112:	f7ff fddb 	bl	8007ccc <_Balloc>
 8008116:	4605      	mov	r5, r0
 8008118:	b948      	cbnz	r0, 800812e <__lshift+0x3e>
 800811a:	4602      	mov	r2, r0
 800811c:	4b2a      	ldr	r3, [pc, #168]	; (80081c8 <__lshift+0xd8>)
 800811e:	482b      	ldr	r0, [pc, #172]	; (80081cc <__lshift+0xdc>)
 8008120:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008124:	f000 fbb8 	bl	8008898 <__assert_func>
 8008128:	3101      	adds	r1, #1
 800812a:	005b      	lsls	r3, r3, #1
 800812c:	e7ee      	b.n	800810c <__lshift+0x1c>
 800812e:	2300      	movs	r3, #0
 8008130:	f100 0114 	add.w	r1, r0, #20
 8008134:	f100 0210 	add.w	r2, r0, #16
 8008138:	4618      	mov	r0, r3
 800813a:	4553      	cmp	r3, sl
 800813c:	db37      	blt.n	80081ae <__lshift+0xbe>
 800813e:	6920      	ldr	r0, [r4, #16]
 8008140:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008144:	f104 0314 	add.w	r3, r4, #20
 8008148:	f019 091f 	ands.w	r9, r9, #31
 800814c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008150:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008154:	d02f      	beq.n	80081b6 <__lshift+0xc6>
 8008156:	f1c9 0e20 	rsb	lr, r9, #32
 800815a:	468a      	mov	sl, r1
 800815c:	f04f 0c00 	mov.w	ip, #0
 8008160:	681a      	ldr	r2, [r3, #0]
 8008162:	fa02 f209 	lsl.w	r2, r2, r9
 8008166:	ea42 020c 	orr.w	r2, r2, ip
 800816a:	f84a 2b04 	str.w	r2, [sl], #4
 800816e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008172:	4298      	cmp	r0, r3
 8008174:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008178:	d8f2      	bhi.n	8008160 <__lshift+0x70>
 800817a:	1b03      	subs	r3, r0, r4
 800817c:	3b15      	subs	r3, #21
 800817e:	f023 0303 	bic.w	r3, r3, #3
 8008182:	3304      	adds	r3, #4
 8008184:	f104 0215 	add.w	r2, r4, #21
 8008188:	4290      	cmp	r0, r2
 800818a:	bf38      	it	cc
 800818c:	2304      	movcc	r3, #4
 800818e:	f841 c003 	str.w	ip, [r1, r3]
 8008192:	f1bc 0f00 	cmp.w	ip, #0
 8008196:	d001      	beq.n	800819c <__lshift+0xac>
 8008198:	f108 0602 	add.w	r6, r8, #2
 800819c:	3e01      	subs	r6, #1
 800819e:	4638      	mov	r0, r7
 80081a0:	612e      	str	r6, [r5, #16]
 80081a2:	4621      	mov	r1, r4
 80081a4:	f7ff fdd2 	bl	8007d4c <_Bfree>
 80081a8:	4628      	mov	r0, r5
 80081aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081ae:	f842 0f04 	str.w	r0, [r2, #4]!
 80081b2:	3301      	adds	r3, #1
 80081b4:	e7c1      	b.n	800813a <__lshift+0x4a>
 80081b6:	3904      	subs	r1, #4
 80081b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80081bc:	f841 2f04 	str.w	r2, [r1, #4]!
 80081c0:	4298      	cmp	r0, r3
 80081c2:	d8f9      	bhi.n	80081b8 <__lshift+0xc8>
 80081c4:	e7ea      	b.n	800819c <__lshift+0xac>
 80081c6:	bf00      	nop
 80081c8:	0800a9b3 	.word	0x0800a9b3
 80081cc:	0800a9c4 	.word	0x0800a9c4

080081d0 <__mcmp>:
 80081d0:	b530      	push	{r4, r5, lr}
 80081d2:	6902      	ldr	r2, [r0, #16]
 80081d4:	690c      	ldr	r4, [r1, #16]
 80081d6:	1b12      	subs	r2, r2, r4
 80081d8:	d10e      	bne.n	80081f8 <__mcmp+0x28>
 80081da:	f100 0314 	add.w	r3, r0, #20
 80081de:	3114      	adds	r1, #20
 80081e0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80081e4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80081e8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80081ec:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80081f0:	42a5      	cmp	r5, r4
 80081f2:	d003      	beq.n	80081fc <__mcmp+0x2c>
 80081f4:	d305      	bcc.n	8008202 <__mcmp+0x32>
 80081f6:	2201      	movs	r2, #1
 80081f8:	4610      	mov	r0, r2
 80081fa:	bd30      	pop	{r4, r5, pc}
 80081fc:	4283      	cmp	r3, r0
 80081fe:	d3f3      	bcc.n	80081e8 <__mcmp+0x18>
 8008200:	e7fa      	b.n	80081f8 <__mcmp+0x28>
 8008202:	f04f 32ff 	mov.w	r2, #4294967295
 8008206:	e7f7      	b.n	80081f8 <__mcmp+0x28>

08008208 <__mdiff>:
 8008208:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800820c:	460c      	mov	r4, r1
 800820e:	4606      	mov	r6, r0
 8008210:	4611      	mov	r1, r2
 8008212:	4620      	mov	r0, r4
 8008214:	4690      	mov	r8, r2
 8008216:	f7ff ffdb 	bl	80081d0 <__mcmp>
 800821a:	1e05      	subs	r5, r0, #0
 800821c:	d110      	bne.n	8008240 <__mdiff+0x38>
 800821e:	4629      	mov	r1, r5
 8008220:	4630      	mov	r0, r6
 8008222:	f7ff fd53 	bl	8007ccc <_Balloc>
 8008226:	b930      	cbnz	r0, 8008236 <__mdiff+0x2e>
 8008228:	4b3a      	ldr	r3, [pc, #232]	; (8008314 <__mdiff+0x10c>)
 800822a:	4602      	mov	r2, r0
 800822c:	f240 2132 	movw	r1, #562	; 0x232
 8008230:	4839      	ldr	r0, [pc, #228]	; (8008318 <__mdiff+0x110>)
 8008232:	f000 fb31 	bl	8008898 <__assert_func>
 8008236:	2301      	movs	r3, #1
 8008238:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800823c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008240:	bfa4      	itt	ge
 8008242:	4643      	movge	r3, r8
 8008244:	46a0      	movge	r8, r4
 8008246:	4630      	mov	r0, r6
 8008248:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800824c:	bfa6      	itte	ge
 800824e:	461c      	movge	r4, r3
 8008250:	2500      	movge	r5, #0
 8008252:	2501      	movlt	r5, #1
 8008254:	f7ff fd3a 	bl	8007ccc <_Balloc>
 8008258:	b920      	cbnz	r0, 8008264 <__mdiff+0x5c>
 800825a:	4b2e      	ldr	r3, [pc, #184]	; (8008314 <__mdiff+0x10c>)
 800825c:	4602      	mov	r2, r0
 800825e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008262:	e7e5      	b.n	8008230 <__mdiff+0x28>
 8008264:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008268:	6926      	ldr	r6, [r4, #16]
 800826a:	60c5      	str	r5, [r0, #12]
 800826c:	f104 0914 	add.w	r9, r4, #20
 8008270:	f108 0514 	add.w	r5, r8, #20
 8008274:	f100 0e14 	add.w	lr, r0, #20
 8008278:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800827c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008280:	f108 0210 	add.w	r2, r8, #16
 8008284:	46f2      	mov	sl, lr
 8008286:	2100      	movs	r1, #0
 8008288:	f859 3b04 	ldr.w	r3, [r9], #4
 800828c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008290:	fa1f f883 	uxth.w	r8, r3
 8008294:	fa11 f18b 	uxtah	r1, r1, fp
 8008298:	0c1b      	lsrs	r3, r3, #16
 800829a:	eba1 0808 	sub.w	r8, r1, r8
 800829e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80082a2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80082a6:	fa1f f888 	uxth.w	r8, r8
 80082aa:	1419      	asrs	r1, r3, #16
 80082ac:	454e      	cmp	r6, r9
 80082ae:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80082b2:	f84a 3b04 	str.w	r3, [sl], #4
 80082b6:	d8e7      	bhi.n	8008288 <__mdiff+0x80>
 80082b8:	1b33      	subs	r3, r6, r4
 80082ba:	3b15      	subs	r3, #21
 80082bc:	f023 0303 	bic.w	r3, r3, #3
 80082c0:	3304      	adds	r3, #4
 80082c2:	3415      	adds	r4, #21
 80082c4:	42a6      	cmp	r6, r4
 80082c6:	bf38      	it	cc
 80082c8:	2304      	movcc	r3, #4
 80082ca:	441d      	add	r5, r3
 80082cc:	4473      	add	r3, lr
 80082ce:	469e      	mov	lr, r3
 80082d0:	462e      	mov	r6, r5
 80082d2:	4566      	cmp	r6, ip
 80082d4:	d30e      	bcc.n	80082f4 <__mdiff+0xec>
 80082d6:	f10c 0203 	add.w	r2, ip, #3
 80082da:	1b52      	subs	r2, r2, r5
 80082dc:	f022 0203 	bic.w	r2, r2, #3
 80082e0:	3d03      	subs	r5, #3
 80082e2:	45ac      	cmp	ip, r5
 80082e4:	bf38      	it	cc
 80082e6:	2200      	movcc	r2, #0
 80082e8:	441a      	add	r2, r3
 80082ea:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80082ee:	b17b      	cbz	r3, 8008310 <__mdiff+0x108>
 80082f0:	6107      	str	r7, [r0, #16]
 80082f2:	e7a3      	b.n	800823c <__mdiff+0x34>
 80082f4:	f856 8b04 	ldr.w	r8, [r6], #4
 80082f8:	fa11 f288 	uxtah	r2, r1, r8
 80082fc:	1414      	asrs	r4, r2, #16
 80082fe:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008302:	b292      	uxth	r2, r2
 8008304:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008308:	f84e 2b04 	str.w	r2, [lr], #4
 800830c:	1421      	asrs	r1, r4, #16
 800830e:	e7e0      	b.n	80082d2 <__mdiff+0xca>
 8008310:	3f01      	subs	r7, #1
 8008312:	e7ea      	b.n	80082ea <__mdiff+0xe2>
 8008314:	0800a9b3 	.word	0x0800a9b3
 8008318:	0800a9c4 	.word	0x0800a9c4

0800831c <__d2b>:
 800831c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008320:	4689      	mov	r9, r1
 8008322:	2101      	movs	r1, #1
 8008324:	ec57 6b10 	vmov	r6, r7, d0
 8008328:	4690      	mov	r8, r2
 800832a:	f7ff fccf 	bl	8007ccc <_Balloc>
 800832e:	4604      	mov	r4, r0
 8008330:	b930      	cbnz	r0, 8008340 <__d2b+0x24>
 8008332:	4602      	mov	r2, r0
 8008334:	4b25      	ldr	r3, [pc, #148]	; (80083cc <__d2b+0xb0>)
 8008336:	4826      	ldr	r0, [pc, #152]	; (80083d0 <__d2b+0xb4>)
 8008338:	f240 310a 	movw	r1, #778	; 0x30a
 800833c:	f000 faac 	bl	8008898 <__assert_func>
 8008340:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008344:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008348:	bb35      	cbnz	r5, 8008398 <__d2b+0x7c>
 800834a:	2e00      	cmp	r6, #0
 800834c:	9301      	str	r3, [sp, #4]
 800834e:	d028      	beq.n	80083a2 <__d2b+0x86>
 8008350:	4668      	mov	r0, sp
 8008352:	9600      	str	r6, [sp, #0]
 8008354:	f7ff fd82 	bl	8007e5c <__lo0bits>
 8008358:	9900      	ldr	r1, [sp, #0]
 800835a:	b300      	cbz	r0, 800839e <__d2b+0x82>
 800835c:	9a01      	ldr	r2, [sp, #4]
 800835e:	f1c0 0320 	rsb	r3, r0, #32
 8008362:	fa02 f303 	lsl.w	r3, r2, r3
 8008366:	430b      	orrs	r3, r1
 8008368:	40c2      	lsrs	r2, r0
 800836a:	6163      	str	r3, [r4, #20]
 800836c:	9201      	str	r2, [sp, #4]
 800836e:	9b01      	ldr	r3, [sp, #4]
 8008370:	61a3      	str	r3, [r4, #24]
 8008372:	2b00      	cmp	r3, #0
 8008374:	bf14      	ite	ne
 8008376:	2202      	movne	r2, #2
 8008378:	2201      	moveq	r2, #1
 800837a:	6122      	str	r2, [r4, #16]
 800837c:	b1d5      	cbz	r5, 80083b4 <__d2b+0x98>
 800837e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008382:	4405      	add	r5, r0
 8008384:	f8c9 5000 	str.w	r5, [r9]
 8008388:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800838c:	f8c8 0000 	str.w	r0, [r8]
 8008390:	4620      	mov	r0, r4
 8008392:	b003      	add	sp, #12
 8008394:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008398:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800839c:	e7d5      	b.n	800834a <__d2b+0x2e>
 800839e:	6161      	str	r1, [r4, #20]
 80083a0:	e7e5      	b.n	800836e <__d2b+0x52>
 80083a2:	a801      	add	r0, sp, #4
 80083a4:	f7ff fd5a 	bl	8007e5c <__lo0bits>
 80083a8:	9b01      	ldr	r3, [sp, #4]
 80083aa:	6163      	str	r3, [r4, #20]
 80083ac:	2201      	movs	r2, #1
 80083ae:	6122      	str	r2, [r4, #16]
 80083b0:	3020      	adds	r0, #32
 80083b2:	e7e3      	b.n	800837c <__d2b+0x60>
 80083b4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80083b8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80083bc:	f8c9 0000 	str.w	r0, [r9]
 80083c0:	6918      	ldr	r0, [r3, #16]
 80083c2:	f7ff fd2b 	bl	8007e1c <__hi0bits>
 80083c6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80083ca:	e7df      	b.n	800838c <__d2b+0x70>
 80083cc:	0800a9b3 	.word	0x0800a9b3
 80083d0:	0800a9c4 	.word	0x0800a9c4

080083d4 <_calloc_r>:
 80083d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80083d6:	fba1 2402 	umull	r2, r4, r1, r2
 80083da:	b94c      	cbnz	r4, 80083f0 <_calloc_r+0x1c>
 80083dc:	4611      	mov	r1, r2
 80083de:	9201      	str	r2, [sp, #4]
 80083e0:	f000 f87a 	bl	80084d8 <_malloc_r>
 80083e4:	9a01      	ldr	r2, [sp, #4]
 80083e6:	4605      	mov	r5, r0
 80083e8:	b930      	cbnz	r0, 80083f8 <_calloc_r+0x24>
 80083ea:	4628      	mov	r0, r5
 80083ec:	b003      	add	sp, #12
 80083ee:	bd30      	pop	{r4, r5, pc}
 80083f0:	220c      	movs	r2, #12
 80083f2:	6002      	str	r2, [r0, #0]
 80083f4:	2500      	movs	r5, #0
 80083f6:	e7f8      	b.n	80083ea <_calloc_r+0x16>
 80083f8:	4621      	mov	r1, r4
 80083fa:	f7fe f94f 	bl	800669c <memset>
 80083fe:	e7f4      	b.n	80083ea <_calloc_r+0x16>

08008400 <_free_r>:
 8008400:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008402:	2900      	cmp	r1, #0
 8008404:	d044      	beq.n	8008490 <_free_r+0x90>
 8008406:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800840a:	9001      	str	r0, [sp, #4]
 800840c:	2b00      	cmp	r3, #0
 800840e:	f1a1 0404 	sub.w	r4, r1, #4
 8008412:	bfb8      	it	lt
 8008414:	18e4      	addlt	r4, r4, r3
 8008416:	f000 fa9b 	bl	8008950 <__malloc_lock>
 800841a:	4a1e      	ldr	r2, [pc, #120]	; (8008494 <_free_r+0x94>)
 800841c:	9801      	ldr	r0, [sp, #4]
 800841e:	6813      	ldr	r3, [r2, #0]
 8008420:	b933      	cbnz	r3, 8008430 <_free_r+0x30>
 8008422:	6063      	str	r3, [r4, #4]
 8008424:	6014      	str	r4, [r2, #0]
 8008426:	b003      	add	sp, #12
 8008428:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800842c:	f000 ba96 	b.w	800895c <__malloc_unlock>
 8008430:	42a3      	cmp	r3, r4
 8008432:	d908      	bls.n	8008446 <_free_r+0x46>
 8008434:	6825      	ldr	r5, [r4, #0]
 8008436:	1961      	adds	r1, r4, r5
 8008438:	428b      	cmp	r3, r1
 800843a:	bf01      	itttt	eq
 800843c:	6819      	ldreq	r1, [r3, #0]
 800843e:	685b      	ldreq	r3, [r3, #4]
 8008440:	1949      	addeq	r1, r1, r5
 8008442:	6021      	streq	r1, [r4, #0]
 8008444:	e7ed      	b.n	8008422 <_free_r+0x22>
 8008446:	461a      	mov	r2, r3
 8008448:	685b      	ldr	r3, [r3, #4]
 800844a:	b10b      	cbz	r3, 8008450 <_free_r+0x50>
 800844c:	42a3      	cmp	r3, r4
 800844e:	d9fa      	bls.n	8008446 <_free_r+0x46>
 8008450:	6811      	ldr	r1, [r2, #0]
 8008452:	1855      	adds	r5, r2, r1
 8008454:	42a5      	cmp	r5, r4
 8008456:	d10b      	bne.n	8008470 <_free_r+0x70>
 8008458:	6824      	ldr	r4, [r4, #0]
 800845a:	4421      	add	r1, r4
 800845c:	1854      	adds	r4, r2, r1
 800845e:	42a3      	cmp	r3, r4
 8008460:	6011      	str	r1, [r2, #0]
 8008462:	d1e0      	bne.n	8008426 <_free_r+0x26>
 8008464:	681c      	ldr	r4, [r3, #0]
 8008466:	685b      	ldr	r3, [r3, #4]
 8008468:	6053      	str	r3, [r2, #4]
 800846a:	4421      	add	r1, r4
 800846c:	6011      	str	r1, [r2, #0]
 800846e:	e7da      	b.n	8008426 <_free_r+0x26>
 8008470:	d902      	bls.n	8008478 <_free_r+0x78>
 8008472:	230c      	movs	r3, #12
 8008474:	6003      	str	r3, [r0, #0]
 8008476:	e7d6      	b.n	8008426 <_free_r+0x26>
 8008478:	6825      	ldr	r5, [r4, #0]
 800847a:	1961      	adds	r1, r4, r5
 800847c:	428b      	cmp	r3, r1
 800847e:	bf04      	itt	eq
 8008480:	6819      	ldreq	r1, [r3, #0]
 8008482:	685b      	ldreq	r3, [r3, #4]
 8008484:	6063      	str	r3, [r4, #4]
 8008486:	bf04      	itt	eq
 8008488:	1949      	addeq	r1, r1, r5
 800848a:	6021      	streq	r1, [r4, #0]
 800848c:	6054      	str	r4, [r2, #4]
 800848e:	e7ca      	b.n	8008426 <_free_r+0x26>
 8008490:	b003      	add	sp, #12
 8008492:	bd30      	pop	{r4, r5, pc}
 8008494:	20000388 	.word	0x20000388

08008498 <sbrk_aligned>:
 8008498:	b570      	push	{r4, r5, r6, lr}
 800849a:	4e0e      	ldr	r6, [pc, #56]	; (80084d4 <sbrk_aligned+0x3c>)
 800849c:	460c      	mov	r4, r1
 800849e:	6831      	ldr	r1, [r6, #0]
 80084a0:	4605      	mov	r5, r0
 80084a2:	b911      	cbnz	r1, 80084aa <sbrk_aligned+0x12>
 80084a4:	f000 f9e8 	bl	8008878 <_sbrk_r>
 80084a8:	6030      	str	r0, [r6, #0]
 80084aa:	4621      	mov	r1, r4
 80084ac:	4628      	mov	r0, r5
 80084ae:	f000 f9e3 	bl	8008878 <_sbrk_r>
 80084b2:	1c43      	adds	r3, r0, #1
 80084b4:	d00a      	beq.n	80084cc <sbrk_aligned+0x34>
 80084b6:	1cc4      	adds	r4, r0, #3
 80084b8:	f024 0403 	bic.w	r4, r4, #3
 80084bc:	42a0      	cmp	r0, r4
 80084be:	d007      	beq.n	80084d0 <sbrk_aligned+0x38>
 80084c0:	1a21      	subs	r1, r4, r0
 80084c2:	4628      	mov	r0, r5
 80084c4:	f000 f9d8 	bl	8008878 <_sbrk_r>
 80084c8:	3001      	adds	r0, #1
 80084ca:	d101      	bne.n	80084d0 <sbrk_aligned+0x38>
 80084cc:	f04f 34ff 	mov.w	r4, #4294967295
 80084d0:	4620      	mov	r0, r4
 80084d2:	bd70      	pop	{r4, r5, r6, pc}
 80084d4:	2000038c 	.word	0x2000038c

080084d8 <_malloc_r>:
 80084d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084dc:	1ccd      	adds	r5, r1, #3
 80084de:	f025 0503 	bic.w	r5, r5, #3
 80084e2:	3508      	adds	r5, #8
 80084e4:	2d0c      	cmp	r5, #12
 80084e6:	bf38      	it	cc
 80084e8:	250c      	movcc	r5, #12
 80084ea:	2d00      	cmp	r5, #0
 80084ec:	4607      	mov	r7, r0
 80084ee:	db01      	blt.n	80084f4 <_malloc_r+0x1c>
 80084f0:	42a9      	cmp	r1, r5
 80084f2:	d905      	bls.n	8008500 <_malloc_r+0x28>
 80084f4:	230c      	movs	r3, #12
 80084f6:	603b      	str	r3, [r7, #0]
 80084f8:	2600      	movs	r6, #0
 80084fa:	4630      	mov	r0, r6
 80084fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008500:	4e2e      	ldr	r6, [pc, #184]	; (80085bc <_malloc_r+0xe4>)
 8008502:	f000 fa25 	bl	8008950 <__malloc_lock>
 8008506:	6833      	ldr	r3, [r6, #0]
 8008508:	461c      	mov	r4, r3
 800850a:	bb34      	cbnz	r4, 800855a <_malloc_r+0x82>
 800850c:	4629      	mov	r1, r5
 800850e:	4638      	mov	r0, r7
 8008510:	f7ff ffc2 	bl	8008498 <sbrk_aligned>
 8008514:	1c43      	adds	r3, r0, #1
 8008516:	4604      	mov	r4, r0
 8008518:	d14d      	bne.n	80085b6 <_malloc_r+0xde>
 800851a:	6834      	ldr	r4, [r6, #0]
 800851c:	4626      	mov	r6, r4
 800851e:	2e00      	cmp	r6, #0
 8008520:	d140      	bne.n	80085a4 <_malloc_r+0xcc>
 8008522:	6823      	ldr	r3, [r4, #0]
 8008524:	4631      	mov	r1, r6
 8008526:	4638      	mov	r0, r7
 8008528:	eb04 0803 	add.w	r8, r4, r3
 800852c:	f000 f9a4 	bl	8008878 <_sbrk_r>
 8008530:	4580      	cmp	r8, r0
 8008532:	d13a      	bne.n	80085aa <_malloc_r+0xd2>
 8008534:	6821      	ldr	r1, [r4, #0]
 8008536:	3503      	adds	r5, #3
 8008538:	1a6d      	subs	r5, r5, r1
 800853a:	f025 0503 	bic.w	r5, r5, #3
 800853e:	3508      	adds	r5, #8
 8008540:	2d0c      	cmp	r5, #12
 8008542:	bf38      	it	cc
 8008544:	250c      	movcc	r5, #12
 8008546:	4629      	mov	r1, r5
 8008548:	4638      	mov	r0, r7
 800854a:	f7ff ffa5 	bl	8008498 <sbrk_aligned>
 800854e:	3001      	adds	r0, #1
 8008550:	d02b      	beq.n	80085aa <_malloc_r+0xd2>
 8008552:	6823      	ldr	r3, [r4, #0]
 8008554:	442b      	add	r3, r5
 8008556:	6023      	str	r3, [r4, #0]
 8008558:	e00e      	b.n	8008578 <_malloc_r+0xa0>
 800855a:	6822      	ldr	r2, [r4, #0]
 800855c:	1b52      	subs	r2, r2, r5
 800855e:	d41e      	bmi.n	800859e <_malloc_r+0xc6>
 8008560:	2a0b      	cmp	r2, #11
 8008562:	d916      	bls.n	8008592 <_malloc_r+0xba>
 8008564:	1961      	adds	r1, r4, r5
 8008566:	42a3      	cmp	r3, r4
 8008568:	6025      	str	r5, [r4, #0]
 800856a:	bf18      	it	ne
 800856c:	6059      	strne	r1, [r3, #4]
 800856e:	6863      	ldr	r3, [r4, #4]
 8008570:	bf08      	it	eq
 8008572:	6031      	streq	r1, [r6, #0]
 8008574:	5162      	str	r2, [r4, r5]
 8008576:	604b      	str	r3, [r1, #4]
 8008578:	4638      	mov	r0, r7
 800857a:	f104 060b 	add.w	r6, r4, #11
 800857e:	f000 f9ed 	bl	800895c <__malloc_unlock>
 8008582:	f026 0607 	bic.w	r6, r6, #7
 8008586:	1d23      	adds	r3, r4, #4
 8008588:	1af2      	subs	r2, r6, r3
 800858a:	d0b6      	beq.n	80084fa <_malloc_r+0x22>
 800858c:	1b9b      	subs	r3, r3, r6
 800858e:	50a3      	str	r3, [r4, r2]
 8008590:	e7b3      	b.n	80084fa <_malloc_r+0x22>
 8008592:	6862      	ldr	r2, [r4, #4]
 8008594:	42a3      	cmp	r3, r4
 8008596:	bf0c      	ite	eq
 8008598:	6032      	streq	r2, [r6, #0]
 800859a:	605a      	strne	r2, [r3, #4]
 800859c:	e7ec      	b.n	8008578 <_malloc_r+0xa0>
 800859e:	4623      	mov	r3, r4
 80085a0:	6864      	ldr	r4, [r4, #4]
 80085a2:	e7b2      	b.n	800850a <_malloc_r+0x32>
 80085a4:	4634      	mov	r4, r6
 80085a6:	6876      	ldr	r6, [r6, #4]
 80085a8:	e7b9      	b.n	800851e <_malloc_r+0x46>
 80085aa:	230c      	movs	r3, #12
 80085ac:	603b      	str	r3, [r7, #0]
 80085ae:	4638      	mov	r0, r7
 80085b0:	f000 f9d4 	bl	800895c <__malloc_unlock>
 80085b4:	e7a1      	b.n	80084fa <_malloc_r+0x22>
 80085b6:	6025      	str	r5, [r4, #0]
 80085b8:	e7de      	b.n	8008578 <_malloc_r+0xa0>
 80085ba:	bf00      	nop
 80085bc:	20000388 	.word	0x20000388

080085c0 <__ssputs_r>:
 80085c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085c4:	688e      	ldr	r6, [r1, #8]
 80085c6:	429e      	cmp	r6, r3
 80085c8:	4682      	mov	sl, r0
 80085ca:	460c      	mov	r4, r1
 80085cc:	4690      	mov	r8, r2
 80085ce:	461f      	mov	r7, r3
 80085d0:	d838      	bhi.n	8008644 <__ssputs_r+0x84>
 80085d2:	898a      	ldrh	r2, [r1, #12]
 80085d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80085d8:	d032      	beq.n	8008640 <__ssputs_r+0x80>
 80085da:	6825      	ldr	r5, [r4, #0]
 80085dc:	6909      	ldr	r1, [r1, #16]
 80085de:	eba5 0901 	sub.w	r9, r5, r1
 80085e2:	6965      	ldr	r5, [r4, #20]
 80085e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80085e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80085ec:	3301      	adds	r3, #1
 80085ee:	444b      	add	r3, r9
 80085f0:	106d      	asrs	r5, r5, #1
 80085f2:	429d      	cmp	r5, r3
 80085f4:	bf38      	it	cc
 80085f6:	461d      	movcc	r5, r3
 80085f8:	0553      	lsls	r3, r2, #21
 80085fa:	d531      	bpl.n	8008660 <__ssputs_r+0xa0>
 80085fc:	4629      	mov	r1, r5
 80085fe:	f7ff ff6b 	bl	80084d8 <_malloc_r>
 8008602:	4606      	mov	r6, r0
 8008604:	b950      	cbnz	r0, 800861c <__ssputs_r+0x5c>
 8008606:	230c      	movs	r3, #12
 8008608:	f8ca 3000 	str.w	r3, [sl]
 800860c:	89a3      	ldrh	r3, [r4, #12]
 800860e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008612:	81a3      	strh	r3, [r4, #12]
 8008614:	f04f 30ff 	mov.w	r0, #4294967295
 8008618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800861c:	6921      	ldr	r1, [r4, #16]
 800861e:	464a      	mov	r2, r9
 8008620:	f7fe f82e 	bl	8006680 <memcpy>
 8008624:	89a3      	ldrh	r3, [r4, #12]
 8008626:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800862a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800862e:	81a3      	strh	r3, [r4, #12]
 8008630:	6126      	str	r6, [r4, #16]
 8008632:	6165      	str	r5, [r4, #20]
 8008634:	444e      	add	r6, r9
 8008636:	eba5 0509 	sub.w	r5, r5, r9
 800863a:	6026      	str	r6, [r4, #0]
 800863c:	60a5      	str	r5, [r4, #8]
 800863e:	463e      	mov	r6, r7
 8008640:	42be      	cmp	r6, r7
 8008642:	d900      	bls.n	8008646 <__ssputs_r+0x86>
 8008644:	463e      	mov	r6, r7
 8008646:	6820      	ldr	r0, [r4, #0]
 8008648:	4632      	mov	r2, r6
 800864a:	4641      	mov	r1, r8
 800864c:	f000 f966 	bl	800891c <memmove>
 8008650:	68a3      	ldr	r3, [r4, #8]
 8008652:	1b9b      	subs	r3, r3, r6
 8008654:	60a3      	str	r3, [r4, #8]
 8008656:	6823      	ldr	r3, [r4, #0]
 8008658:	4433      	add	r3, r6
 800865a:	6023      	str	r3, [r4, #0]
 800865c:	2000      	movs	r0, #0
 800865e:	e7db      	b.n	8008618 <__ssputs_r+0x58>
 8008660:	462a      	mov	r2, r5
 8008662:	f000 f981 	bl	8008968 <_realloc_r>
 8008666:	4606      	mov	r6, r0
 8008668:	2800      	cmp	r0, #0
 800866a:	d1e1      	bne.n	8008630 <__ssputs_r+0x70>
 800866c:	6921      	ldr	r1, [r4, #16]
 800866e:	4650      	mov	r0, sl
 8008670:	f7ff fec6 	bl	8008400 <_free_r>
 8008674:	e7c7      	b.n	8008606 <__ssputs_r+0x46>
	...

08008678 <_svfiprintf_r>:
 8008678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800867c:	4698      	mov	r8, r3
 800867e:	898b      	ldrh	r3, [r1, #12]
 8008680:	061b      	lsls	r3, r3, #24
 8008682:	b09d      	sub	sp, #116	; 0x74
 8008684:	4607      	mov	r7, r0
 8008686:	460d      	mov	r5, r1
 8008688:	4614      	mov	r4, r2
 800868a:	d50e      	bpl.n	80086aa <_svfiprintf_r+0x32>
 800868c:	690b      	ldr	r3, [r1, #16]
 800868e:	b963      	cbnz	r3, 80086aa <_svfiprintf_r+0x32>
 8008690:	2140      	movs	r1, #64	; 0x40
 8008692:	f7ff ff21 	bl	80084d8 <_malloc_r>
 8008696:	6028      	str	r0, [r5, #0]
 8008698:	6128      	str	r0, [r5, #16]
 800869a:	b920      	cbnz	r0, 80086a6 <_svfiprintf_r+0x2e>
 800869c:	230c      	movs	r3, #12
 800869e:	603b      	str	r3, [r7, #0]
 80086a0:	f04f 30ff 	mov.w	r0, #4294967295
 80086a4:	e0d1      	b.n	800884a <_svfiprintf_r+0x1d2>
 80086a6:	2340      	movs	r3, #64	; 0x40
 80086a8:	616b      	str	r3, [r5, #20]
 80086aa:	2300      	movs	r3, #0
 80086ac:	9309      	str	r3, [sp, #36]	; 0x24
 80086ae:	2320      	movs	r3, #32
 80086b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80086b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80086b8:	2330      	movs	r3, #48	; 0x30
 80086ba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008864 <_svfiprintf_r+0x1ec>
 80086be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80086c2:	f04f 0901 	mov.w	r9, #1
 80086c6:	4623      	mov	r3, r4
 80086c8:	469a      	mov	sl, r3
 80086ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086ce:	b10a      	cbz	r2, 80086d4 <_svfiprintf_r+0x5c>
 80086d0:	2a25      	cmp	r2, #37	; 0x25
 80086d2:	d1f9      	bne.n	80086c8 <_svfiprintf_r+0x50>
 80086d4:	ebba 0b04 	subs.w	fp, sl, r4
 80086d8:	d00b      	beq.n	80086f2 <_svfiprintf_r+0x7a>
 80086da:	465b      	mov	r3, fp
 80086dc:	4622      	mov	r2, r4
 80086de:	4629      	mov	r1, r5
 80086e0:	4638      	mov	r0, r7
 80086e2:	f7ff ff6d 	bl	80085c0 <__ssputs_r>
 80086e6:	3001      	adds	r0, #1
 80086e8:	f000 80aa 	beq.w	8008840 <_svfiprintf_r+0x1c8>
 80086ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80086ee:	445a      	add	r2, fp
 80086f0:	9209      	str	r2, [sp, #36]	; 0x24
 80086f2:	f89a 3000 	ldrb.w	r3, [sl]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	f000 80a2 	beq.w	8008840 <_svfiprintf_r+0x1c8>
 80086fc:	2300      	movs	r3, #0
 80086fe:	f04f 32ff 	mov.w	r2, #4294967295
 8008702:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008706:	f10a 0a01 	add.w	sl, sl, #1
 800870a:	9304      	str	r3, [sp, #16]
 800870c:	9307      	str	r3, [sp, #28]
 800870e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008712:	931a      	str	r3, [sp, #104]	; 0x68
 8008714:	4654      	mov	r4, sl
 8008716:	2205      	movs	r2, #5
 8008718:	f814 1b01 	ldrb.w	r1, [r4], #1
 800871c:	4851      	ldr	r0, [pc, #324]	; (8008864 <_svfiprintf_r+0x1ec>)
 800871e:	f7f7 fd5f 	bl	80001e0 <memchr>
 8008722:	9a04      	ldr	r2, [sp, #16]
 8008724:	b9d8      	cbnz	r0, 800875e <_svfiprintf_r+0xe6>
 8008726:	06d0      	lsls	r0, r2, #27
 8008728:	bf44      	itt	mi
 800872a:	2320      	movmi	r3, #32
 800872c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008730:	0711      	lsls	r1, r2, #28
 8008732:	bf44      	itt	mi
 8008734:	232b      	movmi	r3, #43	; 0x2b
 8008736:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800873a:	f89a 3000 	ldrb.w	r3, [sl]
 800873e:	2b2a      	cmp	r3, #42	; 0x2a
 8008740:	d015      	beq.n	800876e <_svfiprintf_r+0xf6>
 8008742:	9a07      	ldr	r2, [sp, #28]
 8008744:	4654      	mov	r4, sl
 8008746:	2000      	movs	r0, #0
 8008748:	f04f 0c0a 	mov.w	ip, #10
 800874c:	4621      	mov	r1, r4
 800874e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008752:	3b30      	subs	r3, #48	; 0x30
 8008754:	2b09      	cmp	r3, #9
 8008756:	d94e      	bls.n	80087f6 <_svfiprintf_r+0x17e>
 8008758:	b1b0      	cbz	r0, 8008788 <_svfiprintf_r+0x110>
 800875a:	9207      	str	r2, [sp, #28]
 800875c:	e014      	b.n	8008788 <_svfiprintf_r+0x110>
 800875e:	eba0 0308 	sub.w	r3, r0, r8
 8008762:	fa09 f303 	lsl.w	r3, r9, r3
 8008766:	4313      	orrs	r3, r2
 8008768:	9304      	str	r3, [sp, #16]
 800876a:	46a2      	mov	sl, r4
 800876c:	e7d2      	b.n	8008714 <_svfiprintf_r+0x9c>
 800876e:	9b03      	ldr	r3, [sp, #12]
 8008770:	1d19      	adds	r1, r3, #4
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	9103      	str	r1, [sp, #12]
 8008776:	2b00      	cmp	r3, #0
 8008778:	bfbb      	ittet	lt
 800877a:	425b      	neglt	r3, r3
 800877c:	f042 0202 	orrlt.w	r2, r2, #2
 8008780:	9307      	strge	r3, [sp, #28]
 8008782:	9307      	strlt	r3, [sp, #28]
 8008784:	bfb8      	it	lt
 8008786:	9204      	strlt	r2, [sp, #16]
 8008788:	7823      	ldrb	r3, [r4, #0]
 800878a:	2b2e      	cmp	r3, #46	; 0x2e
 800878c:	d10c      	bne.n	80087a8 <_svfiprintf_r+0x130>
 800878e:	7863      	ldrb	r3, [r4, #1]
 8008790:	2b2a      	cmp	r3, #42	; 0x2a
 8008792:	d135      	bne.n	8008800 <_svfiprintf_r+0x188>
 8008794:	9b03      	ldr	r3, [sp, #12]
 8008796:	1d1a      	adds	r2, r3, #4
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	9203      	str	r2, [sp, #12]
 800879c:	2b00      	cmp	r3, #0
 800879e:	bfb8      	it	lt
 80087a0:	f04f 33ff 	movlt.w	r3, #4294967295
 80087a4:	3402      	adds	r4, #2
 80087a6:	9305      	str	r3, [sp, #20]
 80087a8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008874 <_svfiprintf_r+0x1fc>
 80087ac:	7821      	ldrb	r1, [r4, #0]
 80087ae:	2203      	movs	r2, #3
 80087b0:	4650      	mov	r0, sl
 80087b2:	f7f7 fd15 	bl	80001e0 <memchr>
 80087b6:	b140      	cbz	r0, 80087ca <_svfiprintf_r+0x152>
 80087b8:	2340      	movs	r3, #64	; 0x40
 80087ba:	eba0 000a 	sub.w	r0, r0, sl
 80087be:	fa03 f000 	lsl.w	r0, r3, r0
 80087c2:	9b04      	ldr	r3, [sp, #16]
 80087c4:	4303      	orrs	r3, r0
 80087c6:	3401      	adds	r4, #1
 80087c8:	9304      	str	r3, [sp, #16]
 80087ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087ce:	4826      	ldr	r0, [pc, #152]	; (8008868 <_svfiprintf_r+0x1f0>)
 80087d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80087d4:	2206      	movs	r2, #6
 80087d6:	f7f7 fd03 	bl	80001e0 <memchr>
 80087da:	2800      	cmp	r0, #0
 80087dc:	d038      	beq.n	8008850 <_svfiprintf_r+0x1d8>
 80087de:	4b23      	ldr	r3, [pc, #140]	; (800886c <_svfiprintf_r+0x1f4>)
 80087e0:	bb1b      	cbnz	r3, 800882a <_svfiprintf_r+0x1b2>
 80087e2:	9b03      	ldr	r3, [sp, #12]
 80087e4:	3307      	adds	r3, #7
 80087e6:	f023 0307 	bic.w	r3, r3, #7
 80087ea:	3308      	adds	r3, #8
 80087ec:	9303      	str	r3, [sp, #12]
 80087ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087f0:	4433      	add	r3, r6
 80087f2:	9309      	str	r3, [sp, #36]	; 0x24
 80087f4:	e767      	b.n	80086c6 <_svfiprintf_r+0x4e>
 80087f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80087fa:	460c      	mov	r4, r1
 80087fc:	2001      	movs	r0, #1
 80087fe:	e7a5      	b.n	800874c <_svfiprintf_r+0xd4>
 8008800:	2300      	movs	r3, #0
 8008802:	3401      	adds	r4, #1
 8008804:	9305      	str	r3, [sp, #20]
 8008806:	4619      	mov	r1, r3
 8008808:	f04f 0c0a 	mov.w	ip, #10
 800880c:	4620      	mov	r0, r4
 800880e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008812:	3a30      	subs	r2, #48	; 0x30
 8008814:	2a09      	cmp	r2, #9
 8008816:	d903      	bls.n	8008820 <_svfiprintf_r+0x1a8>
 8008818:	2b00      	cmp	r3, #0
 800881a:	d0c5      	beq.n	80087a8 <_svfiprintf_r+0x130>
 800881c:	9105      	str	r1, [sp, #20]
 800881e:	e7c3      	b.n	80087a8 <_svfiprintf_r+0x130>
 8008820:	fb0c 2101 	mla	r1, ip, r1, r2
 8008824:	4604      	mov	r4, r0
 8008826:	2301      	movs	r3, #1
 8008828:	e7f0      	b.n	800880c <_svfiprintf_r+0x194>
 800882a:	ab03      	add	r3, sp, #12
 800882c:	9300      	str	r3, [sp, #0]
 800882e:	462a      	mov	r2, r5
 8008830:	4b0f      	ldr	r3, [pc, #60]	; (8008870 <_svfiprintf_r+0x1f8>)
 8008832:	a904      	add	r1, sp, #16
 8008834:	4638      	mov	r0, r7
 8008836:	f7fd ffd9 	bl	80067ec <_printf_float>
 800883a:	1c42      	adds	r2, r0, #1
 800883c:	4606      	mov	r6, r0
 800883e:	d1d6      	bne.n	80087ee <_svfiprintf_r+0x176>
 8008840:	89ab      	ldrh	r3, [r5, #12]
 8008842:	065b      	lsls	r3, r3, #25
 8008844:	f53f af2c 	bmi.w	80086a0 <_svfiprintf_r+0x28>
 8008848:	9809      	ldr	r0, [sp, #36]	; 0x24
 800884a:	b01d      	add	sp, #116	; 0x74
 800884c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008850:	ab03      	add	r3, sp, #12
 8008852:	9300      	str	r3, [sp, #0]
 8008854:	462a      	mov	r2, r5
 8008856:	4b06      	ldr	r3, [pc, #24]	; (8008870 <_svfiprintf_r+0x1f8>)
 8008858:	a904      	add	r1, sp, #16
 800885a:	4638      	mov	r0, r7
 800885c:	f7fe fa6a 	bl	8006d34 <_printf_i>
 8008860:	e7eb      	b.n	800883a <_svfiprintf_r+0x1c2>
 8008862:	bf00      	nop
 8008864:	0800ab1c 	.word	0x0800ab1c
 8008868:	0800ab26 	.word	0x0800ab26
 800886c:	080067ed 	.word	0x080067ed
 8008870:	080085c1 	.word	0x080085c1
 8008874:	0800ab22 	.word	0x0800ab22

08008878 <_sbrk_r>:
 8008878:	b538      	push	{r3, r4, r5, lr}
 800887a:	4d06      	ldr	r5, [pc, #24]	; (8008894 <_sbrk_r+0x1c>)
 800887c:	2300      	movs	r3, #0
 800887e:	4604      	mov	r4, r0
 8008880:	4608      	mov	r0, r1
 8008882:	602b      	str	r3, [r5, #0]
 8008884:	f7f9 fb0c 	bl	8001ea0 <_sbrk>
 8008888:	1c43      	adds	r3, r0, #1
 800888a:	d102      	bne.n	8008892 <_sbrk_r+0x1a>
 800888c:	682b      	ldr	r3, [r5, #0]
 800888e:	b103      	cbz	r3, 8008892 <_sbrk_r+0x1a>
 8008890:	6023      	str	r3, [r4, #0]
 8008892:	bd38      	pop	{r3, r4, r5, pc}
 8008894:	20000390 	.word	0x20000390

08008898 <__assert_func>:
 8008898:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800889a:	4614      	mov	r4, r2
 800889c:	461a      	mov	r2, r3
 800889e:	4b09      	ldr	r3, [pc, #36]	; (80088c4 <__assert_func+0x2c>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	4605      	mov	r5, r0
 80088a4:	68d8      	ldr	r0, [r3, #12]
 80088a6:	b14c      	cbz	r4, 80088bc <__assert_func+0x24>
 80088a8:	4b07      	ldr	r3, [pc, #28]	; (80088c8 <__assert_func+0x30>)
 80088aa:	9100      	str	r1, [sp, #0]
 80088ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80088b0:	4906      	ldr	r1, [pc, #24]	; (80088cc <__assert_func+0x34>)
 80088b2:	462b      	mov	r3, r5
 80088b4:	f000 f80e 	bl	80088d4 <fiprintf>
 80088b8:	f000 faac 	bl	8008e14 <abort>
 80088bc:	4b04      	ldr	r3, [pc, #16]	; (80088d0 <__assert_func+0x38>)
 80088be:	461c      	mov	r4, r3
 80088c0:	e7f3      	b.n	80088aa <__assert_func+0x12>
 80088c2:	bf00      	nop
 80088c4:	20000010 	.word	0x20000010
 80088c8:	0800ab2d 	.word	0x0800ab2d
 80088cc:	0800ab3a 	.word	0x0800ab3a
 80088d0:	0800ab68 	.word	0x0800ab68

080088d4 <fiprintf>:
 80088d4:	b40e      	push	{r1, r2, r3}
 80088d6:	b503      	push	{r0, r1, lr}
 80088d8:	4601      	mov	r1, r0
 80088da:	ab03      	add	r3, sp, #12
 80088dc:	4805      	ldr	r0, [pc, #20]	; (80088f4 <fiprintf+0x20>)
 80088de:	f853 2b04 	ldr.w	r2, [r3], #4
 80088e2:	6800      	ldr	r0, [r0, #0]
 80088e4:	9301      	str	r3, [sp, #4]
 80088e6:	f000 f897 	bl	8008a18 <_vfiprintf_r>
 80088ea:	b002      	add	sp, #8
 80088ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80088f0:	b003      	add	sp, #12
 80088f2:	4770      	bx	lr
 80088f4:	20000010 	.word	0x20000010

080088f8 <__ascii_mbtowc>:
 80088f8:	b082      	sub	sp, #8
 80088fa:	b901      	cbnz	r1, 80088fe <__ascii_mbtowc+0x6>
 80088fc:	a901      	add	r1, sp, #4
 80088fe:	b142      	cbz	r2, 8008912 <__ascii_mbtowc+0x1a>
 8008900:	b14b      	cbz	r3, 8008916 <__ascii_mbtowc+0x1e>
 8008902:	7813      	ldrb	r3, [r2, #0]
 8008904:	600b      	str	r3, [r1, #0]
 8008906:	7812      	ldrb	r2, [r2, #0]
 8008908:	1e10      	subs	r0, r2, #0
 800890a:	bf18      	it	ne
 800890c:	2001      	movne	r0, #1
 800890e:	b002      	add	sp, #8
 8008910:	4770      	bx	lr
 8008912:	4610      	mov	r0, r2
 8008914:	e7fb      	b.n	800890e <__ascii_mbtowc+0x16>
 8008916:	f06f 0001 	mvn.w	r0, #1
 800891a:	e7f8      	b.n	800890e <__ascii_mbtowc+0x16>

0800891c <memmove>:
 800891c:	4288      	cmp	r0, r1
 800891e:	b510      	push	{r4, lr}
 8008920:	eb01 0402 	add.w	r4, r1, r2
 8008924:	d902      	bls.n	800892c <memmove+0x10>
 8008926:	4284      	cmp	r4, r0
 8008928:	4623      	mov	r3, r4
 800892a:	d807      	bhi.n	800893c <memmove+0x20>
 800892c:	1e43      	subs	r3, r0, #1
 800892e:	42a1      	cmp	r1, r4
 8008930:	d008      	beq.n	8008944 <memmove+0x28>
 8008932:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008936:	f803 2f01 	strb.w	r2, [r3, #1]!
 800893a:	e7f8      	b.n	800892e <memmove+0x12>
 800893c:	4402      	add	r2, r0
 800893e:	4601      	mov	r1, r0
 8008940:	428a      	cmp	r2, r1
 8008942:	d100      	bne.n	8008946 <memmove+0x2a>
 8008944:	bd10      	pop	{r4, pc}
 8008946:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800894a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800894e:	e7f7      	b.n	8008940 <memmove+0x24>

08008950 <__malloc_lock>:
 8008950:	4801      	ldr	r0, [pc, #4]	; (8008958 <__malloc_lock+0x8>)
 8008952:	f000 bc1f 	b.w	8009194 <__retarget_lock_acquire_recursive>
 8008956:	bf00      	nop
 8008958:	20000394 	.word	0x20000394

0800895c <__malloc_unlock>:
 800895c:	4801      	ldr	r0, [pc, #4]	; (8008964 <__malloc_unlock+0x8>)
 800895e:	f000 bc1a 	b.w	8009196 <__retarget_lock_release_recursive>
 8008962:	bf00      	nop
 8008964:	20000394 	.word	0x20000394

08008968 <_realloc_r>:
 8008968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800896c:	4680      	mov	r8, r0
 800896e:	4614      	mov	r4, r2
 8008970:	460e      	mov	r6, r1
 8008972:	b921      	cbnz	r1, 800897e <_realloc_r+0x16>
 8008974:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008978:	4611      	mov	r1, r2
 800897a:	f7ff bdad 	b.w	80084d8 <_malloc_r>
 800897e:	b92a      	cbnz	r2, 800898c <_realloc_r+0x24>
 8008980:	f7ff fd3e 	bl	8008400 <_free_r>
 8008984:	4625      	mov	r5, r4
 8008986:	4628      	mov	r0, r5
 8008988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800898c:	f000 fc6a 	bl	8009264 <_malloc_usable_size_r>
 8008990:	4284      	cmp	r4, r0
 8008992:	4607      	mov	r7, r0
 8008994:	d802      	bhi.n	800899c <_realloc_r+0x34>
 8008996:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800899a:	d812      	bhi.n	80089c2 <_realloc_r+0x5a>
 800899c:	4621      	mov	r1, r4
 800899e:	4640      	mov	r0, r8
 80089a0:	f7ff fd9a 	bl	80084d8 <_malloc_r>
 80089a4:	4605      	mov	r5, r0
 80089a6:	2800      	cmp	r0, #0
 80089a8:	d0ed      	beq.n	8008986 <_realloc_r+0x1e>
 80089aa:	42bc      	cmp	r4, r7
 80089ac:	4622      	mov	r2, r4
 80089ae:	4631      	mov	r1, r6
 80089b0:	bf28      	it	cs
 80089b2:	463a      	movcs	r2, r7
 80089b4:	f7fd fe64 	bl	8006680 <memcpy>
 80089b8:	4631      	mov	r1, r6
 80089ba:	4640      	mov	r0, r8
 80089bc:	f7ff fd20 	bl	8008400 <_free_r>
 80089c0:	e7e1      	b.n	8008986 <_realloc_r+0x1e>
 80089c2:	4635      	mov	r5, r6
 80089c4:	e7df      	b.n	8008986 <_realloc_r+0x1e>

080089c6 <__sfputc_r>:
 80089c6:	6893      	ldr	r3, [r2, #8]
 80089c8:	3b01      	subs	r3, #1
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	b410      	push	{r4}
 80089ce:	6093      	str	r3, [r2, #8]
 80089d0:	da08      	bge.n	80089e4 <__sfputc_r+0x1e>
 80089d2:	6994      	ldr	r4, [r2, #24]
 80089d4:	42a3      	cmp	r3, r4
 80089d6:	db01      	blt.n	80089dc <__sfputc_r+0x16>
 80089d8:	290a      	cmp	r1, #10
 80089da:	d103      	bne.n	80089e4 <__sfputc_r+0x1e>
 80089dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80089e0:	f000 b94a 	b.w	8008c78 <__swbuf_r>
 80089e4:	6813      	ldr	r3, [r2, #0]
 80089e6:	1c58      	adds	r0, r3, #1
 80089e8:	6010      	str	r0, [r2, #0]
 80089ea:	7019      	strb	r1, [r3, #0]
 80089ec:	4608      	mov	r0, r1
 80089ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80089f2:	4770      	bx	lr

080089f4 <__sfputs_r>:
 80089f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089f6:	4606      	mov	r6, r0
 80089f8:	460f      	mov	r7, r1
 80089fa:	4614      	mov	r4, r2
 80089fc:	18d5      	adds	r5, r2, r3
 80089fe:	42ac      	cmp	r4, r5
 8008a00:	d101      	bne.n	8008a06 <__sfputs_r+0x12>
 8008a02:	2000      	movs	r0, #0
 8008a04:	e007      	b.n	8008a16 <__sfputs_r+0x22>
 8008a06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a0a:	463a      	mov	r2, r7
 8008a0c:	4630      	mov	r0, r6
 8008a0e:	f7ff ffda 	bl	80089c6 <__sfputc_r>
 8008a12:	1c43      	adds	r3, r0, #1
 8008a14:	d1f3      	bne.n	80089fe <__sfputs_r+0xa>
 8008a16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008a18 <_vfiprintf_r>:
 8008a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a1c:	460d      	mov	r5, r1
 8008a1e:	b09d      	sub	sp, #116	; 0x74
 8008a20:	4614      	mov	r4, r2
 8008a22:	4698      	mov	r8, r3
 8008a24:	4606      	mov	r6, r0
 8008a26:	b118      	cbz	r0, 8008a30 <_vfiprintf_r+0x18>
 8008a28:	6983      	ldr	r3, [r0, #24]
 8008a2a:	b90b      	cbnz	r3, 8008a30 <_vfiprintf_r+0x18>
 8008a2c:	f000 fb14 	bl	8009058 <__sinit>
 8008a30:	4b89      	ldr	r3, [pc, #548]	; (8008c58 <_vfiprintf_r+0x240>)
 8008a32:	429d      	cmp	r5, r3
 8008a34:	d11b      	bne.n	8008a6e <_vfiprintf_r+0x56>
 8008a36:	6875      	ldr	r5, [r6, #4]
 8008a38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a3a:	07d9      	lsls	r1, r3, #31
 8008a3c:	d405      	bmi.n	8008a4a <_vfiprintf_r+0x32>
 8008a3e:	89ab      	ldrh	r3, [r5, #12]
 8008a40:	059a      	lsls	r2, r3, #22
 8008a42:	d402      	bmi.n	8008a4a <_vfiprintf_r+0x32>
 8008a44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a46:	f000 fba5 	bl	8009194 <__retarget_lock_acquire_recursive>
 8008a4a:	89ab      	ldrh	r3, [r5, #12]
 8008a4c:	071b      	lsls	r3, r3, #28
 8008a4e:	d501      	bpl.n	8008a54 <_vfiprintf_r+0x3c>
 8008a50:	692b      	ldr	r3, [r5, #16]
 8008a52:	b9eb      	cbnz	r3, 8008a90 <_vfiprintf_r+0x78>
 8008a54:	4629      	mov	r1, r5
 8008a56:	4630      	mov	r0, r6
 8008a58:	f000 f96e 	bl	8008d38 <__swsetup_r>
 8008a5c:	b1c0      	cbz	r0, 8008a90 <_vfiprintf_r+0x78>
 8008a5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a60:	07dc      	lsls	r4, r3, #31
 8008a62:	d50e      	bpl.n	8008a82 <_vfiprintf_r+0x6a>
 8008a64:	f04f 30ff 	mov.w	r0, #4294967295
 8008a68:	b01d      	add	sp, #116	; 0x74
 8008a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a6e:	4b7b      	ldr	r3, [pc, #492]	; (8008c5c <_vfiprintf_r+0x244>)
 8008a70:	429d      	cmp	r5, r3
 8008a72:	d101      	bne.n	8008a78 <_vfiprintf_r+0x60>
 8008a74:	68b5      	ldr	r5, [r6, #8]
 8008a76:	e7df      	b.n	8008a38 <_vfiprintf_r+0x20>
 8008a78:	4b79      	ldr	r3, [pc, #484]	; (8008c60 <_vfiprintf_r+0x248>)
 8008a7a:	429d      	cmp	r5, r3
 8008a7c:	bf08      	it	eq
 8008a7e:	68f5      	ldreq	r5, [r6, #12]
 8008a80:	e7da      	b.n	8008a38 <_vfiprintf_r+0x20>
 8008a82:	89ab      	ldrh	r3, [r5, #12]
 8008a84:	0598      	lsls	r0, r3, #22
 8008a86:	d4ed      	bmi.n	8008a64 <_vfiprintf_r+0x4c>
 8008a88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a8a:	f000 fb84 	bl	8009196 <__retarget_lock_release_recursive>
 8008a8e:	e7e9      	b.n	8008a64 <_vfiprintf_r+0x4c>
 8008a90:	2300      	movs	r3, #0
 8008a92:	9309      	str	r3, [sp, #36]	; 0x24
 8008a94:	2320      	movs	r3, #32
 8008a96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008a9a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a9e:	2330      	movs	r3, #48	; 0x30
 8008aa0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008c64 <_vfiprintf_r+0x24c>
 8008aa4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008aa8:	f04f 0901 	mov.w	r9, #1
 8008aac:	4623      	mov	r3, r4
 8008aae:	469a      	mov	sl, r3
 8008ab0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ab4:	b10a      	cbz	r2, 8008aba <_vfiprintf_r+0xa2>
 8008ab6:	2a25      	cmp	r2, #37	; 0x25
 8008ab8:	d1f9      	bne.n	8008aae <_vfiprintf_r+0x96>
 8008aba:	ebba 0b04 	subs.w	fp, sl, r4
 8008abe:	d00b      	beq.n	8008ad8 <_vfiprintf_r+0xc0>
 8008ac0:	465b      	mov	r3, fp
 8008ac2:	4622      	mov	r2, r4
 8008ac4:	4629      	mov	r1, r5
 8008ac6:	4630      	mov	r0, r6
 8008ac8:	f7ff ff94 	bl	80089f4 <__sfputs_r>
 8008acc:	3001      	adds	r0, #1
 8008ace:	f000 80aa 	beq.w	8008c26 <_vfiprintf_r+0x20e>
 8008ad2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ad4:	445a      	add	r2, fp
 8008ad6:	9209      	str	r2, [sp, #36]	; 0x24
 8008ad8:	f89a 3000 	ldrb.w	r3, [sl]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	f000 80a2 	beq.w	8008c26 <_vfiprintf_r+0x20e>
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8008ae8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008aec:	f10a 0a01 	add.w	sl, sl, #1
 8008af0:	9304      	str	r3, [sp, #16]
 8008af2:	9307      	str	r3, [sp, #28]
 8008af4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008af8:	931a      	str	r3, [sp, #104]	; 0x68
 8008afa:	4654      	mov	r4, sl
 8008afc:	2205      	movs	r2, #5
 8008afe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b02:	4858      	ldr	r0, [pc, #352]	; (8008c64 <_vfiprintf_r+0x24c>)
 8008b04:	f7f7 fb6c 	bl	80001e0 <memchr>
 8008b08:	9a04      	ldr	r2, [sp, #16]
 8008b0a:	b9d8      	cbnz	r0, 8008b44 <_vfiprintf_r+0x12c>
 8008b0c:	06d1      	lsls	r1, r2, #27
 8008b0e:	bf44      	itt	mi
 8008b10:	2320      	movmi	r3, #32
 8008b12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b16:	0713      	lsls	r3, r2, #28
 8008b18:	bf44      	itt	mi
 8008b1a:	232b      	movmi	r3, #43	; 0x2b
 8008b1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b20:	f89a 3000 	ldrb.w	r3, [sl]
 8008b24:	2b2a      	cmp	r3, #42	; 0x2a
 8008b26:	d015      	beq.n	8008b54 <_vfiprintf_r+0x13c>
 8008b28:	9a07      	ldr	r2, [sp, #28]
 8008b2a:	4654      	mov	r4, sl
 8008b2c:	2000      	movs	r0, #0
 8008b2e:	f04f 0c0a 	mov.w	ip, #10
 8008b32:	4621      	mov	r1, r4
 8008b34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b38:	3b30      	subs	r3, #48	; 0x30
 8008b3a:	2b09      	cmp	r3, #9
 8008b3c:	d94e      	bls.n	8008bdc <_vfiprintf_r+0x1c4>
 8008b3e:	b1b0      	cbz	r0, 8008b6e <_vfiprintf_r+0x156>
 8008b40:	9207      	str	r2, [sp, #28]
 8008b42:	e014      	b.n	8008b6e <_vfiprintf_r+0x156>
 8008b44:	eba0 0308 	sub.w	r3, r0, r8
 8008b48:	fa09 f303 	lsl.w	r3, r9, r3
 8008b4c:	4313      	orrs	r3, r2
 8008b4e:	9304      	str	r3, [sp, #16]
 8008b50:	46a2      	mov	sl, r4
 8008b52:	e7d2      	b.n	8008afa <_vfiprintf_r+0xe2>
 8008b54:	9b03      	ldr	r3, [sp, #12]
 8008b56:	1d19      	adds	r1, r3, #4
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	9103      	str	r1, [sp, #12]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	bfbb      	ittet	lt
 8008b60:	425b      	neglt	r3, r3
 8008b62:	f042 0202 	orrlt.w	r2, r2, #2
 8008b66:	9307      	strge	r3, [sp, #28]
 8008b68:	9307      	strlt	r3, [sp, #28]
 8008b6a:	bfb8      	it	lt
 8008b6c:	9204      	strlt	r2, [sp, #16]
 8008b6e:	7823      	ldrb	r3, [r4, #0]
 8008b70:	2b2e      	cmp	r3, #46	; 0x2e
 8008b72:	d10c      	bne.n	8008b8e <_vfiprintf_r+0x176>
 8008b74:	7863      	ldrb	r3, [r4, #1]
 8008b76:	2b2a      	cmp	r3, #42	; 0x2a
 8008b78:	d135      	bne.n	8008be6 <_vfiprintf_r+0x1ce>
 8008b7a:	9b03      	ldr	r3, [sp, #12]
 8008b7c:	1d1a      	adds	r2, r3, #4
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	9203      	str	r2, [sp, #12]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	bfb8      	it	lt
 8008b86:	f04f 33ff 	movlt.w	r3, #4294967295
 8008b8a:	3402      	adds	r4, #2
 8008b8c:	9305      	str	r3, [sp, #20]
 8008b8e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008c74 <_vfiprintf_r+0x25c>
 8008b92:	7821      	ldrb	r1, [r4, #0]
 8008b94:	2203      	movs	r2, #3
 8008b96:	4650      	mov	r0, sl
 8008b98:	f7f7 fb22 	bl	80001e0 <memchr>
 8008b9c:	b140      	cbz	r0, 8008bb0 <_vfiprintf_r+0x198>
 8008b9e:	2340      	movs	r3, #64	; 0x40
 8008ba0:	eba0 000a 	sub.w	r0, r0, sl
 8008ba4:	fa03 f000 	lsl.w	r0, r3, r0
 8008ba8:	9b04      	ldr	r3, [sp, #16]
 8008baa:	4303      	orrs	r3, r0
 8008bac:	3401      	adds	r4, #1
 8008bae:	9304      	str	r3, [sp, #16]
 8008bb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bb4:	482c      	ldr	r0, [pc, #176]	; (8008c68 <_vfiprintf_r+0x250>)
 8008bb6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008bba:	2206      	movs	r2, #6
 8008bbc:	f7f7 fb10 	bl	80001e0 <memchr>
 8008bc0:	2800      	cmp	r0, #0
 8008bc2:	d03f      	beq.n	8008c44 <_vfiprintf_r+0x22c>
 8008bc4:	4b29      	ldr	r3, [pc, #164]	; (8008c6c <_vfiprintf_r+0x254>)
 8008bc6:	bb1b      	cbnz	r3, 8008c10 <_vfiprintf_r+0x1f8>
 8008bc8:	9b03      	ldr	r3, [sp, #12]
 8008bca:	3307      	adds	r3, #7
 8008bcc:	f023 0307 	bic.w	r3, r3, #7
 8008bd0:	3308      	adds	r3, #8
 8008bd2:	9303      	str	r3, [sp, #12]
 8008bd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bd6:	443b      	add	r3, r7
 8008bd8:	9309      	str	r3, [sp, #36]	; 0x24
 8008bda:	e767      	b.n	8008aac <_vfiprintf_r+0x94>
 8008bdc:	fb0c 3202 	mla	r2, ip, r2, r3
 8008be0:	460c      	mov	r4, r1
 8008be2:	2001      	movs	r0, #1
 8008be4:	e7a5      	b.n	8008b32 <_vfiprintf_r+0x11a>
 8008be6:	2300      	movs	r3, #0
 8008be8:	3401      	adds	r4, #1
 8008bea:	9305      	str	r3, [sp, #20]
 8008bec:	4619      	mov	r1, r3
 8008bee:	f04f 0c0a 	mov.w	ip, #10
 8008bf2:	4620      	mov	r0, r4
 8008bf4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008bf8:	3a30      	subs	r2, #48	; 0x30
 8008bfa:	2a09      	cmp	r2, #9
 8008bfc:	d903      	bls.n	8008c06 <_vfiprintf_r+0x1ee>
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d0c5      	beq.n	8008b8e <_vfiprintf_r+0x176>
 8008c02:	9105      	str	r1, [sp, #20]
 8008c04:	e7c3      	b.n	8008b8e <_vfiprintf_r+0x176>
 8008c06:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c0a:	4604      	mov	r4, r0
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	e7f0      	b.n	8008bf2 <_vfiprintf_r+0x1da>
 8008c10:	ab03      	add	r3, sp, #12
 8008c12:	9300      	str	r3, [sp, #0]
 8008c14:	462a      	mov	r2, r5
 8008c16:	4b16      	ldr	r3, [pc, #88]	; (8008c70 <_vfiprintf_r+0x258>)
 8008c18:	a904      	add	r1, sp, #16
 8008c1a:	4630      	mov	r0, r6
 8008c1c:	f7fd fde6 	bl	80067ec <_printf_float>
 8008c20:	4607      	mov	r7, r0
 8008c22:	1c78      	adds	r0, r7, #1
 8008c24:	d1d6      	bne.n	8008bd4 <_vfiprintf_r+0x1bc>
 8008c26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c28:	07d9      	lsls	r1, r3, #31
 8008c2a:	d405      	bmi.n	8008c38 <_vfiprintf_r+0x220>
 8008c2c:	89ab      	ldrh	r3, [r5, #12]
 8008c2e:	059a      	lsls	r2, r3, #22
 8008c30:	d402      	bmi.n	8008c38 <_vfiprintf_r+0x220>
 8008c32:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c34:	f000 faaf 	bl	8009196 <__retarget_lock_release_recursive>
 8008c38:	89ab      	ldrh	r3, [r5, #12]
 8008c3a:	065b      	lsls	r3, r3, #25
 8008c3c:	f53f af12 	bmi.w	8008a64 <_vfiprintf_r+0x4c>
 8008c40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c42:	e711      	b.n	8008a68 <_vfiprintf_r+0x50>
 8008c44:	ab03      	add	r3, sp, #12
 8008c46:	9300      	str	r3, [sp, #0]
 8008c48:	462a      	mov	r2, r5
 8008c4a:	4b09      	ldr	r3, [pc, #36]	; (8008c70 <_vfiprintf_r+0x258>)
 8008c4c:	a904      	add	r1, sp, #16
 8008c4e:	4630      	mov	r0, r6
 8008c50:	f7fe f870 	bl	8006d34 <_printf_i>
 8008c54:	e7e4      	b.n	8008c20 <_vfiprintf_r+0x208>
 8008c56:	bf00      	nop
 8008c58:	0800ac94 	.word	0x0800ac94
 8008c5c:	0800acb4 	.word	0x0800acb4
 8008c60:	0800ac74 	.word	0x0800ac74
 8008c64:	0800ab1c 	.word	0x0800ab1c
 8008c68:	0800ab26 	.word	0x0800ab26
 8008c6c:	080067ed 	.word	0x080067ed
 8008c70:	080089f5 	.word	0x080089f5
 8008c74:	0800ab22 	.word	0x0800ab22

08008c78 <__swbuf_r>:
 8008c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c7a:	460e      	mov	r6, r1
 8008c7c:	4614      	mov	r4, r2
 8008c7e:	4605      	mov	r5, r0
 8008c80:	b118      	cbz	r0, 8008c8a <__swbuf_r+0x12>
 8008c82:	6983      	ldr	r3, [r0, #24]
 8008c84:	b90b      	cbnz	r3, 8008c8a <__swbuf_r+0x12>
 8008c86:	f000 f9e7 	bl	8009058 <__sinit>
 8008c8a:	4b21      	ldr	r3, [pc, #132]	; (8008d10 <__swbuf_r+0x98>)
 8008c8c:	429c      	cmp	r4, r3
 8008c8e:	d12b      	bne.n	8008ce8 <__swbuf_r+0x70>
 8008c90:	686c      	ldr	r4, [r5, #4]
 8008c92:	69a3      	ldr	r3, [r4, #24]
 8008c94:	60a3      	str	r3, [r4, #8]
 8008c96:	89a3      	ldrh	r3, [r4, #12]
 8008c98:	071a      	lsls	r2, r3, #28
 8008c9a:	d52f      	bpl.n	8008cfc <__swbuf_r+0x84>
 8008c9c:	6923      	ldr	r3, [r4, #16]
 8008c9e:	b36b      	cbz	r3, 8008cfc <__swbuf_r+0x84>
 8008ca0:	6923      	ldr	r3, [r4, #16]
 8008ca2:	6820      	ldr	r0, [r4, #0]
 8008ca4:	1ac0      	subs	r0, r0, r3
 8008ca6:	6963      	ldr	r3, [r4, #20]
 8008ca8:	b2f6      	uxtb	r6, r6
 8008caa:	4283      	cmp	r3, r0
 8008cac:	4637      	mov	r7, r6
 8008cae:	dc04      	bgt.n	8008cba <__swbuf_r+0x42>
 8008cb0:	4621      	mov	r1, r4
 8008cb2:	4628      	mov	r0, r5
 8008cb4:	f000 f93c 	bl	8008f30 <_fflush_r>
 8008cb8:	bb30      	cbnz	r0, 8008d08 <__swbuf_r+0x90>
 8008cba:	68a3      	ldr	r3, [r4, #8]
 8008cbc:	3b01      	subs	r3, #1
 8008cbe:	60a3      	str	r3, [r4, #8]
 8008cc0:	6823      	ldr	r3, [r4, #0]
 8008cc2:	1c5a      	adds	r2, r3, #1
 8008cc4:	6022      	str	r2, [r4, #0]
 8008cc6:	701e      	strb	r6, [r3, #0]
 8008cc8:	6963      	ldr	r3, [r4, #20]
 8008cca:	3001      	adds	r0, #1
 8008ccc:	4283      	cmp	r3, r0
 8008cce:	d004      	beq.n	8008cda <__swbuf_r+0x62>
 8008cd0:	89a3      	ldrh	r3, [r4, #12]
 8008cd2:	07db      	lsls	r3, r3, #31
 8008cd4:	d506      	bpl.n	8008ce4 <__swbuf_r+0x6c>
 8008cd6:	2e0a      	cmp	r6, #10
 8008cd8:	d104      	bne.n	8008ce4 <__swbuf_r+0x6c>
 8008cda:	4621      	mov	r1, r4
 8008cdc:	4628      	mov	r0, r5
 8008cde:	f000 f927 	bl	8008f30 <_fflush_r>
 8008ce2:	b988      	cbnz	r0, 8008d08 <__swbuf_r+0x90>
 8008ce4:	4638      	mov	r0, r7
 8008ce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ce8:	4b0a      	ldr	r3, [pc, #40]	; (8008d14 <__swbuf_r+0x9c>)
 8008cea:	429c      	cmp	r4, r3
 8008cec:	d101      	bne.n	8008cf2 <__swbuf_r+0x7a>
 8008cee:	68ac      	ldr	r4, [r5, #8]
 8008cf0:	e7cf      	b.n	8008c92 <__swbuf_r+0x1a>
 8008cf2:	4b09      	ldr	r3, [pc, #36]	; (8008d18 <__swbuf_r+0xa0>)
 8008cf4:	429c      	cmp	r4, r3
 8008cf6:	bf08      	it	eq
 8008cf8:	68ec      	ldreq	r4, [r5, #12]
 8008cfa:	e7ca      	b.n	8008c92 <__swbuf_r+0x1a>
 8008cfc:	4621      	mov	r1, r4
 8008cfe:	4628      	mov	r0, r5
 8008d00:	f000 f81a 	bl	8008d38 <__swsetup_r>
 8008d04:	2800      	cmp	r0, #0
 8008d06:	d0cb      	beq.n	8008ca0 <__swbuf_r+0x28>
 8008d08:	f04f 37ff 	mov.w	r7, #4294967295
 8008d0c:	e7ea      	b.n	8008ce4 <__swbuf_r+0x6c>
 8008d0e:	bf00      	nop
 8008d10:	0800ac94 	.word	0x0800ac94
 8008d14:	0800acb4 	.word	0x0800acb4
 8008d18:	0800ac74 	.word	0x0800ac74

08008d1c <__ascii_wctomb>:
 8008d1c:	b149      	cbz	r1, 8008d32 <__ascii_wctomb+0x16>
 8008d1e:	2aff      	cmp	r2, #255	; 0xff
 8008d20:	bf85      	ittet	hi
 8008d22:	238a      	movhi	r3, #138	; 0x8a
 8008d24:	6003      	strhi	r3, [r0, #0]
 8008d26:	700a      	strbls	r2, [r1, #0]
 8008d28:	f04f 30ff 	movhi.w	r0, #4294967295
 8008d2c:	bf98      	it	ls
 8008d2e:	2001      	movls	r0, #1
 8008d30:	4770      	bx	lr
 8008d32:	4608      	mov	r0, r1
 8008d34:	4770      	bx	lr
	...

08008d38 <__swsetup_r>:
 8008d38:	4b32      	ldr	r3, [pc, #200]	; (8008e04 <__swsetup_r+0xcc>)
 8008d3a:	b570      	push	{r4, r5, r6, lr}
 8008d3c:	681d      	ldr	r5, [r3, #0]
 8008d3e:	4606      	mov	r6, r0
 8008d40:	460c      	mov	r4, r1
 8008d42:	b125      	cbz	r5, 8008d4e <__swsetup_r+0x16>
 8008d44:	69ab      	ldr	r3, [r5, #24]
 8008d46:	b913      	cbnz	r3, 8008d4e <__swsetup_r+0x16>
 8008d48:	4628      	mov	r0, r5
 8008d4a:	f000 f985 	bl	8009058 <__sinit>
 8008d4e:	4b2e      	ldr	r3, [pc, #184]	; (8008e08 <__swsetup_r+0xd0>)
 8008d50:	429c      	cmp	r4, r3
 8008d52:	d10f      	bne.n	8008d74 <__swsetup_r+0x3c>
 8008d54:	686c      	ldr	r4, [r5, #4]
 8008d56:	89a3      	ldrh	r3, [r4, #12]
 8008d58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008d5c:	0719      	lsls	r1, r3, #28
 8008d5e:	d42c      	bmi.n	8008dba <__swsetup_r+0x82>
 8008d60:	06dd      	lsls	r5, r3, #27
 8008d62:	d411      	bmi.n	8008d88 <__swsetup_r+0x50>
 8008d64:	2309      	movs	r3, #9
 8008d66:	6033      	str	r3, [r6, #0]
 8008d68:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008d6c:	81a3      	strh	r3, [r4, #12]
 8008d6e:	f04f 30ff 	mov.w	r0, #4294967295
 8008d72:	e03e      	b.n	8008df2 <__swsetup_r+0xba>
 8008d74:	4b25      	ldr	r3, [pc, #148]	; (8008e0c <__swsetup_r+0xd4>)
 8008d76:	429c      	cmp	r4, r3
 8008d78:	d101      	bne.n	8008d7e <__swsetup_r+0x46>
 8008d7a:	68ac      	ldr	r4, [r5, #8]
 8008d7c:	e7eb      	b.n	8008d56 <__swsetup_r+0x1e>
 8008d7e:	4b24      	ldr	r3, [pc, #144]	; (8008e10 <__swsetup_r+0xd8>)
 8008d80:	429c      	cmp	r4, r3
 8008d82:	bf08      	it	eq
 8008d84:	68ec      	ldreq	r4, [r5, #12]
 8008d86:	e7e6      	b.n	8008d56 <__swsetup_r+0x1e>
 8008d88:	0758      	lsls	r0, r3, #29
 8008d8a:	d512      	bpl.n	8008db2 <__swsetup_r+0x7a>
 8008d8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d8e:	b141      	cbz	r1, 8008da2 <__swsetup_r+0x6a>
 8008d90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d94:	4299      	cmp	r1, r3
 8008d96:	d002      	beq.n	8008d9e <__swsetup_r+0x66>
 8008d98:	4630      	mov	r0, r6
 8008d9a:	f7ff fb31 	bl	8008400 <_free_r>
 8008d9e:	2300      	movs	r3, #0
 8008da0:	6363      	str	r3, [r4, #52]	; 0x34
 8008da2:	89a3      	ldrh	r3, [r4, #12]
 8008da4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008da8:	81a3      	strh	r3, [r4, #12]
 8008daa:	2300      	movs	r3, #0
 8008dac:	6063      	str	r3, [r4, #4]
 8008dae:	6923      	ldr	r3, [r4, #16]
 8008db0:	6023      	str	r3, [r4, #0]
 8008db2:	89a3      	ldrh	r3, [r4, #12]
 8008db4:	f043 0308 	orr.w	r3, r3, #8
 8008db8:	81a3      	strh	r3, [r4, #12]
 8008dba:	6923      	ldr	r3, [r4, #16]
 8008dbc:	b94b      	cbnz	r3, 8008dd2 <__swsetup_r+0x9a>
 8008dbe:	89a3      	ldrh	r3, [r4, #12]
 8008dc0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008dc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008dc8:	d003      	beq.n	8008dd2 <__swsetup_r+0x9a>
 8008dca:	4621      	mov	r1, r4
 8008dcc:	4630      	mov	r0, r6
 8008dce:	f000 fa09 	bl	80091e4 <__smakebuf_r>
 8008dd2:	89a0      	ldrh	r0, [r4, #12]
 8008dd4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008dd8:	f010 0301 	ands.w	r3, r0, #1
 8008ddc:	d00a      	beq.n	8008df4 <__swsetup_r+0xbc>
 8008dde:	2300      	movs	r3, #0
 8008de0:	60a3      	str	r3, [r4, #8]
 8008de2:	6963      	ldr	r3, [r4, #20]
 8008de4:	425b      	negs	r3, r3
 8008de6:	61a3      	str	r3, [r4, #24]
 8008de8:	6923      	ldr	r3, [r4, #16]
 8008dea:	b943      	cbnz	r3, 8008dfe <__swsetup_r+0xc6>
 8008dec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008df0:	d1ba      	bne.n	8008d68 <__swsetup_r+0x30>
 8008df2:	bd70      	pop	{r4, r5, r6, pc}
 8008df4:	0781      	lsls	r1, r0, #30
 8008df6:	bf58      	it	pl
 8008df8:	6963      	ldrpl	r3, [r4, #20]
 8008dfa:	60a3      	str	r3, [r4, #8]
 8008dfc:	e7f4      	b.n	8008de8 <__swsetup_r+0xb0>
 8008dfe:	2000      	movs	r0, #0
 8008e00:	e7f7      	b.n	8008df2 <__swsetup_r+0xba>
 8008e02:	bf00      	nop
 8008e04:	20000010 	.word	0x20000010
 8008e08:	0800ac94 	.word	0x0800ac94
 8008e0c:	0800acb4 	.word	0x0800acb4
 8008e10:	0800ac74 	.word	0x0800ac74

08008e14 <abort>:
 8008e14:	b508      	push	{r3, lr}
 8008e16:	2006      	movs	r0, #6
 8008e18:	f000 fa54 	bl	80092c4 <raise>
 8008e1c:	2001      	movs	r0, #1
 8008e1e:	f7f8 ffc7 	bl	8001db0 <_exit>
	...

08008e24 <__sflush_r>:
 8008e24:	898a      	ldrh	r2, [r1, #12]
 8008e26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e2a:	4605      	mov	r5, r0
 8008e2c:	0710      	lsls	r0, r2, #28
 8008e2e:	460c      	mov	r4, r1
 8008e30:	d458      	bmi.n	8008ee4 <__sflush_r+0xc0>
 8008e32:	684b      	ldr	r3, [r1, #4]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	dc05      	bgt.n	8008e44 <__sflush_r+0x20>
 8008e38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	dc02      	bgt.n	8008e44 <__sflush_r+0x20>
 8008e3e:	2000      	movs	r0, #0
 8008e40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008e46:	2e00      	cmp	r6, #0
 8008e48:	d0f9      	beq.n	8008e3e <__sflush_r+0x1a>
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008e50:	682f      	ldr	r7, [r5, #0]
 8008e52:	602b      	str	r3, [r5, #0]
 8008e54:	d032      	beq.n	8008ebc <__sflush_r+0x98>
 8008e56:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008e58:	89a3      	ldrh	r3, [r4, #12]
 8008e5a:	075a      	lsls	r2, r3, #29
 8008e5c:	d505      	bpl.n	8008e6a <__sflush_r+0x46>
 8008e5e:	6863      	ldr	r3, [r4, #4]
 8008e60:	1ac0      	subs	r0, r0, r3
 8008e62:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008e64:	b10b      	cbz	r3, 8008e6a <__sflush_r+0x46>
 8008e66:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008e68:	1ac0      	subs	r0, r0, r3
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	4602      	mov	r2, r0
 8008e6e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008e70:	6a21      	ldr	r1, [r4, #32]
 8008e72:	4628      	mov	r0, r5
 8008e74:	47b0      	blx	r6
 8008e76:	1c43      	adds	r3, r0, #1
 8008e78:	89a3      	ldrh	r3, [r4, #12]
 8008e7a:	d106      	bne.n	8008e8a <__sflush_r+0x66>
 8008e7c:	6829      	ldr	r1, [r5, #0]
 8008e7e:	291d      	cmp	r1, #29
 8008e80:	d82c      	bhi.n	8008edc <__sflush_r+0xb8>
 8008e82:	4a2a      	ldr	r2, [pc, #168]	; (8008f2c <__sflush_r+0x108>)
 8008e84:	40ca      	lsrs	r2, r1
 8008e86:	07d6      	lsls	r6, r2, #31
 8008e88:	d528      	bpl.n	8008edc <__sflush_r+0xb8>
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	6062      	str	r2, [r4, #4]
 8008e8e:	04d9      	lsls	r1, r3, #19
 8008e90:	6922      	ldr	r2, [r4, #16]
 8008e92:	6022      	str	r2, [r4, #0]
 8008e94:	d504      	bpl.n	8008ea0 <__sflush_r+0x7c>
 8008e96:	1c42      	adds	r2, r0, #1
 8008e98:	d101      	bne.n	8008e9e <__sflush_r+0x7a>
 8008e9a:	682b      	ldr	r3, [r5, #0]
 8008e9c:	b903      	cbnz	r3, 8008ea0 <__sflush_r+0x7c>
 8008e9e:	6560      	str	r0, [r4, #84]	; 0x54
 8008ea0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ea2:	602f      	str	r7, [r5, #0]
 8008ea4:	2900      	cmp	r1, #0
 8008ea6:	d0ca      	beq.n	8008e3e <__sflush_r+0x1a>
 8008ea8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008eac:	4299      	cmp	r1, r3
 8008eae:	d002      	beq.n	8008eb6 <__sflush_r+0x92>
 8008eb0:	4628      	mov	r0, r5
 8008eb2:	f7ff faa5 	bl	8008400 <_free_r>
 8008eb6:	2000      	movs	r0, #0
 8008eb8:	6360      	str	r0, [r4, #52]	; 0x34
 8008eba:	e7c1      	b.n	8008e40 <__sflush_r+0x1c>
 8008ebc:	6a21      	ldr	r1, [r4, #32]
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	4628      	mov	r0, r5
 8008ec2:	47b0      	blx	r6
 8008ec4:	1c41      	adds	r1, r0, #1
 8008ec6:	d1c7      	bne.n	8008e58 <__sflush_r+0x34>
 8008ec8:	682b      	ldr	r3, [r5, #0]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d0c4      	beq.n	8008e58 <__sflush_r+0x34>
 8008ece:	2b1d      	cmp	r3, #29
 8008ed0:	d001      	beq.n	8008ed6 <__sflush_r+0xb2>
 8008ed2:	2b16      	cmp	r3, #22
 8008ed4:	d101      	bne.n	8008eda <__sflush_r+0xb6>
 8008ed6:	602f      	str	r7, [r5, #0]
 8008ed8:	e7b1      	b.n	8008e3e <__sflush_r+0x1a>
 8008eda:	89a3      	ldrh	r3, [r4, #12]
 8008edc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ee0:	81a3      	strh	r3, [r4, #12]
 8008ee2:	e7ad      	b.n	8008e40 <__sflush_r+0x1c>
 8008ee4:	690f      	ldr	r7, [r1, #16]
 8008ee6:	2f00      	cmp	r7, #0
 8008ee8:	d0a9      	beq.n	8008e3e <__sflush_r+0x1a>
 8008eea:	0793      	lsls	r3, r2, #30
 8008eec:	680e      	ldr	r6, [r1, #0]
 8008eee:	bf08      	it	eq
 8008ef0:	694b      	ldreq	r3, [r1, #20]
 8008ef2:	600f      	str	r7, [r1, #0]
 8008ef4:	bf18      	it	ne
 8008ef6:	2300      	movne	r3, #0
 8008ef8:	eba6 0807 	sub.w	r8, r6, r7
 8008efc:	608b      	str	r3, [r1, #8]
 8008efe:	f1b8 0f00 	cmp.w	r8, #0
 8008f02:	dd9c      	ble.n	8008e3e <__sflush_r+0x1a>
 8008f04:	6a21      	ldr	r1, [r4, #32]
 8008f06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008f08:	4643      	mov	r3, r8
 8008f0a:	463a      	mov	r2, r7
 8008f0c:	4628      	mov	r0, r5
 8008f0e:	47b0      	blx	r6
 8008f10:	2800      	cmp	r0, #0
 8008f12:	dc06      	bgt.n	8008f22 <__sflush_r+0xfe>
 8008f14:	89a3      	ldrh	r3, [r4, #12]
 8008f16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f1a:	81a3      	strh	r3, [r4, #12]
 8008f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8008f20:	e78e      	b.n	8008e40 <__sflush_r+0x1c>
 8008f22:	4407      	add	r7, r0
 8008f24:	eba8 0800 	sub.w	r8, r8, r0
 8008f28:	e7e9      	b.n	8008efe <__sflush_r+0xda>
 8008f2a:	bf00      	nop
 8008f2c:	20400001 	.word	0x20400001

08008f30 <_fflush_r>:
 8008f30:	b538      	push	{r3, r4, r5, lr}
 8008f32:	690b      	ldr	r3, [r1, #16]
 8008f34:	4605      	mov	r5, r0
 8008f36:	460c      	mov	r4, r1
 8008f38:	b913      	cbnz	r3, 8008f40 <_fflush_r+0x10>
 8008f3a:	2500      	movs	r5, #0
 8008f3c:	4628      	mov	r0, r5
 8008f3e:	bd38      	pop	{r3, r4, r5, pc}
 8008f40:	b118      	cbz	r0, 8008f4a <_fflush_r+0x1a>
 8008f42:	6983      	ldr	r3, [r0, #24]
 8008f44:	b90b      	cbnz	r3, 8008f4a <_fflush_r+0x1a>
 8008f46:	f000 f887 	bl	8009058 <__sinit>
 8008f4a:	4b14      	ldr	r3, [pc, #80]	; (8008f9c <_fflush_r+0x6c>)
 8008f4c:	429c      	cmp	r4, r3
 8008f4e:	d11b      	bne.n	8008f88 <_fflush_r+0x58>
 8008f50:	686c      	ldr	r4, [r5, #4]
 8008f52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d0ef      	beq.n	8008f3a <_fflush_r+0xa>
 8008f5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008f5c:	07d0      	lsls	r0, r2, #31
 8008f5e:	d404      	bmi.n	8008f6a <_fflush_r+0x3a>
 8008f60:	0599      	lsls	r1, r3, #22
 8008f62:	d402      	bmi.n	8008f6a <_fflush_r+0x3a>
 8008f64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f66:	f000 f915 	bl	8009194 <__retarget_lock_acquire_recursive>
 8008f6a:	4628      	mov	r0, r5
 8008f6c:	4621      	mov	r1, r4
 8008f6e:	f7ff ff59 	bl	8008e24 <__sflush_r>
 8008f72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008f74:	07da      	lsls	r2, r3, #31
 8008f76:	4605      	mov	r5, r0
 8008f78:	d4e0      	bmi.n	8008f3c <_fflush_r+0xc>
 8008f7a:	89a3      	ldrh	r3, [r4, #12]
 8008f7c:	059b      	lsls	r3, r3, #22
 8008f7e:	d4dd      	bmi.n	8008f3c <_fflush_r+0xc>
 8008f80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f82:	f000 f908 	bl	8009196 <__retarget_lock_release_recursive>
 8008f86:	e7d9      	b.n	8008f3c <_fflush_r+0xc>
 8008f88:	4b05      	ldr	r3, [pc, #20]	; (8008fa0 <_fflush_r+0x70>)
 8008f8a:	429c      	cmp	r4, r3
 8008f8c:	d101      	bne.n	8008f92 <_fflush_r+0x62>
 8008f8e:	68ac      	ldr	r4, [r5, #8]
 8008f90:	e7df      	b.n	8008f52 <_fflush_r+0x22>
 8008f92:	4b04      	ldr	r3, [pc, #16]	; (8008fa4 <_fflush_r+0x74>)
 8008f94:	429c      	cmp	r4, r3
 8008f96:	bf08      	it	eq
 8008f98:	68ec      	ldreq	r4, [r5, #12]
 8008f9a:	e7da      	b.n	8008f52 <_fflush_r+0x22>
 8008f9c:	0800ac94 	.word	0x0800ac94
 8008fa0:	0800acb4 	.word	0x0800acb4
 8008fa4:	0800ac74 	.word	0x0800ac74

08008fa8 <std>:
 8008fa8:	2300      	movs	r3, #0
 8008faa:	b510      	push	{r4, lr}
 8008fac:	4604      	mov	r4, r0
 8008fae:	e9c0 3300 	strd	r3, r3, [r0]
 8008fb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008fb6:	6083      	str	r3, [r0, #8]
 8008fb8:	8181      	strh	r1, [r0, #12]
 8008fba:	6643      	str	r3, [r0, #100]	; 0x64
 8008fbc:	81c2      	strh	r2, [r0, #14]
 8008fbe:	6183      	str	r3, [r0, #24]
 8008fc0:	4619      	mov	r1, r3
 8008fc2:	2208      	movs	r2, #8
 8008fc4:	305c      	adds	r0, #92	; 0x5c
 8008fc6:	f7fd fb69 	bl	800669c <memset>
 8008fca:	4b05      	ldr	r3, [pc, #20]	; (8008fe0 <std+0x38>)
 8008fcc:	6263      	str	r3, [r4, #36]	; 0x24
 8008fce:	4b05      	ldr	r3, [pc, #20]	; (8008fe4 <std+0x3c>)
 8008fd0:	62a3      	str	r3, [r4, #40]	; 0x28
 8008fd2:	4b05      	ldr	r3, [pc, #20]	; (8008fe8 <std+0x40>)
 8008fd4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008fd6:	4b05      	ldr	r3, [pc, #20]	; (8008fec <std+0x44>)
 8008fd8:	6224      	str	r4, [r4, #32]
 8008fda:	6323      	str	r3, [r4, #48]	; 0x30
 8008fdc:	bd10      	pop	{r4, pc}
 8008fde:	bf00      	nop
 8008fe0:	080092fd 	.word	0x080092fd
 8008fe4:	0800931f 	.word	0x0800931f
 8008fe8:	08009357 	.word	0x08009357
 8008fec:	0800937b 	.word	0x0800937b

08008ff0 <_cleanup_r>:
 8008ff0:	4901      	ldr	r1, [pc, #4]	; (8008ff8 <_cleanup_r+0x8>)
 8008ff2:	f000 b8af 	b.w	8009154 <_fwalk_reent>
 8008ff6:	bf00      	nop
 8008ff8:	08008f31 	.word	0x08008f31

08008ffc <__sfmoreglue>:
 8008ffc:	b570      	push	{r4, r5, r6, lr}
 8008ffe:	2268      	movs	r2, #104	; 0x68
 8009000:	1e4d      	subs	r5, r1, #1
 8009002:	4355      	muls	r5, r2
 8009004:	460e      	mov	r6, r1
 8009006:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800900a:	f7ff fa65 	bl	80084d8 <_malloc_r>
 800900e:	4604      	mov	r4, r0
 8009010:	b140      	cbz	r0, 8009024 <__sfmoreglue+0x28>
 8009012:	2100      	movs	r1, #0
 8009014:	e9c0 1600 	strd	r1, r6, [r0]
 8009018:	300c      	adds	r0, #12
 800901a:	60a0      	str	r0, [r4, #8]
 800901c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009020:	f7fd fb3c 	bl	800669c <memset>
 8009024:	4620      	mov	r0, r4
 8009026:	bd70      	pop	{r4, r5, r6, pc}

08009028 <__sfp_lock_acquire>:
 8009028:	4801      	ldr	r0, [pc, #4]	; (8009030 <__sfp_lock_acquire+0x8>)
 800902a:	f000 b8b3 	b.w	8009194 <__retarget_lock_acquire_recursive>
 800902e:	bf00      	nop
 8009030:	20000395 	.word	0x20000395

08009034 <__sfp_lock_release>:
 8009034:	4801      	ldr	r0, [pc, #4]	; (800903c <__sfp_lock_release+0x8>)
 8009036:	f000 b8ae 	b.w	8009196 <__retarget_lock_release_recursive>
 800903a:	bf00      	nop
 800903c:	20000395 	.word	0x20000395

08009040 <__sinit_lock_acquire>:
 8009040:	4801      	ldr	r0, [pc, #4]	; (8009048 <__sinit_lock_acquire+0x8>)
 8009042:	f000 b8a7 	b.w	8009194 <__retarget_lock_acquire_recursive>
 8009046:	bf00      	nop
 8009048:	20000396 	.word	0x20000396

0800904c <__sinit_lock_release>:
 800904c:	4801      	ldr	r0, [pc, #4]	; (8009054 <__sinit_lock_release+0x8>)
 800904e:	f000 b8a2 	b.w	8009196 <__retarget_lock_release_recursive>
 8009052:	bf00      	nop
 8009054:	20000396 	.word	0x20000396

08009058 <__sinit>:
 8009058:	b510      	push	{r4, lr}
 800905a:	4604      	mov	r4, r0
 800905c:	f7ff fff0 	bl	8009040 <__sinit_lock_acquire>
 8009060:	69a3      	ldr	r3, [r4, #24]
 8009062:	b11b      	cbz	r3, 800906c <__sinit+0x14>
 8009064:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009068:	f7ff bff0 	b.w	800904c <__sinit_lock_release>
 800906c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009070:	6523      	str	r3, [r4, #80]	; 0x50
 8009072:	4b13      	ldr	r3, [pc, #76]	; (80090c0 <__sinit+0x68>)
 8009074:	4a13      	ldr	r2, [pc, #76]	; (80090c4 <__sinit+0x6c>)
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	62a2      	str	r2, [r4, #40]	; 0x28
 800907a:	42a3      	cmp	r3, r4
 800907c:	bf04      	itt	eq
 800907e:	2301      	moveq	r3, #1
 8009080:	61a3      	streq	r3, [r4, #24]
 8009082:	4620      	mov	r0, r4
 8009084:	f000 f820 	bl	80090c8 <__sfp>
 8009088:	6060      	str	r0, [r4, #4]
 800908a:	4620      	mov	r0, r4
 800908c:	f000 f81c 	bl	80090c8 <__sfp>
 8009090:	60a0      	str	r0, [r4, #8]
 8009092:	4620      	mov	r0, r4
 8009094:	f000 f818 	bl	80090c8 <__sfp>
 8009098:	2200      	movs	r2, #0
 800909a:	60e0      	str	r0, [r4, #12]
 800909c:	2104      	movs	r1, #4
 800909e:	6860      	ldr	r0, [r4, #4]
 80090a0:	f7ff ff82 	bl	8008fa8 <std>
 80090a4:	68a0      	ldr	r0, [r4, #8]
 80090a6:	2201      	movs	r2, #1
 80090a8:	2109      	movs	r1, #9
 80090aa:	f7ff ff7d 	bl	8008fa8 <std>
 80090ae:	68e0      	ldr	r0, [r4, #12]
 80090b0:	2202      	movs	r2, #2
 80090b2:	2112      	movs	r1, #18
 80090b4:	f7ff ff78 	bl	8008fa8 <std>
 80090b8:	2301      	movs	r3, #1
 80090ba:	61a3      	str	r3, [r4, #24]
 80090bc:	e7d2      	b.n	8009064 <__sinit+0xc>
 80090be:	bf00      	nop
 80090c0:	0800a8fc 	.word	0x0800a8fc
 80090c4:	08008ff1 	.word	0x08008ff1

080090c8 <__sfp>:
 80090c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090ca:	4607      	mov	r7, r0
 80090cc:	f7ff ffac 	bl	8009028 <__sfp_lock_acquire>
 80090d0:	4b1e      	ldr	r3, [pc, #120]	; (800914c <__sfp+0x84>)
 80090d2:	681e      	ldr	r6, [r3, #0]
 80090d4:	69b3      	ldr	r3, [r6, #24]
 80090d6:	b913      	cbnz	r3, 80090de <__sfp+0x16>
 80090d8:	4630      	mov	r0, r6
 80090da:	f7ff ffbd 	bl	8009058 <__sinit>
 80090de:	3648      	adds	r6, #72	; 0x48
 80090e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80090e4:	3b01      	subs	r3, #1
 80090e6:	d503      	bpl.n	80090f0 <__sfp+0x28>
 80090e8:	6833      	ldr	r3, [r6, #0]
 80090ea:	b30b      	cbz	r3, 8009130 <__sfp+0x68>
 80090ec:	6836      	ldr	r6, [r6, #0]
 80090ee:	e7f7      	b.n	80090e0 <__sfp+0x18>
 80090f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80090f4:	b9d5      	cbnz	r5, 800912c <__sfp+0x64>
 80090f6:	4b16      	ldr	r3, [pc, #88]	; (8009150 <__sfp+0x88>)
 80090f8:	60e3      	str	r3, [r4, #12]
 80090fa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80090fe:	6665      	str	r5, [r4, #100]	; 0x64
 8009100:	f000 f847 	bl	8009192 <__retarget_lock_init_recursive>
 8009104:	f7ff ff96 	bl	8009034 <__sfp_lock_release>
 8009108:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800910c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009110:	6025      	str	r5, [r4, #0]
 8009112:	61a5      	str	r5, [r4, #24]
 8009114:	2208      	movs	r2, #8
 8009116:	4629      	mov	r1, r5
 8009118:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800911c:	f7fd fabe 	bl	800669c <memset>
 8009120:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009124:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009128:	4620      	mov	r0, r4
 800912a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800912c:	3468      	adds	r4, #104	; 0x68
 800912e:	e7d9      	b.n	80090e4 <__sfp+0x1c>
 8009130:	2104      	movs	r1, #4
 8009132:	4638      	mov	r0, r7
 8009134:	f7ff ff62 	bl	8008ffc <__sfmoreglue>
 8009138:	4604      	mov	r4, r0
 800913a:	6030      	str	r0, [r6, #0]
 800913c:	2800      	cmp	r0, #0
 800913e:	d1d5      	bne.n	80090ec <__sfp+0x24>
 8009140:	f7ff ff78 	bl	8009034 <__sfp_lock_release>
 8009144:	230c      	movs	r3, #12
 8009146:	603b      	str	r3, [r7, #0]
 8009148:	e7ee      	b.n	8009128 <__sfp+0x60>
 800914a:	bf00      	nop
 800914c:	0800a8fc 	.word	0x0800a8fc
 8009150:	ffff0001 	.word	0xffff0001

08009154 <_fwalk_reent>:
 8009154:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009158:	4606      	mov	r6, r0
 800915a:	4688      	mov	r8, r1
 800915c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009160:	2700      	movs	r7, #0
 8009162:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009166:	f1b9 0901 	subs.w	r9, r9, #1
 800916a:	d505      	bpl.n	8009178 <_fwalk_reent+0x24>
 800916c:	6824      	ldr	r4, [r4, #0]
 800916e:	2c00      	cmp	r4, #0
 8009170:	d1f7      	bne.n	8009162 <_fwalk_reent+0xe>
 8009172:	4638      	mov	r0, r7
 8009174:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009178:	89ab      	ldrh	r3, [r5, #12]
 800917a:	2b01      	cmp	r3, #1
 800917c:	d907      	bls.n	800918e <_fwalk_reent+0x3a>
 800917e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009182:	3301      	adds	r3, #1
 8009184:	d003      	beq.n	800918e <_fwalk_reent+0x3a>
 8009186:	4629      	mov	r1, r5
 8009188:	4630      	mov	r0, r6
 800918a:	47c0      	blx	r8
 800918c:	4307      	orrs	r7, r0
 800918e:	3568      	adds	r5, #104	; 0x68
 8009190:	e7e9      	b.n	8009166 <_fwalk_reent+0x12>

08009192 <__retarget_lock_init_recursive>:
 8009192:	4770      	bx	lr

08009194 <__retarget_lock_acquire_recursive>:
 8009194:	4770      	bx	lr

08009196 <__retarget_lock_release_recursive>:
 8009196:	4770      	bx	lr

08009198 <__swhatbuf_r>:
 8009198:	b570      	push	{r4, r5, r6, lr}
 800919a:	460e      	mov	r6, r1
 800919c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091a0:	2900      	cmp	r1, #0
 80091a2:	b096      	sub	sp, #88	; 0x58
 80091a4:	4614      	mov	r4, r2
 80091a6:	461d      	mov	r5, r3
 80091a8:	da08      	bge.n	80091bc <__swhatbuf_r+0x24>
 80091aa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80091ae:	2200      	movs	r2, #0
 80091b0:	602a      	str	r2, [r5, #0]
 80091b2:	061a      	lsls	r2, r3, #24
 80091b4:	d410      	bmi.n	80091d8 <__swhatbuf_r+0x40>
 80091b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80091ba:	e00e      	b.n	80091da <__swhatbuf_r+0x42>
 80091bc:	466a      	mov	r2, sp
 80091be:	f000 f903 	bl	80093c8 <_fstat_r>
 80091c2:	2800      	cmp	r0, #0
 80091c4:	dbf1      	blt.n	80091aa <__swhatbuf_r+0x12>
 80091c6:	9a01      	ldr	r2, [sp, #4]
 80091c8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80091cc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80091d0:	425a      	negs	r2, r3
 80091d2:	415a      	adcs	r2, r3
 80091d4:	602a      	str	r2, [r5, #0]
 80091d6:	e7ee      	b.n	80091b6 <__swhatbuf_r+0x1e>
 80091d8:	2340      	movs	r3, #64	; 0x40
 80091da:	2000      	movs	r0, #0
 80091dc:	6023      	str	r3, [r4, #0]
 80091de:	b016      	add	sp, #88	; 0x58
 80091e0:	bd70      	pop	{r4, r5, r6, pc}
	...

080091e4 <__smakebuf_r>:
 80091e4:	898b      	ldrh	r3, [r1, #12]
 80091e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80091e8:	079d      	lsls	r5, r3, #30
 80091ea:	4606      	mov	r6, r0
 80091ec:	460c      	mov	r4, r1
 80091ee:	d507      	bpl.n	8009200 <__smakebuf_r+0x1c>
 80091f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80091f4:	6023      	str	r3, [r4, #0]
 80091f6:	6123      	str	r3, [r4, #16]
 80091f8:	2301      	movs	r3, #1
 80091fa:	6163      	str	r3, [r4, #20]
 80091fc:	b002      	add	sp, #8
 80091fe:	bd70      	pop	{r4, r5, r6, pc}
 8009200:	ab01      	add	r3, sp, #4
 8009202:	466a      	mov	r2, sp
 8009204:	f7ff ffc8 	bl	8009198 <__swhatbuf_r>
 8009208:	9900      	ldr	r1, [sp, #0]
 800920a:	4605      	mov	r5, r0
 800920c:	4630      	mov	r0, r6
 800920e:	f7ff f963 	bl	80084d8 <_malloc_r>
 8009212:	b948      	cbnz	r0, 8009228 <__smakebuf_r+0x44>
 8009214:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009218:	059a      	lsls	r2, r3, #22
 800921a:	d4ef      	bmi.n	80091fc <__smakebuf_r+0x18>
 800921c:	f023 0303 	bic.w	r3, r3, #3
 8009220:	f043 0302 	orr.w	r3, r3, #2
 8009224:	81a3      	strh	r3, [r4, #12]
 8009226:	e7e3      	b.n	80091f0 <__smakebuf_r+0xc>
 8009228:	4b0d      	ldr	r3, [pc, #52]	; (8009260 <__smakebuf_r+0x7c>)
 800922a:	62b3      	str	r3, [r6, #40]	; 0x28
 800922c:	89a3      	ldrh	r3, [r4, #12]
 800922e:	6020      	str	r0, [r4, #0]
 8009230:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009234:	81a3      	strh	r3, [r4, #12]
 8009236:	9b00      	ldr	r3, [sp, #0]
 8009238:	6163      	str	r3, [r4, #20]
 800923a:	9b01      	ldr	r3, [sp, #4]
 800923c:	6120      	str	r0, [r4, #16]
 800923e:	b15b      	cbz	r3, 8009258 <__smakebuf_r+0x74>
 8009240:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009244:	4630      	mov	r0, r6
 8009246:	f000 f8d1 	bl	80093ec <_isatty_r>
 800924a:	b128      	cbz	r0, 8009258 <__smakebuf_r+0x74>
 800924c:	89a3      	ldrh	r3, [r4, #12]
 800924e:	f023 0303 	bic.w	r3, r3, #3
 8009252:	f043 0301 	orr.w	r3, r3, #1
 8009256:	81a3      	strh	r3, [r4, #12]
 8009258:	89a0      	ldrh	r0, [r4, #12]
 800925a:	4305      	orrs	r5, r0
 800925c:	81a5      	strh	r5, [r4, #12]
 800925e:	e7cd      	b.n	80091fc <__smakebuf_r+0x18>
 8009260:	08008ff1 	.word	0x08008ff1

08009264 <_malloc_usable_size_r>:
 8009264:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009268:	1f18      	subs	r0, r3, #4
 800926a:	2b00      	cmp	r3, #0
 800926c:	bfbc      	itt	lt
 800926e:	580b      	ldrlt	r3, [r1, r0]
 8009270:	18c0      	addlt	r0, r0, r3
 8009272:	4770      	bx	lr

08009274 <_raise_r>:
 8009274:	291f      	cmp	r1, #31
 8009276:	b538      	push	{r3, r4, r5, lr}
 8009278:	4604      	mov	r4, r0
 800927a:	460d      	mov	r5, r1
 800927c:	d904      	bls.n	8009288 <_raise_r+0x14>
 800927e:	2316      	movs	r3, #22
 8009280:	6003      	str	r3, [r0, #0]
 8009282:	f04f 30ff 	mov.w	r0, #4294967295
 8009286:	bd38      	pop	{r3, r4, r5, pc}
 8009288:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800928a:	b112      	cbz	r2, 8009292 <_raise_r+0x1e>
 800928c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009290:	b94b      	cbnz	r3, 80092a6 <_raise_r+0x32>
 8009292:	4620      	mov	r0, r4
 8009294:	f000 f830 	bl	80092f8 <_getpid_r>
 8009298:	462a      	mov	r2, r5
 800929a:	4601      	mov	r1, r0
 800929c:	4620      	mov	r0, r4
 800929e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80092a2:	f000 b817 	b.w	80092d4 <_kill_r>
 80092a6:	2b01      	cmp	r3, #1
 80092a8:	d00a      	beq.n	80092c0 <_raise_r+0x4c>
 80092aa:	1c59      	adds	r1, r3, #1
 80092ac:	d103      	bne.n	80092b6 <_raise_r+0x42>
 80092ae:	2316      	movs	r3, #22
 80092b0:	6003      	str	r3, [r0, #0]
 80092b2:	2001      	movs	r0, #1
 80092b4:	e7e7      	b.n	8009286 <_raise_r+0x12>
 80092b6:	2400      	movs	r4, #0
 80092b8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80092bc:	4628      	mov	r0, r5
 80092be:	4798      	blx	r3
 80092c0:	2000      	movs	r0, #0
 80092c2:	e7e0      	b.n	8009286 <_raise_r+0x12>

080092c4 <raise>:
 80092c4:	4b02      	ldr	r3, [pc, #8]	; (80092d0 <raise+0xc>)
 80092c6:	4601      	mov	r1, r0
 80092c8:	6818      	ldr	r0, [r3, #0]
 80092ca:	f7ff bfd3 	b.w	8009274 <_raise_r>
 80092ce:	bf00      	nop
 80092d0:	20000010 	.word	0x20000010

080092d4 <_kill_r>:
 80092d4:	b538      	push	{r3, r4, r5, lr}
 80092d6:	4d07      	ldr	r5, [pc, #28]	; (80092f4 <_kill_r+0x20>)
 80092d8:	2300      	movs	r3, #0
 80092da:	4604      	mov	r4, r0
 80092dc:	4608      	mov	r0, r1
 80092de:	4611      	mov	r1, r2
 80092e0:	602b      	str	r3, [r5, #0]
 80092e2:	f7f8 fd55 	bl	8001d90 <_kill>
 80092e6:	1c43      	adds	r3, r0, #1
 80092e8:	d102      	bne.n	80092f0 <_kill_r+0x1c>
 80092ea:	682b      	ldr	r3, [r5, #0]
 80092ec:	b103      	cbz	r3, 80092f0 <_kill_r+0x1c>
 80092ee:	6023      	str	r3, [r4, #0]
 80092f0:	bd38      	pop	{r3, r4, r5, pc}
 80092f2:	bf00      	nop
 80092f4:	20000390 	.word	0x20000390

080092f8 <_getpid_r>:
 80092f8:	f7f8 bd42 	b.w	8001d80 <_getpid>

080092fc <__sread>:
 80092fc:	b510      	push	{r4, lr}
 80092fe:	460c      	mov	r4, r1
 8009300:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009304:	f000 f894 	bl	8009430 <_read_r>
 8009308:	2800      	cmp	r0, #0
 800930a:	bfab      	itete	ge
 800930c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800930e:	89a3      	ldrhlt	r3, [r4, #12]
 8009310:	181b      	addge	r3, r3, r0
 8009312:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009316:	bfac      	ite	ge
 8009318:	6563      	strge	r3, [r4, #84]	; 0x54
 800931a:	81a3      	strhlt	r3, [r4, #12]
 800931c:	bd10      	pop	{r4, pc}

0800931e <__swrite>:
 800931e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009322:	461f      	mov	r7, r3
 8009324:	898b      	ldrh	r3, [r1, #12]
 8009326:	05db      	lsls	r3, r3, #23
 8009328:	4605      	mov	r5, r0
 800932a:	460c      	mov	r4, r1
 800932c:	4616      	mov	r6, r2
 800932e:	d505      	bpl.n	800933c <__swrite+0x1e>
 8009330:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009334:	2302      	movs	r3, #2
 8009336:	2200      	movs	r2, #0
 8009338:	f000 f868 	bl	800940c <_lseek_r>
 800933c:	89a3      	ldrh	r3, [r4, #12]
 800933e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009342:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009346:	81a3      	strh	r3, [r4, #12]
 8009348:	4632      	mov	r2, r6
 800934a:	463b      	mov	r3, r7
 800934c:	4628      	mov	r0, r5
 800934e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009352:	f000 b817 	b.w	8009384 <_write_r>

08009356 <__sseek>:
 8009356:	b510      	push	{r4, lr}
 8009358:	460c      	mov	r4, r1
 800935a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800935e:	f000 f855 	bl	800940c <_lseek_r>
 8009362:	1c43      	adds	r3, r0, #1
 8009364:	89a3      	ldrh	r3, [r4, #12]
 8009366:	bf15      	itete	ne
 8009368:	6560      	strne	r0, [r4, #84]	; 0x54
 800936a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800936e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009372:	81a3      	strheq	r3, [r4, #12]
 8009374:	bf18      	it	ne
 8009376:	81a3      	strhne	r3, [r4, #12]
 8009378:	bd10      	pop	{r4, pc}

0800937a <__sclose>:
 800937a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800937e:	f000 b813 	b.w	80093a8 <_close_r>
	...

08009384 <_write_r>:
 8009384:	b538      	push	{r3, r4, r5, lr}
 8009386:	4d07      	ldr	r5, [pc, #28]	; (80093a4 <_write_r+0x20>)
 8009388:	4604      	mov	r4, r0
 800938a:	4608      	mov	r0, r1
 800938c:	4611      	mov	r1, r2
 800938e:	2200      	movs	r2, #0
 8009390:	602a      	str	r2, [r5, #0]
 8009392:	461a      	mov	r2, r3
 8009394:	f7f8 fd33 	bl	8001dfe <_write>
 8009398:	1c43      	adds	r3, r0, #1
 800939a:	d102      	bne.n	80093a2 <_write_r+0x1e>
 800939c:	682b      	ldr	r3, [r5, #0]
 800939e:	b103      	cbz	r3, 80093a2 <_write_r+0x1e>
 80093a0:	6023      	str	r3, [r4, #0]
 80093a2:	bd38      	pop	{r3, r4, r5, pc}
 80093a4:	20000390 	.word	0x20000390

080093a8 <_close_r>:
 80093a8:	b538      	push	{r3, r4, r5, lr}
 80093aa:	4d06      	ldr	r5, [pc, #24]	; (80093c4 <_close_r+0x1c>)
 80093ac:	2300      	movs	r3, #0
 80093ae:	4604      	mov	r4, r0
 80093b0:	4608      	mov	r0, r1
 80093b2:	602b      	str	r3, [r5, #0]
 80093b4:	f7f8 fd3f 	bl	8001e36 <_close>
 80093b8:	1c43      	adds	r3, r0, #1
 80093ba:	d102      	bne.n	80093c2 <_close_r+0x1a>
 80093bc:	682b      	ldr	r3, [r5, #0]
 80093be:	b103      	cbz	r3, 80093c2 <_close_r+0x1a>
 80093c0:	6023      	str	r3, [r4, #0]
 80093c2:	bd38      	pop	{r3, r4, r5, pc}
 80093c4:	20000390 	.word	0x20000390

080093c8 <_fstat_r>:
 80093c8:	b538      	push	{r3, r4, r5, lr}
 80093ca:	4d07      	ldr	r5, [pc, #28]	; (80093e8 <_fstat_r+0x20>)
 80093cc:	2300      	movs	r3, #0
 80093ce:	4604      	mov	r4, r0
 80093d0:	4608      	mov	r0, r1
 80093d2:	4611      	mov	r1, r2
 80093d4:	602b      	str	r3, [r5, #0]
 80093d6:	f7f8 fd3a 	bl	8001e4e <_fstat>
 80093da:	1c43      	adds	r3, r0, #1
 80093dc:	d102      	bne.n	80093e4 <_fstat_r+0x1c>
 80093de:	682b      	ldr	r3, [r5, #0]
 80093e0:	b103      	cbz	r3, 80093e4 <_fstat_r+0x1c>
 80093e2:	6023      	str	r3, [r4, #0]
 80093e4:	bd38      	pop	{r3, r4, r5, pc}
 80093e6:	bf00      	nop
 80093e8:	20000390 	.word	0x20000390

080093ec <_isatty_r>:
 80093ec:	b538      	push	{r3, r4, r5, lr}
 80093ee:	4d06      	ldr	r5, [pc, #24]	; (8009408 <_isatty_r+0x1c>)
 80093f0:	2300      	movs	r3, #0
 80093f2:	4604      	mov	r4, r0
 80093f4:	4608      	mov	r0, r1
 80093f6:	602b      	str	r3, [r5, #0]
 80093f8:	f7f8 fd39 	bl	8001e6e <_isatty>
 80093fc:	1c43      	adds	r3, r0, #1
 80093fe:	d102      	bne.n	8009406 <_isatty_r+0x1a>
 8009400:	682b      	ldr	r3, [r5, #0]
 8009402:	b103      	cbz	r3, 8009406 <_isatty_r+0x1a>
 8009404:	6023      	str	r3, [r4, #0]
 8009406:	bd38      	pop	{r3, r4, r5, pc}
 8009408:	20000390 	.word	0x20000390

0800940c <_lseek_r>:
 800940c:	b538      	push	{r3, r4, r5, lr}
 800940e:	4d07      	ldr	r5, [pc, #28]	; (800942c <_lseek_r+0x20>)
 8009410:	4604      	mov	r4, r0
 8009412:	4608      	mov	r0, r1
 8009414:	4611      	mov	r1, r2
 8009416:	2200      	movs	r2, #0
 8009418:	602a      	str	r2, [r5, #0]
 800941a:	461a      	mov	r2, r3
 800941c:	f7f8 fd32 	bl	8001e84 <_lseek>
 8009420:	1c43      	adds	r3, r0, #1
 8009422:	d102      	bne.n	800942a <_lseek_r+0x1e>
 8009424:	682b      	ldr	r3, [r5, #0]
 8009426:	b103      	cbz	r3, 800942a <_lseek_r+0x1e>
 8009428:	6023      	str	r3, [r4, #0]
 800942a:	bd38      	pop	{r3, r4, r5, pc}
 800942c:	20000390 	.word	0x20000390

08009430 <_read_r>:
 8009430:	b538      	push	{r3, r4, r5, lr}
 8009432:	4d07      	ldr	r5, [pc, #28]	; (8009450 <_read_r+0x20>)
 8009434:	4604      	mov	r4, r0
 8009436:	4608      	mov	r0, r1
 8009438:	4611      	mov	r1, r2
 800943a:	2200      	movs	r2, #0
 800943c:	602a      	str	r2, [r5, #0]
 800943e:	461a      	mov	r2, r3
 8009440:	f7f8 fcc0 	bl	8001dc4 <_read>
 8009444:	1c43      	adds	r3, r0, #1
 8009446:	d102      	bne.n	800944e <_read_r+0x1e>
 8009448:	682b      	ldr	r3, [r5, #0]
 800944a:	b103      	cbz	r3, 800944e <_read_r+0x1e>
 800944c:	6023      	str	r3, [r4, #0]
 800944e:	bd38      	pop	{r3, r4, r5, pc}
 8009450:	20000390 	.word	0x20000390
 8009454:	00000000 	.word	0x00000000

08009458 <log10>:
 8009458:	b538      	push	{r3, r4, r5, lr}
 800945a:	ed2d 8b02 	vpush	{d8}
 800945e:	ec55 4b10 	vmov	r4, r5, d0
 8009462:	f000 f8a9 	bl	80095b8 <__ieee754_log10>
 8009466:	4622      	mov	r2, r4
 8009468:	462b      	mov	r3, r5
 800946a:	4620      	mov	r0, r4
 800946c:	4629      	mov	r1, r5
 800946e:	eeb0 8a40 	vmov.f32	s16, s0
 8009472:	eef0 8a60 	vmov.f32	s17, s1
 8009476:	f7f7 fb59 	bl	8000b2c <__aeabi_dcmpun>
 800947a:	b998      	cbnz	r0, 80094a4 <log10+0x4c>
 800947c:	2200      	movs	r2, #0
 800947e:	2300      	movs	r3, #0
 8009480:	4620      	mov	r0, r4
 8009482:	4629      	mov	r1, r5
 8009484:	f7f7 fb34 	bl	8000af0 <__aeabi_dcmple>
 8009488:	b160      	cbz	r0, 80094a4 <log10+0x4c>
 800948a:	2200      	movs	r2, #0
 800948c:	2300      	movs	r3, #0
 800948e:	4620      	mov	r0, r4
 8009490:	4629      	mov	r1, r5
 8009492:	f7f7 fb19 	bl	8000ac8 <__aeabi_dcmpeq>
 8009496:	b160      	cbz	r0, 80094b2 <log10+0x5a>
 8009498:	f7fd f8c8 	bl	800662c <__errno>
 800949c:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 80094c8 <log10+0x70>
 80094a0:	2322      	movs	r3, #34	; 0x22
 80094a2:	6003      	str	r3, [r0, #0]
 80094a4:	eeb0 0a48 	vmov.f32	s0, s16
 80094a8:	eef0 0a68 	vmov.f32	s1, s17
 80094ac:	ecbd 8b02 	vpop	{d8}
 80094b0:	bd38      	pop	{r3, r4, r5, pc}
 80094b2:	f7fd f8bb 	bl	800662c <__errno>
 80094b6:	ecbd 8b02 	vpop	{d8}
 80094ba:	2321      	movs	r3, #33	; 0x21
 80094bc:	6003      	str	r3, [r0, #0]
 80094be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80094c2:	4803      	ldr	r0, [pc, #12]	; (80094d0 <log10+0x78>)
 80094c4:	f000 bf28 	b.w	800a318 <nan>
 80094c8:	00000000 	.word	0x00000000
 80094cc:	fff00000 	.word	0xfff00000
 80094d0:	0800ab68 	.word	0x0800ab68

080094d4 <pow>:
 80094d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094d6:	ed2d 8b02 	vpush	{d8}
 80094da:	eeb0 8a40 	vmov.f32	s16, s0
 80094de:	eef0 8a60 	vmov.f32	s17, s1
 80094e2:	ec55 4b11 	vmov	r4, r5, d1
 80094e6:	f000 f8f3 	bl	80096d0 <__ieee754_pow>
 80094ea:	4622      	mov	r2, r4
 80094ec:	462b      	mov	r3, r5
 80094ee:	4620      	mov	r0, r4
 80094f0:	4629      	mov	r1, r5
 80094f2:	ec57 6b10 	vmov	r6, r7, d0
 80094f6:	f7f7 fb19 	bl	8000b2c <__aeabi_dcmpun>
 80094fa:	2800      	cmp	r0, #0
 80094fc:	d13b      	bne.n	8009576 <pow+0xa2>
 80094fe:	ec51 0b18 	vmov	r0, r1, d8
 8009502:	2200      	movs	r2, #0
 8009504:	2300      	movs	r3, #0
 8009506:	f7f7 fadf 	bl	8000ac8 <__aeabi_dcmpeq>
 800950a:	b1b8      	cbz	r0, 800953c <pow+0x68>
 800950c:	2200      	movs	r2, #0
 800950e:	2300      	movs	r3, #0
 8009510:	4620      	mov	r0, r4
 8009512:	4629      	mov	r1, r5
 8009514:	f7f7 fad8 	bl	8000ac8 <__aeabi_dcmpeq>
 8009518:	2800      	cmp	r0, #0
 800951a:	d146      	bne.n	80095aa <pow+0xd6>
 800951c:	ec45 4b10 	vmov	d0, r4, r5
 8009520:	f000 feef 	bl	800a302 <finite>
 8009524:	b338      	cbz	r0, 8009576 <pow+0xa2>
 8009526:	2200      	movs	r2, #0
 8009528:	2300      	movs	r3, #0
 800952a:	4620      	mov	r0, r4
 800952c:	4629      	mov	r1, r5
 800952e:	f7f7 fad5 	bl	8000adc <__aeabi_dcmplt>
 8009532:	b300      	cbz	r0, 8009576 <pow+0xa2>
 8009534:	f7fd f87a 	bl	800662c <__errno>
 8009538:	2322      	movs	r3, #34	; 0x22
 800953a:	e01b      	b.n	8009574 <pow+0xa0>
 800953c:	ec47 6b10 	vmov	d0, r6, r7
 8009540:	f000 fedf 	bl	800a302 <finite>
 8009544:	b9e0      	cbnz	r0, 8009580 <pow+0xac>
 8009546:	eeb0 0a48 	vmov.f32	s0, s16
 800954a:	eef0 0a68 	vmov.f32	s1, s17
 800954e:	f000 fed8 	bl	800a302 <finite>
 8009552:	b1a8      	cbz	r0, 8009580 <pow+0xac>
 8009554:	ec45 4b10 	vmov	d0, r4, r5
 8009558:	f000 fed3 	bl	800a302 <finite>
 800955c:	b180      	cbz	r0, 8009580 <pow+0xac>
 800955e:	4632      	mov	r2, r6
 8009560:	463b      	mov	r3, r7
 8009562:	4630      	mov	r0, r6
 8009564:	4639      	mov	r1, r7
 8009566:	f7f7 fae1 	bl	8000b2c <__aeabi_dcmpun>
 800956a:	2800      	cmp	r0, #0
 800956c:	d0e2      	beq.n	8009534 <pow+0x60>
 800956e:	f7fd f85d 	bl	800662c <__errno>
 8009572:	2321      	movs	r3, #33	; 0x21
 8009574:	6003      	str	r3, [r0, #0]
 8009576:	ecbd 8b02 	vpop	{d8}
 800957a:	ec47 6b10 	vmov	d0, r6, r7
 800957e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009580:	2200      	movs	r2, #0
 8009582:	2300      	movs	r3, #0
 8009584:	4630      	mov	r0, r6
 8009586:	4639      	mov	r1, r7
 8009588:	f7f7 fa9e 	bl	8000ac8 <__aeabi_dcmpeq>
 800958c:	2800      	cmp	r0, #0
 800958e:	d0f2      	beq.n	8009576 <pow+0xa2>
 8009590:	eeb0 0a48 	vmov.f32	s0, s16
 8009594:	eef0 0a68 	vmov.f32	s1, s17
 8009598:	f000 feb3 	bl	800a302 <finite>
 800959c:	2800      	cmp	r0, #0
 800959e:	d0ea      	beq.n	8009576 <pow+0xa2>
 80095a0:	ec45 4b10 	vmov	d0, r4, r5
 80095a4:	f000 fead 	bl	800a302 <finite>
 80095a8:	e7c3      	b.n	8009532 <pow+0x5e>
 80095aa:	4f01      	ldr	r7, [pc, #4]	; (80095b0 <pow+0xdc>)
 80095ac:	2600      	movs	r6, #0
 80095ae:	e7e2      	b.n	8009576 <pow+0xa2>
 80095b0:	3ff00000 	.word	0x3ff00000
 80095b4:	00000000 	.word	0x00000000

080095b8 <__ieee754_log10>:
 80095b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095bc:	ec55 4b10 	vmov	r4, r5, d0
 80095c0:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 80095c4:	462b      	mov	r3, r5
 80095c6:	da2f      	bge.n	8009628 <__ieee754_log10+0x70>
 80095c8:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 80095cc:	4322      	orrs	r2, r4
 80095ce:	d109      	bne.n	80095e4 <__ieee754_log10+0x2c>
 80095d0:	493b      	ldr	r1, [pc, #236]	; (80096c0 <__ieee754_log10+0x108>)
 80095d2:	2200      	movs	r2, #0
 80095d4:	2300      	movs	r3, #0
 80095d6:	2000      	movs	r0, #0
 80095d8:	f7f7 f938 	bl	800084c <__aeabi_ddiv>
 80095dc:	ec41 0b10 	vmov	d0, r0, r1
 80095e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095e4:	2d00      	cmp	r5, #0
 80095e6:	da09      	bge.n	80095fc <__ieee754_log10+0x44>
 80095e8:	ee10 2a10 	vmov	r2, s0
 80095ec:	ee10 0a10 	vmov	r0, s0
 80095f0:	4629      	mov	r1, r5
 80095f2:	f7f6 fe49 	bl	8000288 <__aeabi_dsub>
 80095f6:	2200      	movs	r2, #0
 80095f8:	2300      	movs	r3, #0
 80095fa:	e7ed      	b.n	80095d8 <__ieee754_log10+0x20>
 80095fc:	4b31      	ldr	r3, [pc, #196]	; (80096c4 <__ieee754_log10+0x10c>)
 80095fe:	2200      	movs	r2, #0
 8009600:	4629      	mov	r1, r5
 8009602:	ee10 0a10 	vmov	r0, s0
 8009606:	f7f6 fff7 	bl	80005f8 <__aeabi_dmul>
 800960a:	f06f 0235 	mvn.w	r2, #53	; 0x35
 800960e:	4604      	mov	r4, r0
 8009610:	460d      	mov	r5, r1
 8009612:	460b      	mov	r3, r1
 8009614:	492c      	ldr	r1, [pc, #176]	; (80096c8 <__ieee754_log10+0x110>)
 8009616:	428b      	cmp	r3, r1
 8009618:	dd08      	ble.n	800962c <__ieee754_log10+0x74>
 800961a:	4622      	mov	r2, r4
 800961c:	462b      	mov	r3, r5
 800961e:	4620      	mov	r0, r4
 8009620:	4629      	mov	r1, r5
 8009622:	f7f6 fe33 	bl	800028c <__adddf3>
 8009626:	e7d9      	b.n	80095dc <__ieee754_log10+0x24>
 8009628:	2200      	movs	r2, #0
 800962a:	e7f3      	b.n	8009614 <__ieee754_log10+0x5c>
 800962c:	1518      	asrs	r0, r3, #20
 800962e:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8009632:	4410      	add	r0, r2
 8009634:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 8009638:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800963c:	f3c3 0813 	ubfx	r8, r3, #0, #20
 8009640:	f7f6 ff70 	bl	8000524 <__aeabi_i2d>
 8009644:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 8009648:	3303      	adds	r3, #3
 800964a:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 800964e:	ec45 4b10 	vmov	d0, r4, r5
 8009652:	4606      	mov	r6, r0
 8009654:	460f      	mov	r7, r1
 8009656:	f000 feef 	bl	800a438 <__ieee754_log>
 800965a:	a313      	add	r3, pc, #76	; (adr r3, 80096a8 <__ieee754_log10+0xf0>)
 800965c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009660:	4630      	mov	r0, r6
 8009662:	4639      	mov	r1, r7
 8009664:	ec59 8b10 	vmov	r8, r9, d0
 8009668:	f7f6 ffc6 	bl	80005f8 <__aeabi_dmul>
 800966c:	a310      	add	r3, pc, #64	; (adr r3, 80096b0 <__ieee754_log10+0xf8>)
 800966e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009672:	4604      	mov	r4, r0
 8009674:	460d      	mov	r5, r1
 8009676:	4640      	mov	r0, r8
 8009678:	4649      	mov	r1, r9
 800967a:	f7f6 ffbd 	bl	80005f8 <__aeabi_dmul>
 800967e:	4602      	mov	r2, r0
 8009680:	460b      	mov	r3, r1
 8009682:	4620      	mov	r0, r4
 8009684:	4629      	mov	r1, r5
 8009686:	f7f6 fe01 	bl	800028c <__adddf3>
 800968a:	a30b      	add	r3, pc, #44	; (adr r3, 80096b8 <__ieee754_log10+0x100>)
 800968c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009690:	4604      	mov	r4, r0
 8009692:	460d      	mov	r5, r1
 8009694:	4630      	mov	r0, r6
 8009696:	4639      	mov	r1, r7
 8009698:	f7f6 ffae 	bl	80005f8 <__aeabi_dmul>
 800969c:	4602      	mov	r2, r0
 800969e:	460b      	mov	r3, r1
 80096a0:	4620      	mov	r0, r4
 80096a2:	4629      	mov	r1, r5
 80096a4:	e7bd      	b.n	8009622 <__ieee754_log10+0x6a>
 80096a6:	bf00      	nop
 80096a8:	11f12b36 	.word	0x11f12b36
 80096ac:	3d59fef3 	.word	0x3d59fef3
 80096b0:	1526e50e 	.word	0x1526e50e
 80096b4:	3fdbcb7b 	.word	0x3fdbcb7b
 80096b8:	509f6000 	.word	0x509f6000
 80096bc:	3fd34413 	.word	0x3fd34413
 80096c0:	c3500000 	.word	0xc3500000
 80096c4:	43500000 	.word	0x43500000
 80096c8:	7fefffff 	.word	0x7fefffff
 80096cc:	00000000 	.word	0x00000000

080096d0 <__ieee754_pow>:
 80096d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096d4:	ed2d 8b06 	vpush	{d8-d10}
 80096d8:	b089      	sub	sp, #36	; 0x24
 80096da:	ed8d 1b00 	vstr	d1, [sp]
 80096de:	e9dd 2900 	ldrd	r2, r9, [sp]
 80096e2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80096e6:	ea58 0102 	orrs.w	r1, r8, r2
 80096ea:	ec57 6b10 	vmov	r6, r7, d0
 80096ee:	d115      	bne.n	800971c <__ieee754_pow+0x4c>
 80096f0:	19b3      	adds	r3, r6, r6
 80096f2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80096f6:	4152      	adcs	r2, r2
 80096f8:	4299      	cmp	r1, r3
 80096fa:	4b89      	ldr	r3, [pc, #548]	; (8009920 <__ieee754_pow+0x250>)
 80096fc:	4193      	sbcs	r3, r2
 80096fe:	f080 84d2 	bcs.w	800a0a6 <__ieee754_pow+0x9d6>
 8009702:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009706:	4630      	mov	r0, r6
 8009708:	4639      	mov	r1, r7
 800970a:	f7f6 fdbf 	bl	800028c <__adddf3>
 800970e:	ec41 0b10 	vmov	d0, r0, r1
 8009712:	b009      	add	sp, #36	; 0x24
 8009714:	ecbd 8b06 	vpop	{d8-d10}
 8009718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800971c:	4b81      	ldr	r3, [pc, #516]	; (8009924 <__ieee754_pow+0x254>)
 800971e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8009722:	429c      	cmp	r4, r3
 8009724:	ee10 aa10 	vmov	sl, s0
 8009728:	463d      	mov	r5, r7
 800972a:	dc06      	bgt.n	800973a <__ieee754_pow+0x6a>
 800972c:	d101      	bne.n	8009732 <__ieee754_pow+0x62>
 800972e:	2e00      	cmp	r6, #0
 8009730:	d1e7      	bne.n	8009702 <__ieee754_pow+0x32>
 8009732:	4598      	cmp	r8, r3
 8009734:	dc01      	bgt.n	800973a <__ieee754_pow+0x6a>
 8009736:	d10f      	bne.n	8009758 <__ieee754_pow+0x88>
 8009738:	b172      	cbz	r2, 8009758 <__ieee754_pow+0x88>
 800973a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800973e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8009742:	ea55 050a 	orrs.w	r5, r5, sl
 8009746:	d1dc      	bne.n	8009702 <__ieee754_pow+0x32>
 8009748:	e9dd 3200 	ldrd	r3, r2, [sp]
 800974c:	18db      	adds	r3, r3, r3
 800974e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8009752:	4152      	adcs	r2, r2
 8009754:	429d      	cmp	r5, r3
 8009756:	e7d0      	b.n	80096fa <__ieee754_pow+0x2a>
 8009758:	2d00      	cmp	r5, #0
 800975a:	da3b      	bge.n	80097d4 <__ieee754_pow+0x104>
 800975c:	4b72      	ldr	r3, [pc, #456]	; (8009928 <__ieee754_pow+0x258>)
 800975e:	4598      	cmp	r8, r3
 8009760:	dc51      	bgt.n	8009806 <__ieee754_pow+0x136>
 8009762:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8009766:	4598      	cmp	r8, r3
 8009768:	f340 84ac 	ble.w	800a0c4 <__ieee754_pow+0x9f4>
 800976c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009770:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009774:	2b14      	cmp	r3, #20
 8009776:	dd0f      	ble.n	8009798 <__ieee754_pow+0xc8>
 8009778:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800977c:	fa22 f103 	lsr.w	r1, r2, r3
 8009780:	fa01 f303 	lsl.w	r3, r1, r3
 8009784:	4293      	cmp	r3, r2
 8009786:	f040 849d 	bne.w	800a0c4 <__ieee754_pow+0x9f4>
 800978a:	f001 0101 	and.w	r1, r1, #1
 800978e:	f1c1 0302 	rsb	r3, r1, #2
 8009792:	9304      	str	r3, [sp, #16]
 8009794:	b182      	cbz	r2, 80097b8 <__ieee754_pow+0xe8>
 8009796:	e05f      	b.n	8009858 <__ieee754_pow+0x188>
 8009798:	2a00      	cmp	r2, #0
 800979a:	d15b      	bne.n	8009854 <__ieee754_pow+0x184>
 800979c:	f1c3 0314 	rsb	r3, r3, #20
 80097a0:	fa48 f103 	asr.w	r1, r8, r3
 80097a4:	fa01 f303 	lsl.w	r3, r1, r3
 80097a8:	4543      	cmp	r3, r8
 80097aa:	f040 8488 	bne.w	800a0be <__ieee754_pow+0x9ee>
 80097ae:	f001 0101 	and.w	r1, r1, #1
 80097b2:	f1c1 0302 	rsb	r3, r1, #2
 80097b6:	9304      	str	r3, [sp, #16]
 80097b8:	4b5c      	ldr	r3, [pc, #368]	; (800992c <__ieee754_pow+0x25c>)
 80097ba:	4598      	cmp	r8, r3
 80097bc:	d132      	bne.n	8009824 <__ieee754_pow+0x154>
 80097be:	f1b9 0f00 	cmp.w	r9, #0
 80097c2:	f280 8478 	bge.w	800a0b6 <__ieee754_pow+0x9e6>
 80097c6:	4959      	ldr	r1, [pc, #356]	; (800992c <__ieee754_pow+0x25c>)
 80097c8:	4632      	mov	r2, r6
 80097ca:	463b      	mov	r3, r7
 80097cc:	2000      	movs	r0, #0
 80097ce:	f7f7 f83d 	bl	800084c <__aeabi_ddiv>
 80097d2:	e79c      	b.n	800970e <__ieee754_pow+0x3e>
 80097d4:	2300      	movs	r3, #0
 80097d6:	9304      	str	r3, [sp, #16]
 80097d8:	2a00      	cmp	r2, #0
 80097da:	d13d      	bne.n	8009858 <__ieee754_pow+0x188>
 80097dc:	4b51      	ldr	r3, [pc, #324]	; (8009924 <__ieee754_pow+0x254>)
 80097de:	4598      	cmp	r8, r3
 80097e0:	d1ea      	bne.n	80097b8 <__ieee754_pow+0xe8>
 80097e2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80097e6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80097ea:	ea53 030a 	orrs.w	r3, r3, sl
 80097ee:	f000 845a 	beq.w	800a0a6 <__ieee754_pow+0x9d6>
 80097f2:	4b4f      	ldr	r3, [pc, #316]	; (8009930 <__ieee754_pow+0x260>)
 80097f4:	429c      	cmp	r4, r3
 80097f6:	dd08      	ble.n	800980a <__ieee754_pow+0x13a>
 80097f8:	f1b9 0f00 	cmp.w	r9, #0
 80097fc:	f2c0 8457 	blt.w	800a0ae <__ieee754_pow+0x9de>
 8009800:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009804:	e783      	b.n	800970e <__ieee754_pow+0x3e>
 8009806:	2302      	movs	r3, #2
 8009808:	e7e5      	b.n	80097d6 <__ieee754_pow+0x106>
 800980a:	f1b9 0f00 	cmp.w	r9, #0
 800980e:	f04f 0000 	mov.w	r0, #0
 8009812:	f04f 0100 	mov.w	r1, #0
 8009816:	f6bf af7a 	bge.w	800970e <__ieee754_pow+0x3e>
 800981a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800981e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009822:	e774      	b.n	800970e <__ieee754_pow+0x3e>
 8009824:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8009828:	d106      	bne.n	8009838 <__ieee754_pow+0x168>
 800982a:	4632      	mov	r2, r6
 800982c:	463b      	mov	r3, r7
 800982e:	4630      	mov	r0, r6
 8009830:	4639      	mov	r1, r7
 8009832:	f7f6 fee1 	bl	80005f8 <__aeabi_dmul>
 8009836:	e76a      	b.n	800970e <__ieee754_pow+0x3e>
 8009838:	4b3e      	ldr	r3, [pc, #248]	; (8009934 <__ieee754_pow+0x264>)
 800983a:	4599      	cmp	r9, r3
 800983c:	d10c      	bne.n	8009858 <__ieee754_pow+0x188>
 800983e:	2d00      	cmp	r5, #0
 8009840:	db0a      	blt.n	8009858 <__ieee754_pow+0x188>
 8009842:	ec47 6b10 	vmov	d0, r6, r7
 8009846:	b009      	add	sp, #36	; 0x24
 8009848:	ecbd 8b06 	vpop	{d8-d10}
 800984c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009850:	f000 bc6c 	b.w	800a12c <__ieee754_sqrt>
 8009854:	2300      	movs	r3, #0
 8009856:	9304      	str	r3, [sp, #16]
 8009858:	ec47 6b10 	vmov	d0, r6, r7
 800985c:	f000 fd48 	bl	800a2f0 <fabs>
 8009860:	ec51 0b10 	vmov	r0, r1, d0
 8009864:	f1ba 0f00 	cmp.w	sl, #0
 8009868:	d129      	bne.n	80098be <__ieee754_pow+0x1ee>
 800986a:	b124      	cbz	r4, 8009876 <__ieee754_pow+0x1a6>
 800986c:	4b2f      	ldr	r3, [pc, #188]	; (800992c <__ieee754_pow+0x25c>)
 800986e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8009872:	429a      	cmp	r2, r3
 8009874:	d123      	bne.n	80098be <__ieee754_pow+0x1ee>
 8009876:	f1b9 0f00 	cmp.w	r9, #0
 800987a:	da05      	bge.n	8009888 <__ieee754_pow+0x1b8>
 800987c:	4602      	mov	r2, r0
 800987e:	460b      	mov	r3, r1
 8009880:	2000      	movs	r0, #0
 8009882:	492a      	ldr	r1, [pc, #168]	; (800992c <__ieee754_pow+0x25c>)
 8009884:	f7f6 ffe2 	bl	800084c <__aeabi_ddiv>
 8009888:	2d00      	cmp	r5, #0
 800988a:	f6bf af40 	bge.w	800970e <__ieee754_pow+0x3e>
 800988e:	9b04      	ldr	r3, [sp, #16]
 8009890:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009894:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009898:	4323      	orrs	r3, r4
 800989a:	d108      	bne.n	80098ae <__ieee754_pow+0x1de>
 800989c:	4602      	mov	r2, r0
 800989e:	460b      	mov	r3, r1
 80098a0:	4610      	mov	r0, r2
 80098a2:	4619      	mov	r1, r3
 80098a4:	f7f6 fcf0 	bl	8000288 <__aeabi_dsub>
 80098a8:	4602      	mov	r2, r0
 80098aa:	460b      	mov	r3, r1
 80098ac:	e78f      	b.n	80097ce <__ieee754_pow+0xfe>
 80098ae:	9b04      	ldr	r3, [sp, #16]
 80098b0:	2b01      	cmp	r3, #1
 80098b2:	f47f af2c 	bne.w	800970e <__ieee754_pow+0x3e>
 80098b6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80098ba:	4619      	mov	r1, r3
 80098bc:	e727      	b.n	800970e <__ieee754_pow+0x3e>
 80098be:	0feb      	lsrs	r3, r5, #31
 80098c0:	3b01      	subs	r3, #1
 80098c2:	9306      	str	r3, [sp, #24]
 80098c4:	9a06      	ldr	r2, [sp, #24]
 80098c6:	9b04      	ldr	r3, [sp, #16]
 80098c8:	4313      	orrs	r3, r2
 80098ca:	d102      	bne.n	80098d2 <__ieee754_pow+0x202>
 80098cc:	4632      	mov	r2, r6
 80098ce:	463b      	mov	r3, r7
 80098d0:	e7e6      	b.n	80098a0 <__ieee754_pow+0x1d0>
 80098d2:	4b19      	ldr	r3, [pc, #100]	; (8009938 <__ieee754_pow+0x268>)
 80098d4:	4598      	cmp	r8, r3
 80098d6:	f340 80fb 	ble.w	8009ad0 <__ieee754_pow+0x400>
 80098da:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80098de:	4598      	cmp	r8, r3
 80098e0:	4b13      	ldr	r3, [pc, #76]	; (8009930 <__ieee754_pow+0x260>)
 80098e2:	dd0c      	ble.n	80098fe <__ieee754_pow+0x22e>
 80098e4:	429c      	cmp	r4, r3
 80098e6:	dc0f      	bgt.n	8009908 <__ieee754_pow+0x238>
 80098e8:	f1b9 0f00 	cmp.w	r9, #0
 80098ec:	da0f      	bge.n	800990e <__ieee754_pow+0x23e>
 80098ee:	2000      	movs	r0, #0
 80098f0:	b009      	add	sp, #36	; 0x24
 80098f2:	ecbd 8b06 	vpop	{d8-d10}
 80098f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098fa:	f000 bcf0 	b.w	800a2de <__math_oflow>
 80098fe:	429c      	cmp	r4, r3
 8009900:	dbf2      	blt.n	80098e8 <__ieee754_pow+0x218>
 8009902:	4b0a      	ldr	r3, [pc, #40]	; (800992c <__ieee754_pow+0x25c>)
 8009904:	429c      	cmp	r4, r3
 8009906:	dd19      	ble.n	800993c <__ieee754_pow+0x26c>
 8009908:	f1b9 0f00 	cmp.w	r9, #0
 800990c:	dcef      	bgt.n	80098ee <__ieee754_pow+0x21e>
 800990e:	2000      	movs	r0, #0
 8009910:	b009      	add	sp, #36	; 0x24
 8009912:	ecbd 8b06 	vpop	{d8-d10}
 8009916:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800991a:	f000 bcd7 	b.w	800a2cc <__math_uflow>
 800991e:	bf00      	nop
 8009920:	fff00000 	.word	0xfff00000
 8009924:	7ff00000 	.word	0x7ff00000
 8009928:	433fffff 	.word	0x433fffff
 800992c:	3ff00000 	.word	0x3ff00000
 8009930:	3fefffff 	.word	0x3fefffff
 8009934:	3fe00000 	.word	0x3fe00000
 8009938:	41e00000 	.word	0x41e00000
 800993c:	4b60      	ldr	r3, [pc, #384]	; (8009ac0 <__ieee754_pow+0x3f0>)
 800993e:	2200      	movs	r2, #0
 8009940:	f7f6 fca2 	bl	8000288 <__aeabi_dsub>
 8009944:	a354      	add	r3, pc, #336	; (adr r3, 8009a98 <__ieee754_pow+0x3c8>)
 8009946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800994a:	4604      	mov	r4, r0
 800994c:	460d      	mov	r5, r1
 800994e:	f7f6 fe53 	bl	80005f8 <__aeabi_dmul>
 8009952:	a353      	add	r3, pc, #332	; (adr r3, 8009aa0 <__ieee754_pow+0x3d0>)
 8009954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009958:	4606      	mov	r6, r0
 800995a:	460f      	mov	r7, r1
 800995c:	4620      	mov	r0, r4
 800995e:	4629      	mov	r1, r5
 8009960:	f7f6 fe4a 	bl	80005f8 <__aeabi_dmul>
 8009964:	4b57      	ldr	r3, [pc, #348]	; (8009ac4 <__ieee754_pow+0x3f4>)
 8009966:	4682      	mov	sl, r0
 8009968:	468b      	mov	fp, r1
 800996a:	2200      	movs	r2, #0
 800996c:	4620      	mov	r0, r4
 800996e:	4629      	mov	r1, r5
 8009970:	f7f6 fe42 	bl	80005f8 <__aeabi_dmul>
 8009974:	4602      	mov	r2, r0
 8009976:	460b      	mov	r3, r1
 8009978:	a14b      	add	r1, pc, #300	; (adr r1, 8009aa8 <__ieee754_pow+0x3d8>)
 800997a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800997e:	f7f6 fc83 	bl	8000288 <__aeabi_dsub>
 8009982:	4622      	mov	r2, r4
 8009984:	462b      	mov	r3, r5
 8009986:	f7f6 fe37 	bl	80005f8 <__aeabi_dmul>
 800998a:	4602      	mov	r2, r0
 800998c:	460b      	mov	r3, r1
 800998e:	2000      	movs	r0, #0
 8009990:	494d      	ldr	r1, [pc, #308]	; (8009ac8 <__ieee754_pow+0x3f8>)
 8009992:	f7f6 fc79 	bl	8000288 <__aeabi_dsub>
 8009996:	4622      	mov	r2, r4
 8009998:	4680      	mov	r8, r0
 800999a:	4689      	mov	r9, r1
 800999c:	462b      	mov	r3, r5
 800999e:	4620      	mov	r0, r4
 80099a0:	4629      	mov	r1, r5
 80099a2:	f7f6 fe29 	bl	80005f8 <__aeabi_dmul>
 80099a6:	4602      	mov	r2, r0
 80099a8:	460b      	mov	r3, r1
 80099aa:	4640      	mov	r0, r8
 80099ac:	4649      	mov	r1, r9
 80099ae:	f7f6 fe23 	bl	80005f8 <__aeabi_dmul>
 80099b2:	a33f      	add	r3, pc, #252	; (adr r3, 8009ab0 <__ieee754_pow+0x3e0>)
 80099b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099b8:	f7f6 fe1e 	bl	80005f8 <__aeabi_dmul>
 80099bc:	4602      	mov	r2, r0
 80099be:	460b      	mov	r3, r1
 80099c0:	4650      	mov	r0, sl
 80099c2:	4659      	mov	r1, fp
 80099c4:	f7f6 fc60 	bl	8000288 <__aeabi_dsub>
 80099c8:	4602      	mov	r2, r0
 80099ca:	460b      	mov	r3, r1
 80099cc:	4680      	mov	r8, r0
 80099ce:	4689      	mov	r9, r1
 80099d0:	4630      	mov	r0, r6
 80099d2:	4639      	mov	r1, r7
 80099d4:	f7f6 fc5a 	bl	800028c <__adddf3>
 80099d8:	2000      	movs	r0, #0
 80099da:	4632      	mov	r2, r6
 80099dc:	463b      	mov	r3, r7
 80099de:	4604      	mov	r4, r0
 80099e0:	460d      	mov	r5, r1
 80099e2:	f7f6 fc51 	bl	8000288 <__aeabi_dsub>
 80099e6:	4602      	mov	r2, r0
 80099e8:	460b      	mov	r3, r1
 80099ea:	4640      	mov	r0, r8
 80099ec:	4649      	mov	r1, r9
 80099ee:	f7f6 fc4b 	bl	8000288 <__aeabi_dsub>
 80099f2:	9b04      	ldr	r3, [sp, #16]
 80099f4:	9a06      	ldr	r2, [sp, #24]
 80099f6:	3b01      	subs	r3, #1
 80099f8:	4313      	orrs	r3, r2
 80099fa:	4682      	mov	sl, r0
 80099fc:	468b      	mov	fp, r1
 80099fe:	f040 81e7 	bne.w	8009dd0 <__ieee754_pow+0x700>
 8009a02:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8009ab8 <__ieee754_pow+0x3e8>
 8009a06:	eeb0 8a47 	vmov.f32	s16, s14
 8009a0a:	eef0 8a67 	vmov.f32	s17, s15
 8009a0e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009a12:	2600      	movs	r6, #0
 8009a14:	4632      	mov	r2, r6
 8009a16:	463b      	mov	r3, r7
 8009a18:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009a1c:	f7f6 fc34 	bl	8000288 <__aeabi_dsub>
 8009a20:	4622      	mov	r2, r4
 8009a22:	462b      	mov	r3, r5
 8009a24:	f7f6 fde8 	bl	80005f8 <__aeabi_dmul>
 8009a28:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009a2c:	4680      	mov	r8, r0
 8009a2e:	4689      	mov	r9, r1
 8009a30:	4650      	mov	r0, sl
 8009a32:	4659      	mov	r1, fp
 8009a34:	f7f6 fde0 	bl	80005f8 <__aeabi_dmul>
 8009a38:	4602      	mov	r2, r0
 8009a3a:	460b      	mov	r3, r1
 8009a3c:	4640      	mov	r0, r8
 8009a3e:	4649      	mov	r1, r9
 8009a40:	f7f6 fc24 	bl	800028c <__adddf3>
 8009a44:	4632      	mov	r2, r6
 8009a46:	463b      	mov	r3, r7
 8009a48:	4680      	mov	r8, r0
 8009a4a:	4689      	mov	r9, r1
 8009a4c:	4620      	mov	r0, r4
 8009a4e:	4629      	mov	r1, r5
 8009a50:	f7f6 fdd2 	bl	80005f8 <__aeabi_dmul>
 8009a54:	460b      	mov	r3, r1
 8009a56:	4604      	mov	r4, r0
 8009a58:	460d      	mov	r5, r1
 8009a5a:	4602      	mov	r2, r0
 8009a5c:	4649      	mov	r1, r9
 8009a5e:	4640      	mov	r0, r8
 8009a60:	f7f6 fc14 	bl	800028c <__adddf3>
 8009a64:	4b19      	ldr	r3, [pc, #100]	; (8009acc <__ieee754_pow+0x3fc>)
 8009a66:	4299      	cmp	r1, r3
 8009a68:	ec45 4b19 	vmov	d9, r4, r5
 8009a6c:	4606      	mov	r6, r0
 8009a6e:	460f      	mov	r7, r1
 8009a70:	468b      	mov	fp, r1
 8009a72:	f340 82f1 	ble.w	800a058 <__ieee754_pow+0x988>
 8009a76:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8009a7a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8009a7e:	4303      	orrs	r3, r0
 8009a80:	f000 81e4 	beq.w	8009e4c <__ieee754_pow+0x77c>
 8009a84:	ec51 0b18 	vmov	r0, r1, d8
 8009a88:	2200      	movs	r2, #0
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	f7f7 f826 	bl	8000adc <__aeabi_dcmplt>
 8009a90:	3800      	subs	r0, #0
 8009a92:	bf18      	it	ne
 8009a94:	2001      	movne	r0, #1
 8009a96:	e72b      	b.n	80098f0 <__ieee754_pow+0x220>
 8009a98:	60000000 	.word	0x60000000
 8009a9c:	3ff71547 	.word	0x3ff71547
 8009aa0:	f85ddf44 	.word	0xf85ddf44
 8009aa4:	3e54ae0b 	.word	0x3e54ae0b
 8009aa8:	55555555 	.word	0x55555555
 8009aac:	3fd55555 	.word	0x3fd55555
 8009ab0:	652b82fe 	.word	0x652b82fe
 8009ab4:	3ff71547 	.word	0x3ff71547
 8009ab8:	00000000 	.word	0x00000000
 8009abc:	bff00000 	.word	0xbff00000
 8009ac0:	3ff00000 	.word	0x3ff00000
 8009ac4:	3fd00000 	.word	0x3fd00000
 8009ac8:	3fe00000 	.word	0x3fe00000
 8009acc:	408fffff 	.word	0x408fffff
 8009ad0:	4bd5      	ldr	r3, [pc, #852]	; (8009e28 <__ieee754_pow+0x758>)
 8009ad2:	402b      	ands	r3, r5
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	b92b      	cbnz	r3, 8009ae4 <__ieee754_pow+0x414>
 8009ad8:	4bd4      	ldr	r3, [pc, #848]	; (8009e2c <__ieee754_pow+0x75c>)
 8009ada:	f7f6 fd8d 	bl	80005f8 <__aeabi_dmul>
 8009ade:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8009ae2:	460c      	mov	r4, r1
 8009ae4:	1523      	asrs	r3, r4, #20
 8009ae6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009aea:	4413      	add	r3, r2
 8009aec:	9305      	str	r3, [sp, #20]
 8009aee:	4bd0      	ldr	r3, [pc, #832]	; (8009e30 <__ieee754_pow+0x760>)
 8009af0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009af4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8009af8:	429c      	cmp	r4, r3
 8009afa:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009afe:	dd08      	ble.n	8009b12 <__ieee754_pow+0x442>
 8009b00:	4bcc      	ldr	r3, [pc, #816]	; (8009e34 <__ieee754_pow+0x764>)
 8009b02:	429c      	cmp	r4, r3
 8009b04:	f340 8162 	ble.w	8009dcc <__ieee754_pow+0x6fc>
 8009b08:	9b05      	ldr	r3, [sp, #20]
 8009b0a:	3301      	adds	r3, #1
 8009b0c:	9305      	str	r3, [sp, #20]
 8009b0e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8009b12:	2400      	movs	r4, #0
 8009b14:	00e3      	lsls	r3, r4, #3
 8009b16:	9307      	str	r3, [sp, #28]
 8009b18:	4bc7      	ldr	r3, [pc, #796]	; (8009e38 <__ieee754_pow+0x768>)
 8009b1a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009b1e:	ed93 7b00 	vldr	d7, [r3]
 8009b22:	4629      	mov	r1, r5
 8009b24:	ec53 2b17 	vmov	r2, r3, d7
 8009b28:	eeb0 9a47 	vmov.f32	s18, s14
 8009b2c:	eef0 9a67 	vmov.f32	s19, s15
 8009b30:	4682      	mov	sl, r0
 8009b32:	f7f6 fba9 	bl	8000288 <__aeabi_dsub>
 8009b36:	4652      	mov	r2, sl
 8009b38:	4606      	mov	r6, r0
 8009b3a:	460f      	mov	r7, r1
 8009b3c:	462b      	mov	r3, r5
 8009b3e:	ec51 0b19 	vmov	r0, r1, d9
 8009b42:	f7f6 fba3 	bl	800028c <__adddf3>
 8009b46:	4602      	mov	r2, r0
 8009b48:	460b      	mov	r3, r1
 8009b4a:	2000      	movs	r0, #0
 8009b4c:	49bb      	ldr	r1, [pc, #748]	; (8009e3c <__ieee754_pow+0x76c>)
 8009b4e:	f7f6 fe7d 	bl	800084c <__aeabi_ddiv>
 8009b52:	ec41 0b1a 	vmov	d10, r0, r1
 8009b56:	4602      	mov	r2, r0
 8009b58:	460b      	mov	r3, r1
 8009b5a:	4630      	mov	r0, r6
 8009b5c:	4639      	mov	r1, r7
 8009b5e:	f7f6 fd4b 	bl	80005f8 <__aeabi_dmul>
 8009b62:	2300      	movs	r3, #0
 8009b64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b68:	9302      	str	r3, [sp, #8]
 8009b6a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009b6e:	46ab      	mov	fp, r5
 8009b70:	106d      	asrs	r5, r5, #1
 8009b72:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8009b76:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8009b7a:	ec41 0b18 	vmov	d8, r0, r1
 8009b7e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8009b82:	2200      	movs	r2, #0
 8009b84:	4640      	mov	r0, r8
 8009b86:	4649      	mov	r1, r9
 8009b88:	4614      	mov	r4, r2
 8009b8a:	461d      	mov	r5, r3
 8009b8c:	f7f6 fd34 	bl	80005f8 <__aeabi_dmul>
 8009b90:	4602      	mov	r2, r0
 8009b92:	460b      	mov	r3, r1
 8009b94:	4630      	mov	r0, r6
 8009b96:	4639      	mov	r1, r7
 8009b98:	f7f6 fb76 	bl	8000288 <__aeabi_dsub>
 8009b9c:	ec53 2b19 	vmov	r2, r3, d9
 8009ba0:	4606      	mov	r6, r0
 8009ba2:	460f      	mov	r7, r1
 8009ba4:	4620      	mov	r0, r4
 8009ba6:	4629      	mov	r1, r5
 8009ba8:	f7f6 fb6e 	bl	8000288 <__aeabi_dsub>
 8009bac:	4602      	mov	r2, r0
 8009bae:	460b      	mov	r3, r1
 8009bb0:	4650      	mov	r0, sl
 8009bb2:	4659      	mov	r1, fp
 8009bb4:	f7f6 fb68 	bl	8000288 <__aeabi_dsub>
 8009bb8:	4642      	mov	r2, r8
 8009bba:	464b      	mov	r3, r9
 8009bbc:	f7f6 fd1c 	bl	80005f8 <__aeabi_dmul>
 8009bc0:	4602      	mov	r2, r0
 8009bc2:	460b      	mov	r3, r1
 8009bc4:	4630      	mov	r0, r6
 8009bc6:	4639      	mov	r1, r7
 8009bc8:	f7f6 fb5e 	bl	8000288 <__aeabi_dsub>
 8009bcc:	ec53 2b1a 	vmov	r2, r3, d10
 8009bd0:	f7f6 fd12 	bl	80005f8 <__aeabi_dmul>
 8009bd4:	ec53 2b18 	vmov	r2, r3, d8
 8009bd8:	ec41 0b19 	vmov	d9, r0, r1
 8009bdc:	ec51 0b18 	vmov	r0, r1, d8
 8009be0:	f7f6 fd0a 	bl	80005f8 <__aeabi_dmul>
 8009be4:	a37c      	add	r3, pc, #496	; (adr r3, 8009dd8 <__ieee754_pow+0x708>)
 8009be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bea:	4604      	mov	r4, r0
 8009bec:	460d      	mov	r5, r1
 8009bee:	f7f6 fd03 	bl	80005f8 <__aeabi_dmul>
 8009bf2:	a37b      	add	r3, pc, #492	; (adr r3, 8009de0 <__ieee754_pow+0x710>)
 8009bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bf8:	f7f6 fb48 	bl	800028c <__adddf3>
 8009bfc:	4622      	mov	r2, r4
 8009bfe:	462b      	mov	r3, r5
 8009c00:	f7f6 fcfa 	bl	80005f8 <__aeabi_dmul>
 8009c04:	a378      	add	r3, pc, #480	; (adr r3, 8009de8 <__ieee754_pow+0x718>)
 8009c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c0a:	f7f6 fb3f 	bl	800028c <__adddf3>
 8009c0e:	4622      	mov	r2, r4
 8009c10:	462b      	mov	r3, r5
 8009c12:	f7f6 fcf1 	bl	80005f8 <__aeabi_dmul>
 8009c16:	a376      	add	r3, pc, #472	; (adr r3, 8009df0 <__ieee754_pow+0x720>)
 8009c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c1c:	f7f6 fb36 	bl	800028c <__adddf3>
 8009c20:	4622      	mov	r2, r4
 8009c22:	462b      	mov	r3, r5
 8009c24:	f7f6 fce8 	bl	80005f8 <__aeabi_dmul>
 8009c28:	a373      	add	r3, pc, #460	; (adr r3, 8009df8 <__ieee754_pow+0x728>)
 8009c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c2e:	f7f6 fb2d 	bl	800028c <__adddf3>
 8009c32:	4622      	mov	r2, r4
 8009c34:	462b      	mov	r3, r5
 8009c36:	f7f6 fcdf 	bl	80005f8 <__aeabi_dmul>
 8009c3a:	a371      	add	r3, pc, #452	; (adr r3, 8009e00 <__ieee754_pow+0x730>)
 8009c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c40:	f7f6 fb24 	bl	800028c <__adddf3>
 8009c44:	4622      	mov	r2, r4
 8009c46:	4606      	mov	r6, r0
 8009c48:	460f      	mov	r7, r1
 8009c4a:	462b      	mov	r3, r5
 8009c4c:	4620      	mov	r0, r4
 8009c4e:	4629      	mov	r1, r5
 8009c50:	f7f6 fcd2 	bl	80005f8 <__aeabi_dmul>
 8009c54:	4602      	mov	r2, r0
 8009c56:	460b      	mov	r3, r1
 8009c58:	4630      	mov	r0, r6
 8009c5a:	4639      	mov	r1, r7
 8009c5c:	f7f6 fccc 	bl	80005f8 <__aeabi_dmul>
 8009c60:	4642      	mov	r2, r8
 8009c62:	4604      	mov	r4, r0
 8009c64:	460d      	mov	r5, r1
 8009c66:	464b      	mov	r3, r9
 8009c68:	ec51 0b18 	vmov	r0, r1, d8
 8009c6c:	f7f6 fb0e 	bl	800028c <__adddf3>
 8009c70:	ec53 2b19 	vmov	r2, r3, d9
 8009c74:	f7f6 fcc0 	bl	80005f8 <__aeabi_dmul>
 8009c78:	4622      	mov	r2, r4
 8009c7a:	462b      	mov	r3, r5
 8009c7c:	f7f6 fb06 	bl	800028c <__adddf3>
 8009c80:	4642      	mov	r2, r8
 8009c82:	4682      	mov	sl, r0
 8009c84:	468b      	mov	fp, r1
 8009c86:	464b      	mov	r3, r9
 8009c88:	4640      	mov	r0, r8
 8009c8a:	4649      	mov	r1, r9
 8009c8c:	f7f6 fcb4 	bl	80005f8 <__aeabi_dmul>
 8009c90:	4b6b      	ldr	r3, [pc, #428]	; (8009e40 <__ieee754_pow+0x770>)
 8009c92:	2200      	movs	r2, #0
 8009c94:	4606      	mov	r6, r0
 8009c96:	460f      	mov	r7, r1
 8009c98:	f7f6 faf8 	bl	800028c <__adddf3>
 8009c9c:	4652      	mov	r2, sl
 8009c9e:	465b      	mov	r3, fp
 8009ca0:	f7f6 faf4 	bl	800028c <__adddf3>
 8009ca4:	2000      	movs	r0, #0
 8009ca6:	4604      	mov	r4, r0
 8009ca8:	460d      	mov	r5, r1
 8009caa:	4602      	mov	r2, r0
 8009cac:	460b      	mov	r3, r1
 8009cae:	4640      	mov	r0, r8
 8009cb0:	4649      	mov	r1, r9
 8009cb2:	f7f6 fca1 	bl	80005f8 <__aeabi_dmul>
 8009cb6:	4b62      	ldr	r3, [pc, #392]	; (8009e40 <__ieee754_pow+0x770>)
 8009cb8:	4680      	mov	r8, r0
 8009cba:	4689      	mov	r9, r1
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	4620      	mov	r0, r4
 8009cc0:	4629      	mov	r1, r5
 8009cc2:	f7f6 fae1 	bl	8000288 <__aeabi_dsub>
 8009cc6:	4632      	mov	r2, r6
 8009cc8:	463b      	mov	r3, r7
 8009cca:	f7f6 fadd 	bl	8000288 <__aeabi_dsub>
 8009cce:	4602      	mov	r2, r0
 8009cd0:	460b      	mov	r3, r1
 8009cd2:	4650      	mov	r0, sl
 8009cd4:	4659      	mov	r1, fp
 8009cd6:	f7f6 fad7 	bl	8000288 <__aeabi_dsub>
 8009cda:	ec53 2b18 	vmov	r2, r3, d8
 8009cde:	f7f6 fc8b 	bl	80005f8 <__aeabi_dmul>
 8009ce2:	4622      	mov	r2, r4
 8009ce4:	4606      	mov	r6, r0
 8009ce6:	460f      	mov	r7, r1
 8009ce8:	462b      	mov	r3, r5
 8009cea:	ec51 0b19 	vmov	r0, r1, d9
 8009cee:	f7f6 fc83 	bl	80005f8 <__aeabi_dmul>
 8009cf2:	4602      	mov	r2, r0
 8009cf4:	460b      	mov	r3, r1
 8009cf6:	4630      	mov	r0, r6
 8009cf8:	4639      	mov	r1, r7
 8009cfa:	f7f6 fac7 	bl	800028c <__adddf3>
 8009cfe:	4606      	mov	r6, r0
 8009d00:	460f      	mov	r7, r1
 8009d02:	4602      	mov	r2, r0
 8009d04:	460b      	mov	r3, r1
 8009d06:	4640      	mov	r0, r8
 8009d08:	4649      	mov	r1, r9
 8009d0a:	f7f6 fabf 	bl	800028c <__adddf3>
 8009d0e:	a33e      	add	r3, pc, #248	; (adr r3, 8009e08 <__ieee754_pow+0x738>)
 8009d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d14:	2000      	movs	r0, #0
 8009d16:	4604      	mov	r4, r0
 8009d18:	460d      	mov	r5, r1
 8009d1a:	f7f6 fc6d 	bl	80005f8 <__aeabi_dmul>
 8009d1e:	4642      	mov	r2, r8
 8009d20:	ec41 0b18 	vmov	d8, r0, r1
 8009d24:	464b      	mov	r3, r9
 8009d26:	4620      	mov	r0, r4
 8009d28:	4629      	mov	r1, r5
 8009d2a:	f7f6 faad 	bl	8000288 <__aeabi_dsub>
 8009d2e:	4602      	mov	r2, r0
 8009d30:	460b      	mov	r3, r1
 8009d32:	4630      	mov	r0, r6
 8009d34:	4639      	mov	r1, r7
 8009d36:	f7f6 faa7 	bl	8000288 <__aeabi_dsub>
 8009d3a:	a335      	add	r3, pc, #212	; (adr r3, 8009e10 <__ieee754_pow+0x740>)
 8009d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d40:	f7f6 fc5a 	bl	80005f8 <__aeabi_dmul>
 8009d44:	a334      	add	r3, pc, #208	; (adr r3, 8009e18 <__ieee754_pow+0x748>)
 8009d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d4a:	4606      	mov	r6, r0
 8009d4c:	460f      	mov	r7, r1
 8009d4e:	4620      	mov	r0, r4
 8009d50:	4629      	mov	r1, r5
 8009d52:	f7f6 fc51 	bl	80005f8 <__aeabi_dmul>
 8009d56:	4602      	mov	r2, r0
 8009d58:	460b      	mov	r3, r1
 8009d5a:	4630      	mov	r0, r6
 8009d5c:	4639      	mov	r1, r7
 8009d5e:	f7f6 fa95 	bl	800028c <__adddf3>
 8009d62:	9a07      	ldr	r2, [sp, #28]
 8009d64:	4b37      	ldr	r3, [pc, #220]	; (8009e44 <__ieee754_pow+0x774>)
 8009d66:	4413      	add	r3, r2
 8009d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d6c:	f7f6 fa8e 	bl	800028c <__adddf3>
 8009d70:	4682      	mov	sl, r0
 8009d72:	9805      	ldr	r0, [sp, #20]
 8009d74:	468b      	mov	fp, r1
 8009d76:	f7f6 fbd5 	bl	8000524 <__aeabi_i2d>
 8009d7a:	9a07      	ldr	r2, [sp, #28]
 8009d7c:	4b32      	ldr	r3, [pc, #200]	; (8009e48 <__ieee754_pow+0x778>)
 8009d7e:	4413      	add	r3, r2
 8009d80:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009d84:	4606      	mov	r6, r0
 8009d86:	460f      	mov	r7, r1
 8009d88:	4652      	mov	r2, sl
 8009d8a:	465b      	mov	r3, fp
 8009d8c:	ec51 0b18 	vmov	r0, r1, d8
 8009d90:	f7f6 fa7c 	bl	800028c <__adddf3>
 8009d94:	4642      	mov	r2, r8
 8009d96:	464b      	mov	r3, r9
 8009d98:	f7f6 fa78 	bl	800028c <__adddf3>
 8009d9c:	4632      	mov	r2, r6
 8009d9e:	463b      	mov	r3, r7
 8009da0:	f7f6 fa74 	bl	800028c <__adddf3>
 8009da4:	2000      	movs	r0, #0
 8009da6:	4632      	mov	r2, r6
 8009da8:	463b      	mov	r3, r7
 8009daa:	4604      	mov	r4, r0
 8009dac:	460d      	mov	r5, r1
 8009dae:	f7f6 fa6b 	bl	8000288 <__aeabi_dsub>
 8009db2:	4642      	mov	r2, r8
 8009db4:	464b      	mov	r3, r9
 8009db6:	f7f6 fa67 	bl	8000288 <__aeabi_dsub>
 8009dba:	ec53 2b18 	vmov	r2, r3, d8
 8009dbe:	f7f6 fa63 	bl	8000288 <__aeabi_dsub>
 8009dc2:	4602      	mov	r2, r0
 8009dc4:	460b      	mov	r3, r1
 8009dc6:	4650      	mov	r0, sl
 8009dc8:	4659      	mov	r1, fp
 8009dca:	e610      	b.n	80099ee <__ieee754_pow+0x31e>
 8009dcc:	2401      	movs	r4, #1
 8009dce:	e6a1      	b.n	8009b14 <__ieee754_pow+0x444>
 8009dd0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8009e20 <__ieee754_pow+0x750>
 8009dd4:	e617      	b.n	8009a06 <__ieee754_pow+0x336>
 8009dd6:	bf00      	nop
 8009dd8:	4a454eef 	.word	0x4a454eef
 8009ddc:	3fca7e28 	.word	0x3fca7e28
 8009de0:	93c9db65 	.word	0x93c9db65
 8009de4:	3fcd864a 	.word	0x3fcd864a
 8009de8:	a91d4101 	.word	0xa91d4101
 8009dec:	3fd17460 	.word	0x3fd17460
 8009df0:	518f264d 	.word	0x518f264d
 8009df4:	3fd55555 	.word	0x3fd55555
 8009df8:	db6fabff 	.word	0xdb6fabff
 8009dfc:	3fdb6db6 	.word	0x3fdb6db6
 8009e00:	33333303 	.word	0x33333303
 8009e04:	3fe33333 	.word	0x3fe33333
 8009e08:	e0000000 	.word	0xe0000000
 8009e0c:	3feec709 	.word	0x3feec709
 8009e10:	dc3a03fd 	.word	0xdc3a03fd
 8009e14:	3feec709 	.word	0x3feec709
 8009e18:	145b01f5 	.word	0x145b01f5
 8009e1c:	be3e2fe0 	.word	0xbe3e2fe0
 8009e20:	00000000 	.word	0x00000000
 8009e24:	3ff00000 	.word	0x3ff00000
 8009e28:	7ff00000 	.word	0x7ff00000
 8009e2c:	43400000 	.word	0x43400000
 8009e30:	0003988e 	.word	0x0003988e
 8009e34:	000bb679 	.word	0x000bb679
 8009e38:	0800acd8 	.word	0x0800acd8
 8009e3c:	3ff00000 	.word	0x3ff00000
 8009e40:	40080000 	.word	0x40080000
 8009e44:	0800acf8 	.word	0x0800acf8
 8009e48:	0800ace8 	.word	0x0800ace8
 8009e4c:	a3b5      	add	r3, pc, #724	; (adr r3, 800a124 <__ieee754_pow+0xa54>)
 8009e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e52:	4640      	mov	r0, r8
 8009e54:	4649      	mov	r1, r9
 8009e56:	f7f6 fa19 	bl	800028c <__adddf3>
 8009e5a:	4622      	mov	r2, r4
 8009e5c:	ec41 0b1a 	vmov	d10, r0, r1
 8009e60:	462b      	mov	r3, r5
 8009e62:	4630      	mov	r0, r6
 8009e64:	4639      	mov	r1, r7
 8009e66:	f7f6 fa0f 	bl	8000288 <__aeabi_dsub>
 8009e6a:	4602      	mov	r2, r0
 8009e6c:	460b      	mov	r3, r1
 8009e6e:	ec51 0b1a 	vmov	r0, r1, d10
 8009e72:	f7f6 fe51 	bl	8000b18 <__aeabi_dcmpgt>
 8009e76:	2800      	cmp	r0, #0
 8009e78:	f47f ae04 	bne.w	8009a84 <__ieee754_pow+0x3b4>
 8009e7c:	4aa4      	ldr	r2, [pc, #656]	; (800a110 <__ieee754_pow+0xa40>)
 8009e7e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009e82:	4293      	cmp	r3, r2
 8009e84:	f340 8108 	ble.w	800a098 <__ieee754_pow+0x9c8>
 8009e88:	151b      	asrs	r3, r3, #20
 8009e8a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8009e8e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8009e92:	fa4a f303 	asr.w	r3, sl, r3
 8009e96:	445b      	add	r3, fp
 8009e98:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8009e9c:	4e9d      	ldr	r6, [pc, #628]	; (800a114 <__ieee754_pow+0xa44>)
 8009e9e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8009ea2:	4116      	asrs	r6, r2
 8009ea4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8009ea8:	2000      	movs	r0, #0
 8009eaa:	ea23 0106 	bic.w	r1, r3, r6
 8009eae:	f1c2 0214 	rsb	r2, r2, #20
 8009eb2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8009eb6:	fa4a fa02 	asr.w	sl, sl, r2
 8009eba:	f1bb 0f00 	cmp.w	fp, #0
 8009ebe:	4602      	mov	r2, r0
 8009ec0:	460b      	mov	r3, r1
 8009ec2:	4620      	mov	r0, r4
 8009ec4:	4629      	mov	r1, r5
 8009ec6:	bfb8      	it	lt
 8009ec8:	f1ca 0a00 	rsblt	sl, sl, #0
 8009ecc:	f7f6 f9dc 	bl	8000288 <__aeabi_dsub>
 8009ed0:	ec41 0b19 	vmov	d9, r0, r1
 8009ed4:	4642      	mov	r2, r8
 8009ed6:	464b      	mov	r3, r9
 8009ed8:	ec51 0b19 	vmov	r0, r1, d9
 8009edc:	f7f6 f9d6 	bl	800028c <__adddf3>
 8009ee0:	a37b      	add	r3, pc, #492	; (adr r3, 800a0d0 <__ieee754_pow+0xa00>)
 8009ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ee6:	2000      	movs	r0, #0
 8009ee8:	4604      	mov	r4, r0
 8009eea:	460d      	mov	r5, r1
 8009eec:	f7f6 fb84 	bl	80005f8 <__aeabi_dmul>
 8009ef0:	ec53 2b19 	vmov	r2, r3, d9
 8009ef4:	4606      	mov	r6, r0
 8009ef6:	460f      	mov	r7, r1
 8009ef8:	4620      	mov	r0, r4
 8009efa:	4629      	mov	r1, r5
 8009efc:	f7f6 f9c4 	bl	8000288 <__aeabi_dsub>
 8009f00:	4602      	mov	r2, r0
 8009f02:	460b      	mov	r3, r1
 8009f04:	4640      	mov	r0, r8
 8009f06:	4649      	mov	r1, r9
 8009f08:	f7f6 f9be 	bl	8000288 <__aeabi_dsub>
 8009f0c:	a372      	add	r3, pc, #456	; (adr r3, 800a0d8 <__ieee754_pow+0xa08>)
 8009f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f12:	f7f6 fb71 	bl	80005f8 <__aeabi_dmul>
 8009f16:	a372      	add	r3, pc, #456	; (adr r3, 800a0e0 <__ieee754_pow+0xa10>)
 8009f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f1c:	4680      	mov	r8, r0
 8009f1e:	4689      	mov	r9, r1
 8009f20:	4620      	mov	r0, r4
 8009f22:	4629      	mov	r1, r5
 8009f24:	f7f6 fb68 	bl	80005f8 <__aeabi_dmul>
 8009f28:	4602      	mov	r2, r0
 8009f2a:	460b      	mov	r3, r1
 8009f2c:	4640      	mov	r0, r8
 8009f2e:	4649      	mov	r1, r9
 8009f30:	f7f6 f9ac 	bl	800028c <__adddf3>
 8009f34:	4604      	mov	r4, r0
 8009f36:	460d      	mov	r5, r1
 8009f38:	4602      	mov	r2, r0
 8009f3a:	460b      	mov	r3, r1
 8009f3c:	4630      	mov	r0, r6
 8009f3e:	4639      	mov	r1, r7
 8009f40:	f7f6 f9a4 	bl	800028c <__adddf3>
 8009f44:	4632      	mov	r2, r6
 8009f46:	463b      	mov	r3, r7
 8009f48:	4680      	mov	r8, r0
 8009f4a:	4689      	mov	r9, r1
 8009f4c:	f7f6 f99c 	bl	8000288 <__aeabi_dsub>
 8009f50:	4602      	mov	r2, r0
 8009f52:	460b      	mov	r3, r1
 8009f54:	4620      	mov	r0, r4
 8009f56:	4629      	mov	r1, r5
 8009f58:	f7f6 f996 	bl	8000288 <__aeabi_dsub>
 8009f5c:	4642      	mov	r2, r8
 8009f5e:	4606      	mov	r6, r0
 8009f60:	460f      	mov	r7, r1
 8009f62:	464b      	mov	r3, r9
 8009f64:	4640      	mov	r0, r8
 8009f66:	4649      	mov	r1, r9
 8009f68:	f7f6 fb46 	bl	80005f8 <__aeabi_dmul>
 8009f6c:	a35e      	add	r3, pc, #376	; (adr r3, 800a0e8 <__ieee754_pow+0xa18>)
 8009f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f72:	4604      	mov	r4, r0
 8009f74:	460d      	mov	r5, r1
 8009f76:	f7f6 fb3f 	bl	80005f8 <__aeabi_dmul>
 8009f7a:	a35d      	add	r3, pc, #372	; (adr r3, 800a0f0 <__ieee754_pow+0xa20>)
 8009f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f80:	f7f6 f982 	bl	8000288 <__aeabi_dsub>
 8009f84:	4622      	mov	r2, r4
 8009f86:	462b      	mov	r3, r5
 8009f88:	f7f6 fb36 	bl	80005f8 <__aeabi_dmul>
 8009f8c:	a35a      	add	r3, pc, #360	; (adr r3, 800a0f8 <__ieee754_pow+0xa28>)
 8009f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f92:	f7f6 f97b 	bl	800028c <__adddf3>
 8009f96:	4622      	mov	r2, r4
 8009f98:	462b      	mov	r3, r5
 8009f9a:	f7f6 fb2d 	bl	80005f8 <__aeabi_dmul>
 8009f9e:	a358      	add	r3, pc, #352	; (adr r3, 800a100 <__ieee754_pow+0xa30>)
 8009fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fa4:	f7f6 f970 	bl	8000288 <__aeabi_dsub>
 8009fa8:	4622      	mov	r2, r4
 8009faa:	462b      	mov	r3, r5
 8009fac:	f7f6 fb24 	bl	80005f8 <__aeabi_dmul>
 8009fb0:	a355      	add	r3, pc, #340	; (adr r3, 800a108 <__ieee754_pow+0xa38>)
 8009fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fb6:	f7f6 f969 	bl	800028c <__adddf3>
 8009fba:	4622      	mov	r2, r4
 8009fbc:	462b      	mov	r3, r5
 8009fbe:	f7f6 fb1b 	bl	80005f8 <__aeabi_dmul>
 8009fc2:	4602      	mov	r2, r0
 8009fc4:	460b      	mov	r3, r1
 8009fc6:	4640      	mov	r0, r8
 8009fc8:	4649      	mov	r1, r9
 8009fca:	f7f6 f95d 	bl	8000288 <__aeabi_dsub>
 8009fce:	4604      	mov	r4, r0
 8009fd0:	460d      	mov	r5, r1
 8009fd2:	4602      	mov	r2, r0
 8009fd4:	460b      	mov	r3, r1
 8009fd6:	4640      	mov	r0, r8
 8009fd8:	4649      	mov	r1, r9
 8009fda:	f7f6 fb0d 	bl	80005f8 <__aeabi_dmul>
 8009fde:	2200      	movs	r2, #0
 8009fe0:	ec41 0b19 	vmov	d9, r0, r1
 8009fe4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009fe8:	4620      	mov	r0, r4
 8009fea:	4629      	mov	r1, r5
 8009fec:	f7f6 f94c 	bl	8000288 <__aeabi_dsub>
 8009ff0:	4602      	mov	r2, r0
 8009ff2:	460b      	mov	r3, r1
 8009ff4:	ec51 0b19 	vmov	r0, r1, d9
 8009ff8:	f7f6 fc28 	bl	800084c <__aeabi_ddiv>
 8009ffc:	4632      	mov	r2, r6
 8009ffe:	4604      	mov	r4, r0
 800a000:	460d      	mov	r5, r1
 800a002:	463b      	mov	r3, r7
 800a004:	4640      	mov	r0, r8
 800a006:	4649      	mov	r1, r9
 800a008:	f7f6 faf6 	bl	80005f8 <__aeabi_dmul>
 800a00c:	4632      	mov	r2, r6
 800a00e:	463b      	mov	r3, r7
 800a010:	f7f6 f93c 	bl	800028c <__adddf3>
 800a014:	4602      	mov	r2, r0
 800a016:	460b      	mov	r3, r1
 800a018:	4620      	mov	r0, r4
 800a01a:	4629      	mov	r1, r5
 800a01c:	f7f6 f934 	bl	8000288 <__aeabi_dsub>
 800a020:	4642      	mov	r2, r8
 800a022:	464b      	mov	r3, r9
 800a024:	f7f6 f930 	bl	8000288 <__aeabi_dsub>
 800a028:	460b      	mov	r3, r1
 800a02a:	4602      	mov	r2, r0
 800a02c:	493a      	ldr	r1, [pc, #232]	; (800a118 <__ieee754_pow+0xa48>)
 800a02e:	2000      	movs	r0, #0
 800a030:	f7f6 f92a 	bl	8000288 <__aeabi_dsub>
 800a034:	ec41 0b10 	vmov	d0, r0, r1
 800a038:	ee10 3a90 	vmov	r3, s1
 800a03c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800a040:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a044:	da2b      	bge.n	800a09e <__ieee754_pow+0x9ce>
 800a046:	4650      	mov	r0, sl
 800a048:	f000 f96e 	bl	800a328 <scalbn>
 800a04c:	ec51 0b10 	vmov	r0, r1, d0
 800a050:	ec53 2b18 	vmov	r2, r3, d8
 800a054:	f7ff bbed 	b.w	8009832 <__ieee754_pow+0x162>
 800a058:	4b30      	ldr	r3, [pc, #192]	; (800a11c <__ieee754_pow+0xa4c>)
 800a05a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800a05e:	429e      	cmp	r6, r3
 800a060:	f77f af0c 	ble.w	8009e7c <__ieee754_pow+0x7ac>
 800a064:	4b2e      	ldr	r3, [pc, #184]	; (800a120 <__ieee754_pow+0xa50>)
 800a066:	440b      	add	r3, r1
 800a068:	4303      	orrs	r3, r0
 800a06a:	d009      	beq.n	800a080 <__ieee754_pow+0x9b0>
 800a06c:	ec51 0b18 	vmov	r0, r1, d8
 800a070:	2200      	movs	r2, #0
 800a072:	2300      	movs	r3, #0
 800a074:	f7f6 fd32 	bl	8000adc <__aeabi_dcmplt>
 800a078:	3800      	subs	r0, #0
 800a07a:	bf18      	it	ne
 800a07c:	2001      	movne	r0, #1
 800a07e:	e447      	b.n	8009910 <__ieee754_pow+0x240>
 800a080:	4622      	mov	r2, r4
 800a082:	462b      	mov	r3, r5
 800a084:	f7f6 f900 	bl	8000288 <__aeabi_dsub>
 800a088:	4642      	mov	r2, r8
 800a08a:	464b      	mov	r3, r9
 800a08c:	f7f6 fd3a 	bl	8000b04 <__aeabi_dcmpge>
 800a090:	2800      	cmp	r0, #0
 800a092:	f43f aef3 	beq.w	8009e7c <__ieee754_pow+0x7ac>
 800a096:	e7e9      	b.n	800a06c <__ieee754_pow+0x99c>
 800a098:	f04f 0a00 	mov.w	sl, #0
 800a09c:	e71a      	b.n	8009ed4 <__ieee754_pow+0x804>
 800a09e:	ec51 0b10 	vmov	r0, r1, d0
 800a0a2:	4619      	mov	r1, r3
 800a0a4:	e7d4      	b.n	800a050 <__ieee754_pow+0x980>
 800a0a6:	491c      	ldr	r1, [pc, #112]	; (800a118 <__ieee754_pow+0xa48>)
 800a0a8:	2000      	movs	r0, #0
 800a0aa:	f7ff bb30 	b.w	800970e <__ieee754_pow+0x3e>
 800a0ae:	2000      	movs	r0, #0
 800a0b0:	2100      	movs	r1, #0
 800a0b2:	f7ff bb2c 	b.w	800970e <__ieee754_pow+0x3e>
 800a0b6:	4630      	mov	r0, r6
 800a0b8:	4639      	mov	r1, r7
 800a0ba:	f7ff bb28 	b.w	800970e <__ieee754_pow+0x3e>
 800a0be:	9204      	str	r2, [sp, #16]
 800a0c0:	f7ff bb7a 	b.w	80097b8 <__ieee754_pow+0xe8>
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	f7ff bb64 	b.w	8009792 <__ieee754_pow+0xc2>
 800a0ca:	bf00      	nop
 800a0cc:	f3af 8000 	nop.w
 800a0d0:	00000000 	.word	0x00000000
 800a0d4:	3fe62e43 	.word	0x3fe62e43
 800a0d8:	fefa39ef 	.word	0xfefa39ef
 800a0dc:	3fe62e42 	.word	0x3fe62e42
 800a0e0:	0ca86c39 	.word	0x0ca86c39
 800a0e4:	be205c61 	.word	0xbe205c61
 800a0e8:	72bea4d0 	.word	0x72bea4d0
 800a0ec:	3e663769 	.word	0x3e663769
 800a0f0:	c5d26bf1 	.word	0xc5d26bf1
 800a0f4:	3ebbbd41 	.word	0x3ebbbd41
 800a0f8:	af25de2c 	.word	0xaf25de2c
 800a0fc:	3f11566a 	.word	0x3f11566a
 800a100:	16bebd93 	.word	0x16bebd93
 800a104:	3f66c16c 	.word	0x3f66c16c
 800a108:	5555553e 	.word	0x5555553e
 800a10c:	3fc55555 	.word	0x3fc55555
 800a110:	3fe00000 	.word	0x3fe00000
 800a114:	000fffff 	.word	0x000fffff
 800a118:	3ff00000 	.word	0x3ff00000
 800a11c:	4090cbff 	.word	0x4090cbff
 800a120:	3f6f3400 	.word	0x3f6f3400
 800a124:	652b82fe 	.word	0x652b82fe
 800a128:	3c971547 	.word	0x3c971547

0800a12c <__ieee754_sqrt>:
 800a12c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a130:	ec55 4b10 	vmov	r4, r5, d0
 800a134:	4e55      	ldr	r6, [pc, #340]	; (800a28c <__ieee754_sqrt+0x160>)
 800a136:	43ae      	bics	r6, r5
 800a138:	ee10 0a10 	vmov	r0, s0
 800a13c:	ee10 3a10 	vmov	r3, s0
 800a140:	462a      	mov	r2, r5
 800a142:	4629      	mov	r1, r5
 800a144:	d110      	bne.n	800a168 <__ieee754_sqrt+0x3c>
 800a146:	ee10 2a10 	vmov	r2, s0
 800a14a:	462b      	mov	r3, r5
 800a14c:	f7f6 fa54 	bl	80005f8 <__aeabi_dmul>
 800a150:	4602      	mov	r2, r0
 800a152:	460b      	mov	r3, r1
 800a154:	4620      	mov	r0, r4
 800a156:	4629      	mov	r1, r5
 800a158:	f7f6 f898 	bl	800028c <__adddf3>
 800a15c:	4604      	mov	r4, r0
 800a15e:	460d      	mov	r5, r1
 800a160:	ec45 4b10 	vmov	d0, r4, r5
 800a164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a168:	2d00      	cmp	r5, #0
 800a16a:	dc10      	bgt.n	800a18e <__ieee754_sqrt+0x62>
 800a16c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a170:	4330      	orrs	r0, r6
 800a172:	d0f5      	beq.n	800a160 <__ieee754_sqrt+0x34>
 800a174:	b15d      	cbz	r5, 800a18e <__ieee754_sqrt+0x62>
 800a176:	ee10 2a10 	vmov	r2, s0
 800a17a:	462b      	mov	r3, r5
 800a17c:	ee10 0a10 	vmov	r0, s0
 800a180:	f7f6 f882 	bl	8000288 <__aeabi_dsub>
 800a184:	4602      	mov	r2, r0
 800a186:	460b      	mov	r3, r1
 800a188:	f7f6 fb60 	bl	800084c <__aeabi_ddiv>
 800a18c:	e7e6      	b.n	800a15c <__ieee754_sqrt+0x30>
 800a18e:	1512      	asrs	r2, r2, #20
 800a190:	d074      	beq.n	800a27c <__ieee754_sqrt+0x150>
 800a192:	07d4      	lsls	r4, r2, #31
 800a194:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800a198:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800a19c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800a1a0:	bf5e      	ittt	pl
 800a1a2:	0fda      	lsrpl	r2, r3, #31
 800a1a4:	005b      	lslpl	r3, r3, #1
 800a1a6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800a1aa:	2400      	movs	r4, #0
 800a1ac:	0fda      	lsrs	r2, r3, #31
 800a1ae:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800a1b2:	107f      	asrs	r7, r7, #1
 800a1b4:	005b      	lsls	r3, r3, #1
 800a1b6:	2516      	movs	r5, #22
 800a1b8:	4620      	mov	r0, r4
 800a1ba:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800a1be:	1886      	adds	r6, r0, r2
 800a1c0:	428e      	cmp	r6, r1
 800a1c2:	bfde      	ittt	le
 800a1c4:	1b89      	suble	r1, r1, r6
 800a1c6:	18b0      	addle	r0, r6, r2
 800a1c8:	18a4      	addle	r4, r4, r2
 800a1ca:	0049      	lsls	r1, r1, #1
 800a1cc:	3d01      	subs	r5, #1
 800a1ce:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800a1d2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800a1d6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a1da:	d1f0      	bne.n	800a1be <__ieee754_sqrt+0x92>
 800a1dc:	462a      	mov	r2, r5
 800a1de:	f04f 0e20 	mov.w	lr, #32
 800a1e2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a1e6:	4281      	cmp	r1, r0
 800a1e8:	eb06 0c05 	add.w	ip, r6, r5
 800a1ec:	dc02      	bgt.n	800a1f4 <__ieee754_sqrt+0xc8>
 800a1ee:	d113      	bne.n	800a218 <__ieee754_sqrt+0xec>
 800a1f0:	459c      	cmp	ip, r3
 800a1f2:	d811      	bhi.n	800a218 <__ieee754_sqrt+0xec>
 800a1f4:	f1bc 0f00 	cmp.w	ip, #0
 800a1f8:	eb0c 0506 	add.w	r5, ip, r6
 800a1fc:	da43      	bge.n	800a286 <__ieee754_sqrt+0x15a>
 800a1fe:	2d00      	cmp	r5, #0
 800a200:	db41      	blt.n	800a286 <__ieee754_sqrt+0x15a>
 800a202:	f100 0801 	add.w	r8, r0, #1
 800a206:	1a09      	subs	r1, r1, r0
 800a208:	459c      	cmp	ip, r3
 800a20a:	bf88      	it	hi
 800a20c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800a210:	eba3 030c 	sub.w	r3, r3, ip
 800a214:	4432      	add	r2, r6
 800a216:	4640      	mov	r0, r8
 800a218:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800a21c:	f1be 0e01 	subs.w	lr, lr, #1
 800a220:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800a224:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a228:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a22c:	d1db      	bne.n	800a1e6 <__ieee754_sqrt+0xba>
 800a22e:	430b      	orrs	r3, r1
 800a230:	d006      	beq.n	800a240 <__ieee754_sqrt+0x114>
 800a232:	1c50      	adds	r0, r2, #1
 800a234:	bf13      	iteet	ne
 800a236:	3201      	addne	r2, #1
 800a238:	3401      	addeq	r4, #1
 800a23a:	4672      	moveq	r2, lr
 800a23c:	f022 0201 	bicne.w	r2, r2, #1
 800a240:	1063      	asrs	r3, r4, #1
 800a242:	0852      	lsrs	r2, r2, #1
 800a244:	07e1      	lsls	r1, r4, #31
 800a246:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a24a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a24e:	bf48      	it	mi
 800a250:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800a254:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800a258:	4614      	mov	r4, r2
 800a25a:	e781      	b.n	800a160 <__ieee754_sqrt+0x34>
 800a25c:	0ad9      	lsrs	r1, r3, #11
 800a25e:	3815      	subs	r0, #21
 800a260:	055b      	lsls	r3, r3, #21
 800a262:	2900      	cmp	r1, #0
 800a264:	d0fa      	beq.n	800a25c <__ieee754_sqrt+0x130>
 800a266:	02cd      	lsls	r5, r1, #11
 800a268:	d50a      	bpl.n	800a280 <__ieee754_sqrt+0x154>
 800a26a:	f1c2 0420 	rsb	r4, r2, #32
 800a26e:	fa23 f404 	lsr.w	r4, r3, r4
 800a272:	1e55      	subs	r5, r2, #1
 800a274:	4093      	lsls	r3, r2
 800a276:	4321      	orrs	r1, r4
 800a278:	1b42      	subs	r2, r0, r5
 800a27a:	e78a      	b.n	800a192 <__ieee754_sqrt+0x66>
 800a27c:	4610      	mov	r0, r2
 800a27e:	e7f0      	b.n	800a262 <__ieee754_sqrt+0x136>
 800a280:	0049      	lsls	r1, r1, #1
 800a282:	3201      	adds	r2, #1
 800a284:	e7ef      	b.n	800a266 <__ieee754_sqrt+0x13a>
 800a286:	4680      	mov	r8, r0
 800a288:	e7bd      	b.n	800a206 <__ieee754_sqrt+0xda>
 800a28a:	bf00      	nop
 800a28c:	7ff00000 	.word	0x7ff00000

0800a290 <with_errno>:
 800a290:	b570      	push	{r4, r5, r6, lr}
 800a292:	4604      	mov	r4, r0
 800a294:	460d      	mov	r5, r1
 800a296:	4616      	mov	r6, r2
 800a298:	f7fc f9c8 	bl	800662c <__errno>
 800a29c:	4629      	mov	r1, r5
 800a29e:	6006      	str	r6, [r0, #0]
 800a2a0:	4620      	mov	r0, r4
 800a2a2:	bd70      	pop	{r4, r5, r6, pc}

0800a2a4 <xflow>:
 800a2a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a2a6:	4614      	mov	r4, r2
 800a2a8:	461d      	mov	r5, r3
 800a2aa:	b108      	cbz	r0, 800a2b0 <xflow+0xc>
 800a2ac:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a2b0:	e9cd 2300 	strd	r2, r3, [sp]
 800a2b4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a2b8:	4620      	mov	r0, r4
 800a2ba:	4629      	mov	r1, r5
 800a2bc:	f7f6 f99c 	bl	80005f8 <__aeabi_dmul>
 800a2c0:	2222      	movs	r2, #34	; 0x22
 800a2c2:	b003      	add	sp, #12
 800a2c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a2c8:	f7ff bfe2 	b.w	800a290 <with_errno>

0800a2cc <__math_uflow>:
 800a2cc:	b508      	push	{r3, lr}
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a2d4:	f7ff ffe6 	bl	800a2a4 <xflow>
 800a2d8:	ec41 0b10 	vmov	d0, r0, r1
 800a2dc:	bd08      	pop	{r3, pc}

0800a2de <__math_oflow>:
 800a2de:	b508      	push	{r3, lr}
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800a2e6:	f7ff ffdd 	bl	800a2a4 <xflow>
 800a2ea:	ec41 0b10 	vmov	d0, r0, r1
 800a2ee:	bd08      	pop	{r3, pc}

0800a2f0 <fabs>:
 800a2f0:	ec51 0b10 	vmov	r0, r1, d0
 800a2f4:	ee10 2a10 	vmov	r2, s0
 800a2f8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a2fc:	ec43 2b10 	vmov	d0, r2, r3
 800a300:	4770      	bx	lr

0800a302 <finite>:
 800a302:	b082      	sub	sp, #8
 800a304:	ed8d 0b00 	vstr	d0, [sp]
 800a308:	9801      	ldr	r0, [sp, #4]
 800a30a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800a30e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800a312:	0fc0      	lsrs	r0, r0, #31
 800a314:	b002      	add	sp, #8
 800a316:	4770      	bx	lr

0800a318 <nan>:
 800a318:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a320 <nan+0x8>
 800a31c:	4770      	bx	lr
 800a31e:	bf00      	nop
 800a320:	00000000 	.word	0x00000000
 800a324:	7ff80000 	.word	0x7ff80000

0800a328 <scalbn>:
 800a328:	b570      	push	{r4, r5, r6, lr}
 800a32a:	ec55 4b10 	vmov	r4, r5, d0
 800a32e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800a332:	4606      	mov	r6, r0
 800a334:	462b      	mov	r3, r5
 800a336:	b99a      	cbnz	r2, 800a360 <scalbn+0x38>
 800a338:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a33c:	4323      	orrs	r3, r4
 800a33e:	d036      	beq.n	800a3ae <scalbn+0x86>
 800a340:	4b39      	ldr	r3, [pc, #228]	; (800a428 <scalbn+0x100>)
 800a342:	4629      	mov	r1, r5
 800a344:	ee10 0a10 	vmov	r0, s0
 800a348:	2200      	movs	r2, #0
 800a34a:	f7f6 f955 	bl	80005f8 <__aeabi_dmul>
 800a34e:	4b37      	ldr	r3, [pc, #220]	; (800a42c <scalbn+0x104>)
 800a350:	429e      	cmp	r6, r3
 800a352:	4604      	mov	r4, r0
 800a354:	460d      	mov	r5, r1
 800a356:	da10      	bge.n	800a37a <scalbn+0x52>
 800a358:	a32b      	add	r3, pc, #172	; (adr r3, 800a408 <scalbn+0xe0>)
 800a35a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a35e:	e03a      	b.n	800a3d6 <scalbn+0xae>
 800a360:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800a364:	428a      	cmp	r2, r1
 800a366:	d10c      	bne.n	800a382 <scalbn+0x5a>
 800a368:	ee10 2a10 	vmov	r2, s0
 800a36c:	4620      	mov	r0, r4
 800a36e:	4629      	mov	r1, r5
 800a370:	f7f5 ff8c 	bl	800028c <__adddf3>
 800a374:	4604      	mov	r4, r0
 800a376:	460d      	mov	r5, r1
 800a378:	e019      	b.n	800a3ae <scalbn+0x86>
 800a37a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a37e:	460b      	mov	r3, r1
 800a380:	3a36      	subs	r2, #54	; 0x36
 800a382:	4432      	add	r2, r6
 800a384:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a388:	428a      	cmp	r2, r1
 800a38a:	dd08      	ble.n	800a39e <scalbn+0x76>
 800a38c:	2d00      	cmp	r5, #0
 800a38e:	a120      	add	r1, pc, #128	; (adr r1, 800a410 <scalbn+0xe8>)
 800a390:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a394:	da1c      	bge.n	800a3d0 <scalbn+0xa8>
 800a396:	a120      	add	r1, pc, #128	; (adr r1, 800a418 <scalbn+0xf0>)
 800a398:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a39c:	e018      	b.n	800a3d0 <scalbn+0xa8>
 800a39e:	2a00      	cmp	r2, #0
 800a3a0:	dd08      	ble.n	800a3b4 <scalbn+0x8c>
 800a3a2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a3a6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a3aa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a3ae:	ec45 4b10 	vmov	d0, r4, r5
 800a3b2:	bd70      	pop	{r4, r5, r6, pc}
 800a3b4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a3b8:	da19      	bge.n	800a3ee <scalbn+0xc6>
 800a3ba:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a3be:	429e      	cmp	r6, r3
 800a3c0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800a3c4:	dd0a      	ble.n	800a3dc <scalbn+0xb4>
 800a3c6:	a112      	add	r1, pc, #72	; (adr r1, 800a410 <scalbn+0xe8>)
 800a3c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d1e2      	bne.n	800a396 <scalbn+0x6e>
 800a3d0:	a30f      	add	r3, pc, #60	; (adr r3, 800a410 <scalbn+0xe8>)
 800a3d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3d6:	f7f6 f90f 	bl	80005f8 <__aeabi_dmul>
 800a3da:	e7cb      	b.n	800a374 <scalbn+0x4c>
 800a3dc:	a10a      	add	r1, pc, #40	; (adr r1, 800a408 <scalbn+0xe0>)
 800a3de:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d0b8      	beq.n	800a358 <scalbn+0x30>
 800a3e6:	a10e      	add	r1, pc, #56	; (adr r1, 800a420 <scalbn+0xf8>)
 800a3e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a3ec:	e7b4      	b.n	800a358 <scalbn+0x30>
 800a3ee:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a3f2:	3236      	adds	r2, #54	; 0x36
 800a3f4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a3f8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800a3fc:	4620      	mov	r0, r4
 800a3fe:	4b0c      	ldr	r3, [pc, #48]	; (800a430 <scalbn+0x108>)
 800a400:	2200      	movs	r2, #0
 800a402:	e7e8      	b.n	800a3d6 <scalbn+0xae>
 800a404:	f3af 8000 	nop.w
 800a408:	c2f8f359 	.word	0xc2f8f359
 800a40c:	01a56e1f 	.word	0x01a56e1f
 800a410:	8800759c 	.word	0x8800759c
 800a414:	7e37e43c 	.word	0x7e37e43c
 800a418:	8800759c 	.word	0x8800759c
 800a41c:	fe37e43c 	.word	0xfe37e43c
 800a420:	c2f8f359 	.word	0xc2f8f359
 800a424:	81a56e1f 	.word	0x81a56e1f
 800a428:	43500000 	.word	0x43500000
 800a42c:	ffff3cb0 	.word	0xffff3cb0
 800a430:	3c900000 	.word	0x3c900000
 800a434:	00000000 	.word	0x00000000

0800a438 <__ieee754_log>:
 800a438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a43c:	ec51 0b10 	vmov	r0, r1, d0
 800a440:	ed2d 8b04 	vpush	{d8-d9}
 800a444:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800a448:	b083      	sub	sp, #12
 800a44a:	460d      	mov	r5, r1
 800a44c:	da29      	bge.n	800a4a2 <__ieee754_log+0x6a>
 800a44e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a452:	4303      	orrs	r3, r0
 800a454:	ee10 2a10 	vmov	r2, s0
 800a458:	d10c      	bne.n	800a474 <__ieee754_log+0x3c>
 800a45a:	49cf      	ldr	r1, [pc, #828]	; (800a798 <__ieee754_log+0x360>)
 800a45c:	2200      	movs	r2, #0
 800a45e:	2300      	movs	r3, #0
 800a460:	2000      	movs	r0, #0
 800a462:	f7f6 f9f3 	bl	800084c <__aeabi_ddiv>
 800a466:	ec41 0b10 	vmov	d0, r0, r1
 800a46a:	b003      	add	sp, #12
 800a46c:	ecbd 8b04 	vpop	{d8-d9}
 800a470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a474:	2900      	cmp	r1, #0
 800a476:	da05      	bge.n	800a484 <__ieee754_log+0x4c>
 800a478:	460b      	mov	r3, r1
 800a47a:	f7f5 ff05 	bl	8000288 <__aeabi_dsub>
 800a47e:	2200      	movs	r2, #0
 800a480:	2300      	movs	r3, #0
 800a482:	e7ee      	b.n	800a462 <__ieee754_log+0x2a>
 800a484:	4bc5      	ldr	r3, [pc, #788]	; (800a79c <__ieee754_log+0x364>)
 800a486:	2200      	movs	r2, #0
 800a488:	f7f6 f8b6 	bl	80005f8 <__aeabi_dmul>
 800a48c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800a490:	460d      	mov	r5, r1
 800a492:	4ac3      	ldr	r2, [pc, #780]	; (800a7a0 <__ieee754_log+0x368>)
 800a494:	4295      	cmp	r5, r2
 800a496:	dd06      	ble.n	800a4a6 <__ieee754_log+0x6e>
 800a498:	4602      	mov	r2, r0
 800a49a:	460b      	mov	r3, r1
 800a49c:	f7f5 fef6 	bl	800028c <__adddf3>
 800a4a0:	e7e1      	b.n	800a466 <__ieee754_log+0x2e>
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	e7f5      	b.n	800a492 <__ieee754_log+0x5a>
 800a4a6:	152c      	asrs	r4, r5, #20
 800a4a8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800a4ac:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800a4b0:	441c      	add	r4, r3
 800a4b2:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800a4b6:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800a4ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a4be:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800a4c2:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800a4c6:	ea42 0105 	orr.w	r1, r2, r5
 800a4ca:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	4bb4      	ldr	r3, [pc, #720]	; (800a7a4 <__ieee754_log+0x36c>)
 800a4d2:	f7f5 fed9 	bl	8000288 <__aeabi_dsub>
 800a4d6:	1cab      	adds	r3, r5, #2
 800a4d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a4dc:	2b02      	cmp	r3, #2
 800a4de:	4682      	mov	sl, r0
 800a4e0:	468b      	mov	fp, r1
 800a4e2:	f04f 0200 	mov.w	r2, #0
 800a4e6:	dc53      	bgt.n	800a590 <__ieee754_log+0x158>
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	f7f6 faed 	bl	8000ac8 <__aeabi_dcmpeq>
 800a4ee:	b1d0      	cbz	r0, 800a526 <__ieee754_log+0xee>
 800a4f0:	2c00      	cmp	r4, #0
 800a4f2:	f000 8122 	beq.w	800a73a <__ieee754_log+0x302>
 800a4f6:	4620      	mov	r0, r4
 800a4f8:	f7f6 f814 	bl	8000524 <__aeabi_i2d>
 800a4fc:	a390      	add	r3, pc, #576	; (adr r3, 800a740 <__ieee754_log+0x308>)
 800a4fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a502:	4606      	mov	r6, r0
 800a504:	460f      	mov	r7, r1
 800a506:	f7f6 f877 	bl	80005f8 <__aeabi_dmul>
 800a50a:	a38f      	add	r3, pc, #572	; (adr r3, 800a748 <__ieee754_log+0x310>)
 800a50c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a510:	4604      	mov	r4, r0
 800a512:	460d      	mov	r5, r1
 800a514:	4630      	mov	r0, r6
 800a516:	4639      	mov	r1, r7
 800a518:	f7f6 f86e 	bl	80005f8 <__aeabi_dmul>
 800a51c:	4602      	mov	r2, r0
 800a51e:	460b      	mov	r3, r1
 800a520:	4620      	mov	r0, r4
 800a522:	4629      	mov	r1, r5
 800a524:	e7ba      	b.n	800a49c <__ieee754_log+0x64>
 800a526:	a38a      	add	r3, pc, #552	; (adr r3, 800a750 <__ieee754_log+0x318>)
 800a528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a52c:	4650      	mov	r0, sl
 800a52e:	4659      	mov	r1, fp
 800a530:	f7f6 f862 	bl	80005f8 <__aeabi_dmul>
 800a534:	4602      	mov	r2, r0
 800a536:	460b      	mov	r3, r1
 800a538:	2000      	movs	r0, #0
 800a53a:	499b      	ldr	r1, [pc, #620]	; (800a7a8 <__ieee754_log+0x370>)
 800a53c:	f7f5 fea4 	bl	8000288 <__aeabi_dsub>
 800a540:	4652      	mov	r2, sl
 800a542:	4606      	mov	r6, r0
 800a544:	460f      	mov	r7, r1
 800a546:	465b      	mov	r3, fp
 800a548:	4650      	mov	r0, sl
 800a54a:	4659      	mov	r1, fp
 800a54c:	f7f6 f854 	bl	80005f8 <__aeabi_dmul>
 800a550:	4602      	mov	r2, r0
 800a552:	460b      	mov	r3, r1
 800a554:	4630      	mov	r0, r6
 800a556:	4639      	mov	r1, r7
 800a558:	f7f6 f84e 	bl	80005f8 <__aeabi_dmul>
 800a55c:	4606      	mov	r6, r0
 800a55e:	460f      	mov	r7, r1
 800a560:	b914      	cbnz	r4, 800a568 <__ieee754_log+0x130>
 800a562:	4632      	mov	r2, r6
 800a564:	463b      	mov	r3, r7
 800a566:	e0a2      	b.n	800a6ae <__ieee754_log+0x276>
 800a568:	4620      	mov	r0, r4
 800a56a:	f7f5 ffdb 	bl	8000524 <__aeabi_i2d>
 800a56e:	a374      	add	r3, pc, #464	; (adr r3, 800a740 <__ieee754_log+0x308>)
 800a570:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a574:	4680      	mov	r8, r0
 800a576:	4689      	mov	r9, r1
 800a578:	f7f6 f83e 	bl	80005f8 <__aeabi_dmul>
 800a57c:	a372      	add	r3, pc, #456	; (adr r3, 800a748 <__ieee754_log+0x310>)
 800a57e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a582:	4604      	mov	r4, r0
 800a584:	460d      	mov	r5, r1
 800a586:	4640      	mov	r0, r8
 800a588:	4649      	mov	r1, r9
 800a58a:	f7f6 f835 	bl	80005f8 <__aeabi_dmul>
 800a58e:	e0a7      	b.n	800a6e0 <__ieee754_log+0x2a8>
 800a590:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a594:	f7f5 fe7a 	bl	800028c <__adddf3>
 800a598:	4602      	mov	r2, r0
 800a59a:	460b      	mov	r3, r1
 800a59c:	4650      	mov	r0, sl
 800a59e:	4659      	mov	r1, fp
 800a5a0:	f7f6 f954 	bl	800084c <__aeabi_ddiv>
 800a5a4:	ec41 0b18 	vmov	d8, r0, r1
 800a5a8:	4620      	mov	r0, r4
 800a5aa:	f7f5 ffbb 	bl	8000524 <__aeabi_i2d>
 800a5ae:	ec53 2b18 	vmov	r2, r3, d8
 800a5b2:	ec41 0b19 	vmov	d9, r0, r1
 800a5b6:	ec51 0b18 	vmov	r0, r1, d8
 800a5ba:	f7f6 f81d 	bl	80005f8 <__aeabi_dmul>
 800a5be:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800a5c2:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800a5c6:	9301      	str	r3, [sp, #4]
 800a5c8:	4602      	mov	r2, r0
 800a5ca:	460b      	mov	r3, r1
 800a5cc:	4680      	mov	r8, r0
 800a5ce:	4689      	mov	r9, r1
 800a5d0:	f7f6 f812 	bl	80005f8 <__aeabi_dmul>
 800a5d4:	a360      	add	r3, pc, #384	; (adr r3, 800a758 <__ieee754_log+0x320>)
 800a5d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5da:	4606      	mov	r6, r0
 800a5dc:	460f      	mov	r7, r1
 800a5de:	f7f6 f80b 	bl	80005f8 <__aeabi_dmul>
 800a5e2:	a35f      	add	r3, pc, #380	; (adr r3, 800a760 <__ieee754_log+0x328>)
 800a5e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5e8:	f7f5 fe50 	bl	800028c <__adddf3>
 800a5ec:	4632      	mov	r2, r6
 800a5ee:	463b      	mov	r3, r7
 800a5f0:	f7f6 f802 	bl	80005f8 <__aeabi_dmul>
 800a5f4:	a35c      	add	r3, pc, #368	; (adr r3, 800a768 <__ieee754_log+0x330>)
 800a5f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5fa:	f7f5 fe47 	bl	800028c <__adddf3>
 800a5fe:	4632      	mov	r2, r6
 800a600:	463b      	mov	r3, r7
 800a602:	f7f5 fff9 	bl	80005f8 <__aeabi_dmul>
 800a606:	a35a      	add	r3, pc, #360	; (adr r3, 800a770 <__ieee754_log+0x338>)
 800a608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a60c:	f7f5 fe3e 	bl	800028c <__adddf3>
 800a610:	4642      	mov	r2, r8
 800a612:	464b      	mov	r3, r9
 800a614:	f7f5 fff0 	bl	80005f8 <__aeabi_dmul>
 800a618:	a357      	add	r3, pc, #348	; (adr r3, 800a778 <__ieee754_log+0x340>)
 800a61a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a61e:	4680      	mov	r8, r0
 800a620:	4689      	mov	r9, r1
 800a622:	4630      	mov	r0, r6
 800a624:	4639      	mov	r1, r7
 800a626:	f7f5 ffe7 	bl	80005f8 <__aeabi_dmul>
 800a62a:	a355      	add	r3, pc, #340	; (adr r3, 800a780 <__ieee754_log+0x348>)
 800a62c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a630:	f7f5 fe2c 	bl	800028c <__adddf3>
 800a634:	4632      	mov	r2, r6
 800a636:	463b      	mov	r3, r7
 800a638:	f7f5 ffde 	bl	80005f8 <__aeabi_dmul>
 800a63c:	a352      	add	r3, pc, #328	; (adr r3, 800a788 <__ieee754_log+0x350>)
 800a63e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a642:	f7f5 fe23 	bl	800028c <__adddf3>
 800a646:	4632      	mov	r2, r6
 800a648:	463b      	mov	r3, r7
 800a64a:	f7f5 ffd5 	bl	80005f8 <__aeabi_dmul>
 800a64e:	460b      	mov	r3, r1
 800a650:	4602      	mov	r2, r0
 800a652:	4649      	mov	r1, r9
 800a654:	4640      	mov	r0, r8
 800a656:	f7f5 fe19 	bl	800028c <__adddf3>
 800a65a:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800a65e:	9b01      	ldr	r3, [sp, #4]
 800a660:	3551      	adds	r5, #81	; 0x51
 800a662:	431d      	orrs	r5, r3
 800a664:	2d00      	cmp	r5, #0
 800a666:	4680      	mov	r8, r0
 800a668:	4689      	mov	r9, r1
 800a66a:	dd48      	ble.n	800a6fe <__ieee754_log+0x2c6>
 800a66c:	4b4e      	ldr	r3, [pc, #312]	; (800a7a8 <__ieee754_log+0x370>)
 800a66e:	2200      	movs	r2, #0
 800a670:	4650      	mov	r0, sl
 800a672:	4659      	mov	r1, fp
 800a674:	f7f5 ffc0 	bl	80005f8 <__aeabi_dmul>
 800a678:	4652      	mov	r2, sl
 800a67a:	465b      	mov	r3, fp
 800a67c:	f7f5 ffbc 	bl	80005f8 <__aeabi_dmul>
 800a680:	4602      	mov	r2, r0
 800a682:	460b      	mov	r3, r1
 800a684:	4606      	mov	r6, r0
 800a686:	460f      	mov	r7, r1
 800a688:	4640      	mov	r0, r8
 800a68a:	4649      	mov	r1, r9
 800a68c:	f7f5 fdfe 	bl	800028c <__adddf3>
 800a690:	ec53 2b18 	vmov	r2, r3, d8
 800a694:	f7f5 ffb0 	bl	80005f8 <__aeabi_dmul>
 800a698:	4680      	mov	r8, r0
 800a69a:	4689      	mov	r9, r1
 800a69c:	b964      	cbnz	r4, 800a6b8 <__ieee754_log+0x280>
 800a69e:	4602      	mov	r2, r0
 800a6a0:	460b      	mov	r3, r1
 800a6a2:	4630      	mov	r0, r6
 800a6a4:	4639      	mov	r1, r7
 800a6a6:	f7f5 fdef 	bl	8000288 <__aeabi_dsub>
 800a6aa:	4602      	mov	r2, r0
 800a6ac:	460b      	mov	r3, r1
 800a6ae:	4650      	mov	r0, sl
 800a6b0:	4659      	mov	r1, fp
 800a6b2:	f7f5 fde9 	bl	8000288 <__aeabi_dsub>
 800a6b6:	e6d6      	b.n	800a466 <__ieee754_log+0x2e>
 800a6b8:	a321      	add	r3, pc, #132	; (adr r3, 800a740 <__ieee754_log+0x308>)
 800a6ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6be:	ec51 0b19 	vmov	r0, r1, d9
 800a6c2:	f7f5 ff99 	bl	80005f8 <__aeabi_dmul>
 800a6c6:	a320      	add	r3, pc, #128	; (adr r3, 800a748 <__ieee754_log+0x310>)
 800a6c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6cc:	4604      	mov	r4, r0
 800a6ce:	460d      	mov	r5, r1
 800a6d0:	ec51 0b19 	vmov	r0, r1, d9
 800a6d4:	f7f5 ff90 	bl	80005f8 <__aeabi_dmul>
 800a6d8:	4642      	mov	r2, r8
 800a6da:	464b      	mov	r3, r9
 800a6dc:	f7f5 fdd6 	bl	800028c <__adddf3>
 800a6e0:	4602      	mov	r2, r0
 800a6e2:	460b      	mov	r3, r1
 800a6e4:	4630      	mov	r0, r6
 800a6e6:	4639      	mov	r1, r7
 800a6e8:	f7f5 fdce 	bl	8000288 <__aeabi_dsub>
 800a6ec:	4652      	mov	r2, sl
 800a6ee:	465b      	mov	r3, fp
 800a6f0:	f7f5 fdca 	bl	8000288 <__aeabi_dsub>
 800a6f4:	4602      	mov	r2, r0
 800a6f6:	460b      	mov	r3, r1
 800a6f8:	4620      	mov	r0, r4
 800a6fa:	4629      	mov	r1, r5
 800a6fc:	e7d9      	b.n	800a6b2 <__ieee754_log+0x27a>
 800a6fe:	4602      	mov	r2, r0
 800a700:	460b      	mov	r3, r1
 800a702:	4650      	mov	r0, sl
 800a704:	4659      	mov	r1, fp
 800a706:	f7f5 fdbf 	bl	8000288 <__aeabi_dsub>
 800a70a:	ec53 2b18 	vmov	r2, r3, d8
 800a70e:	f7f5 ff73 	bl	80005f8 <__aeabi_dmul>
 800a712:	4606      	mov	r6, r0
 800a714:	460f      	mov	r7, r1
 800a716:	2c00      	cmp	r4, #0
 800a718:	f43f af23 	beq.w	800a562 <__ieee754_log+0x12a>
 800a71c:	a308      	add	r3, pc, #32	; (adr r3, 800a740 <__ieee754_log+0x308>)
 800a71e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a722:	ec51 0b19 	vmov	r0, r1, d9
 800a726:	f7f5 ff67 	bl	80005f8 <__aeabi_dmul>
 800a72a:	a307      	add	r3, pc, #28	; (adr r3, 800a748 <__ieee754_log+0x310>)
 800a72c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a730:	4604      	mov	r4, r0
 800a732:	460d      	mov	r5, r1
 800a734:	ec51 0b19 	vmov	r0, r1, d9
 800a738:	e727      	b.n	800a58a <__ieee754_log+0x152>
 800a73a:	ed9f 0b15 	vldr	d0, [pc, #84]	; 800a790 <__ieee754_log+0x358>
 800a73e:	e694      	b.n	800a46a <__ieee754_log+0x32>
 800a740:	fee00000 	.word	0xfee00000
 800a744:	3fe62e42 	.word	0x3fe62e42
 800a748:	35793c76 	.word	0x35793c76
 800a74c:	3dea39ef 	.word	0x3dea39ef
 800a750:	55555555 	.word	0x55555555
 800a754:	3fd55555 	.word	0x3fd55555
 800a758:	df3e5244 	.word	0xdf3e5244
 800a75c:	3fc2f112 	.word	0x3fc2f112
 800a760:	96cb03de 	.word	0x96cb03de
 800a764:	3fc74664 	.word	0x3fc74664
 800a768:	94229359 	.word	0x94229359
 800a76c:	3fd24924 	.word	0x3fd24924
 800a770:	55555593 	.word	0x55555593
 800a774:	3fe55555 	.word	0x3fe55555
 800a778:	d078c69f 	.word	0xd078c69f
 800a77c:	3fc39a09 	.word	0x3fc39a09
 800a780:	1d8e78af 	.word	0x1d8e78af
 800a784:	3fcc71c5 	.word	0x3fcc71c5
 800a788:	9997fa04 	.word	0x9997fa04
 800a78c:	3fd99999 	.word	0x3fd99999
	...
 800a798:	c3500000 	.word	0xc3500000
 800a79c:	43500000 	.word	0x43500000
 800a7a0:	7fefffff 	.word	0x7fefffff
 800a7a4:	3ff00000 	.word	0x3ff00000
 800a7a8:	3fe00000 	.word	0x3fe00000

0800a7ac <_init>:
 800a7ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7ae:	bf00      	nop
 800a7b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7b2:	bc08      	pop	{r3}
 800a7b4:	469e      	mov	lr, r3
 800a7b6:	4770      	bx	lr

0800a7b8 <_fini>:
 800a7b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7ba:	bf00      	nop
 800a7bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7be:	bc08      	pop	{r3}
 800a7c0:	469e      	mov	lr, r3
 800a7c2:	4770      	bx	lr
