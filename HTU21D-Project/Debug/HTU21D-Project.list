
HTU21D-Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008078  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000320  08008208  08008208  00018208  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008528  08008528  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08008528  08008528  00018528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008530  08008530  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008530  08008530  00018530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008534  08008534  00018534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08008538  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  20000070  080085a8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  080085a8  0002017c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010d35  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000251a  00000000  00000000  00030dd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e08  00000000  00000000  000332f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d10  00000000  00000000  000340f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002157d  00000000  00000000  00034e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010ff1  00000000  00000000  00056385  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c439c  00000000  00000000  00067376  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012b712  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049b4  00000000  00000000  0012b764  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080081f0 	.word	0x080081f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080081f0 	.word	0x080081f0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2f>:
 8000b7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b84:	bf24      	itt	cs
 8000b86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b8e:	d90d      	bls.n	8000bac <__aeabi_d2f+0x30>
 8000b90:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b9c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ba0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ba4:	bf08      	it	eq
 8000ba6:	f020 0001 	biceq.w	r0, r0, #1
 8000baa:	4770      	bx	lr
 8000bac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bb0:	d121      	bne.n	8000bf6 <__aeabi_d2f+0x7a>
 8000bb2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bb6:	bfbc      	itt	lt
 8000bb8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bbc:	4770      	bxlt	lr
 8000bbe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bc2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bc6:	f1c2 0218 	rsb	r2, r2, #24
 8000bca:	f1c2 0c20 	rsb	ip, r2, #32
 8000bce:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bd2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bd6:	bf18      	it	ne
 8000bd8:	f040 0001 	orrne.w	r0, r0, #1
 8000bdc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000be4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000be8:	ea40 000c 	orr.w	r0, r0, ip
 8000bec:	fa23 f302 	lsr.w	r3, r3, r2
 8000bf0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bf4:	e7cc      	b.n	8000b90 <__aeabi_d2f+0x14>
 8000bf6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bfa:	d107      	bne.n	8000c0c <__aeabi_d2f+0x90>
 8000bfc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c00:	bf1e      	ittt	ne
 8000c02:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c06:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c0a:	4770      	bxne	lr
 8000c0c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop

08000c1c <__aeabi_uldivmod>:
 8000c1c:	b953      	cbnz	r3, 8000c34 <__aeabi_uldivmod+0x18>
 8000c1e:	b94a      	cbnz	r2, 8000c34 <__aeabi_uldivmod+0x18>
 8000c20:	2900      	cmp	r1, #0
 8000c22:	bf08      	it	eq
 8000c24:	2800      	cmpeq	r0, #0
 8000c26:	bf1c      	itt	ne
 8000c28:	f04f 31ff 	movne.w	r1, #4294967295
 8000c2c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c30:	f000 b974 	b.w	8000f1c <__aeabi_idiv0>
 8000c34:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c3c:	f000 f806 	bl	8000c4c <__udivmoddi4>
 8000c40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c48:	b004      	add	sp, #16
 8000c4a:	4770      	bx	lr

08000c4c <__udivmoddi4>:
 8000c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c50:	9d08      	ldr	r5, [sp, #32]
 8000c52:	4604      	mov	r4, r0
 8000c54:	468e      	mov	lr, r1
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d14d      	bne.n	8000cf6 <__udivmoddi4+0xaa>
 8000c5a:	428a      	cmp	r2, r1
 8000c5c:	4694      	mov	ip, r2
 8000c5e:	d969      	bls.n	8000d34 <__udivmoddi4+0xe8>
 8000c60:	fab2 f282 	clz	r2, r2
 8000c64:	b152      	cbz	r2, 8000c7c <__udivmoddi4+0x30>
 8000c66:	fa01 f302 	lsl.w	r3, r1, r2
 8000c6a:	f1c2 0120 	rsb	r1, r2, #32
 8000c6e:	fa20 f101 	lsr.w	r1, r0, r1
 8000c72:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c76:	ea41 0e03 	orr.w	lr, r1, r3
 8000c7a:	4094      	lsls	r4, r2
 8000c7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c80:	0c21      	lsrs	r1, r4, #16
 8000c82:	fbbe f6f8 	udiv	r6, lr, r8
 8000c86:	fa1f f78c 	uxth.w	r7, ip
 8000c8a:	fb08 e316 	mls	r3, r8, r6, lr
 8000c8e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c92:	fb06 f107 	mul.w	r1, r6, r7
 8000c96:	4299      	cmp	r1, r3
 8000c98:	d90a      	bls.n	8000cb0 <__udivmoddi4+0x64>
 8000c9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ca2:	f080 811f 	bcs.w	8000ee4 <__udivmoddi4+0x298>
 8000ca6:	4299      	cmp	r1, r3
 8000ca8:	f240 811c 	bls.w	8000ee4 <__udivmoddi4+0x298>
 8000cac:	3e02      	subs	r6, #2
 8000cae:	4463      	add	r3, ip
 8000cb0:	1a5b      	subs	r3, r3, r1
 8000cb2:	b2a4      	uxth	r4, r4
 8000cb4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cb8:	fb08 3310 	mls	r3, r8, r0, r3
 8000cbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cc0:	fb00 f707 	mul.w	r7, r0, r7
 8000cc4:	42a7      	cmp	r7, r4
 8000cc6:	d90a      	bls.n	8000cde <__udivmoddi4+0x92>
 8000cc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ccc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cd0:	f080 810a 	bcs.w	8000ee8 <__udivmoddi4+0x29c>
 8000cd4:	42a7      	cmp	r7, r4
 8000cd6:	f240 8107 	bls.w	8000ee8 <__udivmoddi4+0x29c>
 8000cda:	4464      	add	r4, ip
 8000cdc:	3802      	subs	r0, #2
 8000cde:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ce2:	1be4      	subs	r4, r4, r7
 8000ce4:	2600      	movs	r6, #0
 8000ce6:	b11d      	cbz	r5, 8000cf0 <__udivmoddi4+0xa4>
 8000ce8:	40d4      	lsrs	r4, r2
 8000cea:	2300      	movs	r3, #0
 8000cec:	e9c5 4300 	strd	r4, r3, [r5]
 8000cf0:	4631      	mov	r1, r6
 8000cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf6:	428b      	cmp	r3, r1
 8000cf8:	d909      	bls.n	8000d0e <__udivmoddi4+0xc2>
 8000cfa:	2d00      	cmp	r5, #0
 8000cfc:	f000 80ef 	beq.w	8000ede <__udivmoddi4+0x292>
 8000d00:	2600      	movs	r6, #0
 8000d02:	e9c5 0100 	strd	r0, r1, [r5]
 8000d06:	4630      	mov	r0, r6
 8000d08:	4631      	mov	r1, r6
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	fab3 f683 	clz	r6, r3
 8000d12:	2e00      	cmp	r6, #0
 8000d14:	d14a      	bne.n	8000dac <__udivmoddi4+0x160>
 8000d16:	428b      	cmp	r3, r1
 8000d18:	d302      	bcc.n	8000d20 <__udivmoddi4+0xd4>
 8000d1a:	4282      	cmp	r2, r0
 8000d1c:	f200 80f9 	bhi.w	8000f12 <__udivmoddi4+0x2c6>
 8000d20:	1a84      	subs	r4, r0, r2
 8000d22:	eb61 0303 	sbc.w	r3, r1, r3
 8000d26:	2001      	movs	r0, #1
 8000d28:	469e      	mov	lr, r3
 8000d2a:	2d00      	cmp	r5, #0
 8000d2c:	d0e0      	beq.n	8000cf0 <__udivmoddi4+0xa4>
 8000d2e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d32:	e7dd      	b.n	8000cf0 <__udivmoddi4+0xa4>
 8000d34:	b902      	cbnz	r2, 8000d38 <__udivmoddi4+0xec>
 8000d36:	deff      	udf	#255	; 0xff
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	2a00      	cmp	r2, #0
 8000d3e:	f040 8092 	bne.w	8000e66 <__udivmoddi4+0x21a>
 8000d42:	eba1 010c 	sub.w	r1, r1, ip
 8000d46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d4a:	fa1f fe8c 	uxth.w	lr, ip
 8000d4e:	2601      	movs	r6, #1
 8000d50:	0c20      	lsrs	r0, r4, #16
 8000d52:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d56:	fb07 1113 	mls	r1, r7, r3, r1
 8000d5a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d5e:	fb0e f003 	mul.w	r0, lr, r3
 8000d62:	4288      	cmp	r0, r1
 8000d64:	d908      	bls.n	8000d78 <__udivmoddi4+0x12c>
 8000d66:	eb1c 0101 	adds.w	r1, ip, r1
 8000d6a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d6e:	d202      	bcs.n	8000d76 <__udivmoddi4+0x12a>
 8000d70:	4288      	cmp	r0, r1
 8000d72:	f200 80cb 	bhi.w	8000f0c <__udivmoddi4+0x2c0>
 8000d76:	4643      	mov	r3, r8
 8000d78:	1a09      	subs	r1, r1, r0
 8000d7a:	b2a4      	uxth	r4, r4
 8000d7c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d80:	fb07 1110 	mls	r1, r7, r0, r1
 8000d84:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d88:	fb0e fe00 	mul.w	lr, lr, r0
 8000d8c:	45a6      	cmp	lr, r4
 8000d8e:	d908      	bls.n	8000da2 <__udivmoddi4+0x156>
 8000d90:	eb1c 0404 	adds.w	r4, ip, r4
 8000d94:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d98:	d202      	bcs.n	8000da0 <__udivmoddi4+0x154>
 8000d9a:	45a6      	cmp	lr, r4
 8000d9c:	f200 80bb 	bhi.w	8000f16 <__udivmoddi4+0x2ca>
 8000da0:	4608      	mov	r0, r1
 8000da2:	eba4 040e 	sub.w	r4, r4, lr
 8000da6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000daa:	e79c      	b.n	8000ce6 <__udivmoddi4+0x9a>
 8000dac:	f1c6 0720 	rsb	r7, r6, #32
 8000db0:	40b3      	lsls	r3, r6
 8000db2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000db6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dba:	fa20 f407 	lsr.w	r4, r0, r7
 8000dbe:	fa01 f306 	lsl.w	r3, r1, r6
 8000dc2:	431c      	orrs	r4, r3
 8000dc4:	40f9      	lsrs	r1, r7
 8000dc6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dca:	fa00 f306 	lsl.w	r3, r0, r6
 8000dce:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dd2:	0c20      	lsrs	r0, r4, #16
 8000dd4:	fa1f fe8c 	uxth.w	lr, ip
 8000dd8:	fb09 1118 	mls	r1, r9, r8, r1
 8000ddc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000de0:	fb08 f00e 	mul.w	r0, r8, lr
 8000de4:	4288      	cmp	r0, r1
 8000de6:	fa02 f206 	lsl.w	r2, r2, r6
 8000dea:	d90b      	bls.n	8000e04 <__udivmoddi4+0x1b8>
 8000dec:	eb1c 0101 	adds.w	r1, ip, r1
 8000df0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000df4:	f080 8088 	bcs.w	8000f08 <__udivmoddi4+0x2bc>
 8000df8:	4288      	cmp	r0, r1
 8000dfa:	f240 8085 	bls.w	8000f08 <__udivmoddi4+0x2bc>
 8000dfe:	f1a8 0802 	sub.w	r8, r8, #2
 8000e02:	4461      	add	r1, ip
 8000e04:	1a09      	subs	r1, r1, r0
 8000e06:	b2a4      	uxth	r4, r4
 8000e08:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e0c:	fb09 1110 	mls	r1, r9, r0, r1
 8000e10:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e14:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e18:	458e      	cmp	lr, r1
 8000e1a:	d908      	bls.n	8000e2e <__udivmoddi4+0x1e2>
 8000e1c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e20:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e24:	d26c      	bcs.n	8000f00 <__udivmoddi4+0x2b4>
 8000e26:	458e      	cmp	lr, r1
 8000e28:	d96a      	bls.n	8000f00 <__udivmoddi4+0x2b4>
 8000e2a:	3802      	subs	r0, #2
 8000e2c:	4461      	add	r1, ip
 8000e2e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e32:	fba0 9402 	umull	r9, r4, r0, r2
 8000e36:	eba1 010e 	sub.w	r1, r1, lr
 8000e3a:	42a1      	cmp	r1, r4
 8000e3c:	46c8      	mov	r8, r9
 8000e3e:	46a6      	mov	lr, r4
 8000e40:	d356      	bcc.n	8000ef0 <__udivmoddi4+0x2a4>
 8000e42:	d053      	beq.n	8000eec <__udivmoddi4+0x2a0>
 8000e44:	b15d      	cbz	r5, 8000e5e <__udivmoddi4+0x212>
 8000e46:	ebb3 0208 	subs.w	r2, r3, r8
 8000e4a:	eb61 010e 	sbc.w	r1, r1, lr
 8000e4e:	fa01 f707 	lsl.w	r7, r1, r7
 8000e52:	fa22 f306 	lsr.w	r3, r2, r6
 8000e56:	40f1      	lsrs	r1, r6
 8000e58:	431f      	orrs	r7, r3
 8000e5a:	e9c5 7100 	strd	r7, r1, [r5]
 8000e5e:	2600      	movs	r6, #0
 8000e60:	4631      	mov	r1, r6
 8000e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e66:	f1c2 0320 	rsb	r3, r2, #32
 8000e6a:	40d8      	lsrs	r0, r3
 8000e6c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e70:	fa21 f303 	lsr.w	r3, r1, r3
 8000e74:	4091      	lsls	r1, r2
 8000e76:	4301      	orrs	r1, r0
 8000e78:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e7c:	fa1f fe8c 	uxth.w	lr, ip
 8000e80:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e84:	fb07 3610 	mls	r6, r7, r0, r3
 8000e88:	0c0b      	lsrs	r3, r1, #16
 8000e8a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e8e:	fb00 f60e 	mul.w	r6, r0, lr
 8000e92:	429e      	cmp	r6, r3
 8000e94:	fa04 f402 	lsl.w	r4, r4, r2
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x260>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ea2:	d22f      	bcs.n	8000f04 <__udivmoddi4+0x2b8>
 8000ea4:	429e      	cmp	r6, r3
 8000ea6:	d92d      	bls.n	8000f04 <__udivmoddi4+0x2b8>
 8000ea8:	3802      	subs	r0, #2
 8000eaa:	4463      	add	r3, ip
 8000eac:	1b9b      	subs	r3, r3, r6
 8000eae:	b289      	uxth	r1, r1
 8000eb0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000eb4:	fb07 3316 	mls	r3, r7, r6, r3
 8000eb8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ebc:	fb06 f30e 	mul.w	r3, r6, lr
 8000ec0:	428b      	cmp	r3, r1
 8000ec2:	d908      	bls.n	8000ed6 <__udivmoddi4+0x28a>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ecc:	d216      	bcs.n	8000efc <__udivmoddi4+0x2b0>
 8000ece:	428b      	cmp	r3, r1
 8000ed0:	d914      	bls.n	8000efc <__udivmoddi4+0x2b0>
 8000ed2:	3e02      	subs	r6, #2
 8000ed4:	4461      	add	r1, ip
 8000ed6:	1ac9      	subs	r1, r1, r3
 8000ed8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000edc:	e738      	b.n	8000d50 <__udivmoddi4+0x104>
 8000ede:	462e      	mov	r6, r5
 8000ee0:	4628      	mov	r0, r5
 8000ee2:	e705      	b.n	8000cf0 <__udivmoddi4+0xa4>
 8000ee4:	4606      	mov	r6, r0
 8000ee6:	e6e3      	b.n	8000cb0 <__udivmoddi4+0x64>
 8000ee8:	4618      	mov	r0, r3
 8000eea:	e6f8      	b.n	8000cde <__udivmoddi4+0x92>
 8000eec:	454b      	cmp	r3, r9
 8000eee:	d2a9      	bcs.n	8000e44 <__udivmoddi4+0x1f8>
 8000ef0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ef4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ef8:	3801      	subs	r0, #1
 8000efa:	e7a3      	b.n	8000e44 <__udivmoddi4+0x1f8>
 8000efc:	4646      	mov	r6, r8
 8000efe:	e7ea      	b.n	8000ed6 <__udivmoddi4+0x28a>
 8000f00:	4620      	mov	r0, r4
 8000f02:	e794      	b.n	8000e2e <__udivmoddi4+0x1e2>
 8000f04:	4640      	mov	r0, r8
 8000f06:	e7d1      	b.n	8000eac <__udivmoddi4+0x260>
 8000f08:	46d0      	mov	r8, sl
 8000f0a:	e77b      	b.n	8000e04 <__udivmoddi4+0x1b8>
 8000f0c:	3b02      	subs	r3, #2
 8000f0e:	4461      	add	r1, ip
 8000f10:	e732      	b.n	8000d78 <__udivmoddi4+0x12c>
 8000f12:	4630      	mov	r0, r6
 8000f14:	e709      	b.n	8000d2a <__udivmoddi4+0xde>
 8000f16:	4464      	add	r4, ip
 8000f18:	3802      	subs	r0, #2
 8000f1a:	e742      	b.n	8000da2 <__udivmoddi4+0x156>

08000f1c <__aeabi_idiv0>:
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop

08000f20 <HTU21D_Soft_Reset>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_I2C1_Init(void);
/* USER CODE BEGIN PFP */
char HTU21D_Soft_Reset(){
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af02      	add	r7, sp, #8
char reg_command[1];
  reg_command[0] = SOFT_RESET;
 8000f26:	23fe      	movs	r3, #254	; 0xfe
 8000f28:	713b      	strb	r3, [r7, #4]
  //I2C1_Start();                                                // issue I2C start signal
  //I2C1_Write(HTU21D_ADDR,reg_command, 1, END_MODE_STOP);
  HAL_I2C_Master_Transmit(&hi2c1, HTU21D_ADDR << 1, reg_command, sizeof(reg_command), I2C_TIMEOUT);
 8000f2a:	1d3a      	adds	r2, r7, #4
 8000f2c:	2332      	movs	r3, #50	; 0x32
 8000f2e:	9300      	str	r3, [sp, #0]
 8000f30:	2301      	movs	r3, #1
 8000f32:	2180      	movs	r1, #128	; 0x80
 8000f34:	4805      	ldr	r0, [pc, #20]	; (8000f4c <HTU21D_Soft_Reset+0x2c>)
 8000f36:	f001 f90b 	bl	8002150 <HAL_I2C_Master_Transmit>
  HAL_Delay(15);
 8000f3a:	200f      	movs	r0, #15
 8000f3c:	f000 fd34 	bl	80019a8 <HAL_Delay>
}
 8000f40:	bf00      	nop
 8000f42:	4618      	mov	r0, r3
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	2000008c 	.word	0x2000008c

08000f50 <HTU21D_ReadValue>:
  //I2C1_Start();
  //I2C1_Write(HTU21D_ADDR, reg_data, 2, END_MODE_STOP);
  reg_value = reg_data[0];
}

unsigned HTU21D_ReadValue(char regSelect){
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b086      	sub	sp, #24
 8000f54:	af02      	add	r7, sp, #8
 8000f56:	4603      	mov	r3, r0
 8000f58:	71fb      	strb	r3, [r7, #7]
unsigned value = 0;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	60fb      	str	r3, [r7, #12]
char reg_data[3];

  reg_data[0] = regSelect;
 8000f5e:	79fb      	ldrb	r3, [r7, #7]
 8000f60:	723b      	strb	r3, [r7, #8]
  //I2C1_Start();
  //I2C1_Write(HTU21D_ADDR, reg_data, 1, END_MODE_RESTART);
  //I2C1_Read (HTU21D_ADDR, reg_data, 3, END_MODE_STOP);
  HAL_I2C_Master_Transmit(&hi2c1, HTU21D_ADDR << 1, reg_data, 1, I2C_TIMEOUT);
 8000f62:	f107 0208 	add.w	r2, r7, #8
 8000f66:	2332      	movs	r3, #50	; 0x32
 8000f68:	9300      	str	r3, [sp, #0]
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	2180      	movs	r1, #128	; 0x80
 8000f6e:	480c      	ldr	r0, [pc, #48]	; (8000fa0 <HTU21D_ReadValue+0x50>)
 8000f70:	f001 f8ee 	bl	8002150 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&hi2c1, HTU21D_ADDR << 1, reg_data, sizeof(reg_data), I2C_TIMEOUT);
 8000f74:	f107 0208 	add.w	r2, r7, #8
 8000f78:	2332      	movs	r3, #50	; 0x32
 8000f7a:	9300      	str	r3, [sp, #0]
 8000f7c:	2303      	movs	r3, #3
 8000f7e:	2180      	movs	r1, #128	; 0x80
 8000f80:	4807      	ldr	r0, [pc, #28]	; (8000fa0 <HTU21D_ReadValue+0x50>)
 8000f82:	f001 f9d9 	bl	8002338 <HAL_I2C_Master_Receive>
	itoa(reg_data[2], output, 2);
	if(HAL_UART_Transmit(&huart2, (uint8_t*) output, strlen(output), 1000)==HAL_ERROR)Error_Handler();
	if(HAL_UART_Transmit(&huart2, (uint8_t *)spaceMsg, strlen(spaceMsg), 1000)==HAL_ERROR)Error_Handler();
*/

  value = ((unsigned)reg_data[0] << 8) | reg_data[1] ;
 8000f86:	7a3b      	ldrb	r3, [r7, #8]
 8000f88:	021b      	lsls	r3, r3, #8
 8000f8a:	7a7a      	ldrb	r2, [r7, #9]
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	60fb      	str	r3, [r7, #12]
  return value & 0xFFFC;            // Clear status bits
 8000f90:	68fa      	ldr	r2, [r7, #12]
 8000f92:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8000f96:	4013      	ands	r3, r2
  //return value;
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3710      	adds	r7, #16
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	2000008c 	.word	0x2000008c
 8000fa4:	00000000 	.word	0x00000000

08000fa8 <procTemperatureValue>:

float procTemperatureValue(unsigned ValueTemp){
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  float calc;
  calc = -46.85 + 175.72 * ValueTemp / 65536.0;
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f7ff faa7 	bl	8000504 <__aeabi_ui2d>
 8000fb6:	a317      	add	r3, pc, #92	; (adr r3, 8001014 <procTemperatureValue+0x6c>)
 8000fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fbc:	f7ff fb1c 	bl	80005f8 <__aeabi_dmul>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	460b      	mov	r3, r1
 8000fc4:	4610      	mov	r0, r2
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	f04f 0200 	mov.w	r2, #0
 8000fcc:	4b10      	ldr	r3, [pc, #64]	; (8001010 <procTemperatureValue+0x68>)
 8000fce:	f7ff fc3d 	bl	800084c <__aeabi_ddiv>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	4610      	mov	r0, r2
 8000fd8:	4619      	mov	r1, r3
 8000fda:	a30b      	add	r3, pc, #44	; (adr r3, 8001008 <procTemperatureValue+0x60>)
 8000fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe0:	f7ff f952 	bl	8000288 <__aeabi_dsub>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	460b      	mov	r3, r1
 8000fe8:	4610      	mov	r0, r2
 8000fea:	4619      	mov	r1, r3
 8000fec:	f7ff fdc6 	bl	8000b7c <__aeabi_d2f>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	60fb      	str	r3, [r7, #12]
  return calc;
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	ee07 3a90 	vmov	s15, r3
}
 8000ffa:	eeb0 0a67 	vmov.f32	s0, s15
 8000ffe:	3710      	adds	r7, #16
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	f3af 8000 	nop.w
 8001008:	cccccccd 	.word	0xcccccccd
 800100c:	40476ccc 	.word	0x40476ccc
 8001010:	40f00000 	.word	0x40f00000
 8001014:	3d70a3d7 	.word	0x3d70a3d7
 8001018:	4065f70a 	.word	0x4065f70a

0800101c <procHumidityValue>:

float procHumidityValue(unsigned ValueTemp){
 800101c:	b580      	push	{r7, lr}
 800101e:	b086      	sub	sp, #24
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  char txt[12];
  float calc;
  calc = -6.0 + 125.0 * ValueTemp / 65536.0;
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f7ff fa6d 	bl	8000504 <__aeabi_ui2d>
 800102a:	f04f 0200 	mov.w	r2, #0
 800102e:	4b12      	ldr	r3, [pc, #72]	; (8001078 <procHumidityValue+0x5c>)
 8001030:	f7ff fae2 	bl	80005f8 <__aeabi_dmul>
 8001034:	4602      	mov	r2, r0
 8001036:	460b      	mov	r3, r1
 8001038:	4610      	mov	r0, r2
 800103a:	4619      	mov	r1, r3
 800103c:	f04f 0200 	mov.w	r2, #0
 8001040:	4b0e      	ldr	r3, [pc, #56]	; (800107c <procHumidityValue+0x60>)
 8001042:	f7ff fc03 	bl	800084c <__aeabi_ddiv>
 8001046:	4602      	mov	r2, r0
 8001048:	460b      	mov	r3, r1
 800104a:	4610      	mov	r0, r2
 800104c:	4619      	mov	r1, r3
 800104e:	f04f 0200 	mov.w	r2, #0
 8001052:	4b0b      	ldr	r3, [pc, #44]	; (8001080 <procHumidityValue+0x64>)
 8001054:	f7ff f918 	bl	8000288 <__aeabi_dsub>
 8001058:	4602      	mov	r2, r0
 800105a:	460b      	mov	r3, r1
 800105c:	4610      	mov	r0, r2
 800105e:	4619      	mov	r1, r3
 8001060:	f7ff fd8c 	bl	8000b7c <__aeabi_d2f>
 8001064:	4603      	mov	r3, r0
 8001066:	617b      	str	r3, [r7, #20]
  return calc;
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	ee07 3a90 	vmov	s15, r3
}
 800106e:	eeb0 0a67 	vmov.f32	s0, s15
 8001072:	3718      	adds	r7, #24
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	405f4000 	.word	0x405f4000
 800107c:	40f00000 	.word	0x40f00000
 8001080:	40180000 	.word	0x40180000

08001084 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001084:	b5b0      	push	{r4, r5, r7, lr}
 8001086:	b08c      	sub	sp, #48	; 0x30
 8001088:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800108a:	f000 fc18 	bl	80018be <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800108e:	f000 f8ab 	bl	80011e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001092:	f000 f97b 	bl	800138c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001096:	f000 f949 	bl	800132c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800109a:	f000 f907 	bl	80012ac <MX_I2C1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HTU21D_Soft_Reset();
 800109e:	f7ff ff3f 	bl	8000f20 <HTU21D_Soft_Reset>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 80010a2:	2201      	movs	r2, #1
 80010a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ac:	f000 ffa8 	bl	8002000 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 80010b0:	2032      	movs	r0, #50	; 0x32
 80010b2:	f000 fc79 	bl	80019a8 <HAL_Delay>
  while (1)
  {
	char buf[10];
	float x = 0;
 80010b6:	f04f 0300 	mov.w	r3, #0
 80010ba:	62fb      	str	r3, [r7, #44]	; 0x2c
	x = procTemperatureValue(HTU21D_ReadValue(TRIGGER_TEMP_MEASURE_HOLD));
 80010bc:	20e3      	movs	r0, #227	; 0xe3
 80010be:	f7ff ff47 	bl	8000f50 <HTU21D_ReadValue>
 80010c2:	4603      	mov	r3, r0
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff ff6f 	bl	8000fa8 <procTemperatureValue>
 80010ca:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
	gcvt(x, 7, buf);
 80010ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80010d0:	f7ff fa3a 	bl	8000548 <__aeabi_f2d>
 80010d4:	4604      	mov	r4, r0
 80010d6:	460d      	mov	r5, r1
 80010d8:	f107 0310 	add.w	r3, r7, #16
 80010dc:	4619      	mov	r1, r3
 80010de:	2007      	movs	r0, #7
 80010e0:	ec45 4b10 	vmov	d0, r4, r5
 80010e4:	f004 fcb2 	bl	8005a4c <gcvt>

	char bufHum[10];
	float hum = 0;
 80010e8:	f04f 0300 	mov.w	r3, #0
 80010ec:	62bb      	str	r3, [r7, #40]	; 0x28
	hum = procHumidityValue(HTU21D_ReadValue(TRIGGER_HUMD_MEASURE_HOLD));
 80010ee:	20e5      	movs	r0, #229	; 0xe5
 80010f0:	f7ff ff2e 	bl	8000f50 <HTU21D_ReadValue>
 80010f4:	4603      	mov	r3, r0
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff ff90 	bl	800101c <procHumidityValue>
 80010fc:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
	gcvt(hum, 7, bufHum);
 8001100:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001102:	f7ff fa21 	bl	8000548 <__aeabi_f2d>
 8001106:	4604      	mov	r4, r0
 8001108:	460d      	mov	r5, r1
 800110a:	1d3b      	adds	r3, r7, #4
 800110c:	4619      	mov	r1, r3
 800110e:	2007      	movs	r0, #7
 8001110:	ec45 4b10 	vmov	d0, r4, r5
 8001114:	f004 fc9a 	bl	8005a4c <gcvt>

	char *beginMsg = "Temp: ";
 8001118:	4b2f      	ldr	r3, [pc, #188]	; (80011d8 <main+0x154>)
 800111a:	627b      	str	r3, [r7, #36]	; 0x24
	if(HAL_UART_Transmit(&huart2, (uint8_t *)beginMsg, strlen(beginMsg), 1000)==HAL_ERROR)Error_Handler();
 800111c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800111e:	f7ff f857 	bl	80001d0 <strlen>
 8001122:	4603      	mov	r3, r0
 8001124:	b29a      	uxth	r2, r3
 8001126:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800112a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800112c:	482b      	ldr	r0, [pc, #172]	; (80011dc <main+0x158>)
 800112e:	f003 fc6f 	bl	8004a10 <HAL_UART_Transmit>
 8001132:	4603      	mov	r3, r0
 8001134:	2b01      	cmp	r3, #1
 8001136:	d101      	bne.n	800113c <main+0xb8>
 8001138:	f000 f974 	bl	8001424 <Error_Handler>

	if(HAL_UART_Transmit(&huart2, (uint8_t*) buf, strlen(buf), 1000)==HAL_ERROR)Error_Handler();
 800113c:	f107 0310 	add.w	r3, r7, #16
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff f845 	bl	80001d0 <strlen>
 8001146:	4603      	mov	r3, r0
 8001148:	b29a      	uxth	r2, r3
 800114a:	f107 0110 	add.w	r1, r7, #16
 800114e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001152:	4822      	ldr	r0, [pc, #136]	; (80011dc <main+0x158>)
 8001154:	f003 fc5c 	bl	8004a10 <HAL_UART_Transmit>
 8001158:	4603      	mov	r3, r0
 800115a:	2b01      	cmp	r3, #1
 800115c:	d101      	bne.n	8001162 <main+0xde>
 800115e:	f000 f961 	bl	8001424 <Error_Handler>

	char *midMsg = "°C Humid: ";
 8001162:	4b1f      	ldr	r3, [pc, #124]	; (80011e0 <main+0x15c>)
 8001164:	623b      	str	r3, [r7, #32]
	if(HAL_UART_Transmit(&huart2, (uint8_t *)midMsg, strlen(midMsg), 1000)==HAL_ERROR)Error_Handler();
 8001166:	6a38      	ldr	r0, [r7, #32]
 8001168:	f7ff f832 	bl	80001d0 <strlen>
 800116c:	4603      	mov	r3, r0
 800116e:	b29a      	uxth	r2, r3
 8001170:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001174:	6a39      	ldr	r1, [r7, #32]
 8001176:	4819      	ldr	r0, [pc, #100]	; (80011dc <main+0x158>)
 8001178:	f003 fc4a 	bl	8004a10 <HAL_UART_Transmit>
 800117c:	4603      	mov	r3, r0
 800117e:	2b01      	cmp	r3, #1
 8001180:	d101      	bne.n	8001186 <main+0x102>
 8001182:	f000 f94f 	bl	8001424 <Error_Handler>

	if(HAL_UART_Transmit(&huart2, (uint8_t*) bufHum, strlen(bufHum), 1000)==HAL_ERROR)Error_Handler();
 8001186:	1d3b      	adds	r3, r7, #4
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff f821 	bl	80001d0 <strlen>
 800118e:	4603      	mov	r3, r0
 8001190:	b29a      	uxth	r2, r3
 8001192:	1d39      	adds	r1, r7, #4
 8001194:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001198:	4810      	ldr	r0, [pc, #64]	; (80011dc <main+0x158>)
 800119a:	f003 fc39 	bl	8004a10 <HAL_UART_Transmit>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d101      	bne.n	80011a8 <main+0x124>
 80011a4:	f000 f93e 	bl	8001424 <Error_Handler>

	char *receiveMsg = "%\n\r";
 80011a8:	4b0e      	ldr	r3, [pc, #56]	; (80011e4 <main+0x160>)
 80011aa:	61fb      	str	r3, [r7, #28]
	if(HAL_UART_Transmit(&huart2, (uint8_t *)receiveMsg, strlen(receiveMsg), 1000)==HAL_ERROR)Error_Handler();
 80011ac:	69f8      	ldr	r0, [r7, #28]
 80011ae:	f7ff f80f 	bl	80001d0 <strlen>
 80011b2:	4603      	mov	r3, r0
 80011b4:	b29a      	uxth	r2, r3
 80011b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ba:	69f9      	ldr	r1, [r7, #28]
 80011bc:	4807      	ldr	r0, [pc, #28]	; (80011dc <main+0x158>)
 80011be:	f003 fc27 	bl	8004a10 <HAL_UART_Transmit>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d101      	bne.n	80011cc <main+0x148>
 80011c8:	f000 f92c 	bl	8001424 <Error_Handler>
	HAL_Delay(1000);
 80011cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011d0:	f000 fbea 	bl	80019a8 <HAL_Delay>
  {
 80011d4:	e76f      	b.n	80010b6 <main+0x32>
 80011d6:	bf00      	nop
 80011d8:	08008208 	.word	0x08008208
 80011dc:	200000e0 	.word	0x200000e0
 80011e0:	08008210 	.word	0x08008210
 80011e4:	0800821c 	.word	0x0800821c

080011e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b096      	sub	sp, #88	; 0x58
 80011ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ee:	f107 0314 	add.w	r3, r7, #20
 80011f2:	2244      	movs	r2, #68	; 0x44
 80011f4:	2100      	movs	r1, #0
 80011f6:	4618      	mov	r0, r3
 80011f8:	f004 fc76 	bl	8005ae8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011fc:	463b      	mov	r3, r7
 80011fe:	2200      	movs	r2, #0
 8001200:	601a      	str	r2, [r3, #0]
 8001202:	605a      	str	r2, [r3, #4]
 8001204:	609a      	str	r2, [r3, #8]
 8001206:	60da      	str	r2, [r3, #12]
 8001208:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800120a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800120e:	f002 fa2b 	bl	8003668 <HAL_PWREx_ControlVoltageScaling>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001218:	f000 f904 	bl	8001424 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800121c:	f002 fa06 	bl	800362c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001220:	4b21      	ldr	r3, [pc, #132]	; (80012a8 <SystemClock_Config+0xc0>)
 8001222:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001226:	4a20      	ldr	r2, [pc, #128]	; (80012a8 <SystemClock_Config+0xc0>)
 8001228:	f023 0318 	bic.w	r3, r3, #24
 800122c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001230:	2314      	movs	r3, #20
 8001232:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001234:	2301      	movs	r3, #1
 8001236:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001238:	2301      	movs	r3, #1
 800123a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800123c:	2300      	movs	r3, #0
 800123e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001240:	2360      	movs	r3, #96	; 0x60
 8001242:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001244:	2302      	movs	r3, #2
 8001246:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001248:	2301      	movs	r3, #1
 800124a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800124c:	2301      	movs	r3, #1
 800124e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001250:	2310      	movs	r3, #16
 8001252:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001254:	2307      	movs	r3, #7
 8001256:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001258:	2302      	movs	r3, #2
 800125a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800125c:	2302      	movs	r3, #2
 800125e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001260:	f107 0314 	add.w	r3, r7, #20
 8001264:	4618      	mov	r0, r3
 8001266:	f002 fa55 	bl	8003714 <HAL_RCC_OscConfig>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001270:	f000 f8d8 	bl	8001424 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001274:	230f      	movs	r3, #15
 8001276:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001278:	2303      	movs	r3, #3
 800127a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800127c:	2300      	movs	r3, #0
 800127e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001280:	2300      	movs	r3, #0
 8001282:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001284:	2300      	movs	r3, #0
 8001286:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001288:	463b      	mov	r3, r7
 800128a:	2101      	movs	r1, #1
 800128c:	4618      	mov	r0, r3
 800128e:	f002 fe55 	bl	8003f3c <HAL_RCC_ClockConfig>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001298:	f000 f8c4 	bl	8001424 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800129c:	f003 fa68 	bl	8004770 <HAL_RCCEx_EnableMSIPLLMode>
}
 80012a0:	bf00      	nop
 80012a2:	3758      	adds	r7, #88	; 0x58
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40021000 	.word	0x40021000

080012ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012b0:	4b1b      	ldr	r3, [pc, #108]	; (8001320 <MX_I2C1_Init+0x74>)
 80012b2:	4a1c      	ldr	r2, [pc, #112]	; (8001324 <MX_I2C1_Init+0x78>)
 80012b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80012b6:	4b1a      	ldr	r3, [pc, #104]	; (8001320 <MX_I2C1_Init+0x74>)
 80012b8:	4a1b      	ldr	r2, [pc, #108]	; (8001328 <MX_I2C1_Init+0x7c>)
 80012ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80012bc:	4b18      	ldr	r3, [pc, #96]	; (8001320 <MX_I2C1_Init+0x74>)
 80012be:	2200      	movs	r2, #0
 80012c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012c2:	4b17      	ldr	r3, [pc, #92]	; (8001320 <MX_I2C1_Init+0x74>)
 80012c4:	2201      	movs	r2, #1
 80012c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012c8:	4b15      	ldr	r3, [pc, #84]	; (8001320 <MX_I2C1_Init+0x74>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80012ce:	4b14      	ldr	r3, [pc, #80]	; (8001320 <MX_I2C1_Init+0x74>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012d4:	4b12      	ldr	r3, [pc, #72]	; (8001320 <MX_I2C1_Init+0x74>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012da:	4b11      	ldr	r3, [pc, #68]	; (8001320 <MX_I2C1_Init+0x74>)
 80012dc:	2200      	movs	r2, #0
 80012de:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012e0:	4b0f      	ldr	r3, [pc, #60]	; (8001320 <MX_I2C1_Init+0x74>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012e6:	480e      	ldr	r0, [pc, #56]	; (8001320 <MX_I2C1_Init+0x74>)
 80012e8:	f000 fea2 	bl	8002030 <HAL_I2C_Init>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80012f2:	f000 f897 	bl	8001424 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012f6:	2100      	movs	r1, #0
 80012f8:	4809      	ldr	r0, [pc, #36]	; (8001320 <MX_I2C1_Init+0x74>)
 80012fa:	f002 f8ff 	bl	80034fc <HAL_I2CEx_ConfigAnalogFilter>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001304:	f000 f88e 	bl	8001424 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001308:	2100      	movs	r1, #0
 800130a:	4805      	ldr	r0, [pc, #20]	; (8001320 <MX_I2C1_Init+0x74>)
 800130c:	f002 f941 	bl	8003592 <HAL_I2CEx_ConfigDigitalFilter>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001316:	f000 f885 	bl	8001424 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800131a:	bf00      	nop
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	2000008c 	.word	0x2000008c
 8001324:	40005400 	.word	0x40005400
 8001328:	00707cbb 	.word	0x00707cbb

0800132c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001330:	4b14      	ldr	r3, [pc, #80]	; (8001384 <MX_USART2_UART_Init+0x58>)
 8001332:	4a15      	ldr	r2, [pc, #84]	; (8001388 <MX_USART2_UART_Init+0x5c>)
 8001334:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001336:	4b13      	ldr	r3, [pc, #76]	; (8001384 <MX_USART2_UART_Init+0x58>)
 8001338:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800133c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800133e:	4b11      	ldr	r3, [pc, #68]	; (8001384 <MX_USART2_UART_Init+0x58>)
 8001340:	2200      	movs	r2, #0
 8001342:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001344:	4b0f      	ldr	r3, [pc, #60]	; (8001384 <MX_USART2_UART_Init+0x58>)
 8001346:	2200      	movs	r2, #0
 8001348:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800134a:	4b0e      	ldr	r3, [pc, #56]	; (8001384 <MX_USART2_UART_Init+0x58>)
 800134c:	2200      	movs	r2, #0
 800134e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001350:	4b0c      	ldr	r3, [pc, #48]	; (8001384 <MX_USART2_UART_Init+0x58>)
 8001352:	220c      	movs	r2, #12
 8001354:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001356:	4b0b      	ldr	r3, [pc, #44]	; (8001384 <MX_USART2_UART_Init+0x58>)
 8001358:	2200      	movs	r2, #0
 800135a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800135c:	4b09      	ldr	r3, [pc, #36]	; (8001384 <MX_USART2_UART_Init+0x58>)
 800135e:	2200      	movs	r2, #0
 8001360:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001362:	4b08      	ldr	r3, [pc, #32]	; (8001384 <MX_USART2_UART_Init+0x58>)
 8001364:	2200      	movs	r2, #0
 8001366:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001368:	4b06      	ldr	r3, [pc, #24]	; (8001384 <MX_USART2_UART_Init+0x58>)
 800136a:	2200      	movs	r2, #0
 800136c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800136e:	4805      	ldr	r0, [pc, #20]	; (8001384 <MX_USART2_UART_Init+0x58>)
 8001370:	f003 fb00 	bl	8004974 <HAL_UART_Init>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800137a:	f000 f853 	bl	8001424 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800137e:	bf00      	nop
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	200000e0 	.word	0x200000e0
 8001388:	40004400 	.word	0x40004400

0800138c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b088      	sub	sp, #32
 8001390:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001392:	f107 030c 	add.w	r3, r7, #12
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	605a      	str	r2, [r3, #4]
 800139c:	609a      	str	r2, [r3, #8]
 800139e:	60da      	str	r2, [r3, #12]
 80013a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013a2:	4b1f      	ldr	r3, [pc, #124]	; (8001420 <MX_GPIO_Init+0x94>)
 80013a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a6:	4a1e      	ldr	r2, [pc, #120]	; (8001420 <MX_GPIO_Init+0x94>)
 80013a8:	f043 0304 	orr.w	r3, r3, #4
 80013ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ae:	4b1c      	ldr	r3, [pc, #112]	; (8001420 <MX_GPIO_Init+0x94>)
 80013b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b2:	f003 0304 	and.w	r3, r3, #4
 80013b6:	60bb      	str	r3, [r7, #8]
 80013b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ba:	4b19      	ldr	r3, [pc, #100]	; (8001420 <MX_GPIO_Init+0x94>)
 80013bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013be:	4a18      	ldr	r2, [pc, #96]	; (8001420 <MX_GPIO_Init+0x94>)
 80013c0:	f043 0301 	orr.w	r3, r3, #1
 80013c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013c6:	4b16      	ldr	r3, [pc, #88]	; (8001420 <MX_GPIO_Init+0x94>)
 80013c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ca:	f003 0301 	and.w	r3, r3, #1
 80013ce:	607b      	str	r3, [r7, #4]
 80013d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013d2:	4b13      	ldr	r3, [pc, #76]	; (8001420 <MX_GPIO_Init+0x94>)
 80013d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d6:	4a12      	ldr	r2, [pc, #72]	; (8001420 <MX_GPIO_Init+0x94>)
 80013d8:	f043 0302 	orr.w	r3, r3, #2
 80013dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013de:	4b10      	ldr	r3, [pc, #64]	; (8001420 <MX_GPIO_Init+0x94>)
 80013e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	603b      	str	r3, [r7, #0]
 80013e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80013ea:	2200      	movs	r2, #0
 80013ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013f4:	f000 fe04 	bl	8002000 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80013f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013fe:	2301      	movs	r3, #1
 8001400:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001402:	2300      	movs	r3, #0
 8001404:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001406:	2300      	movs	r3, #0
 8001408:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800140a:	f107 030c 	add.w	r3, r7, #12
 800140e:	4619      	mov	r1, r3
 8001410:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001414:	f000 fc8a 	bl	8001d2c <HAL_GPIO_Init>

}
 8001418:	bf00      	nop
 800141a:	3720      	adds	r7, #32
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	40021000 	.word	0x40021000

08001424 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001428:	b672      	cpsid	i
}
 800142a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800142c:	e7fe      	b.n	800142c <Error_Handler+0x8>
	...

08001430 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001436:	4b0f      	ldr	r3, [pc, #60]	; (8001474 <HAL_MspInit+0x44>)
 8001438:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800143a:	4a0e      	ldr	r2, [pc, #56]	; (8001474 <HAL_MspInit+0x44>)
 800143c:	f043 0301 	orr.w	r3, r3, #1
 8001440:	6613      	str	r3, [r2, #96]	; 0x60
 8001442:	4b0c      	ldr	r3, [pc, #48]	; (8001474 <HAL_MspInit+0x44>)
 8001444:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	607b      	str	r3, [r7, #4]
 800144c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800144e:	4b09      	ldr	r3, [pc, #36]	; (8001474 <HAL_MspInit+0x44>)
 8001450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001452:	4a08      	ldr	r2, [pc, #32]	; (8001474 <HAL_MspInit+0x44>)
 8001454:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001458:	6593      	str	r3, [r2, #88]	; 0x58
 800145a:	4b06      	ldr	r3, [pc, #24]	; (8001474 <HAL_MspInit+0x44>)
 800145c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800145e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001462:	603b      	str	r3, [r7, #0]
 8001464:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001466:	bf00      	nop
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	40021000 	.word	0x40021000

08001478 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b09e      	sub	sp, #120	; 0x78
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001480:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	605a      	str	r2, [r3, #4]
 800148a:	609a      	str	r2, [r3, #8]
 800148c:	60da      	str	r2, [r3, #12]
 800148e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001490:	f107 0310 	add.w	r3, r7, #16
 8001494:	2254      	movs	r2, #84	; 0x54
 8001496:	2100      	movs	r1, #0
 8001498:	4618      	mov	r0, r3
 800149a:	f004 fb25 	bl	8005ae8 <memset>
  if(hi2c->Instance==I2C1)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a26      	ldr	r2, [pc, #152]	; (800153c <HAL_I2C_MspInit+0xc4>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d145      	bne.n	8001534 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80014a8:	2340      	movs	r3, #64	; 0x40
 80014aa:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80014ac:	2300      	movs	r3, #0
 80014ae:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014b0:	f107 0310 	add.w	r3, r7, #16
 80014b4:	4618      	mov	r0, r3
 80014b6:	f002 ff65 	bl	8004384 <HAL_RCCEx_PeriphCLKConfig>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80014c0:	f7ff ffb0 	bl	8001424 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c4:	4b1e      	ldr	r3, [pc, #120]	; (8001540 <HAL_I2C_MspInit+0xc8>)
 80014c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c8:	4a1d      	ldr	r2, [pc, #116]	; (8001540 <HAL_I2C_MspInit+0xc8>)
 80014ca:	f043 0302 	orr.w	r3, r3, #2
 80014ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014d0:	4b1b      	ldr	r3, [pc, #108]	; (8001540 <HAL_I2C_MspInit+0xc8>)
 80014d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d4:	f003 0302 	and.w	r3, r3, #2
 80014d8:	60fb      	str	r3, [r7, #12]
 80014da:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014dc:	23c0      	movs	r3, #192	; 0xc0
 80014de:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014e0:	2312      	movs	r3, #18
 80014e2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e4:	2300      	movs	r3, #0
 80014e6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e8:	2303      	movs	r3, #3
 80014ea:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014ec:	2304      	movs	r3, #4
 80014ee:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80014f4:	4619      	mov	r1, r3
 80014f6:	4813      	ldr	r0, [pc, #76]	; (8001544 <HAL_I2C_MspInit+0xcc>)
 80014f8:	f000 fc18 	bl	8001d2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014fc:	4b10      	ldr	r3, [pc, #64]	; (8001540 <HAL_I2C_MspInit+0xc8>)
 80014fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001500:	4a0f      	ldr	r2, [pc, #60]	; (8001540 <HAL_I2C_MspInit+0xc8>)
 8001502:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001506:	6593      	str	r3, [r2, #88]	; 0x58
 8001508:	4b0d      	ldr	r3, [pc, #52]	; (8001540 <HAL_I2C_MspInit+0xc8>)
 800150a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800150c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001510:	60bb      	str	r3, [r7, #8]
 8001512:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001514:	2200      	movs	r2, #0
 8001516:	2100      	movs	r1, #0
 8001518:	201f      	movs	r0, #31
 800151a:	f000 fb44 	bl	8001ba6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800151e:	201f      	movs	r0, #31
 8001520:	f000 fb5d 	bl	8001bde <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001524:	2200      	movs	r2, #0
 8001526:	2100      	movs	r1, #0
 8001528:	2020      	movs	r0, #32
 800152a:	f000 fb3c 	bl	8001ba6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800152e:	2020      	movs	r0, #32
 8001530:	f000 fb55 	bl	8001bde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001534:	bf00      	nop
 8001536:	3778      	adds	r7, #120	; 0x78
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	40005400 	.word	0x40005400
 8001540:	40021000 	.word	0x40021000
 8001544:	48000400 	.word	0x48000400

08001548 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b09e      	sub	sp, #120	; 0x78
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001550:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	605a      	str	r2, [r3, #4]
 800155a:	609a      	str	r2, [r3, #8]
 800155c:	60da      	str	r2, [r3, #12]
 800155e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001560:	f107 0310 	add.w	r3, r7, #16
 8001564:	2254      	movs	r2, #84	; 0x54
 8001566:	2100      	movs	r1, #0
 8001568:	4618      	mov	r0, r3
 800156a:	f004 fabd 	bl	8005ae8 <memset>
  if(huart->Instance==USART2)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a2c      	ldr	r2, [pc, #176]	; (8001624 <HAL_UART_MspInit+0xdc>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d150      	bne.n	800161a <HAL_UART_MspInit+0xd2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001578:	2302      	movs	r3, #2
 800157a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800157c:	2300      	movs	r3, #0
 800157e:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001580:	f107 0310 	add.w	r3, r7, #16
 8001584:	4618      	mov	r0, r3
 8001586:	f002 fefd 	bl	8004384 <HAL_RCCEx_PeriphCLKConfig>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001590:	f7ff ff48 	bl	8001424 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001594:	4b24      	ldr	r3, [pc, #144]	; (8001628 <HAL_UART_MspInit+0xe0>)
 8001596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001598:	4a23      	ldr	r2, [pc, #140]	; (8001628 <HAL_UART_MspInit+0xe0>)
 800159a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800159e:	6593      	str	r3, [r2, #88]	; 0x58
 80015a0:	4b21      	ldr	r3, [pc, #132]	; (8001628 <HAL_UART_MspInit+0xe0>)
 80015a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a8:	60fb      	str	r3, [r7, #12]
 80015aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ac:	4b1e      	ldr	r3, [pc, #120]	; (8001628 <HAL_UART_MspInit+0xe0>)
 80015ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b0:	4a1d      	ldr	r2, [pc, #116]	; (8001628 <HAL_UART_MspInit+0xe0>)
 80015b2:	f043 0301 	orr.w	r3, r3, #1
 80015b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015b8:	4b1b      	ldr	r3, [pc, #108]	; (8001628 <HAL_UART_MspInit+0xe0>)
 80015ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015bc:	f003 0301 	and.w	r3, r3, #1
 80015c0:	60bb      	str	r3, [r7, #8]
 80015c2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80015c4:	2304      	movs	r3, #4
 80015c6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c8:	2302      	movs	r3, #2
 80015ca:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015cc:	2300      	movs	r3, #0
 80015ce:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d0:	2303      	movs	r3, #3
 80015d2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015d4:	2307      	movs	r3, #7
 80015d6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80015d8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80015dc:	4619      	mov	r1, r3
 80015de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015e2:	f000 fba3 	bl	8001d2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80015e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80015ea:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ec:	2302      	movs	r3, #2
 80015ee:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f0:	2300      	movs	r3, #0
 80015f2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f4:	2303      	movs	r3, #3
 80015f6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80015f8:	2303      	movs	r3, #3
 80015fa:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80015fc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001600:	4619      	mov	r1, r3
 8001602:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001606:	f000 fb91 	bl	8001d2c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800160a:	2200      	movs	r2, #0
 800160c:	2100      	movs	r1, #0
 800160e:	2026      	movs	r0, #38	; 0x26
 8001610:	f000 fac9 	bl	8001ba6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001614:	2026      	movs	r0, #38	; 0x26
 8001616:	f000 fae2 	bl	8001bde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800161a:	bf00      	nop
 800161c:	3778      	adds	r7, #120	; 0x78
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40004400 	.word	0x40004400
 8001628:	40021000 	.word	0x40021000

0800162c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001630:	e7fe      	b.n	8001630 <NMI_Handler+0x4>

08001632 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001632:	b480      	push	{r7}
 8001634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001636:	e7fe      	b.n	8001636 <HardFault_Handler+0x4>

08001638 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800163c:	e7fe      	b.n	800163c <MemManage_Handler+0x4>

0800163e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800163e:	b480      	push	{r7}
 8001640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001642:	e7fe      	b.n	8001642 <BusFault_Handler+0x4>

08001644 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001648:	e7fe      	b.n	8001648 <UsageFault_Handler+0x4>

0800164a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800164a:	b480      	push	{r7}
 800164c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800164e:	bf00      	nop
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800165c:	bf00      	nop
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr

08001666 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001666:	b480      	push	{r7}
 8001668:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800166a:	bf00      	nop
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001678:	f000 f976 	bl	8001968 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800167c:	bf00      	nop
 800167e:	bd80      	pop	{r7, pc}

08001680 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001684:	4802      	ldr	r0, [pc, #8]	; (8001690 <I2C1_EV_IRQHandler+0x10>)
 8001686:	f000 ff4d 	bl	8002524 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	2000008c 	.word	0x2000008c

08001694 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001698:	4802      	ldr	r0, [pc, #8]	; (80016a4 <I2C1_ER_IRQHandler+0x10>)
 800169a:	f000 ff5d 	bl	8002558 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800169e:	bf00      	nop
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	2000008c 	.word	0x2000008c

080016a8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80016ac:	4802      	ldr	r0, [pc, #8]	; (80016b8 <USART2_IRQHandler+0x10>)
 80016ae:	f003 fa43 	bl	8004b38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80016b2:	bf00      	nop
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	200000e0 	.word	0x200000e0

080016bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
	return 1;
 80016c0:	2301      	movs	r3, #1
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <_kill>:

int _kill(int pid, int sig)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80016d6:	f004 f9dd 	bl	8005a94 <__errno>
 80016da:	4603      	mov	r3, r0
 80016dc:	2216      	movs	r2, #22
 80016de:	601a      	str	r2, [r3, #0]
	return -1;
 80016e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3708      	adds	r7, #8
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}

080016ec <_exit>:

void _exit (int status)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80016f4:	f04f 31ff 	mov.w	r1, #4294967295
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f7ff ffe7 	bl	80016cc <_kill>
	while (1) {}		/* Make sure we hang here */
 80016fe:	e7fe      	b.n	80016fe <_exit+0x12>

08001700 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b086      	sub	sp, #24
 8001704:	af00      	add	r7, sp, #0
 8001706:	60f8      	str	r0, [r7, #12]
 8001708:	60b9      	str	r1, [r7, #8]
 800170a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800170c:	2300      	movs	r3, #0
 800170e:	617b      	str	r3, [r7, #20]
 8001710:	e00a      	b.n	8001728 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001712:	f3af 8000 	nop.w
 8001716:	4601      	mov	r1, r0
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	1c5a      	adds	r2, r3, #1
 800171c:	60ba      	str	r2, [r7, #8]
 800171e:	b2ca      	uxtb	r2, r1
 8001720:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	3301      	adds	r3, #1
 8001726:	617b      	str	r3, [r7, #20]
 8001728:	697a      	ldr	r2, [r7, #20]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	429a      	cmp	r2, r3
 800172e:	dbf0      	blt.n	8001712 <_read+0x12>
	}

return len;
 8001730:	687b      	ldr	r3, [r7, #4]
}
 8001732:	4618      	mov	r0, r3
 8001734:	3718      	adds	r7, #24
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	b086      	sub	sp, #24
 800173e:	af00      	add	r7, sp, #0
 8001740:	60f8      	str	r0, [r7, #12]
 8001742:	60b9      	str	r1, [r7, #8]
 8001744:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001746:	2300      	movs	r3, #0
 8001748:	617b      	str	r3, [r7, #20]
 800174a:	e009      	b.n	8001760 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	1c5a      	adds	r2, r3, #1
 8001750:	60ba      	str	r2, [r7, #8]
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	4618      	mov	r0, r3
 8001756:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	3301      	adds	r3, #1
 800175e:	617b      	str	r3, [r7, #20]
 8001760:	697a      	ldr	r2, [r7, #20]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	429a      	cmp	r2, r3
 8001766:	dbf1      	blt.n	800174c <_write+0x12>
	}
	return len;
 8001768:	687b      	ldr	r3, [r7, #4]
}
 800176a:	4618      	mov	r0, r3
 800176c:	3718      	adds	r7, #24
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <_close>:

int _close(int file)
{
 8001772:	b480      	push	{r7}
 8001774:	b083      	sub	sp, #12
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
	return -1;
 800177a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800177e:	4618      	mov	r0, r3
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr

0800178a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800178a:	b480      	push	{r7}
 800178c:	b083      	sub	sp, #12
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
 8001792:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800179a:	605a      	str	r2, [r3, #4]
	return 0;
 800179c:	2300      	movs	r3, #0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr

080017aa <_isatty>:

int _isatty(int file)
{
 80017aa:	b480      	push	{r7}
 80017ac:	b083      	sub	sp, #12
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
	return 1;
 80017b2:	2301      	movs	r3, #1
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b085      	sub	sp, #20
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	60f8      	str	r0, [r7, #12]
 80017c8:	60b9      	str	r1, [r7, #8]
 80017ca:	607a      	str	r2, [r7, #4]
	return 0;
 80017cc:	2300      	movs	r3, #0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3714      	adds	r7, #20
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
	...

080017dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b086      	sub	sp, #24
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017e4:	4a14      	ldr	r2, [pc, #80]	; (8001838 <_sbrk+0x5c>)
 80017e6:	4b15      	ldr	r3, [pc, #84]	; (800183c <_sbrk+0x60>)
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017f0:	4b13      	ldr	r3, [pc, #76]	; (8001840 <_sbrk+0x64>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d102      	bne.n	80017fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017f8:	4b11      	ldr	r3, [pc, #68]	; (8001840 <_sbrk+0x64>)
 80017fa:	4a12      	ldr	r2, [pc, #72]	; (8001844 <_sbrk+0x68>)
 80017fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017fe:	4b10      	ldr	r3, [pc, #64]	; (8001840 <_sbrk+0x64>)
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4413      	add	r3, r2
 8001806:	693a      	ldr	r2, [r7, #16]
 8001808:	429a      	cmp	r2, r3
 800180a:	d207      	bcs.n	800181c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800180c:	f004 f942 	bl	8005a94 <__errno>
 8001810:	4603      	mov	r3, r0
 8001812:	220c      	movs	r2, #12
 8001814:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001816:	f04f 33ff 	mov.w	r3, #4294967295
 800181a:	e009      	b.n	8001830 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800181c:	4b08      	ldr	r3, [pc, #32]	; (8001840 <_sbrk+0x64>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001822:	4b07      	ldr	r3, [pc, #28]	; (8001840 <_sbrk+0x64>)
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4413      	add	r3, r2
 800182a:	4a05      	ldr	r2, [pc, #20]	; (8001840 <_sbrk+0x64>)
 800182c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800182e:	68fb      	ldr	r3, [r7, #12]
}
 8001830:	4618      	mov	r0, r3
 8001832:	3718      	adds	r7, #24
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	20010000 	.word	0x20010000
 800183c:	00000400 	.word	0x00000400
 8001840:	20000164 	.word	0x20000164
 8001844:	20000180 	.word	0x20000180

08001848 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800184c:	4b06      	ldr	r3, [pc, #24]	; (8001868 <SystemInit+0x20>)
 800184e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001852:	4a05      	ldr	r2, [pc, #20]	; (8001868 <SystemInit+0x20>)
 8001854:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001858:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800185c:	bf00      	nop
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	e000ed00 	.word	0xe000ed00

0800186c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800186c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018a4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001870:	f7ff ffea 	bl	8001848 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001874:	480c      	ldr	r0, [pc, #48]	; (80018a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001876:	490d      	ldr	r1, [pc, #52]	; (80018ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8001878:	4a0d      	ldr	r2, [pc, #52]	; (80018b0 <LoopForever+0xe>)
  movs r3, #0
 800187a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800187c:	e002      	b.n	8001884 <LoopCopyDataInit>

0800187e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800187e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001880:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001882:	3304      	adds	r3, #4

08001884 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001884:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001886:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001888:	d3f9      	bcc.n	800187e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800188a:	4a0a      	ldr	r2, [pc, #40]	; (80018b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800188c:	4c0a      	ldr	r4, [pc, #40]	; (80018b8 <LoopForever+0x16>)
  movs r3, #0
 800188e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001890:	e001      	b.n	8001896 <LoopFillZerobss>

08001892 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001892:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001894:	3204      	adds	r2, #4

08001896 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001896:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001898:	d3fb      	bcc.n	8001892 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800189a:	f004 f901 	bl	8005aa0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800189e:	f7ff fbf1 	bl	8001084 <main>

080018a2 <LoopForever>:

LoopForever:
    b LoopForever
 80018a2:	e7fe      	b.n	80018a2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80018a4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80018a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018ac:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80018b0:	08008538 	.word	0x08008538
  ldr r2, =_sbss
 80018b4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80018b8:	2000017c 	.word	0x2000017c

080018bc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018bc:	e7fe      	b.n	80018bc <ADC1_IRQHandler>

080018be <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018be:	b580      	push	{r7, lr}
 80018c0:	b082      	sub	sp, #8
 80018c2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80018c4:	2300      	movs	r3, #0
 80018c6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018c8:	2003      	movs	r0, #3
 80018ca:	f000 f961 	bl	8001b90 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018ce:	2000      	movs	r0, #0
 80018d0:	f000 f80e 	bl	80018f0 <HAL_InitTick>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d002      	beq.n	80018e0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	71fb      	strb	r3, [r7, #7]
 80018de:	e001      	b.n	80018e4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80018e0:	f7ff fda6 	bl	8001430 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80018e4:	79fb      	ldrb	r3, [r7, #7]
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
	...

080018f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80018f8:	2300      	movs	r3, #0
 80018fa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80018fc:	4b17      	ldr	r3, [pc, #92]	; (800195c <HAL_InitTick+0x6c>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d023      	beq.n	800194c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001904:	4b16      	ldr	r3, [pc, #88]	; (8001960 <HAL_InitTick+0x70>)
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	4b14      	ldr	r3, [pc, #80]	; (800195c <HAL_InitTick+0x6c>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	4619      	mov	r1, r3
 800190e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001912:	fbb3 f3f1 	udiv	r3, r3, r1
 8001916:	fbb2 f3f3 	udiv	r3, r2, r3
 800191a:	4618      	mov	r0, r3
 800191c:	f000 f96d 	bl	8001bfa <HAL_SYSTICK_Config>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d10f      	bne.n	8001946 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2b0f      	cmp	r3, #15
 800192a:	d809      	bhi.n	8001940 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800192c:	2200      	movs	r2, #0
 800192e:	6879      	ldr	r1, [r7, #4]
 8001930:	f04f 30ff 	mov.w	r0, #4294967295
 8001934:	f000 f937 	bl	8001ba6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001938:	4a0a      	ldr	r2, [pc, #40]	; (8001964 <HAL_InitTick+0x74>)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6013      	str	r3, [r2, #0]
 800193e:	e007      	b.n	8001950 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	73fb      	strb	r3, [r7, #15]
 8001944:	e004      	b.n	8001950 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	73fb      	strb	r3, [r7, #15]
 800194a:	e001      	b.n	8001950 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001950:	7bfb      	ldrb	r3, [r7, #15]
}
 8001952:	4618      	mov	r0, r3
 8001954:	3710      	adds	r7, #16
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	20000008 	.word	0x20000008
 8001960:	20000000 	.word	0x20000000
 8001964:	20000004 	.word	0x20000004

08001968 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800196c:	4b06      	ldr	r3, [pc, #24]	; (8001988 <HAL_IncTick+0x20>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	461a      	mov	r2, r3
 8001972:	4b06      	ldr	r3, [pc, #24]	; (800198c <HAL_IncTick+0x24>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4413      	add	r3, r2
 8001978:	4a04      	ldr	r2, [pc, #16]	; (800198c <HAL_IncTick+0x24>)
 800197a:	6013      	str	r3, [r2, #0]
}
 800197c:	bf00      	nop
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	20000008 	.word	0x20000008
 800198c:	20000168 	.word	0x20000168

08001990 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  return uwTick;
 8001994:	4b03      	ldr	r3, [pc, #12]	; (80019a4 <HAL_GetTick+0x14>)
 8001996:	681b      	ldr	r3, [r3, #0]
}
 8001998:	4618      	mov	r0, r3
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	20000168 	.word	0x20000168

080019a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019b0:	f7ff ffee 	bl	8001990 <HAL_GetTick>
 80019b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019c0:	d005      	beq.n	80019ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80019c2:	4b0a      	ldr	r3, [pc, #40]	; (80019ec <HAL_Delay+0x44>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	461a      	mov	r2, r3
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	4413      	add	r3, r2
 80019cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019ce:	bf00      	nop
 80019d0:	f7ff ffde 	bl	8001990 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	68fa      	ldr	r2, [r7, #12]
 80019dc:	429a      	cmp	r2, r3
 80019de:	d8f7      	bhi.n	80019d0 <HAL_Delay+0x28>
  {
  }
}
 80019e0:	bf00      	nop
 80019e2:	bf00      	nop
 80019e4:	3710      	adds	r7, #16
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	20000008 	.word	0x20000008

080019f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f003 0307 	and.w	r3, r3, #7
 80019fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a00:	4b0c      	ldr	r3, [pc, #48]	; (8001a34 <__NVIC_SetPriorityGrouping+0x44>)
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a06:	68ba      	ldr	r2, [r7, #8]
 8001a08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a22:	4a04      	ldr	r2, [pc, #16]	; (8001a34 <__NVIC_SetPriorityGrouping+0x44>)
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	60d3      	str	r3, [r2, #12]
}
 8001a28:	bf00      	nop
 8001a2a:	3714      	adds	r7, #20
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr
 8001a34:	e000ed00 	.word	0xe000ed00

08001a38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a3c:	4b04      	ldr	r3, [pc, #16]	; (8001a50 <__NVIC_GetPriorityGrouping+0x18>)
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	0a1b      	lsrs	r3, r3, #8
 8001a42:	f003 0307 	and.w	r3, r3, #7
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr
 8001a50:	e000ed00 	.word	0xe000ed00

08001a54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	db0b      	blt.n	8001a7e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a66:	79fb      	ldrb	r3, [r7, #7]
 8001a68:	f003 021f 	and.w	r2, r3, #31
 8001a6c:	4907      	ldr	r1, [pc, #28]	; (8001a8c <__NVIC_EnableIRQ+0x38>)
 8001a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a72:	095b      	lsrs	r3, r3, #5
 8001a74:	2001      	movs	r0, #1
 8001a76:	fa00 f202 	lsl.w	r2, r0, r2
 8001a7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a7e:	bf00      	nop
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	e000e100 	.word	0xe000e100

08001a90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4603      	mov	r3, r0
 8001a98:	6039      	str	r1, [r7, #0]
 8001a9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	db0a      	blt.n	8001aba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	b2da      	uxtb	r2, r3
 8001aa8:	490c      	ldr	r1, [pc, #48]	; (8001adc <__NVIC_SetPriority+0x4c>)
 8001aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aae:	0112      	lsls	r2, r2, #4
 8001ab0:	b2d2      	uxtb	r2, r2
 8001ab2:	440b      	add	r3, r1
 8001ab4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ab8:	e00a      	b.n	8001ad0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	b2da      	uxtb	r2, r3
 8001abe:	4908      	ldr	r1, [pc, #32]	; (8001ae0 <__NVIC_SetPriority+0x50>)
 8001ac0:	79fb      	ldrb	r3, [r7, #7]
 8001ac2:	f003 030f 	and.w	r3, r3, #15
 8001ac6:	3b04      	subs	r3, #4
 8001ac8:	0112      	lsls	r2, r2, #4
 8001aca:	b2d2      	uxtb	r2, r2
 8001acc:	440b      	add	r3, r1
 8001ace:	761a      	strb	r2, [r3, #24]
}
 8001ad0:	bf00      	nop
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr
 8001adc:	e000e100 	.word	0xe000e100
 8001ae0:	e000ed00 	.word	0xe000ed00

08001ae4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b089      	sub	sp, #36	; 0x24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	60b9      	str	r1, [r7, #8]
 8001aee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	f003 0307 	and.w	r3, r3, #7
 8001af6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	f1c3 0307 	rsb	r3, r3, #7
 8001afe:	2b04      	cmp	r3, #4
 8001b00:	bf28      	it	cs
 8001b02:	2304      	movcs	r3, #4
 8001b04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	3304      	adds	r3, #4
 8001b0a:	2b06      	cmp	r3, #6
 8001b0c:	d902      	bls.n	8001b14 <NVIC_EncodePriority+0x30>
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	3b03      	subs	r3, #3
 8001b12:	e000      	b.n	8001b16 <NVIC_EncodePriority+0x32>
 8001b14:	2300      	movs	r3, #0
 8001b16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b18:	f04f 32ff 	mov.w	r2, #4294967295
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b22:	43da      	mvns	r2, r3
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	401a      	ands	r2, r3
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	fa01 f303 	lsl.w	r3, r1, r3
 8001b36:	43d9      	mvns	r1, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b3c:	4313      	orrs	r3, r2
         );
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3724      	adds	r7, #36	; 0x24
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
	...

08001b4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	3b01      	subs	r3, #1
 8001b58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b5c:	d301      	bcc.n	8001b62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e00f      	b.n	8001b82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b62:	4a0a      	ldr	r2, [pc, #40]	; (8001b8c <SysTick_Config+0x40>)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	3b01      	subs	r3, #1
 8001b68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b6a:	210f      	movs	r1, #15
 8001b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b70:	f7ff ff8e 	bl	8001a90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b74:	4b05      	ldr	r3, [pc, #20]	; (8001b8c <SysTick_Config+0x40>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b7a:	4b04      	ldr	r3, [pc, #16]	; (8001b8c <SysTick_Config+0x40>)
 8001b7c:	2207      	movs	r2, #7
 8001b7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	e000e010 	.word	0xe000e010

08001b90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f7ff ff29 	bl	80019f0 <__NVIC_SetPriorityGrouping>
}
 8001b9e:	bf00      	nop
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b086      	sub	sp, #24
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	4603      	mov	r3, r0
 8001bae:	60b9      	str	r1, [r7, #8]
 8001bb0:	607a      	str	r2, [r7, #4]
 8001bb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001bb8:	f7ff ff3e 	bl	8001a38 <__NVIC_GetPriorityGrouping>
 8001bbc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	68b9      	ldr	r1, [r7, #8]
 8001bc2:	6978      	ldr	r0, [r7, #20]
 8001bc4:	f7ff ff8e 	bl	8001ae4 <NVIC_EncodePriority>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bce:	4611      	mov	r1, r2
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff ff5d 	bl	8001a90 <__NVIC_SetPriority>
}
 8001bd6:	bf00      	nop
 8001bd8:	3718      	adds	r7, #24
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b082      	sub	sp, #8
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	4603      	mov	r3, r0
 8001be6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff ff31 	bl	8001a54 <__NVIC_EnableIRQ>
}
 8001bf2:	bf00      	nop
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b082      	sub	sp, #8
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f7ff ffa2 	bl	8001b4c <SysTick_Config>
 8001c08:	4603      	mov	r3, r0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c12:	b480      	push	{r7}
 8001c14:	b085      	sub	sp, #20
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d008      	beq.n	8001c3c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2204      	movs	r2, #4
 8001c2e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e022      	b.n	8001c82 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f022 020e 	bic.w	r2, r2, #14
 8001c4a:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f022 0201 	bic.w	r2, r2, #1
 8001c5a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c60:	f003 021c 	and.w	r2, r3, #28
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c68:	2101      	movs	r1, #1
 8001c6a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c6e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2201      	movs	r2, #1
 8001c74:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001c80:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3714      	adds	r7, #20
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr

08001c8e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b084      	sub	sp, #16
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c96:	2300      	movs	r3, #0
 8001c98:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d005      	beq.n	8001cb2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2204      	movs	r2, #4
 8001caa:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	73fb      	strb	r3, [r7, #15]
 8001cb0:	e029      	b.n	8001d06 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f022 020e 	bic.w	r2, r2, #14
 8001cc0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f022 0201 	bic.w	r2, r2, #1
 8001cd0:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd6:	f003 021c 	and.w	r2, r3, #28
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cde:	2101      	movs	r1, #1
 8001ce0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ce4:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2201      	movs	r2, #1
 8001cea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d003      	beq.n	8001d06 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	4798      	blx	r3
    }
  }
  return status;
 8001d06:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3710      	adds	r7, #16
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001d1e:	b2db      	uxtb	r3, r3
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b087      	sub	sp, #28
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d36:	2300      	movs	r3, #0
 8001d38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d3a:	e148      	b.n	8001fce <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	2101      	movs	r1, #1
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	fa01 f303 	lsl.w	r3, r1, r3
 8001d48:	4013      	ands	r3, r2
 8001d4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	f000 813a 	beq.w	8001fc8 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f003 0303 	and.w	r3, r3, #3
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d005      	beq.n	8001d6c <HAL_GPIO_Init+0x40>
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f003 0303 	and.w	r3, r3, #3
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d130      	bne.n	8001dce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	2203      	movs	r2, #3
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	693a      	ldr	r2, [r7, #16]
 8001d80:	4013      	ands	r3, r2
 8001d82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	68da      	ldr	r2, [r3, #12]
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	005b      	lsls	r3, r3, #1
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	693a      	ldr	r2, [r7, #16]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	693a      	ldr	r2, [r7, #16]
 8001d9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001da2:	2201      	movs	r2, #1
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	fa02 f303 	lsl.w	r3, r2, r3
 8001daa:	43db      	mvns	r3, r3
 8001dac:	693a      	ldr	r2, [r7, #16]
 8001dae:	4013      	ands	r3, r2
 8001db0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	091b      	lsrs	r3, r3, #4
 8001db8:	f003 0201 	and.w	r2, r3, #1
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc2:	693a      	ldr	r2, [r7, #16]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	693a      	ldr	r2, [r7, #16]
 8001dcc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f003 0303 	and.w	r3, r3, #3
 8001dd6:	2b03      	cmp	r3, #3
 8001dd8:	d017      	beq.n	8001e0a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	005b      	lsls	r3, r3, #1
 8001de4:	2203      	movs	r2, #3
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	43db      	mvns	r3, r3
 8001dec:	693a      	ldr	r2, [r7, #16]
 8001dee:	4013      	ands	r3, r2
 8001df0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	689a      	ldr	r2, [r3, #8]
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f003 0303 	and.w	r3, r3, #3
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d123      	bne.n	8001e5e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	08da      	lsrs	r2, r3, #3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	3208      	adds	r2, #8
 8001e1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e22:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	f003 0307 	and.w	r3, r3, #7
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	220f      	movs	r2, #15
 8001e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e32:	43db      	mvns	r3, r3
 8001e34:	693a      	ldr	r2, [r7, #16]
 8001e36:	4013      	ands	r3, r2
 8001e38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	691a      	ldr	r2, [r3, #16]
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	f003 0307 	and.w	r3, r3, #7
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4a:	693a      	ldr	r2, [r7, #16]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	08da      	lsrs	r2, r3, #3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	3208      	adds	r2, #8
 8001e58:	6939      	ldr	r1, [r7, #16]
 8001e5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	2203      	movs	r2, #3
 8001e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6e:	43db      	mvns	r3, r3
 8001e70:	693a      	ldr	r2, [r7, #16]
 8001e72:	4013      	ands	r3, r2
 8001e74:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f003 0203 	and.w	r2, r3, #3
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	fa02 f303 	lsl.w	r3, r2, r3
 8001e86:	693a      	ldr	r2, [r7, #16]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	f000 8094 	beq.w	8001fc8 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ea0:	4b52      	ldr	r3, [pc, #328]	; (8001fec <HAL_GPIO_Init+0x2c0>)
 8001ea2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ea4:	4a51      	ldr	r2, [pc, #324]	; (8001fec <HAL_GPIO_Init+0x2c0>)
 8001ea6:	f043 0301 	orr.w	r3, r3, #1
 8001eaa:	6613      	str	r3, [r2, #96]	; 0x60
 8001eac:	4b4f      	ldr	r3, [pc, #316]	; (8001fec <HAL_GPIO_Init+0x2c0>)
 8001eae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eb0:	f003 0301 	and.w	r3, r3, #1
 8001eb4:	60bb      	str	r3, [r7, #8]
 8001eb6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001eb8:	4a4d      	ldr	r2, [pc, #308]	; (8001ff0 <HAL_GPIO_Init+0x2c4>)
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	089b      	lsrs	r3, r3, #2
 8001ebe:	3302      	adds	r3, #2
 8001ec0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ec4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	f003 0303 	and.w	r3, r3, #3
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	220f      	movs	r2, #15
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	43db      	mvns	r3, r3
 8001ed6:	693a      	ldr	r2, [r7, #16]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ee2:	d00d      	beq.n	8001f00 <HAL_GPIO_Init+0x1d4>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	4a43      	ldr	r2, [pc, #268]	; (8001ff4 <HAL_GPIO_Init+0x2c8>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d007      	beq.n	8001efc <HAL_GPIO_Init+0x1d0>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	4a42      	ldr	r2, [pc, #264]	; (8001ff8 <HAL_GPIO_Init+0x2cc>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d101      	bne.n	8001ef8 <HAL_GPIO_Init+0x1cc>
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	e004      	b.n	8001f02 <HAL_GPIO_Init+0x1d6>
 8001ef8:	2307      	movs	r3, #7
 8001efa:	e002      	b.n	8001f02 <HAL_GPIO_Init+0x1d6>
 8001efc:	2301      	movs	r3, #1
 8001efe:	e000      	b.n	8001f02 <HAL_GPIO_Init+0x1d6>
 8001f00:	2300      	movs	r3, #0
 8001f02:	697a      	ldr	r2, [r7, #20]
 8001f04:	f002 0203 	and.w	r2, r2, #3
 8001f08:	0092      	lsls	r2, r2, #2
 8001f0a:	4093      	lsls	r3, r2
 8001f0c:	693a      	ldr	r2, [r7, #16]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f12:	4937      	ldr	r1, [pc, #220]	; (8001ff0 <HAL_GPIO_Init+0x2c4>)
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	089b      	lsrs	r3, r3, #2
 8001f18:	3302      	adds	r3, #2
 8001f1a:	693a      	ldr	r2, [r7, #16]
 8001f1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f20:	4b36      	ldr	r3, [pc, #216]	; (8001ffc <HAL_GPIO_Init+0x2d0>)
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d003      	beq.n	8001f44 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001f3c:	693a      	ldr	r2, [r7, #16]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f44:	4a2d      	ldr	r2, [pc, #180]	; (8001ffc <HAL_GPIO_Init+0x2d0>)
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001f4a:	4b2c      	ldr	r3, [pc, #176]	; (8001ffc <HAL_GPIO_Init+0x2d0>)
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	43db      	mvns	r3, r3
 8001f54:	693a      	ldr	r2, [r7, #16]
 8001f56:	4013      	ands	r3, r2
 8001f58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d003      	beq.n	8001f6e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001f66:	693a      	ldr	r2, [r7, #16]
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f6e:	4a23      	ldr	r2, [pc, #140]	; (8001ffc <HAL_GPIO_Init+0x2d0>)
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001f74:	4b21      	ldr	r3, [pc, #132]	; (8001ffc <HAL_GPIO_Init+0x2d0>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	43db      	mvns	r3, r3
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	4013      	ands	r3, r2
 8001f82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d003      	beq.n	8001f98 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001f90:	693a      	ldr	r2, [r7, #16]
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f98:	4a18      	ldr	r2, [pc, #96]	; (8001ffc <HAL_GPIO_Init+0x2d0>)
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001f9e:	4b17      	ldr	r3, [pc, #92]	; (8001ffc <HAL_GPIO_Init+0x2d0>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	43db      	mvns	r3, r3
 8001fa8:	693a      	ldr	r2, [r7, #16]
 8001faa:	4013      	ands	r3, r2
 8001fac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d003      	beq.n	8001fc2 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001fba:	693a      	ldr	r2, [r7, #16]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001fc2:	4a0e      	ldr	r2, [pc, #56]	; (8001ffc <HAL_GPIO_Init+0x2d0>)
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	3301      	adds	r3, #1
 8001fcc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	fa22 f303 	lsr.w	r3, r2, r3
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	f47f aeaf 	bne.w	8001d3c <HAL_GPIO_Init+0x10>
  }
}
 8001fde:	bf00      	nop
 8001fe0:	bf00      	nop
 8001fe2:	371c      	adds	r7, #28
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr
 8001fec:	40021000 	.word	0x40021000
 8001ff0:	40010000 	.word	0x40010000
 8001ff4:	48000400 	.word	0x48000400
 8001ff8:	48000800 	.word	0x48000800
 8001ffc:	40010400 	.word	0x40010400

08002000 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	460b      	mov	r3, r1
 800200a:	807b      	strh	r3, [r7, #2]
 800200c:	4613      	mov	r3, r2
 800200e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002010:	787b      	ldrb	r3, [r7, #1]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d003      	beq.n	800201e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002016:	887a      	ldrh	r2, [r7, #2]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800201c:	e002      	b.n	8002024 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800201e:	887a      	ldrh	r2, [r7, #2]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002024:	bf00      	nop
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d101      	bne.n	8002042 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e081      	b.n	8002146 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002048:	b2db      	uxtb	r3, r3
 800204a:	2b00      	cmp	r3, #0
 800204c:	d106      	bne.n	800205c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f7ff fa0e 	bl	8001478 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2224      	movs	r2, #36	; 0x24
 8002060:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f022 0201 	bic.w	r2, r2, #1
 8002072:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	685a      	ldr	r2, [r3, #4]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002080:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	689a      	ldr	r2, [r3, #8]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002090:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	2b01      	cmp	r3, #1
 8002098:	d107      	bne.n	80020aa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	689a      	ldr	r2, [r3, #8]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020a6:	609a      	str	r2, [r3, #8]
 80020a8:	e006      	b.n	80020b8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	689a      	ldr	r2, [r3, #8]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80020b6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d104      	bne.n	80020ca <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020c8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	6812      	ldr	r2, [r2, #0]
 80020d4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80020d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020dc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	68da      	ldr	r2, [r3, #12]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020ec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	691a      	ldr	r2, [r3, #16]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	695b      	ldr	r3, [r3, #20]
 80020f6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	699b      	ldr	r3, [r3, #24]
 80020fe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	430a      	orrs	r2, r1
 8002106:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	69d9      	ldr	r1, [r3, #28]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6a1a      	ldr	r2, [r3, #32]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	430a      	orrs	r2, r1
 8002116:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f042 0201 	orr.w	r2, r2, #1
 8002126:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2220      	movs	r2, #32
 8002132:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
	...

08002150 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b088      	sub	sp, #32
 8002154:	af02      	add	r7, sp, #8
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	607a      	str	r2, [r7, #4]
 800215a:	461a      	mov	r2, r3
 800215c:	460b      	mov	r3, r1
 800215e:	817b      	strh	r3, [r7, #10]
 8002160:	4613      	mov	r3, r2
 8002162:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800216a:	b2db      	uxtb	r3, r3
 800216c:	2b20      	cmp	r3, #32
 800216e:	f040 80da 	bne.w	8002326 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002178:	2b01      	cmp	r3, #1
 800217a:	d101      	bne.n	8002180 <HAL_I2C_Master_Transmit+0x30>
 800217c:	2302      	movs	r3, #2
 800217e:	e0d3      	b.n	8002328 <HAL_I2C_Master_Transmit+0x1d8>
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2201      	movs	r2, #1
 8002184:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002188:	f7ff fc02 	bl	8001990 <HAL_GetTick>
 800218c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	9300      	str	r3, [sp, #0]
 8002192:	2319      	movs	r3, #25
 8002194:	2201      	movs	r2, #1
 8002196:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800219a:	68f8      	ldr	r0, [r7, #12]
 800219c:	f000 fefb 	bl	8002f96 <I2C_WaitOnFlagUntilTimeout>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e0be      	b.n	8002328 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2221      	movs	r2, #33	; 0x21
 80021ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2210      	movs	r2, #16
 80021b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2200      	movs	r2, #0
 80021be:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	893a      	ldrh	r2, [r7, #8]
 80021ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2200      	movs	r2, #0
 80021d0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	2bff      	cmp	r3, #255	; 0xff
 80021da:	d90e      	bls.n	80021fa <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	22ff      	movs	r2, #255	; 0xff
 80021e0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021e6:	b2da      	uxtb	r2, r3
 80021e8:	8979      	ldrh	r1, [r7, #10]
 80021ea:	4b51      	ldr	r3, [pc, #324]	; (8002330 <HAL_I2C_Master_Transmit+0x1e0>)
 80021ec:	9300      	str	r3, [sp, #0]
 80021ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021f2:	68f8      	ldr	r0, [r7, #12]
 80021f4:	f001 f8f2 	bl	80033dc <I2C_TransferConfig>
 80021f8:	e06c      	b.n	80022d4 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021fe:	b29a      	uxth	r2, r3
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002208:	b2da      	uxtb	r2, r3
 800220a:	8979      	ldrh	r1, [r7, #10]
 800220c:	4b48      	ldr	r3, [pc, #288]	; (8002330 <HAL_I2C_Master_Transmit+0x1e0>)
 800220e:	9300      	str	r3, [sp, #0]
 8002210:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002214:	68f8      	ldr	r0, [r7, #12]
 8002216:	f001 f8e1 	bl	80033dc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800221a:	e05b      	b.n	80022d4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800221c:	697a      	ldr	r2, [r7, #20]
 800221e:	6a39      	ldr	r1, [r7, #32]
 8002220:	68f8      	ldr	r0, [r7, #12]
 8002222:	f000 fef8 	bl	8003016 <I2C_WaitOnTXISFlagUntilTimeout>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d001      	beq.n	8002230 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e07b      	b.n	8002328 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002234:	781a      	ldrb	r2, [r3, #0]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002240:	1c5a      	adds	r2, r3, #1
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800224a:	b29b      	uxth	r3, r3
 800224c:	3b01      	subs	r3, #1
 800224e:	b29a      	uxth	r2, r3
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002258:	3b01      	subs	r3, #1
 800225a:	b29a      	uxth	r2, r3
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002264:	b29b      	uxth	r3, r3
 8002266:	2b00      	cmp	r3, #0
 8002268:	d034      	beq.n	80022d4 <HAL_I2C_Master_Transmit+0x184>
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800226e:	2b00      	cmp	r3, #0
 8002270:	d130      	bne.n	80022d4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	9300      	str	r3, [sp, #0]
 8002276:	6a3b      	ldr	r3, [r7, #32]
 8002278:	2200      	movs	r2, #0
 800227a:	2180      	movs	r1, #128	; 0x80
 800227c:	68f8      	ldr	r0, [r7, #12]
 800227e:	f000 fe8a 	bl	8002f96 <I2C_WaitOnFlagUntilTimeout>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e04d      	b.n	8002328 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002290:	b29b      	uxth	r3, r3
 8002292:	2bff      	cmp	r3, #255	; 0xff
 8002294:	d90e      	bls.n	80022b4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	22ff      	movs	r2, #255	; 0xff
 800229a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022a0:	b2da      	uxtb	r2, r3
 80022a2:	8979      	ldrh	r1, [r7, #10]
 80022a4:	2300      	movs	r3, #0
 80022a6:	9300      	str	r3, [sp, #0]
 80022a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022ac:	68f8      	ldr	r0, [r7, #12]
 80022ae:	f001 f895 	bl	80033dc <I2C_TransferConfig>
 80022b2:	e00f      	b.n	80022d4 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022b8:	b29a      	uxth	r2, r3
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022c2:	b2da      	uxtb	r2, r3
 80022c4:	8979      	ldrh	r1, [r7, #10]
 80022c6:	2300      	movs	r3, #0
 80022c8:	9300      	str	r3, [sp, #0]
 80022ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022ce:	68f8      	ldr	r0, [r7, #12]
 80022d0:	f001 f884 	bl	80033dc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022d8:	b29b      	uxth	r3, r3
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d19e      	bne.n	800221c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022de:	697a      	ldr	r2, [r7, #20]
 80022e0:	6a39      	ldr	r1, [r7, #32]
 80022e2:	68f8      	ldr	r0, [r7, #12]
 80022e4:	f000 fed7 	bl	8003096 <I2C_WaitOnSTOPFlagUntilTimeout>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e01a      	b.n	8002328 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2220      	movs	r2, #32
 80022f8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	6859      	ldr	r1, [r3, #4]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	4b0b      	ldr	r3, [pc, #44]	; (8002334 <HAL_I2C_Master_Transmit+0x1e4>)
 8002306:	400b      	ands	r3, r1
 8002308:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2220      	movs	r2, #32
 800230e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2200      	movs	r2, #0
 8002316:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2200      	movs	r2, #0
 800231e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002322:	2300      	movs	r3, #0
 8002324:	e000      	b.n	8002328 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002326:	2302      	movs	r3, #2
  }
}
 8002328:	4618      	mov	r0, r3
 800232a:	3718      	adds	r7, #24
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	80002000 	.word	0x80002000
 8002334:	fe00e800 	.word	0xfe00e800

08002338 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b088      	sub	sp, #32
 800233c:	af02      	add	r7, sp, #8
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	607a      	str	r2, [r7, #4]
 8002342:	461a      	mov	r2, r3
 8002344:	460b      	mov	r3, r1
 8002346:	817b      	strh	r3, [r7, #10]
 8002348:	4613      	mov	r3, r2
 800234a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002352:	b2db      	uxtb	r3, r3
 8002354:	2b20      	cmp	r3, #32
 8002356:	f040 80db 	bne.w	8002510 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002360:	2b01      	cmp	r3, #1
 8002362:	d101      	bne.n	8002368 <HAL_I2C_Master_Receive+0x30>
 8002364:	2302      	movs	r3, #2
 8002366:	e0d4      	b.n	8002512 <HAL_I2C_Master_Receive+0x1da>
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002370:	f7ff fb0e 	bl	8001990 <HAL_GetTick>
 8002374:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	9300      	str	r3, [sp, #0]
 800237a:	2319      	movs	r3, #25
 800237c:	2201      	movs	r2, #1
 800237e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002382:	68f8      	ldr	r0, [r7, #12]
 8002384:	f000 fe07 	bl	8002f96 <I2C_WaitOnFlagUntilTimeout>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e0bf      	b.n	8002512 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2222      	movs	r2, #34	; 0x22
 8002396:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2210      	movs	r2, #16
 800239e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2200      	movs	r2, #0
 80023a6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	893a      	ldrh	r2, [r7, #8]
 80023b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2200      	movs	r2, #0
 80023b8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023be:	b29b      	uxth	r3, r3
 80023c0:	2bff      	cmp	r3, #255	; 0xff
 80023c2:	d90e      	bls.n	80023e2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	22ff      	movs	r2, #255	; 0xff
 80023c8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ce:	b2da      	uxtb	r2, r3
 80023d0:	8979      	ldrh	r1, [r7, #10]
 80023d2:	4b52      	ldr	r3, [pc, #328]	; (800251c <HAL_I2C_Master_Receive+0x1e4>)
 80023d4:	9300      	str	r3, [sp, #0]
 80023d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023da:	68f8      	ldr	r0, [r7, #12]
 80023dc:	f000 fffe 	bl	80033dc <I2C_TransferConfig>
 80023e0:	e06d      	b.n	80024be <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023e6:	b29a      	uxth	r2, r3
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023f0:	b2da      	uxtb	r2, r3
 80023f2:	8979      	ldrh	r1, [r7, #10]
 80023f4:	4b49      	ldr	r3, [pc, #292]	; (800251c <HAL_I2C_Master_Receive+0x1e4>)
 80023f6:	9300      	str	r3, [sp, #0]
 80023f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023fc:	68f8      	ldr	r0, [r7, #12]
 80023fe:	f000 ffed 	bl	80033dc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002402:	e05c      	b.n	80024be <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002404:	697a      	ldr	r2, [r7, #20]
 8002406:	6a39      	ldr	r1, [r7, #32]
 8002408:	68f8      	ldr	r0, [r7, #12]
 800240a:	f000 fe81 	bl	8003110 <I2C_WaitOnRXNEFlagUntilTimeout>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e07c      	b.n	8002512 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002422:	b2d2      	uxtb	r2, r2
 8002424:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242a:	1c5a      	adds	r2, r3, #1
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002434:	3b01      	subs	r3, #1
 8002436:	b29a      	uxth	r2, r3
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002440:	b29b      	uxth	r3, r3
 8002442:	3b01      	subs	r3, #1
 8002444:	b29a      	uxth	r2, r3
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800244e:	b29b      	uxth	r3, r3
 8002450:	2b00      	cmp	r3, #0
 8002452:	d034      	beq.n	80024be <HAL_I2C_Master_Receive+0x186>
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002458:	2b00      	cmp	r3, #0
 800245a:	d130      	bne.n	80024be <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	9300      	str	r3, [sp, #0]
 8002460:	6a3b      	ldr	r3, [r7, #32]
 8002462:	2200      	movs	r2, #0
 8002464:	2180      	movs	r1, #128	; 0x80
 8002466:	68f8      	ldr	r0, [r7, #12]
 8002468:	f000 fd95 	bl	8002f96 <I2C_WaitOnFlagUntilTimeout>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e04d      	b.n	8002512 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800247a:	b29b      	uxth	r3, r3
 800247c:	2bff      	cmp	r3, #255	; 0xff
 800247e:	d90e      	bls.n	800249e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	22ff      	movs	r2, #255	; 0xff
 8002484:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800248a:	b2da      	uxtb	r2, r3
 800248c:	8979      	ldrh	r1, [r7, #10]
 800248e:	2300      	movs	r3, #0
 8002490:	9300      	str	r3, [sp, #0]
 8002492:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002496:	68f8      	ldr	r0, [r7, #12]
 8002498:	f000 ffa0 	bl	80033dc <I2C_TransferConfig>
 800249c:	e00f      	b.n	80024be <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024a2:	b29a      	uxth	r2, r3
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ac:	b2da      	uxtb	r2, r3
 80024ae:	8979      	ldrh	r1, [r7, #10]
 80024b0:	2300      	movs	r3, #0
 80024b2:	9300      	str	r3, [sp, #0]
 80024b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024b8:	68f8      	ldr	r0, [r7, #12]
 80024ba:	f000 ff8f 	bl	80033dc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d19d      	bne.n	8002404 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024c8:	697a      	ldr	r2, [r7, #20]
 80024ca:	6a39      	ldr	r1, [r7, #32]
 80024cc:	68f8      	ldr	r0, [r7, #12]
 80024ce:	f000 fde2 	bl	8003096 <I2C_WaitOnSTOPFlagUntilTimeout>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e01a      	b.n	8002512 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2220      	movs	r2, #32
 80024e2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	6859      	ldr	r1, [r3, #4]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	4b0c      	ldr	r3, [pc, #48]	; (8002520 <HAL_I2C_Master_Receive+0x1e8>)
 80024f0:	400b      	ands	r3, r1
 80024f2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2220      	movs	r2, #32
 80024f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2200      	movs	r2, #0
 8002508:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800250c:	2300      	movs	r3, #0
 800250e:	e000      	b.n	8002512 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002510:	2302      	movs	r3, #2
  }
}
 8002512:	4618      	mov	r0, r3
 8002514:	3718      	adds	r7, #24
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	80002400 	.word	0x80002400
 8002520:	fe00e800 	.word	0xfe00e800

08002524 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	699b      	ldr	r3, [r3, #24]
 8002532:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002540:	2b00      	cmp	r3, #0
 8002542:	d005      	beq.n	8002550 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002548:	68ba      	ldr	r2, [r7, #8]
 800254a:	68f9      	ldr	r1, [r7, #12]
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	4798      	blx	r3
  }
}
 8002550:	bf00      	nop
 8002552:	3710      	adds	r7, #16
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}

08002558 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b086      	sub	sp, #24
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	699b      	ldr	r3, [r3, #24]
 8002566:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	0a1b      	lsrs	r3, r3, #8
 8002574:	f003 0301 	and.w	r3, r3, #1
 8002578:	2b00      	cmp	r3, #0
 800257a:	d010      	beq.n	800259e <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	09db      	lsrs	r3, r3, #7
 8002580:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002584:	2b00      	cmp	r3, #0
 8002586:	d00a      	beq.n	800259e <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258c:	f043 0201 	orr.w	r2, r3, #1
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f44f 7280 	mov.w	r2, #256	; 0x100
 800259c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	0a9b      	lsrs	r3, r3, #10
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d010      	beq.n	80025cc <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	09db      	lsrs	r3, r3, #7
 80025ae:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d00a      	beq.n	80025cc <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ba:	f043 0208 	orr.w	r2, r3, #8
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025ca:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	0a5b      	lsrs	r3, r3, #9
 80025d0:	f003 0301 	and.w	r3, r3, #1
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d010      	beq.n	80025fa <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	09db      	lsrs	r3, r3, #7
 80025dc:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d00a      	beq.n	80025fa <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e8:	f043 0202 	orr.w	r2, r3, #2
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025f8:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025fe:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f003 030b 	and.w	r3, r3, #11
 8002606:	2b00      	cmp	r3, #0
 8002608:	d003      	beq.n	8002612 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800260a:	68f9      	ldr	r1, [r7, #12]
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f000 fb89 	bl	8002d24 <I2C_ITError>
  }
}
 8002612:	bf00      	nop
 8002614:	3718      	adds	r7, #24
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}

0800261a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800261a:	b480      	push	{r7}
 800261c:	b083      	sub	sp, #12
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002622:	bf00      	nop
 8002624:	370c      	adds	r7, #12
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr

0800262e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800262e:	b480      	push	{r7}
 8002630:	b083      	sub	sp, #12
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002636:	bf00      	nop
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr

08002642 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002642:	b480      	push	{r7}
 8002644:	b083      	sub	sp, #12
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]
 800264a:	460b      	mov	r3, r1
 800264c:	70fb      	strb	r3, [r7, #3]
 800264e:	4613      	mov	r3, r2
 8002650:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002652:	bf00      	nop
 8002654:	370c      	adds	r7, #12
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr

0800265e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800265e:	b480      	push	{r7}
 8002660:	b083      	sub	sp, #12
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002666:	bf00      	nop
 8002668:	370c      	adds	r7, #12
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr

08002672 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002672:	b480      	push	{r7}
 8002674:	b083      	sub	sp, #12
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800267a:	bf00      	nop
 800267c:	370c      	adds	r7, #12
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr

08002686 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002686:	b480      	push	{r7}
 8002688:	b083      	sub	sp, #12
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800268e:	bf00      	nop
 8002690:	370c      	adds	r7, #12
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr

0800269a <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800269a:	b580      	push	{r7, lr}
 800269c:	b086      	sub	sp, #24
 800269e:	af00      	add	r7, sp, #0
 80026a0:	60f8      	str	r0, [r7, #12]
 80026a2:	60b9      	str	r1, [r7, #8]
 80026a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026aa:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d101      	bne.n	80026be <I2C_Slave_ISR_IT+0x24>
 80026ba:	2302      	movs	r3, #2
 80026bc:	e0ec      	b.n	8002898 <I2C_Slave_ISR_IT+0x1fe>
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2201      	movs	r2, #1
 80026c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	095b      	lsrs	r3, r3, #5
 80026ca:	f003 0301 	and.w	r3, r3, #1
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d009      	beq.n	80026e6 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	095b      	lsrs	r3, r3, #5
 80026d6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d003      	beq.n	80026e6 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80026de:	6939      	ldr	r1, [r7, #16]
 80026e0:	68f8      	ldr	r0, [r7, #12]
 80026e2:	f000 f9bf 	bl	8002a64 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	091b      	lsrs	r3, r3, #4
 80026ea:	f003 0301 	and.w	r3, r3, #1
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d04d      	beq.n	800278e <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	091b      	lsrs	r3, r3, #4
 80026f6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d047      	beq.n	800278e <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002702:	b29b      	uxth	r3, r3
 8002704:	2b00      	cmp	r3, #0
 8002706:	d128      	bne.n	800275a <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800270e:	b2db      	uxtb	r3, r3
 8002710:	2b28      	cmp	r3, #40	; 0x28
 8002712:	d108      	bne.n	8002726 <I2C_Slave_ISR_IT+0x8c>
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800271a:	d104      	bne.n	8002726 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800271c:	6939      	ldr	r1, [r7, #16]
 800271e:	68f8      	ldr	r0, [r7, #12]
 8002720:	f000 faaa 	bl	8002c78 <I2C_ITListenCplt>
 8002724:	e032      	b.n	800278c <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800272c:	b2db      	uxtb	r3, r3
 800272e:	2b29      	cmp	r3, #41	; 0x29
 8002730:	d10e      	bne.n	8002750 <I2C_Slave_ISR_IT+0xb6>
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002738:	d00a      	beq.n	8002750 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	2210      	movs	r2, #16
 8002740:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002742:	68f8      	ldr	r0, [r7, #12]
 8002744:	f000 fbe5 	bl	8002f12 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002748:	68f8      	ldr	r0, [r7, #12]
 800274a:	f000 f92d 	bl	80029a8 <I2C_ITSlaveSeqCplt>
 800274e:	e01d      	b.n	800278c <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2210      	movs	r2, #16
 8002756:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002758:	e096      	b.n	8002888 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	2210      	movs	r2, #16
 8002760:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002766:	f043 0204 	orr.w	r2, r3, #4
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d004      	beq.n	800277e <I2C_Slave_ISR_IT+0xe4>
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800277a:	f040 8085 	bne.w	8002888 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002782:	4619      	mov	r1, r3
 8002784:	68f8      	ldr	r0, [r7, #12]
 8002786:	f000 facd 	bl	8002d24 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800278a:	e07d      	b.n	8002888 <I2C_Slave_ISR_IT+0x1ee>
 800278c:	e07c      	b.n	8002888 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	089b      	lsrs	r3, r3, #2
 8002792:	f003 0301 	and.w	r3, r3, #1
 8002796:	2b00      	cmp	r3, #0
 8002798:	d030      	beq.n	80027fc <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	089b      	lsrs	r3, r3, #2
 800279e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d02a      	beq.n	80027fc <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d018      	beq.n	80027e2 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ba:	b2d2      	uxtb	r2, r2
 80027bc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c2:	1c5a      	adds	r2, r3, #1
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027cc:	3b01      	subs	r3, #1
 80027ce:	b29a      	uxth	r2, r3
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027d8:	b29b      	uxth	r3, r3
 80027da:	3b01      	subs	r3, #1
 80027dc:	b29a      	uxth	r2, r3
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d14f      	bne.n	800288c <I2C_Slave_ISR_IT+0x1f2>
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80027f2:	d04b      	beq.n	800288c <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80027f4:	68f8      	ldr	r0, [r7, #12]
 80027f6:	f000 f8d7 	bl	80029a8 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80027fa:	e047      	b.n	800288c <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	08db      	lsrs	r3, r3, #3
 8002800:	f003 0301 	and.w	r3, r3, #1
 8002804:	2b00      	cmp	r3, #0
 8002806:	d00a      	beq.n	800281e <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	08db      	lsrs	r3, r3, #3
 800280c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002810:	2b00      	cmp	r3, #0
 8002812:	d004      	beq.n	800281e <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002814:	6939      	ldr	r1, [r7, #16]
 8002816:	68f8      	ldr	r0, [r7, #12]
 8002818:	f000 f842 	bl	80028a0 <I2C_ITAddrCplt>
 800281c:	e037      	b.n	800288e <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	085b      	lsrs	r3, r3, #1
 8002822:	f003 0301 	and.w	r3, r3, #1
 8002826:	2b00      	cmp	r3, #0
 8002828:	d031      	beq.n	800288e <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	085b      	lsrs	r3, r3, #1
 800282e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002832:	2b00      	cmp	r3, #0
 8002834:	d02b      	beq.n	800288e <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800283a:	b29b      	uxth	r3, r3
 800283c:	2b00      	cmp	r3, #0
 800283e:	d018      	beq.n	8002872 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002844:	781a      	ldrb	r2, [r3, #0]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002850:	1c5a      	adds	r2, r3, #1
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800285a:	b29b      	uxth	r3, r3
 800285c:	3b01      	subs	r3, #1
 800285e:	b29a      	uxth	r2, r3
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002868:	3b01      	subs	r3, #1
 800286a:	b29a      	uxth	r2, r3
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	851a      	strh	r2, [r3, #40]	; 0x28
 8002870:	e00d      	b.n	800288e <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002878:	d002      	beq.n	8002880 <I2C_Slave_ISR_IT+0x1e6>
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d106      	bne.n	800288e <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002880:	68f8      	ldr	r0, [r7, #12]
 8002882:	f000 f891 	bl	80029a8 <I2C_ITSlaveSeqCplt>
 8002886:	e002      	b.n	800288e <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8002888:	bf00      	nop
 800288a:	e000      	b.n	800288e <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 800288c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2200      	movs	r2, #0
 8002892:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002896:	2300      	movs	r3, #0
}
 8002898:	4618      	mov	r0, r3
 800289a:	3718      	adds	r7, #24
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}

080028a0 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80028b6:	2b28      	cmp	r3, #40	; 0x28
 80028b8:	d16a      	bne.n	8002990 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	699b      	ldr	r3, [r3, #24]
 80028c0:	0c1b      	lsrs	r3, r3, #16
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	f003 0301 	and.w	r3, r3, #1
 80028c8:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	699b      	ldr	r3, [r3, #24]
 80028d0:	0c1b      	lsrs	r3, r3, #16
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80028d8:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028e6:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80028f4:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d138      	bne.n	8002970 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80028fe:	897b      	ldrh	r3, [r7, #10]
 8002900:	09db      	lsrs	r3, r3, #7
 8002902:	b29a      	uxth	r2, r3
 8002904:	89bb      	ldrh	r3, [r7, #12]
 8002906:	4053      	eors	r3, r2
 8002908:	b29b      	uxth	r3, r3
 800290a:	f003 0306 	and.w	r3, r3, #6
 800290e:	2b00      	cmp	r3, #0
 8002910:	d11c      	bne.n	800294c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002912:	897b      	ldrh	r3, [r7, #10]
 8002914:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800291a:	1c5a      	adds	r2, r3, #1
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002924:	2b02      	cmp	r3, #2
 8002926:	d13b      	bne.n	80029a0 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2208      	movs	r2, #8
 8002934:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800293e:	89ba      	ldrh	r2, [r7, #12]
 8002940:	7bfb      	ldrb	r3, [r7, #15]
 8002942:	4619      	mov	r1, r3
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f7ff fe7c 	bl	8002642 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800294a:	e029      	b.n	80029a0 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800294c:	893b      	ldrh	r3, [r7, #8]
 800294e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002950:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f000 fd73 	bl	8003440 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002962:	89ba      	ldrh	r2, [r7, #12]
 8002964:	7bfb      	ldrb	r3, [r7, #15]
 8002966:	4619      	mov	r1, r3
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f7ff fe6a 	bl	8002642 <HAL_I2C_AddrCallback>
}
 800296e:	e017      	b.n	80029a0 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002970:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f000 fd63 	bl	8003440 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002982:	89ba      	ldrh	r2, [r7, #12]
 8002984:	7bfb      	ldrb	r3, [r7, #15]
 8002986:	4619      	mov	r1, r3
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f7ff fe5a 	bl	8002642 <HAL_I2C_AddrCallback>
}
 800298e:	e007      	b.n	80029a0 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2208      	movs	r2, #8
 8002996:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80029a0:	bf00      	nop
 80029a2:	3710      	adds	r7, #16
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	0b9b      	lsrs	r3, r3, #14
 80029c4:	f003 0301 	and.w	r3, r3, #1
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d008      	beq.n	80029de <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80029da:	601a      	str	r2, [r3, #0]
 80029dc:	e00d      	b.n	80029fa <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	0bdb      	lsrs	r3, r3, #15
 80029e2:	f003 0301 	and.w	r3, r3, #1
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d007      	beq.n	80029fa <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029f8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	2b29      	cmp	r3, #41	; 0x29
 8002a04:	d112      	bne.n	8002a2c <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2228      	movs	r2, #40	; 0x28
 8002a0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2221      	movs	r2, #33	; 0x21
 8002a12:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002a14:	2101      	movs	r1, #1
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f000 fd12 	bl	8003440 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f7ff fdf8 	bl	800261a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002a2a:	e017      	b.n	8002a5c <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	2b2a      	cmp	r3, #42	; 0x2a
 8002a36:	d111      	bne.n	8002a5c <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2228      	movs	r2, #40	; 0x28
 8002a3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2222      	movs	r2, #34	; 0x22
 8002a44:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002a46:	2102      	movs	r1, #2
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f000 fcf9 	bl	8003440 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f7ff fde9 	bl	800262e <HAL_I2C_SlaveRxCpltCallback>
}
 8002a5c:	bf00      	nop
 8002a5e:	3710      	adds	r7, #16
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b086      	sub	sp, #24
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a80:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2220      	movs	r2, #32
 8002a88:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002a8a:	7bfb      	ldrb	r3, [r7, #15]
 8002a8c:	2b21      	cmp	r3, #33	; 0x21
 8002a8e:	d002      	beq.n	8002a96 <I2C_ITSlaveCplt+0x32>
 8002a90:	7bfb      	ldrb	r3, [r7, #15]
 8002a92:	2b29      	cmp	r3, #41	; 0x29
 8002a94:	d108      	bne.n	8002aa8 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002a96:	f248 0101 	movw	r1, #32769	; 0x8001
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f000 fcd0 	bl	8003440 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2221      	movs	r2, #33	; 0x21
 8002aa4:	631a      	str	r2, [r3, #48]	; 0x30
 8002aa6:	e00d      	b.n	8002ac4 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002aa8:	7bfb      	ldrb	r3, [r7, #15]
 8002aaa:	2b22      	cmp	r3, #34	; 0x22
 8002aac:	d002      	beq.n	8002ab4 <I2C_ITSlaveCplt+0x50>
 8002aae:	7bfb      	ldrb	r3, [r7, #15]
 8002ab0:	2b2a      	cmp	r3, #42	; 0x2a
 8002ab2:	d107      	bne.n	8002ac4 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002ab4:	f248 0102 	movw	r1, #32770	; 0x8002
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f000 fcc1 	bl	8003440 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2222      	movs	r2, #34	; 0x22
 8002ac2:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	685a      	ldr	r2, [r3, #4]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ad2:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	6859      	ldr	r1, [r3, #4]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	4b64      	ldr	r3, [pc, #400]	; (8002c70 <I2C_ITSlaveCplt+0x20c>)
 8002ae0:	400b      	ands	r3, r1
 8002ae2:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f000 fa14 	bl	8002f12 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	0b9b      	lsrs	r3, r3, #14
 8002aee:	f003 0301 	and.w	r3, r3, #1
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d013      	beq.n	8002b1e <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002b04:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d020      	beq.n	8002b50 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	b29a      	uxth	r2, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b1c:	e018      	b.n	8002b50 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	0bdb      	lsrs	r3, r3, #15
 8002b22:	f003 0301 	and.w	r3, r3, #1
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d012      	beq.n	8002b50 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b38:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d006      	beq.n	8002b50 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	b29a      	uxth	r2, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	089b      	lsrs	r3, r3, #2
 8002b54:	f003 0301 	and.w	r3, r3, #1
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d020      	beq.n	8002b9e <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	f023 0304 	bic.w	r3, r3, #4
 8002b62:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6e:	b2d2      	uxtb	r2, r2
 8002b70:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b76:	1c5a      	adds	r2, r3, #1
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d00c      	beq.n	8002b9e <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b88:	3b01      	subs	r3, #1
 8002b8a:	b29a      	uxth	r2, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	3b01      	subs	r3, #1
 8002b98:	b29a      	uxth	r2, r3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d005      	beq.n	8002bb4 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bac:	f043 0204 	orr.w	r2, r3, #4
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d010      	beq.n	8002bec <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bce:	4619      	mov	r1, r3
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f000 f8a7 	bl	8002d24 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	2b28      	cmp	r3, #40	; 0x28
 8002be0:	d141      	bne.n	8002c66 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002be2:	6979      	ldr	r1, [r7, #20]
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f000 f847 	bl	8002c78 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002bea:	e03c      	b.n	8002c66 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002bf4:	d014      	beq.n	8002c20 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f7ff fed6 	bl	80029a8 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	4a1d      	ldr	r2, [pc, #116]	; (8002c74 <I2C_ITSlaveCplt+0x210>)
 8002c00:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2220      	movs	r2, #32
 8002c06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f7ff fd20 	bl	800265e <HAL_I2C_ListenCpltCallback>
}
 8002c1e:	e022      	b.n	8002c66 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	2b22      	cmp	r3, #34	; 0x22
 8002c2a:	d10e      	bne.n	8002c4a <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2220      	movs	r2, #32
 8002c30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f7ff fcf3 	bl	800262e <HAL_I2C_SlaveRxCpltCallback>
}
 8002c48:	e00d      	b.n	8002c66 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2220      	movs	r2, #32
 8002c4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f7ff fcda 	bl	800261a <HAL_I2C_SlaveTxCpltCallback>
}
 8002c66:	bf00      	nop
 8002c68:	3718      	adds	r7, #24
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	fe00e800 	.word	0xfe00e800
 8002c74:	ffff0000 	.word	0xffff0000

08002c78 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a26      	ldr	r2, [pc, #152]	; (8002d20 <I2C_ITListenCplt+0xa8>)
 8002c86:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2220      	movs	r2, #32
 8002c92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	089b      	lsrs	r3, r3, #2
 8002ca8:	f003 0301 	and.w	r3, r3, #1
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d022      	beq.n	8002cf6 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cba:	b2d2      	uxtb	r2, r2
 8002cbc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc2:	1c5a      	adds	r2, r3, #1
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d012      	beq.n	8002cf6 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cd4:	3b01      	subs	r3, #1
 8002cd6:	b29a      	uxth	r2, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	3b01      	subs	r3, #1
 8002ce4:	b29a      	uxth	r2, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cee:	f043 0204 	orr.w	r2, r3, #4
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002cf6:	f248 0103 	movw	r1, #32771	; 0x8003
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f000 fba0 	bl	8003440 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2210      	movs	r2, #16
 8002d06:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f7ff fca4 	bl	800265e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002d16:	bf00      	nop
 8002d18:	3708      	adds	r7, #8
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	ffff0000 	.word	0xffff0000

08002d24 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d34:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a5d      	ldr	r2, [pc, #372]	; (8002eb8 <I2C_ITError+0x194>)
 8002d42:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	431a      	orrs	r2, r3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002d56:	7bfb      	ldrb	r3, [r7, #15]
 8002d58:	2b28      	cmp	r3, #40	; 0x28
 8002d5a:	d005      	beq.n	8002d68 <I2C_ITError+0x44>
 8002d5c:	7bfb      	ldrb	r3, [r7, #15]
 8002d5e:	2b29      	cmp	r3, #41	; 0x29
 8002d60:	d002      	beq.n	8002d68 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002d62:	7bfb      	ldrb	r3, [r7, #15]
 8002d64:	2b2a      	cmp	r3, #42	; 0x2a
 8002d66:	d10b      	bne.n	8002d80 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002d68:	2103      	movs	r1, #3
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f000 fb68 	bl	8003440 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2228      	movs	r2, #40	; 0x28
 8002d74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	4a50      	ldr	r2, [pc, #320]	; (8002ebc <I2C_ITError+0x198>)
 8002d7c:	635a      	str	r2, [r3, #52]	; 0x34
 8002d7e:	e011      	b.n	8002da4 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002d80:	f248 0103 	movw	r1, #32771	; 0x8003
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f000 fb5b 	bl	8003440 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	2b60      	cmp	r3, #96	; 0x60
 8002d94:	d003      	beq.n	8002d9e <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2220      	movs	r2, #32
 8002d9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da8:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d039      	beq.n	8002e26 <I2C_ITError+0x102>
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	2b11      	cmp	r3, #17
 8002db6:	d002      	beq.n	8002dbe <I2C_ITError+0x9a>
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	2b21      	cmp	r3, #33	; 0x21
 8002dbc:	d133      	bne.n	8002e26 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dc8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002dcc:	d107      	bne.n	8002dde <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002ddc:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7fe ff94 	bl	8001d10 <HAL_DMA_GetState>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d017      	beq.n	8002e1e <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002df2:	4a33      	ldr	r2, [pc, #204]	; (8002ec0 <I2C_ITError+0x19c>)
 8002df4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e02:	4618      	mov	r0, r3
 8002e04:	f7fe ff43 	bl	8001c8e <HAL_DMA_Abort_IT>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d04d      	beq.n	8002eaa <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e18:	4610      	mov	r0, r2
 8002e1a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002e1c:	e045      	b.n	8002eaa <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f000 f850 	bl	8002ec4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002e24:	e041      	b.n	8002eaa <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d039      	beq.n	8002ea2 <I2C_ITError+0x17e>
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	2b12      	cmp	r3, #18
 8002e32:	d002      	beq.n	8002e3a <I2C_ITError+0x116>
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	2b22      	cmp	r3, #34	; 0x22
 8002e38:	d133      	bne.n	8002ea2 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e48:	d107      	bne.n	8002e5a <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e58:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7fe ff56 	bl	8001d10 <HAL_DMA_GetState>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d017      	beq.n	8002e9a <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e6e:	4a14      	ldr	r2, [pc, #80]	; (8002ec0 <I2C_ITError+0x19c>)
 8002e70:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7fe ff05 	bl	8001c8e <HAL_DMA_Abort_IT>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d011      	beq.n	8002eae <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002e94:	4610      	mov	r0, r2
 8002e96:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002e98:	e009      	b.n	8002eae <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f000 f812 	bl	8002ec4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002ea0:	e005      	b.n	8002eae <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f000 f80e 	bl	8002ec4 <I2C_TreatErrorCallback>
  }
}
 8002ea8:	e002      	b.n	8002eb0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002eaa:	bf00      	nop
 8002eac:	e000      	b.n	8002eb0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002eae:	bf00      	nop
}
 8002eb0:	bf00      	nop
 8002eb2:	3710      	adds	r7, #16
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	ffff0000 	.word	0xffff0000
 8002ebc:	0800269b 	.word	0x0800269b
 8002ec0:	08002f5b 	.word	0x08002f5b

08002ec4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	2b60      	cmp	r3, #96	; 0x60
 8002ed6:	d10e      	bne.n	8002ef6 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2220      	movs	r2, #32
 8002edc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f7ff fbc9 	bl	8002686 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002ef4:	e009      	b.n	8002f0a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f7ff fbb4 	bl	8002672 <HAL_I2C_ErrorCallback>
}
 8002f0a:	bf00      	nop
 8002f0c:	3708      	adds	r7, #8
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}

08002f12 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002f12:	b480      	push	{r7}
 8002f14:	b083      	sub	sp, #12
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	f003 0302 	and.w	r3, r3, #2
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d103      	bne.n	8002f30 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	699b      	ldr	r3, [r3, #24]
 8002f36:	f003 0301 	and.w	r3, r3, #1
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d007      	beq.n	8002f4e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	699a      	ldr	r2, [r3, #24]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f042 0201 	orr.w	r2, r2, #1
 8002f4c:	619a      	str	r2, [r3, #24]
  }
}
 8002f4e:	bf00      	nop
 8002f50:	370c      	adds	r7, #12
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr

08002f5a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002f5a:	b580      	push	{r7, lr}
 8002f5c:	b084      	sub	sp, #16
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f66:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d003      	beq.n	8002f78 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f74:	2200      	movs	r2, #0
 8002f76:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d003      	beq.n	8002f88 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f84:	2200      	movs	r2, #0
 8002f86:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8002f88:	68f8      	ldr	r0, [r7, #12]
 8002f8a:	f7ff ff9b 	bl	8002ec4 <I2C_TreatErrorCallback>
}
 8002f8e:	bf00      	nop
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b084      	sub	sp, #16
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	60f8      	str	r0, [r7, #12]
 8002f9e:	60b9      	str	r1, [r7, #8]
 8002fa0:	603b      	str	r3, [r7, #0]
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fa6:	e022      	b.n	8002fee <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fae:	d01e      	beq.n	8002fee <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fb0:	f7fe fcee 	bl	8001990 <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	683a      	ldr	r2, [r7, #0]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d302      	bcc.n	8002fc6 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d113      	bne.n	8002fee <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fca:	f043 0220 	orr.w	r2, r3, #32
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2220      	movs	r2, #32
 8002fd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e00f      	b.n	800300e <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	699a      	ldr	r2, [r3, #24]
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	68ba      	ldr	r2, [r7, #8]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	bf0c      	ite	eq
 8002ffe:	2301      	moveq	r3, #1
 8003000:	2300      	movne	r3, #0
 8003002:	b2db      	uxtb	r3, r3
 8003004:	461a      	mov	r2, r3
 8003006:	79fb      	ldrb	r3, [r7, #7]
 8003008:	429a      	cmp	r2, r3
 800300a:	d0cd      	beq.n	8002fa8 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	3710      	adds	r7, #16
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}

08003016 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003016:	b580      	push	{r7, lr}
 8003018:	b084      	sub	sp, #16
 800301a:	af00      	add	r7, sp, #0
 800301c:	60f8      	str	r0, [r7, #12]
 800301e:	60b9      	str	r1, [r7, #8]
 8003020:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003022:	e02c      	b.n	800307e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	68b9      	ldr	r1, [r7, #8]
 8003028:	68f8      	ldr	r0, [r7, #12]
 800302a:	f000 f8eb 	bl	8003204 <I2C_IsErrorOccurred>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d001      	beq.n	8003038 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e02a      	b.n	800308e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800303e:	d01e      	beq.n	800307e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003040:	f7fe fca6 	bl	8001990 <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	68ba      	ldr	r2, [r7, #8]
 800304c:	429a      	cmp	r2, r3
 800304e:	d302      	bcc.n	8003056 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d113      	bne.n	800307e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800305a:	f043 0220 	orr.w	r2, r3, #32
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2220      	movs	r2, #32
 8003066:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e007      	b.n	800308e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	699b      	ldr	r3, [r3, #24]
 8003084:	f003 0302 	and.w	r3, r3, #2
 8003088:	2b02      	cmp	r3, #2
 800308a:	d1cb      	bne.n	8003024 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800308c:	2300      	movs	r3, #0
}
 800308e:	4618      	mov	r0, r3
 8003090:	3710      	adds	r7, #16
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003096:	b580      	push	{r7, lr}
 8003098:	b084      	sub	sp, #16
 800309a:	af00      	add	r7, sp, #0
 800309c:	60f8      	str	r0, [r7, #12]
 800309e:	60b9      	str	r1, [r7, #8]
 80030a0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030a2:	e028      	b.n	80030f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	68b9      	ldr	r1, [r7, #8]
 80030a8:	68f8      	ldr	r0, [r7, #12]
 80030aa:	f000 f8ab 	bl	8003204 <I2C_IsErrorOccurred>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d001      	beq.n	80030b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e026      	b.n	8003106 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030b8:	f7fe fc6a 	bl	8001990 <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	68ba      	ldr	r2, [r7, #8]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d302      	bcc.n	80030ce <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d113      	bne.n	80030f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030d2:	f043 0220 	orr.w	r2, r3, #32
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2220      	movs	r2, #32
 80030de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e007      	b.n	8003106 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	699b      	ldr	r3, [r3, #24]
 80030fc:	f003 0320 	and.w	r3, r3, #32
 8003100:	2b20      	cmp	r3, #32
 8003102:	d1cf      	bne.n	80030a4 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	3710      	adds	r7, #16
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
	...

08003110 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	60b9      	str	r1, [r7, #8]
 800311a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800311c:	e064      	b.n	80031e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	68b9      	ldr	r1, [r7, #8]
 8003122:	68f8      	ldr	r0, [r7, #12]
 8003124:	f000 f86e 	bl	8003204 <I2C_IsErrorOccurred>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d001      	beq.n	8003132 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e062      	b.n	80031f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	699b      	ldr	r3, [r3, #24]
 8003138:	f003 0320 	and.w	r3, r3, #32
 800313c:	2b20      	cmp	r3, #32
 800313e:	d138      	bne.n	80031b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	699b      	ldr	r3, [r3, #24]
 8003146:	f003 0304 	and.w	r3, r3, #4
 800314a:	2b04      	cmp	r3, #4
 800314c:	d105      	bne.n	800315a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003152:	2b00      	cmp	r3, #0
 8003154:	d001      	beq.n	800315a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003156:	2300      	movs	r3, #0
 8003158:	e04e      	b.n	80031f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	699b      	ldr	r3, [r3, #24]
 8003160:	f003 0310 	and.w	r3, r3, #16
 8003164:	2b10      	cmp	r3, #16
 8003166:	d107      	bne.n	8003178 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	2210      	movs	r2, #16
 800316e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2204      	movs	r2, #4
 8003174:	645a      	str	r2, [r3, #68]	; 0x44
 8003176:	e002      	b.n	800317e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2200      	movs	r2, #0
 800317c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	2220      	movs	r2, #32
 8003184:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	6859      	ldr	r1, [r3, #4]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	4b1b      	ldr	r3, [pc, #108]	; (8003200 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8003192:	400b      	ands	r3, r1
 8003194:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2220      	movs	r2, #32
 800319a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e022      	b.n	80031f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031b2:	f7fe fbed 	bl	8001990 <HAL_GetTick>
 80031b6:	4602      	mov	r2, r0
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	68ba      	ldr	r2, [r7, #8]
 80031be:	429a      	cmp	r2, r3
 80031c0:	d302      	bcc.n	80031c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d10f      	bne.n	80031e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031cc:	f043 0220 	orr.w	r2, r3, #32
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2220      	movs	r2, #32
 80031d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2200      	movs	r2, #0
 80031e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e007      	b.n	80031f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	699b      	ldr	r3, [r3, #24]
 80031ee:	f003 0304 	and.w	r3, r3, #4
 80031f2:	2b04      	cmp	r3, #4
 80031f4:	d193      	bne.n	800311e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80031f6:	2300      	movs	r3, #0
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3710      	adds	r7, #16
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	fe00e800 	.word	0xfe00e800

08003204 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b08a      	sub	sp, #40	; 0x28
 8003208:	af00      	add	r7, sp, #0
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	60b9      	str	r1, [r7, #8]
 800320e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003210:	2300      	movs	r3, #0
 8003212:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	699b      	ldr	r3, [r3, #24]
 800321c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800321e:	2300      	movs	r3, #0
 8003220:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003226:	69bb      	ldr	r3, [r7, #24]
 8003228:	f003 0310 	and.w	r3, r3, #16
 800322c:	2b00      	cmp	r3, #0
 800322e:	d075      	beq.n	800331c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	2210      	movs	r2, #16
 8003236:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003238:	e056      	b.n	80032e8 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003240:	d052      	beq.n	80032e8 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003242:	f7fe fba5 	bl	8001990 <HAL_GetTick>
 8003246:	4602      	mov	r2, r0
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	68ba      	ldr	r2, [r7, #8]
 800324e:	429a      	cmp	r2, r3
 8003250:	d302      	bcc.n	8003258 <I2C_IsErrorOccurred+0x54>
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d147      	bne.n	80032e8 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003262:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800326a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	699b      	ldr	r3, [r3, #24]
 8003272:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003276:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800327a:	d12e      	bne.n	80032da <I2C_IsErrorOccurred+0xd6>
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003282:	d02a      	beq.n	80032da <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003284:	7cfb      	ldrb	r3, [r7, #19]
 8003286:	2b20      	cmp	r3, #32
 8003288:	d027      	beq.n	80032da <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	685a      	ldr	r2, [r3, #4]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003298:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800329a:	f7fe fb79 	bl	8001990 <HAL_GetTick>
 800329e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032a0:	e01b      	b.n	80032da <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80032a2:	f7fe fb75 	bl	8001990 <HAL_GetTick>
 80032a6:	4602      	mov	r2, r0
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	2b19      	cmp	r3, #25
 80032ae:	d914      	bls.n	80032da <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b4:	f043 0220 	orr.w	r2, r3, #32
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2220      	movs	r2, #32
 80032c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2200      	movs	r2, #0
 80032d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	699b      	ldr	r3, [r3, #24]
 80032e0:	f003 0320 	and.w	r3, r3, #32
 80032e4:	2b20      	cmp	r3, #32
 80032e6:	d1dc      	bne.n	80032a2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	699b      	ldr	r3, [r3, #24]
 80032ee:	f003 0320 	and.w	r3, r3, #32
 80032f2:	2b20      	cmp	r3, #32
 80032f4:	d003      	beq.n	80032fe <I2C_IsErrorOccurred+0xfa>
 80032f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d09d      	beq.n	800323a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80032fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003302:	2b00      	cmp	r3, #0
 8003304:	d103      	bne.n	800330e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	2220      	movs	r2, #32
 800330c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800330e:	6a3b      	ldr	r3, [r7, #32]
 8003310:	f043 0304 	orr.w	r3, r3, #4
 8003314:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	699b      	ldr	r3, [r3, #24]
 8003322:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800332a:	2b00      	cmp	r3, #0
 800332c:	d00b      	beq.n	8003346 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800332e:	6a3b      	ldr	r3, [r7, #32]
 8003330:	f043 0301 	orr.w	r3, r3, #1
 8003334:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800333e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003346:	69bb      	ldr	r3, [r7, #24]
 8003348:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800334c:	2b00      	cmp	r3, #0
 800334e:	d00b      	beq.n	8003368 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003350:	6a3b      	ldr	r3, [r7, #32]
 8003352:	f043 0308 	orr.w	r3, r3, #8
 8003356:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003360:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800336e:	2b00      	cmp	r3, #0
 8003370:	d00b      	beq.n	800338a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003372:	6a3b      	ldr	r3, [r7, #32]
 8003374:	f043 0302 	orr.w	r3, r3, #2
 8003378:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003382:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800338a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800338e:	2b00      	cmp	r3, #0
 8003390:	d01c      	beq.n	80033cc <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003392:	68f8      	ldr	r0, [r7, #12]
 8003394:	f7ff fdbd 	bl	8002f12 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	6859      	ldr	r1, [r3, #4]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	4b0d      	ldr	r3, [pc, #52]	; (80033d8 <I2C_IsErrorOccurred+0x1d4>)
 80033a4:	400b      	ands	r3, r1
 80033a6:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033ac:	6a3b      	ldr	r3, [r7, #32]
 80033ae:	431a      	orrs	r2, r3
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2220      	movs	r2, #32
 80033b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80033cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3728      	adds	r7, #40	; 0x28
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	fe00e800 	.word	0xfe00e800

080033dc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80033dc:	b480      	push	{r7}
 80033de:	b087      	sub	sp, #28
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	607b      	str	r3, [r7, #4]
 80033e6:	460b      	mov	r3, r1
 80033e8:	817b      	strh	r3, [r7, #10]
 80033ea:	4613      	mov	r3, r2
 80033ec:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80033ee:	897b      	ldrh	r3, [r7, #10]
 80033f0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80033f4:	7a7b      	ldrb	r3, [r7, #9]
 80033f6:	041b      	lsls	r3, r3, #16
 80033f8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80033fc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003402:	6a3b      	ldr	r3, [r7, #32]
 8003404:	4313      	orrs	r3, r2
 8003406:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800340a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	685a      	ldr	r2, [r3, #4]
 8003412:	6a3b      	ldr	r3, [r7, #32]
 8003414:	0d5b      	lsrs	r3, r3, #21
 8003416:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800341a:	4b08      	ldr	r3, [pc, #32]	; (800343c <I2C_TransferConfig+0x60>)
 800341c:	430b      	orrs	r3, r1
 800341e:	43db      	mvns	r3, r3
 8003420:	ea02 0103 	and.w	r1, r2, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	697a      	ldr	r2, [r7, #20]
 800342a:	430a      	orrs	r2, r1
 800342c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800342e:	bf00      	nop
 8003430:	371c      	adds	r7, #28
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop
 800343c:	03ff63ff 	.word	0x03ff63ff

08003440 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003440:	b480      	push	{r7}
 8003442:	b085      	sub	sp, #20
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	460b      	mov	r3, r1
 800344a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800344c:	2300      	movs	r3, #0
 800344e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003450:	887b      	ldrh	r3, [r7, #2]
 8003452:	f003 0301 	and.w	r3, r3, #1
 8003456:	2b00      	cmp	r3, #0
 8003458:	d00f      	beq.n	800347a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8003460:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003468:	b2db      	uxtb	r3, r3
 800346a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800346e:	2b28      	cmp	r3, #40	; 0x28
 8003470:	d003      	beq.n	800347a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003478:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800347a:	887b      	ldrh	r3, [r7, #2]
 800347c:	f003 0302 	and.w	r3, r3, #2
 8003480:	2b00      	cmp	r3, #0
 8003482:	d00f      	beq.n	80034a4 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800348a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003492:	b2db      	uxtb	r3, r3
 8003494:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003498:	2b28      	cmp	r3, #40	; 0x28
 800349a:	d003      	beq.n	80034a4 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80034a2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80034a4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	da03      	bge.n	80034b4 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80034b2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80034b4:	887b      	ldrh	r3, [r7, #2]
 80034b6:	2b10      	cmp	r3, #16
 80034b8:	d103      	bne.n	80034c2 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80034c0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80034c2:	887b      	ldrh	r3, [r7, #2]
 80034c4:	2b20      	cmp	r3, #32
 80034c6:	d103      	bne.n	80034d0 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f043 0320 	orr.w	r3, r3, #32
 80034ce:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80034d0:	887b      	ldrh	r3, [r7, #2]
 80034d2:	2b40      	cmp	r3, #64	; 0x40
 80034d4:	d103      	bne.n	80034de <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034dc:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	6819      	ldr	r1, [r3, #0]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	43da      	mvns	r2, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	400a      	ands	r2, r1
 80034ee:	601a      	str	r2, [r3, #0]
}
 80034f0:	bf00      	nop
 80034f2:	3714      	adds	r7, #20
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800350c:	b2db      	uxtb	r3, r3
 800350e:	2b20      	cmp	r3, #32
 8003510:	d138      	bne.n	8003584 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003518:	2b01      	cmp	r3, #1
 800351a:	d101      	bne.n	8003520 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800351c:	2302      	movs	r3, #2
 800351e:	e032      	b.n	8003586 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2224      	movs	r2, #36	; 0x24
 800352c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f022 0201 	bic.w	r2, r2, #1
 800353e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800354e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	6819      	ldr	r1, [r3, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	683a      	ldr	r2, [r7, #0]
 800355c:	430a      	orrs	r2, r1
 800355e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f042 0201 	orr.w	r2, r2, #1
 800356e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2220      	movs	r2, #32
 8003574:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003580:	2300      	movs	r3, #0
 8003582:	e000      	b.n	8003586 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003584:	2302      	movs	r3, #2
  }
}
 8003586:	4618      	mov	r0, r3
 8003588:	370c      	adds	r7, #12
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr

08003592 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003592:	b480      	push	{r7}
 8003594:	b085      	sub	sp, #20
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
 800359a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	2b20      	cmp	r3, #32
 80035a6:	d139      	bne.n	800361c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d101      	bne.n	80035b6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80035b2:	2302      	movs	r3, #2
 80035b4:	e033      	b.n	800361e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2201      	movs	r2, #1
 80035ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2224      	movs	r2, #36	; 0x24
 80035c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f022 0201 	bic.w	r2, r2, #1
 80035d4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80035e4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	021b      	lsls	r3, r3, #8
 80035ea:	68fa      	ldr	r2, [r7, #12]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	68fa      	ldr	r2, [r7, #12]
 80035f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f042 0201 	orr.w	r2, r2, #1
 8003606:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2220      	movs	r2, #32
 800360c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003618:	2300      	movs	r3, #0
 800361a:	e000      	b.n	800361e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800361c:	2302      	movs	r3, #2
  }
}
 800361e:	4618      	mov	r0, r3
 8003620:	3714      	adds	r7, #20
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
	...

0800362c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800362c:	b480      	push	{r7}
 800362e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003630:	4b05      	ldr	r3, [pc, #20]	; (8003648 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a04      	ldr	r2, [pc, #16]	; (8003648 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003636:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800363a:	6013      	str	r3, [r2, #0]
}
 800363c:	bf00      	nop
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	40007000 	.word	0x40007000

0800364c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800364c:	b480      	push	{r7}
 800364e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003650:	4b04      	ldr	r3, [pc, #16]	; (8003664 <HAL_PWREx_GetVoltageRange+0x18>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003658:	4618      	mov	r0, r3
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr
 8003662:	bf00      	nop
 8003664:	40007000 	.word	0x40007000

08003668 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003668:	b480      	push	{r7}
 800366a:	b085      	sub	sp, #20
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003676:	d130      	bne.n	80036da <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003678:	4b23      	ldr	r3, [pc, #140]	; (8003708 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003680:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003684:	d038      	beq.n	80036f8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003686:	4b20      	ldr	r3, [pc, #128]	; (8003708 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800368e:	4a1e      	ldr	r2, [pc, #120]	; (8003708 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003690:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003694:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003696:	4b1d      	ldr	r3, [pc, #116]	; (800370c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	2232      	movs	r2, #50	; 0x32
 800369c:	fb02 f303 	mul.w	r3, r2, r3
 80036a0:	4a1b      	ldr	r2, [pc, #108]	; (8003710 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80036a2:	fba2 2303 	umull	r2, r3, r2, r3
 80036a6:	0c9b      	lsrs	r3, r3, #18
 80036a8:	3301      	adds	r3, #1
 80036aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036ac:	e002      	b.n	80036b4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	3b01      	subs	r3, #1
 80036b2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036b4:	4b14      	ldr	r3, [pc, #80]	; (8003708 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036b6:	695b      	ldr	r3, [r3, #20]
 80036b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036c0:	d102      	bne.n	80036c8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d1f2      	bne.n	80036ae <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80036c8:	4b0f      	ldr	r3, [pc, #60]	; (8003708 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036ca:	695b      	ldr	r3, [r3, #20]
 80036cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036d4:	d110      	bne.n	80036f8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e00f      	b.n	80036fa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80036da:	4b0b      	ldr	r3, [pc, #44]	; (8003708 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80036e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036e6:	d007      	beq.n	80036f8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80036e8:	4b07      	ldr	r3, [pc, #28]	; (8003708 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80036f0:	4a05      	ldr	r2, [pc, #20]	; (8003708 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036f6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3714      	adds	r7, #20
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr
 8003706:	bf00      	nop
 8003708:	40007000 	.word	0x40007000
 800370c:	20000000 	.word	0x20000000
 8003710:	431bde83 	.word	0x431bde83

08003714 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b088      	sub	sp, #32
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d102      	bne.n	8003728 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	f000 bc02 	b.w	8003f2c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003728:	4b96      	ldr	r3, [pc, #600]	; (8003984 <HAL_RCC_OscConfig+0x270>)
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	f003 030c 	and.w	r3, r3, #12
 8003730:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003732:	4b94      	ldr	r3, [pc, #592]	; (8003984 <HAL_RCC_OscConfig+0x270>)
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	f003 0303 	and.w	r3, r3, #3
 800373a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0310 	and.w	r3, r3, #16
 8003744:	2b00      	cmp	r3, #0
 8003746:	f000 80e4 	beq.w	8003912 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d007      	beq.n	8003760 <HAL_RCC_OscConfig+0x4c>
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	2b0c      	cmp	r3, #12
 8003754:	f040 808b 	bne.w	800386e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	2b01      	cmp	r3, #1
 800375c:	f040 8087 	bne.w	800386e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003760:	4b88      	ldr	r3, [pc, #544]	; (8003984 <HAL_RCC_OscConfig+0x270>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0302 	and.w	r3, r3, #2
 8003768:	2b00      	cmp	r3, #0
 800376a:	d005      	beq.n	8003778 <HAL_RCC_OscConfig+0x64>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	699b      	ldr	r3, [r3, #24]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d101      	bne.n	8003778 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e3d9      	b.n	8003f2c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a1a      	ldr	r2, [r3, #32]
 800377c:	4b81      	ldr	r3, [pc, #516]	; (8003984 <HAL_RCC_OscConfig+0x270>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0308 	and.w	r3, r3, #8
 8003784:	2b00      	cmp	r3, #0
 8003786:	d004      	beq.n	8003792 <HAL_RCC_OscConfig+0x7e>
 8003788:	4b7e      	ldr	r3, [pc, #504]	; (8003984 <HAL_RCC_OscConfig+0x270>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003790:	e005      	b.n	800379e <HAL_RCC_OscConfig+0x8a>
 8003792:	4b7c      	ldr	r3, [pc, #496]	; (8003984 <HAL_RCC_OscConfig+0x270>)
 8003794:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003798:	091b      	lsrs	r3, r3, #4
 800379a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800379e:	4293      	cmp	r3, r2
 80037a0:	d223      	bcs.n	80037ea <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a1b      	ldr	r3, [r3, #32]
 80037a6:	4618      	mov	r0, r3
 80037a8:	f000 fd8c 	bl	80042c4 <RCC_SetFlashLatencyFromMSIRange>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d001      	beq.n	80037b6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e3ba      	b.n	8003f2c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037b6:	4b73      	ldr	r3, [pc, #460]	; (8003984 <HAL_RCC_OscConfig+0x270>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a72      	ldr	r2, [pc, #456]	; (8003984 <HAL_RCC_OscConfig+0x270>)
 80037bc:	f043 0308 	orr.w	r3, r3, #8
 80037c0:	6013      	str	r3, [r2, #0]
 80037c2:	4b70      	ldr	r3, [pc, #448]	; (8003984 <HAL_RCC_OscConfig+0x270>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a1b      	ldr	r3, [r3, #32]
 80037ce:	496d      	ldr	r1, [pc, #436]	; (8003984 <HAL_RCC_OscConfig+0x270>)
 80037d0:	4313      	orrs	r3, r2
 80037d2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037d4:	4b6b      	ldr	r3, [pc, #428]	; (8003984 <HAL_RCC_OscConfig+0x270>)
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	69db      	ldr	r3, [r3, #28]
 80037e0:	021b      	lsls	r3, r3, #8
 80037e2:	4968      	ldr	r1, [pc, #416]	; (8003984 <HAL_RCC_OscConfig+0x270>)
 80037e4:	4313      	orrs	r3, r2
 80037e6:	604b      	str	r3, [r1, #4]
 80037e8:	e025      	b.n	8003836 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037ea:	4b66      	ldr	r3, [pc, #408]	; (8003984 <HAL_RCC_OscConfig+0x270>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a65      	ldr	r2, [pc, #404]	; (8003984 <HAL_RCC_OscConfig+0x270>)
 80037f0:	f043 0308 	orr.w	r3, r3, #8
 80037f4:	6013      	str	r3, [r2, #0]
 80037f6:	4b63      	ldr	r3, [pc, #396]	; (8003984 <HAL_RCC_OscConfig+0x270>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a1b      	ldr	r3, [r3, #32]
 8003802:	4960      	ldr	r1, [pc, #384]	; (8003984 <HAL_RCC_OscConfig+0x270>)
 8003804:	4313      	orrs	r3, r2
 8003806:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003808:	4b5e      	ldr	r3, [pc, #376]	; (8003984 <HAL_RCC_OscConfig+0x270>)
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	69db      	ldr	r3, [r3, #28]
 8003814:	021b      	lsls	r3, r3, #8
 8003816:	495b      	ldr	r1, [pc, #364]	; (8003984 <HAL_RCC_OscConfig+0x270>)
 8003818:	4313      	orrs	r3, r2
 800381a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d109      	bne.n	8003836 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a1b      	ldr	r3, [r3, #32]
 8003826:	4618      	mov	r0, r3
 8003828:	f000 fd4c 	bl	80042c4 <RCC_SetFlashLatencyFromMSIRange>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d001      	beq.n	8003836 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e37a      	b.n	8003f2c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003836:	f000 fc81 	bl	800413c <HAL_RCC_GetSysClockFreq>
 800383a:	4602      	mov	r2, r0
 800383c:	4b51      	ldr	r3, [pc, #324]	; (8003984 <HAL_RCC_OscConfig+0x270>)
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	091b      	lsrs	r3, r3, #4
 8003842:	f003 030f 	and.w	r3, r3, #15
 8003846:	4950      	ldr	r1, [pc, #320]	; (8003988 <HAL_RCC_OscConfig+0x274>)
 8003848:	5ccb      	ldrb	r3, [r1, r3]
 800384a:	f003 031f 	and.w	r3, r3, #31
 800384e:	fa22 f303 	lsr.w	r3, r2, r3
 8003852:	4a4e      	ldr	r2, [pc, #312]	; (800398c <HAL_RCC_OscConfig+0x278>)
 8003854:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003856:	4b4e      	ldr	r3, [pc, #312]	; (8003990 <HAL_RCC_OscConfig+0x27c>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4618      	mov	r0, r3
 800385c:	f7fe f848 	bl	80018f0 <HAL_InitTick>
 8003860:	4603      	mov	r3, r0
 8003862:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003864:	7bfb      	ldrb	r3, [r7, #15]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d052      	beq.n	8003910 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800386a:	7bfb      	ldrb	r3, [r7, #15]
 800386c:	e35e      	b.n	8003f2c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	699b      	ldr	r3, [r3, #24]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d032      	beq.n	80038dc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003876:	4b43      	ldr	r3, [pc, #268]	; (8003984 <HAL_RCC_OscConfig+0x270>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a42      	ldr	r2, [pc, #264]	; (8003984 <HAL_RCC_OscConfig+0x270>)
 800387c:	f043 0301 	orr.w	r3, r3, #1
 8003880:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003882:	f7fe f885 	bl	8001990 <HAL_GetTick>
 8003886:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003888:	e008      	b.n	800389c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800388a:	f7fe f881 	bl	8001990 <HAL_GetTick>
 800388e:	4602      	mov	r2, r0
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	2b02      	cmp	r3, #2
 8003896:	d901      	bls.n	800389c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003898:	2303      	movs	r3, #3
 800389a:	e347      	b.n	8003f2c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800389c:	4b39      	ldr	r3, [pc, #228]	; (8003984 <HAL_RCC_OscConfig+0x270>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0302 	and.w	r3, r3, #2
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d0f0      	beq.n	800388a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038a8:	4b36      	ldr	r3, [pc, #216]	; (8003984 <HAL_RCC_OscConfig+0x270>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a35      	ldr	r2, [pc, #212]	; (8003984 <HAL_RCC_OscConfig+0x270>)
 80038ae:	f043 0308 	orr.w	r3, r3, #8
 80038b2:	6013      	str	r3, [r2, #0]
 80038b4:	4b33      	ldr	r3, [pc, #204]	; (8003984 <HAL_RCC_OscConfig+0x270>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6a1b      	ldr	r3, [r3, #32]
 80038c0:	4930      	ldr	r1, [pc, #192]	; (8003984 <HAL_RCC_OscConfig+0x270>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038c6:	4b2f      	ldr	r3, [pc, #188]	; (8003984 <HAL_RCC_OscConfig+0x270>)
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	69db      	ldr	r3, [r3, #28]
 80038d2:	021b      	lsls	r3, r3, #8
 80038d4:	492b      	ldr	r1, [pc, #172]	; (8003984 <HAL_RCC_OscConfig+0x270>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	604b      	str	r3, [r1, #4]
 80038da:	e01a      	b.n	8003912 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80038dc:	4b29      	ldr	r3, [pc, #164]	; (8003984 <HAL_RCC_OscConfig+0x270>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a28      	ldr	r2, [pc, #160]	; (8003984 <HAL_RCC_OscConfig+0x270>)
 80038e2:	f023 0301 	bic.w	r3, r3, #1
 80038e6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80038e8:	f7fe f852 	bl	8001990 <HAL_GetTick>
 80038ec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80038ee:	e008      	b.n	8003902 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80038f0:	f7fe f84e 	bl	8001990 <HAL_GetTick>
 80038f4:	4602      	mov	r2, r0
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	2b02      	cmp	r3, #2
 80038fc:	d901      	bls.n	8003902 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80038fe:	2303      	movs	r3, #3
 8003900:	e314      	b.n	8003f2c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003902:	4b20      	ldr	r3, [pc, #128]	; (8003984 <HAL_RCC_OscConfig+0x270>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0302 	and.w	r3, r3, #2
 800390a:	2b00      	cmp	r3, #0
 800390c:	d1f0      	bne.n	80038f0 <HAL_RCC_OscConfig+0x1dc>
 800390e:	e000      	b.n	8003912 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003910:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0301 	and.w	r3, r3, #1
 800391a:	2b00      	cmp	r3, #0
 800391c:	d073      	beq.n	8003a06 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800391e:	69bb      	ldr	r3, [r7, #24]
 8003920:	2b08      	cmp	r3, #8
 8003922:	d005      	beq.n	8003930 <HAL_RCC_OscConfig+0x21c>
 8003924:	69bb      	ldr	r3, [r7, #24]
 8003926:	2b0c      	cmp	r3, #12
 8003928:	d10e      	bne.n	8003948 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	2b03      	cmp	r3, #3
 800392e:	d10b      	bne.n	8003948 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003930:	4b14      	ldr	r3, [pc, #80]	; (8003984 <HAL_RCC_OscConfig+0x270>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d063      	beq.n	8003a04 <HAL_RCC_OscConfig+0x2f0>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d15f      	bne.n	8003a04 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e2f1      	b.n	8003f2c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003950:	d106      	bne.n	8003960 <HAL_RCC_OscConfig+0x24c>
 8003952:	4b0c      	ldr	r3, [pc, #48]	; (8003984 <HAL_RCC_OscConfig+0x270>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a0b      	ldr	r2, [pc, #44]	; (8003984 <HAL_RCC_OscConfig+0x270>)
 8003958:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800395c:	6013      	str	r3, [r2, #0]
 800395e:	e025      	b.n	80039ac <HAL_RCC_OscConfig+0x298>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003968:	d114      	bne.n	8003994 <HAL_RCC_OscConfig+0x280>
 800396a:	4b06      	ldr	r3, [pc, #24]	; (8003984 <HAL_RCC_OscConfig+0x270>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a05      	ldr	r2, [pc, #20]	; (8003984 <HAL_RCC_OscConfig+0x270>)
 8003970:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003974:	6013      	str	r3, [r2, #0]
 8003976:	4b03      	ldr	r3, [pc, #12]	; (8003984 <HAL_RCC_OscConfig+0x270>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a02      	ldr	r2, [pc, #8]	; (8003984 <HAL_RCC_OscConfig+0x270>)
 800397c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003980:	6013      	str	r3, [r2, #0]
 8003982:	e013      	b.n	80039ac <HAL_RCC_OscConfig+0x298>
 8003984:	40021000 	.word	0x40021000
 8003988:	08008220 	.word	0x08008220
 800398c:	20000000 	.word	0x20000000
 8003990:	20000004 	.word	0x20000004
 8003994:	4ba0      	ldr	r3, [pc, #640]	; (8003c18 <HAL_RCC_OscConfig+0x504>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a9f      	ldr	r2, [pc, #636]	; (8003c18 <HAL_RCC_OscConfig+0x504>)
 800399a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800399e:	6013      	str	r3, [r2, #0]
 80039a0:	4b9d      	ldr	r3, [pc, #628]	; (8003c18 <HAL_RCC_OscConfig+0x504>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a9c      	ldr	r2, [pc, #624]	; (8003c18 <HAL_RCC_OscConfig+0x504>)
 80039a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d013      	beq.n	80039dc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b4:	f7fd ffec 	bl	8001990 <HAL_GetTick>
 80039b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039ba:	e008      	b.n	80039ce <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039bc:	f7fd ffe8 	bl	8001990 <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	2b64      	cmp	r3, #100	; 0x64
 80039c8:	d901      	bls.n	80039ce <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e2ae      	b.n	8003f2c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039ce:	4b92      	ldr	r3, [pc, #584]	; (8003c18 <HAL_RCC_OscConfig+0x504>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d0f0      	beq.n	80039bc <HAL_RCC_OscConfig+0x2a8>
 80039da:	e014      	b.n	8003a06 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039dc:	f7fd ffd8 	bl	8001990 <HAL_GetTick>
 80039e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039e2:	e008      	b.n	80039f6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039e4:	f7fd ffd4 	bl	8001990 <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	2b64      	cmp	r3, #100	; 0x64
 80039f0:	d901      	bls.n	80039f6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e29a      	b.n	8003f2c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039f6:	4b88      	ldr	r3, [pc, #544]	; (8003c18 <HAL_RCC_OscConfig+0x504>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d1f0      	bne.n	80039e4 <HAL_RCC_OscConfig+0x2d0>
 8003a02:	e000      	b.n	8003a06 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0302 	and.w	r3, r3, #2
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d060      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003a12:	69bb      	ldr	r3, [r7, #24]
 8003a14:	2b04      	cmp	r3, #4
 8003a16:	d005      	beq.n	8003a24 <HAL_RCC_OscConfig+0x310>
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	2b0c      	cmp	r3, #12
 8003a1c:	d119      	bne.n	8003a52 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d116      	bne.n	8003a52 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a24:	4b7c      	ldr	r3, [pc, #496]	; (8003c18 <HAL_RCC_OscConfig+0x504>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d005      	beq.n	8003a3c <HAL_RCC_OscConfig+0x328>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d101      	bne.n	8003a3c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e277      	b.n	8003f2c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a3c:	4b76      	ldr	r3, [pc, #472]	; (8003c18 <HAL_RCC_OscConfig+0x504>)
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	691b      	ldr	r3, [r3, #16]
 8003a48:	061b      	lsls	r3, r3, #24
 8003a4a:	4973      	ldr	r1, [pc, #460]	; (8003c18 <HAL_RCC_OscConfig+0x504>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a50:	e040      	b.n	8003ad4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d023      	beq.n	8003aa2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a5a:	4b6f      	ldr	r3, [pc, #444]	; (8003c18 <HAL_RCC_OscConfig+0x504>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a6e      	ldr	r2, [pc, #440]	; (8003c18 <HAL_RCC_OscConfig+0x504>)
 8003a60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a66:	f7fd ff93 	bl	8001990 <HAL_GetTick>
 8003a6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a6c:	e008      	b.n	8003a80 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a6e:	f7fd ff8f 	bl	8001990 <HAL_GetTick>
 8003a72:	4602      	mov	r2, r0
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	1ad3      	subs	r3, r2, r3
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	d901      	bls.n	8003a80 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	e255      	b.n	8003f2c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a80:	4b65      	ldr	r3, [pc, #404]	; (8003c18 <HAL_RCC_OscConfig+0x504>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d0f0      	beq.n	8003a6e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a8c:	4b62      	ldr	r3, [pc, #392]	; (8003c18 <HAL_RCC_OscConfig+0x504>)
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	691b      	ldr	r3, [r3, #16]
 8003a98:	061b      	lsls	r3, r3, #24
 8003a9a:	495f      	ldr	r1, [pc, #380]	; (8003c18 <HAL_RCC_OscConfig+0x504>)
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	604b      	str	r3, [r1, #4]
 8003aa0:	e018      	b.n	8003ad4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003aa2:	4b5d      	ldr	r3, [pc, #372]	; (8003c18 <HAL_RCC_OscConfig+0x504>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a5c      	ldr	r2, [pc, #368]	; (8003c18 <HAL_RCC_OscConfig+0x504>)
 8003aa8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003aac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aae:	f7fd ff6f 	bl	8001990 <HAL_GetTick>
 8003ab2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ab4:	e008      	b.n	8003ac8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ab6:	f7fd ff6b 	bl	8001990 <HAL_GetTick>
 8003aba:	4602      	mov	r2, r0
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	d901      	bls.n	8003ac8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	e231      	b.n	8003f2c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ac8:	4b53      	ldr	r3, [pc, #332]	; (8003c18 <HAL_RCC_OscConfig+0x504>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d1f0      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0308 	and.w	r3, r3, #8
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d03c      	beq.n	8003b5a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	695b      	ldr	r3, [r3, #20]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d01c      	beq.n	8003b22 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ae8:	4b4b      	ldr	r3, [pc, #300]	; (8003c18 <HAL_RCC_OscConfig+0x504>)
 8003aea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003aee:	4a4a      	ldr	r2, [pc, #296]	; (8003c18 <HAL_RCC_OscConfig+0x504>)
 8003af0:	f043 0301 	orr.w	r3, r3, #1
 8003af4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003af8:	f7fd ff4a 	bl	8001990 <HAL_GetTick>
 8003afc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003afe:	e008      	b.n	8003b12 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b00:	f7fd ff46 	bl	8001990 <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d901      	bls.n	8003b12 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e20c      	b.n	8003f2c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b12:	4b41      	ldr	r3, [pc, #260]	; (8003c18 <HAL_RCC_OscConfig+0x504>)
 8003b14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b18:	f003 0302 	and.w	r3, r3, #2
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d0ef      	beq.n	8003b00 <HAL_RCC_OscConfig+0x3ec>
 8003b20:	e01b      	b.n	8003b5a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b22:	4b3d      	ldr	r3, [pc, #244]	; (8003c18 <HAL_RCC_OscConfig+0x504>)
 8003b24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b28:	4a3b      	ldr	r2, [pc, #236]	; (8003c18 <HAL_RCC_OscConfig+0x504>)
 8003b2a:	f023 0301 	bic.w	r3, r3, #1
 8003b2e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b32:	f7fd ff2d 	bl	8001990 <HAL_GetTick>
 8003b36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b38:	e008      	b.n	8003b4c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b3a:	f7fd ff29 	bl	8001990 <HAL_GetTick>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	d901      	bls.n	8003b4c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	e1ef      	b.n	8003f2c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b4c:	4b32      	ldr	r3, [pc, #200]	; (8003c18 <HAL_RCC_OscConfig+0x504>)
 8003b4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b52:	f003 0302 	and.w	r3, r3, #2
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d1ef      	bne.n	8003b3a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0304 	and.w	r3, r3, #4
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	f000 80a6 	beq.w	8003cb4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003b6c:	4b2a      	ldr	r3, [pc, #168]	; (8003c18 <HAL_RCC_OscConfig+0x504>)
 8003b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d10d      	bne.n	8003b94 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b78:	4b27      	ldr	r3, [pc, #156]	; (8003c18 <HAL_RCC_OscConfig+0x504>)
 8003b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b7c:	4a26      	ldr	r2, [pc, #152]	; (8003c18 <HAL_RCC_OscConfig+0x504>)
 8003b7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b82:	6593      	str	r3, [r2, #88]	; 0x58
 8003b84:	4b24      	ldr	r3, [pc, #144]	; (8003c18 <HAL_RCC_OscConfig+0x504>)
 8003b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b8c:	60bb      	str	r3, [r7, #8]
 8003b8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b90:	2301      	movs	r3, #1
 8003b92:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b94:	4b21      	ldr	r3, [pc, #132]	; (8003c1c <HAL_RCC_OscConfig+0x508>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d118      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ba0:	4b1e      	ldr	r3, [pc, #120]	; (8003c1c <HAL_RCC_OscConfig+0x508>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a1d      	ldr	r2, [pc, #116]	; (8003c1c <HAL_RCC_OscConfig+0x508>)
 8003ba6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003baa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bac:	f7fd fef0 	bl	8001990 <HAL_GetTick>
 8003bb0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bb2:	e008      	b.n	8003bc6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bb4:	f7fd feec 	bl	8001990 <HAL_GetTick>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d901      	bls.n	8003bc6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e1b2      	b.n	8003f2c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bc6:	4b15      	ldr	r3, [pc, #84]	; (8003c1c <HAL_RCC_OscConfig+0x508>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d0f0      	beq.n	8003bb4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d108      	bne.n	8003bec <HAL_RCC_OscConfig+0x4d8>
 8003bda:	4b0f      	ldr	r3, [pc, #60]	; (8003c18 <HAL_RCC_OscConfig+0x504>)
 8003bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003be0:	4a0d      	ldr	r2, [pc, #52]	; (8003c18 <HAL_RCC_OscConfig+0x504>)
 8003be2:	f043 0301 	orr.w	r3, r3, #1
 8003be6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003bea:	e029      	b.n	8003c40 <HAL_RCC_OscConfig+0x52c>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	2b05      	cmp	r3, #5
 8003bf2:	d115      	bne.n	8003c20 <HAL_RCC_OscConfig+0x50c>
 8003bf4:	4b08      	ldr	r3, [pc, #32]	; (8003c18 <HAL_RCC_OscConfig+0x504>)
 8003bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bfa:	4a07      	ldr	r2, [pc, #28]	; (8003c18 <HAL_RCC_OscConfig+0x504>)
 8003bfc:	f043 0304 	orr.w	r3, r3, #4
 8003c00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c04:	4b04      	ldr	r3, [pc, #16]	; (8003c18 <HAL_RCC_OscConfig+0x504>)
 8003c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c0a:	4a03      	ldr	r2, [pc, #12]	; (8003c18 <HAL_RCC_OscConfig+0x504>)
 8003c0c:	f043 0301 	orr.w	r3, r3, #1
 8003c10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c14:	e014      	b.n	8003c40 <HAL_RCC_OscConfig+0x52c>
 8003c16:	bf00      	nop
 8003c18:	40021000 	.word	0x40021000
 8003c1c:	40007000 	.word	0x40007000
 8003c20:	4b9a      	ldr	r3, [pc, #616]	; (8003e8c <HAL_RCC_OscConfig+0x778>)
 8003c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c26:	4a99      	ldr	r2, [pc, #612]	; (8003e8c <HAL_RCC_OscConfig+0x778>)
 8003c28:	f023 0301 	bic.w	r3, r3, #1
 8003c2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c30:	4b96      	ldr	r3, [pc, #600]	; (8003e8c <HAL_RCC_OscConfig+0x778>)
 8003c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c36:	4a95      	ldr	r2, [pc, #596]	; (8003e8c <HAL_RCC_OscConfig+0x778>)
 8003c38:	f023 0304 	bic.w	r3, r3, #4
 8003c3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d016      	beq.n	8003c76 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c48:	f7fd fea2 	bl	8001990 <HAL_GetTick>
 8003c4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c4e:	e00a      	b.n	8003c66 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c50:	f7fd fe9e 	bl	8001990 <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d901      	bls.n	8003c66 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e162      	b.n	8003f2c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c66:	4b89      	ldr	r3, [pc, #548]	; (8003e8c <HAL_RCC_OscConfig+0x778>)
 8003c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c6c:	f003 0302 	and.w	r3, r3, #2
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d0ed      	beq.n	8003c50 <HAL_RCC_OscConfig+0x53c>
 8003c74:	e015      	b.n	8003ca2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c76:	f7fd fe8b 	bl	8001990 <HAL_GetTick>
 8003c7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c7c:	e00a      	b.n	8003c94 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c7e:	f7fd fe87 	bl	8001990 <HAL_GetTick>
 8003c82:	4602      	mov	r2, r0
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d901      	bls.n	8003c94 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003c90:	2303      	movs	r3, #3
 8003c92:	e14b      	b.n	8003f2c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c94:	4b7d      	ldr	r3, [pc, #500]	; (8003e8c <HAL_RCC_OscConfig+0x778>)
 8003c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c9a:	f003 0302 	and.w	r3, r3, #2
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d1ed      	bne.n	8003c7e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ca2:	7ffb      	ldrb	r3, [r7, #31]
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d105      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ca8:	4b78      	ldr	r3, [pc, #480]	; (8003e8c <HAL_RCC_OscConfig+0x778>)
 8003caa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cac:	4a77      	ldr	r2, [pc, #476]	; (8003e8c <HAL_RCC_OscConfig+0x778>)
 8003cae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cb2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0320 	and.w	r3, r3, #32
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d03c      	beq.n	8003d3a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d01c      	beq.n	8003d02 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003cc8:	4b70      	ldr	r3, [pc, #448]	; (8003e8c <HAL_RCC_OscConfig+0x778>)
 8003cca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003cce:	4a6f      	ldr	r2, [pc, #444]	; (8003e8c <HAL_RCC_OscConfig+0x778>)
 8003cd0:	f043 0301 	orr.w	r3, r3, #1
 8003cd4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cd8:	f7fd fe5a 	bl	8001990 <HAL_GetTick>
 8003cdc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003cde:	e008      	b.n	8003cf2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ce0:	f7fd fe56 	bl	8001990 <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d901      	bls.n	8003cf2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e11c      	b.n	8003f2c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003cf2:	4b66      	ldr	r3, [pc, #408]	; (8003e8c <HAL_RCC_OscConfig+0x778>)
 8003cf4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003cf8:	f003 0302 	and.w	r3, r3, #2
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d0ef      	beq.n	8003ce0 <HAL_RCC_OscConfig+0x5cc>
 8003d00:	e01b      	b.n	8003d3a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003d02:	4b62      	ldr	r3, [pc, #392]	; (8003e8c <HAL_RCC_OscConfig+0x778>)
 8003d04:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d08:	4a60      	ldr	r2, [pc, #384]	; (8003e8c <HAL_RCC_OscConfig+0x778>)
 8003d0a:	f023 0301 	bic.w	r3, r3, #1
 8003d0e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d12:	f7fd fe3d 	bl	8001990 <HAL_GetTick>
 8003d16:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d18:	e008      	b.n	8003d2c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d1a:	f7fd fe39 	bl	8001990 <HAL_GetTick>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	2b02      	cmp	r3, #2
 8003d26:	d901      	bls.n	8003d2c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003d28:	2303      	movs	r3, #3
 8003d2a:	e0ff      	b.n	8003f2c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d2c:	4b57      	ldr	r3, [pc, #348]	; (8003e8c <HAL_RCC_OscConfig+0x778>)
 8003d2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d1ef      	bne.n	8003d1a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	f000 80f3 	beq.w	8003f2a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	f040 80c9 	bne.w	8003ee0 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003d4e:	4b4f      	ldr	r3, [pc, #316]	; (8003e8c <HAL_RCC_OscConfig+0x778>)
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	f003 0203 	and.w	r2, r3, #3
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d12c      	bne.n	8003dbc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6c:	3b01      	subs	r3, #1
 8003d6e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d123      	bne.n	8003dbc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d7e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d11b      	bne.n	8003dbc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d8e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d113      	bne.n	8003dbc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d9e:	085b      	lsrs	r3, r3, #1
 8003da0:	3b01      	subs	r3, #1
 8003da2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d109      	bne.n	8003dbc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db2:	085b      	lsrs	r3, r3, #1
 8003db4:	3b01      	subs	r3, #1
 8003db6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d06b      	beq.n	8003e94 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003dbc:	69bb      	ldr	r3, [r7, #24]
 8003dbe:	2b0c      	cmp	r3, #12
 8003dc0:	d062      	beq.n	8003e88 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003dc2:	4b32      	ldr	r3, [pc, #200]	; (8003e8c <HAL_RCC_OscConfig+0x778>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d001      	beq.n	8003dd2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e0ac      	b.n	8003f2c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003dd2:	4b2e      	ldr	r3, [pc, #184]	; (8003e8c <HAL_RCC_OscConfig+0x778>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a2d      	ldr	r2, [pc, #180]	; (8003e8c <HAL_RCC_OscConfig+0x778>)
 8003dd8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ddc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003dde:	f7fd fdd7 	bl	8001990 <HAL_GetTick>
 8003de2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003de4:	e008      	b.n	8003df8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003de6:	f7fd fdd3 	bl	8001990 <HAL_GetTick>
 8003dea:	4602      	mov	r2, r0
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	d901      	bls.n	8003df8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003df4:	2303      	movs	r3, #3
 8003df6:	e099      	b.n	8003f2c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003df8:	4b24      	ldr	r3, [pc, #144]	; (8003e8c <HAL_RCC_OscConfig+0x778>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d1f0      	bne.n	8003de6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e04:	4b21      	ldr	r3, [pc, #132]	; (8003e8c <HAL_RCC_OscConfig+0x778>)
 8003e06:	68da      	ldr	r2, [r3, #12]
 8003e08:	4b21      	ldr	r3, [pc, #132]	; (8003e90 <HAL_RCC_OscConfig+0x77c>)
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003e14:	3a01      	subs	r2, #1
 8003e16:	0112      	lsls	r2, r2, #4
 8003e18:	4311      	orrs	r1, r2
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003e1e:	0212      	lsls	r2, r2, #8
 8003e20:	4311      	orrs	r1, r2
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003e26:	0852      	lsrs	r2, r2, #1
 8003e28:	3a01      	subs	r2, #1
 8003e2a:	0552      	lsls	r2, r2, #21
 8003e2c:	4311      	orrs	r1, r2
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003e32:	0852      	lsrs	r2, r2, #1
 8003e34:	3a01      	subs	r2, #1
 8003e36:	0652      	lsls	r2, r2, #25
 8003e38:	4311      	orrs	r1, r2
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003e3e:	06d2      	lsls	r2, r2, #27
 8003e40:	430a      	orrs	r2, r1
 8003e42:	4912      	ldr	r1, [pc, #72]	; (8003e8c <HAL_RCC_OscConfig+0x778>)
 8003e44:	4313      	orrs	r3, r2
 8003e46:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003e48:	4b10      	ldr	r3, [pc, #64]	; (8003e8c <HAL_RCC_OscConfig+0x778>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a0f      	ldr	r2, [pc, #60]	; (8003e8c <HAL_RCC_OscConfig+0x778>)
 8003e4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e52:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e54:	4b0d      	ldr	r3, [pc, #52]	; (8003e8c <HAL_RCC_OscConfig+0x778>)
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	4a0c      	ldr	r2, [pc, #48]	; (8003e8c <HAL_RCC_OscConfig+0x778>)
 8003e5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e5e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003e60:	f7fd fd96 	bl	8001990 <HAL_GetTick>
 8003e64:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e66:	e008      	b.n	8003e7a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e68:	f7fd fd92 	bl	8001990 <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d901      	bls.n	8003e7a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003e76:	2303      	movs	r3, #3
 8003e78:	e058      	b.n	8003f2c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e7a:	4b04      	ldr	r3, [pc, #16]	; (8003e8c <HAL_RCC_OscConfig+0x778>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d0f0      	beq.n	8003e68 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e86:	e050      	b.n	8003f2a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e04f      	b.n	8003f2c <HAL_RCC_OscConfig+0x818>
 8003e8c:	40021000 	.word	0x40021000
 8003e90:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e94:	4b27      	ldr	r3, [pc, #156]	; (8003f34 <HAL_RCC_OscConfig+0x820>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d144      	bne.n	8003f2a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003ea0:	4b24      	ldr	r3, [pc, #144]	; (8003f34 <HAL_RCC_OscConfig+0x820>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a23      	ldr	r2, [pc, #140]	; (8003f34 <HAL_RCC_OscConfig+0x820>)
 8003ea6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003eaa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003eac:	4b21      	ldr	r3, [pc, #132]	; (8003f34 <HAL_RCC_OscConfig+0x820>)
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	4a20      	ldr	r2, [pc, #128]	; (8003f34 <HAL_RCC_OscConfig+0x820>)
 8003eb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003eb6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003eb8:	f7fd fd6a 	bl	8001990 <HAL_GetTick>
 8003ebc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ebe:	e008      	b.n	8003ed2 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ec0:	f7fd fd66 	bl	8001990 <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d901      	bls.n	8003ed2 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e02c      	b.n	8003f2c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ed2:	4b18      	ldr	r3, [pc, #96]	; (8003f34 <HAL_RCC_OscConfig+0x820>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d0f0      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x7ac>
 8003ede:	e024      	b.n	8003f2a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ee0:	69bb      	ldr	r3, [r7, #24]
 8003ee2:	2b0c      	cmp	r3, #12
 8003ee4:	d01f      	beq.n	8003f26 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ee6:	4b13      	ldr	r3, [pc, #76]	; (8003f34 <HAL_RCC_OscConfig+0x820>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a12      	ldr	r2, [pc, #72]	; (8003f34 <HAL_RCC_OscConfig+0x820>)
 8003eec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ef0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef2:	f7fd fd4d 	bl	8001990 <HAL_GetTick>
 8003ef6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ef8:	e008      	b.n	8003f0c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003efa:	f7fd fd49 	bl	8001990 <HAL_GetTick>
 8003efe:	4602      	mov	r2, r0
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	d901      	bls.n	8003f0c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003f08:	2303      	movs	r3, #3
 8003f0a:	e00f      	b.n	8003f2c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f0c:	4b09      	ldr	r3, [pc, #36]	; (8003f34 <HAL_RCC_OscConfig+0x820>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d1f0      	bne.n	8003efa <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003f18:	4b06      	ldr	r3, [pc, #24]	; (8003f34 <HAL_RCC_OscConfig+0x820>)
 8003f1a:	68da      	ldr	r2, [r3, #12]
 8003f1c:	4905      	ldr	r1, [pc, #20]	; (8003f34 <HAL_RCC_OscConfig+0x820>)
 8003f1e:	4b06      	ldr	r3, [pc, #24]	; (8003f38 <HAL_RCC_OscConfig+0x824>)
 8003f20:	4013      	ands	r3, r2
 8003f22:	60cb      	str	r3, [r1, #12]
 8003f24:	e001      	b.n	8003f2a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e000      	b.n	8003f2c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003f2a:	2300      	movs	r3, #0
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3720      	adds	r7, #32
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	40021000 	.word	0x40021000
 8003f38:	feeefffc 	.word	0xfeeefffc

08003f3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d101      	bne.n	8003f50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e0e7      	b.n	8004120 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f50:	4b75      	ldr	r3, [pc, #468]	; (8004128 <HAL_RCC_ClockConfig+0x1ec>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0307 	and.w	r3, r3, #7
 8003f58:	683a      	ldr	r2, [r7, #0]
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d910      	bls.n	8003f80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f5e:	4b72      	ldr	r3, [pc, #456]	; (8004128 <HAL_RCC_ClockConfig+0x1ec>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f023 0207 	bic.w	r2, r3, #7
 8003f66:	4970      	ldr	r1, [pc, #448]	; (8004128 <HAL_RCC_ClockConfig+0x1ec>)
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f6e:	4b6e      	ldr	r3, [pc, #440]	; (8004128 <HAL_RCC_ClockConfig+0x1ec>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0307 	and.w	r3, r3, #7
 8003f76:	683a      	ldr	r2, [r7, #0]
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d001      	beq.n	8003f80 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e0cf      	b.n	8004120 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 0302 	and.w	r3, r3, #2
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d010      	beq.n	8003fae <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	689a      	ldr	r2, [r3, #8]
 8003f90:	4b66      	ldr	r3, [pc, #408]	; (800412c <HAL_RCC_ClockConfig+0x1f0>)
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d908      	bls.n	8003fae <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f9c:	4b63      	ldr	r3, [pc, #396]	; (800412c <HAL_RCC_ClockConfig+0x1f0>)
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	4960      	ldr	r1, [pc, #384]	; (800412c <HAL_RCC_ClockConfig+0x1f0>)
 8003faa:	4313      	orrs	r3, r2
 8003fac:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0301 	and.w	r3, r3, #1
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d04c      	beq.n	8004054 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	2b03      	cmp	r3, #3
 8003fc0:	d107      	bne.n	8003fd2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fc2:	4b5a      	ldr	r3, [pc, #360]	; (800412c <HAL_RCC_ClockConfig+0x1f0>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d121      	bne.n	8004012 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e0a6      	b.n	8004120 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	d107      	bne.n	8003fea <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fda:	4b54      	ldr	r3, [pc, #336]	; (800412c <HAL_RCC_ClockConfig+0x1f0>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d115      	bne.n	8004012 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e09a      	b.n	8004120 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d107      	bne.n	8004002 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ff2:	4b4e      	ldr	r3, [pc, #312]	; (800412c <HAL_RCC_ClockConfig+0x1f0>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0302 	and.w	r3, r3, #2
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d109      	bne.n	8004012 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e08e      	b.n	8004120 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004002:	4b4a      	ldr	r3, [pc, #296]	; (800412c <HAL_RCC_ClockConfig+0x1f0>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800400a:	2b00      	cmp	r3, #0
 800400c:	d101      	bne.n	8004012 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e086      	b.n	8004120 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004012:	4b46      	ldr	r3, [pc, #280]	; (800412c <HAL_RCC_ClockConfig+0x1f0>)
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f023 0203 	bic.w	r2, r3, #3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	4943      	ldr	r1, [pc, #268]	; (800412c <HAL_RCC_ClockConfig+0x1f0>)
 8004020:	4313      	orrs	r3, r2
 8004022:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004024:	f7fd fcb4 	bl	8001990 <HAL_GetTick>
 8004028:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800402a:	e00a      	b.n	8004042 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800402c:	f7fd fcb0 	bl	8001990 <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	f241 3288 	movw	r2, #5000	; 0x1388
 800403a:	4293      	cmp	r3, r2
 800403c:	d901      	bls.n	8004042 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e06e      	b.n	8004120 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004042:	4b3a      	ldr	r3, [pc, #232]	; (800412c <HAL_RCC_ClockConfig+0x1f0>)
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	f003 020c 	and.w	r2, r3, #12
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	429a      	cmp	r2, r3
 8004052:	d1eb      	bne.n	800402c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0302 	and.w	r3, r3, #2
 800405c:	2b00      	cmp	r3, #0
 800405e:	d010      	beq.n	8004082 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	689a      	ldr	r2, [r3, #8]
 8004064:	4b31      	ldr	r3, [pc, #196]	; (800412c <HAL_RCC_ClockConfig+0x1f0>)
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800406c:	429a      	cmp	r2, r3
 800406e:	d208      	bcs.n	8004082 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004070:	4b2e      	ldr	r3, [pc, #184]	; (800412c <HAL_RCC_ClockConfig+0x1f0>)
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	492b      	ldr	r1, [pc, #172]	; (800412c <HAL_RCC_ClockConfig+0x1f0>)
 800407e:	4313      	orrs	r3, r2
 8004080:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004082:	4b29      	ldr	r3, [pc, #164]	; (8004128 <HAL_RCC_ClockConfig+0x1ec>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0307 	and.w	r3, r3, #7
 800408a:	683a      	ldr	r2, [r7, #0]
 800408c:	429a      	cmp	r2, r3
 800408e:	d210      	bcs.n	80040b2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004090:	4b25      	ldr	r3, [pc, #148]	; (8004128 <HAL_RCC_ClockConfig+0x1ec>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f023 0207 	bic.w	r2, r3, #7
 8004098:	4923      	ldr	r1, [pc, #140]	; (8004128 <HAL_RCC_ClockConfig+0x1ec>)
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	4313      	orrs	r3, r2
 800409e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040a0:	4b21      	ldr	r3, [pc, #132]	; (8004128 <HAL_RCC_ClockConfig+0x1ec>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0307 	and.w	r3, r3, #7
 80040a8:	683a      	ldr	r2, [r7, #0]
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d001      	beq.n	80040b2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e036      	b.n	8004120 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0304 	and.w	r3, r3, #4
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d008      	beq.n	80040d0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040be:	4b1b      	ldr	r3, [pc, #108]	; (800412c <HAL_RCC_ClockConfig+0x1f0>)
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	4918      	ldr	r1, [pc, #96]	; (800412c <HAL_RCC_ClockConfig+0x1f0>)
 80040cc:	4313      	orrs	r3, r2
 80040ce:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0308 	and.w	r3, r3, #8
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d009      	beq.n	80040f0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040dc:	4b13      	ldr	r3, [pc, #76]	; (800412c <HAL_RCC_ClockConfig+0x1f0>)
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	691b      	ldr	r3, [r3, #16]
 80040e8:	00db      	lsls	r3, r3, #3
 80040ea:	4910      	ldr	r1, [pc, #64]	; (800412c <HAL_RCC_ClockConfig+0x1f0>)
 80040ec:	4313      	orrs	r3, r2
 80040ee:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80040f0:	f000 f824 	bl	800413c <HAL_RCC_GetSysClockFreq>
 80040f4:	4602      	mov	r2, r0
 80040f6:	4b0d      	ldr	r3, [pc, #52]	; (800412c <HAL_RCC_ClockConfig+0x1f0>)
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	091b      	lsrs	r3, r3, #4
 80040fc:	f003 030f 	and.w	r3, r3, #15
 8004100:	490b      	ldr	r1, [pc, #44]	; (8004130 <HAL_RCC_ClockConfig+0x1f4>)
 8004102:	5ccb      	ldrb	r3, [r1, r3]
 8004104:	f003 031f 	and.w	r3, r3, #31
 8004108:	fa22 f303 	lsr.w	r3, r2, r3
 800410c:	4a09      	ldr	r2, [pc, #36]	; (8004134 <HAL_RCC_ClockConfig+0x1f8>)
 800410e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004110:	4b09      	ldr	r3, [pc, #36]	; (8004138 <HAL_RCC_ClockConfig+0x1fc>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4618      	mov	r0, r3
 8004116:	f7fd fbeb 	bl	80018f0 <HAL_InitTick>
 800411a:	4603      	mov	r3, r0
 800411c:	72fb      	strb	r3, [r7, #11]

  return status;
 800411e:	7afb      	ldrb	r3, [r7, #11]
}
 8004120:	4618      	mov	r0, r3
 8004122:	3710      	adds	r7, #16
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}
 8004128:	40022000 	.word	0x40022000
 800412c:	40021000 	.word	0x40021000
 8004130:	08008220 	.word	0x08008220
 8004134:	20000000 	.word	0x20000000
 8004138:	20000004 	.word	0x20000004

0800413c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800413c:	b480      	push	{r7}
 800413e:	b089      	sub	sp, #36	; 0x24
 8004140:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004142:	2300      	movs	r3, #0
 8004144:	61fb      	str	r3, [r7, #28]
 8004146:	2300      	movs	r3, #0
 8004148:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800414a:	4b3e      	ldr	r3, [pc, #248]	; (8004244 <HAL_RCC_GetSysClockFreq+0x108>)
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	f003 030c 	and.w	r3, r3, #12
 8004152:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004154:	4b3b      	ldr	r3, [pc, #236]	; (8004244 <HAL_RCC_GetSysClockFreq+0x108>)
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	f003 0303 	and.w	r3, r3, #3
 800415c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d005      	beq.n	8004170 <HAL_RCC_GetSysClockFreq+0x34>
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	2b0c      	cmp	r3, #12
 8004168:	d121      	bne.n	80041ae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2b01      	cmp	r3, #1
 800416e:	d11e      	bne.n	80041ae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004170:	4b34      	ldr	r3, [pc, #208]	; (8004244 <HAL_RCC_GetSysClockFreq+0x108>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0308 	and.w	r3, r3, #8
 8004178:	2b00      	cmp	r3, #0
 800417a:	d107      	bne.n	800418c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800417c:	4b31      	ldr	r3, [pc, #196]	; (8004244 <HAL_RCC_GetSysClockFreq+0x108>)
 800417e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004182:	0a1b      	lsrs	r3, r3, #8
 8004184:	f003 030f 	and.w	r3, r3, #15
 8004188:	61fb      	str	r3, [r7, #28]
 800418a:	e005      	b.n	8004198 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800418c:	4b2d      	ldr	r3, [pc, #180]	; (8004244 <HAL_RCC_GetSysClockFreq+0x108>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	091b      	lsrs	r3, r3, #4
 8004192:	f003 030f 	and.w	r3, r3, #15
 8004196:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004198:	4a2b      	ldr	r2, [pc, #172]	; (8004248 <HAL_RCC_GetSysClockFreq+0x10c>)
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041a0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d10d      	bne.n	80041c4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80041a8:	69fb      	ldr	r3, [r7, #28]
 80041aa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80041ac:	e00a      	b.n	80041c4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	2b04      	cmp	r3, #4
 80041b2:	d102      	bne.n	80041ba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80041b4:	4b25      	ldr	r3, [pc, #148]	; (800424c <HAL_RCC_GetSysClockFreq+0x110>)
 80041b6:	61bb      	str	r3, [r7, #24]
 80041b8:	e004      	b.n	80041c4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	2b08      	cmp	r3, #8
 80041be:	d101      	bne.n	80041c4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80041c0:	4b23      	ldr	r3, [pc, #140]	; (8004250 <HAL_RCC_GetSysClockFreq+0x114>)
 80041c2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	2b0c      	cmp	r3, #12
 80041c8:	d134      	bne.n	8004234 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80041ca:	4b1e      	ldr	r3, [pc, #120]	; (8004244 <HAL_RCC_GetSysClockFreq+0x108>)
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	f003 0303 	and.w	r3, r3, #3
 80041d2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d003      	beq.n	80041e2 <HAL_RCC_GetSysClockFreq+0xa6>
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	2b03      	cmp	r3, #3
 80041de:	d003      	beq.n	80041e8 <HAL_RCC_GetSysClockFreq+0xac>
 80041e0:	e005      	b.n	80041ee <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80041e2:	4b1a      	ldr	r3, [pc, #104]	; (800424c <HAL_RCC_GetSysClockFreq+0x110>)
 80041e4:	617b      	str	r3, [r7, #20]
      break;
 80041e6:	e005      	b.n	80041f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80041e8:	4b19      	ldr	r3, [pc, #100]	; (8004250 <HAL_RCC_GetSysClockFreq+0x114>)
 80041ea:	617b      	str	r3, [r7, #20]
      break;
 80041ec:	e002      	b.n	80041f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	617b      	str	r3, [r7, #20]
      break;
 80041f2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80041f4:	4b13      	ldr	r3, [pc, #76]	; (8004244 <HAL_RCC_GetSysClockFreq+0x108>)
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	091b      	lsrs	r3, r3, #4
 80041fa:	f003 0307 	and.w	r3, r3, #7
 80041fe:	3301      	adds	r3, #1
 8004200:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004202:	4b10      	ldr	r3, [pc, #64]	; (8004244 <HAL_RCC_GetSysClockFreq+0x108>)
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	0a1b      	lsrs	r3, r3, #8
 8004208:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800420c:	697a      	ldr	r2, [r7, #20]
 800420e:	fb03 f202 	mul.w	r2, r3, r2
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	fbb2 f3f3 	udiv	r3, r2, r3
 8004218:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800421a:	4b0a      	ldr	r3, [pc, #40]	; (8004244 <HAL_RCC_GetSysClockFreq+0x108>)
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	0e5b      	lsrs	r3, r3, #25
 8004220:	f003 0303 	and.w	r3, r3, #3
 8004224:	3301      	adds	r3, #1
 8004226:	005b      	lsls	r3, r3, #1
 8004228:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800422a:	697a      	ldr	r2, [r7, #20]
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004232:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004234:	69bb      	ldr	r3, [r7, #24]
}
 8004236:	4618      	mov	r0, r3
 8004238:	3724      	adds	r7, #36	; 0x24
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	40021000 	.word	0x40021000
 8004248:	08008238 	.word	0x08008238
 800424c:	00f42400 	.word	0x00f42400
 8004250:	007a1200 	.word	0x007a1200

08004254 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004254:	b480      	push	{r7}
 8004256:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004258:	4b03      	ldr	r3, [pc, #12]	; (8004268 <HAL_RCC_GetHCLKFreq+0x14>)
 800425a:	681b      	ldr	r3, [r3, #0]
}
 800425c:	4618      	mov	r0, r3
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop
 8004268:	20000000 	.word	0x20000000

0800426c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004270:	f7ff fff0 	bl	8004254 <HAL_RCC_GetHCLKFreq>
 8004274:	4602      	mov	r2, r0
 8004276:	4b06      	ldr	r3, [pc, #24]	; (8004290 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	0a1b      	lsrs	r3, r3, #8
 800427c:	f003 0307 	and.w	r3, r3, #7
 8004280:	4904      	ldr	r1, [pc, #16]	; (8004294 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004282:	5ccb      	ldrb	r3, [r1, r3]
 8004284:	f003 031f 	and.w	r3, r3, #31
 8004288:	fa22 f303 	lsr.w	r3, r2, r3
}
 800428c:	4618      	mov	r0, r3
 800428e:	bd80      	pop	{r7, pc}
 8004290:	40021000 	.word	0x40021000
 8004294:	08008230 	.word	0x08008230

08004298 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800429c:	f7ff ffda 	bl	8004254 <HAL_RCC_GetHCLKFreq>
 80042a0:	4602      	mov	r2, r0
 80042a2:	4b06      	ldr	r3, [pc, #24]	; (80042bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	0adb      	lsrs	r3, r3, #11
 80042a8:	f003 0307 	and.w	r3, r3, #7
 80042ac:	4904      	ldr	r1, [pc, #16]	; (80042c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80042ae:	5ccb      	ldrb	r3, [r1, r3]
 80042b0:	f003 031f 	and.w	r3, r3, #31
 80042b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	40021000 	.word	0x40021000
 80042c0:	08008230 	.word	0x08008230

080042c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b086      	sub	sp, #24
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80042cc:	2300      	movs	r3, #0
 80042ce:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80042d0:	4b2a      	ldr	r3, [pc, #168]	; (800437c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d003      	beq.n	80042e4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80042dc:	f7ff f9b6 	bl	800364c <HAL_PWREx_GetVoltageRange>
 80042e0:	6178      	str	r0, [r7, #20]
 80042e2:	e014      	b.n	800430e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80042e4:	4b25      	ldr	r3, [pc, #148]	; (800437c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042e8:	4a24      	ldr	r2, [pc, #144]	; (800437c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042ee:	6593      	str	r3, [r2, #88]	; 0x58
 80042f0:	4b22      	ldr	r3, [pc, #136]	; (800437c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042f8:	60fb      	str	r3, [r7, #12]
 80042fa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80042fc:	f7ff f9a6 	bl	800364c <HAL_PWREx_GetVoltageRange>
 8004300:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004302:	4b1e      	ldr	r3, [pc, #120]	; (800437c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004306:	4a1d      	ldr	r2, [pc, #116]	; (800437c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004308:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800430c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004314:	d10b      	bne.n	800432e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2b80      	cmp	r3, #128	; 0x80
 800431a:	d919      	bls.n	8004350 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2ba0      	cmp	r3, #160	; 0xa0
 8004320:	d902      	bls.n	8004328 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004322:	2302      	movs	r3, #2
 8004324:	613b      	str	r3, [r7, #16]
 8004326:	e013      	b.n	8004350 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004328:	2301      	movs	r3, #1
 800432a:	613b      	str	r3, [r7, #16]
 800432c:	e010      	b.n	8004350 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2b80      	cmp	r3, #128	; 0x80
 8004332:	d902      	bls.n	800433a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004334:	2303      	movs	r3, #3
 8004336:	613b      	str	r3, [r7, #16]
 8004338:	e00a      	b.n	8004350 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2b80      	cmp	r3, #128	; 0x80
 800433e:	d102      	bne.n	8004346 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004340:	2302      	movs	r3, #2
 8004342:	613b      	str	r3, [r7, #16]
 8004344:	e004      	b.n	8004350 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2b70      	cmp	r3, #112	; 0x70
 800434a:	d101      	bne.n	8004350 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800434c:	2301      	movs	r3, #1
 800434e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004350:	4b0b      	ldr	r3, [pc, #44]	; (8004380 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f023 0207 	bic.w	r2, r3, #7
 8004358:	4909      	ldr	r1, [pc, #36]	; (8004380 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	4313      	orrs	r3, r2
 800435e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004360:	4b07      	ldr	r3, [pc, #28]	; (8004380 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0307 	and.w	r3, r3, #7
 8004368:	693a      	ldr	r2, [r7, #16]
 800436a:	429a      	cmp	r2, r3
 800436c:	d001      	beq.n	8004372 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e000      	b.n	8004374 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004372:	2300      	movs	r3, #0
}
 8004374:	4618      	mov	r0, r3
 8004376:	3718      	adds	r7, #24
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}
 800437c:	40021000 	.word	0x40021000
 8004380:	40022000 	.word	0x40022000

08004384 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b086      	sub	sp, #24
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800438c:	2300      	movs	r3, #0
 800438e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004390:	2300      	movs	r3, #0
 8004392:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800439c:	2b00      	cmp	r3, #0
 800439e:	d031      	beq.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043a4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80043a8:	d01a      	beq.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80043aa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80043ae:	d814      	bhi.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x56>
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d009      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80043b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80043b8:	d10f      	bne.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80043ba:	4b5d      	ldr	r3, [pc, #372]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	4a5c      	ldr	r2, [pc, #368]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043c4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80043c6:	e00c      	b.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	3304      	adds	r3, #4
 80043cc:	2100      	movs	r1, #0
 80043ce:	4618      	mov	r0, r3
 80043d0:	f000 f9de 	bl	8004790 <RCCEx_PLLSAI1_Config>
 80043d4:	4603      	mov	r3, r0
 80043d6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80043d8:	e003      	b.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	74fb      	strb	r3, [r7, #19]
      break;
 80043de:	e000      	b.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80043e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043e2:	7cfb      	ldrb	r3, [r7, #19]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d10b      	bne.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80043e8:	4b51      	ldr	r3, [pc, #324]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043f6:	494e      	ldr	r1, [pc, #312]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80043f8:	4313      	orrs	r3, r2
 80043fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80043fe:	e001      	b.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004400:	7cfb      	ldrb	r3, [r7, #19]
 8004402:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800440c:	2b00      	cmp	r3, #0
 800440e:	f000 809e 	beq.w	800454e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004412:	2300      	movs	r3, #0
 8004414:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004416:	4b46      	ldr	r3, [pc, #280]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800441a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d101      	bne.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004422:	2301      	movs	r3, #1
 8004424:	e000      	b.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004426:	2300      	movs	r3, #0
 8004428:	2b00      	cmp	r3, #0
 800442a:	d00d      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800442c:	4b40      	ldr	r3, [pc, #256]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800442e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004430:	4a3f      	ldr	r2, [pc, #252]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004432:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004436:	6593      	str	r3, [r2, #88]	; 0x58
 8004438:	4b3d      	ldr	r3, [pc, #244]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800443a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800443c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004440:	60bb      	str	r3, [r7, #8]
 8004442:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004444:	2301      	movs	r3, #1
 8004446:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004448:	4b3a      	ldr	r3, [pc, #232]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a39      	ldr	r2, [pc, #228]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800444e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004452:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004454:	f7fd fa9c 	bl	8001990 <HAL_GetTick>
 8004458:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800445a:	e009      	b.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800445c:	f7fd fa98 	bl	8001990 <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	2b02      	cmp	r3, #2
 8004468:	d902      	bls.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	74fb      	strb	r3, [r7, #19]
        break;
 800446e:	e005      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004470:	4b30      	ldr	r3, [pc, #192]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004478:	2b00      	cmp	r3, #0
 800447a:	d0ef      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800447c:	7cfb      	ldrb	r3, [r7, #19]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d15a      	bne.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004482:	4b2b      	ldr	r3, [pc, #172]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004488:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800448c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d01e      	beq.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004498:	697a      	ldr	r2, [r7, #20]
 800449a:	429a      	cmp	r2, r3
 800449c:	d019      	beq.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800449e:	4b24      	ldr	r3, [pc, #144]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044a8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80044aa:	4b21      	ldr	r3, [pc, #132]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044b0:	4a1f      	ldr	r2, [pc, #124]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80044ba:	4b1d      	ldr	r3, [pc, #116]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044c0:	4a1b      	ldr	r2, [pc, #108]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80044ca:	4a19      	ldr	r2, [pc, #100]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	f003 0301 	and.w	r3, r3, #1
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d016      	beq.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044dc:	f7fd fa58 	bl	8001990 <HAL_GetTick>
 80044e0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044e2:	e00b      	b.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044e4:	f7fd fa54 	bl	8001990 <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d902      	bls.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	74fb      	strb	r3, [r7, #19]
            break;
 80044fa:	e006      	b.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044fc:	4b0c      	ldr	r3, [pc, #48]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004502:	f003 0302 	and.w	r3, r3, #2
 8004506:	2b00      	cmp	r3, #0
 8004508:	d0ec      	beq.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800450a:	7cfb      	ldrb	r3, [r7, #19]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d10b      	bne.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004510:	4b07      	ldr	r3, [pc, #28]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004512:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004516:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800451e:	4904      	ldr	r1, [pc, #16]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004520:	4313      	orrs	r3, r2
 8004522:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004526:	e009      	b.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004528:	7cfb      	ldrb	r3, [r7, #19]
 800452a:	74bb      	strb	r3, [r7, #18]
 800452c:	e006      	b.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800452e:	bf00      	nop
 8004530:	40021000 	.word	0x40021000
 8004534:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004538:	7cfb      	ldrb	r3, [r7, #19]
 800453a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800453c:	7c7b      	ldrb	r3, [r7, #17]
 800453e:	2b01      	cmp	r3, #1
 8004540:	d105      	bne.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004542:	4b8a      	ldr	r3, [pc, #552]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004546:	4a89      	ldr	r2, [pc, #548]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004548:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800454c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0301 	and.w	r3, r3, #1
 8004556:	2b00      	cmp	r3, #0
 8004558:	d00a      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800455a:	4b84      	ldr	r3, [pc, #528]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800455c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004560:	f023 0203 	bic.w	r2, r3, #3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6a1b      	ldr	r3, [r3, #32]
 8004568:	4980      	ldr	r1, [pc, #512]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800456a:	4313      	orrs	r3, r2
 800456c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 0302 	and.w	r3, r3, #2
 8004578:	2b00      	cmp	r3, #0
 800457a:	d00a      	beq.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800457c:	4b7b      	ldr	r3, [pc, #492]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800457e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004582:	f023 020c 	bic.w	r2, r3, #12
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458a:	4978      	ldr	r1, [pc, #480]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800458c:	4313      	orrs	r3, r2
 800458e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 0320 	and.w	r3, r3, #32
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00a      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800459e:	4b73      	ldr	r3, [pc, #460]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045a4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ac:	496f      	ldr	r1, [pc, #444]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045ae:	4313      	orrs	r3, r2
 80045b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d00a      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80045c0:	4b6a      	ldr	r3, [pc, #424]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045c6:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045ce:	4967      	ldr	r1, [pc, #412]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045d0:	4313      	orrs	r3, r2
 80045d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d00a      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80045e2:	4b62      	ldr	r3, [pc, #392]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f0:	495e      	ldr	r1, [pc, #376]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045f2:	4313      	orrs	r3, r2
 80045f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004600:	2b00      	cmp	r3, #0
 8004602:	d00a      	beq.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004604:	4b59      	ldr	r3, [pc, #356]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800460a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004612:	4956      	ldr	r1, [pc, #344]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004614:	4313      	orrs	r3, r2
 8004616:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00a      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004626:	4b51      	ldr	r3, [pc, #324]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004628:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800462c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004634:	494d      	ldr	r1, [pc, #308]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004636:	4313      	orrs	r3, r2
 8004638:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004644:	2b00      	cmp	r3, #0
 8004646:	d028      	beq.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004648:	4b48      	ldr	r3, [pc, #288]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800464a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800464e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004656:	4945      	ldr	r1, [pc, #276]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004658:	4313      	orrs	r3, r2
 800465a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004662:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004666:	d106      	bne.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004668:	4b40      	ldr	r3, [pc, #256]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	4a3f      	ldr	r2, [pc, #252]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800466e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004672:	60d3      	str	r3, [r2, #12]
 8004674:	e011      	b.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800467e:	d10c      	bne.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	3304      	adds	r3, #4
 8004684:	2101      	movs	r1, #1
 8004686:	4618      	mov	r0, r3
 8004688:	f000 f882 	bl	8004790 <RCCEx_PLLSAI1_Config>
 800468c:	4603      	mov	r3, r0
 800468e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004690:	7cfb      	ldrb	r3, [r7, #19]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d001      	beq.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8004696:	7cfb      	ldrb	r3, [r7, #19]
 8004698:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d028      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80046a6:	4b31      	ldr	r3, [pc, #196]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ac:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046b4:	492d      	ldr	r1, [pc, #180]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046b6:	4313      	orrs	r3, r2
 80046b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046c4:	d106      	bne.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046c6:	4b29      	ldr	r3, [pc, #164]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	4a28      	ldr	r2, [pc, #160]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046d0:	60d3      	str	r3, [r2, #12]
 80046d2:	e011      	b.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80046dc:	d10c      	bne.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	3304      	adds	r3, #4
 80046e2:	2101      	movs	r1, #1
 80046e4:	4618      	mov	r0, r3
 80046e6:	f000 f853 	bl	8004790 <RCCEx_PLLSAI1_Config>
 80046ea:	4603      	mov	r3, r0
 80046ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80046ee:	7cfb      	ldrb	r3, [r7, #19]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d001      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80046f4:	7cfb      	ldrb	r3, [r7, #19]
 80046f6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004700:	2b00      	cmp	r3, #0
 8004702:	d01c      	beq.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004704:	4b19      	ldr	r3, [pc, #100]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800470a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004712:	4916      	ldr	r1, [pc, #88]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004714:	4313      	orrs	r3, r2
 8004716:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800471e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004722:	d10c      	bne.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	3304      	adds	r3, #4
 8004728:	2102      	movs	r1, #2
 800472a:	4618      	mov	r0, r3
 800472c:	f000 f830 	bl	8004790 <RCCEx_PLLSAI1_Config>
 8004730:	4603      	mov	r3, r0
 8004732:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004734:	7cfb      	ldrb	r3, [r7, #19]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d001      	beq.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800473a:	7cfb      	ldrb	r3, [r7, #19]
 800473c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d00a      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800474a:	4b08      	ldr	r3, [pc, #32]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800474c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004750:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004758:	4904      	ldr	r1, [pc, #16]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800475a:	4313      	orrs	r3, r2
 800475c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004760:	7cbb      	ldrb	r3, [r7, #18]
}
 8004762:	4618      	mov	r0, r3
 8004764:	3718      	adds	r7, #24
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
 800476a:	bf00      	nop
 800476c:	40021000 	.word	0x40021000

08004770 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004770:	b480      	push	{r7}
 8004772:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004774:	4b05      	ldr	r3, [pc, #20]	; (800478c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a04      	ldr	r2, [pc, #16]	; (800478c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800477a:	f043 0304 	orr.w	r3, r3, #4
 800477e:	6013      	str	r3, [r2, #0]
}
 8004780:	bf00      	nop
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr
 800478a:	bf00      	nop
 800478c:	40021000 	.word	0x40021000

08004790 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b084      	sub	sp, #16
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800479a:	2300      	movs	r3, #0
 800479c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800479e:	4b74      	ldr	r3, [pc, #464]	; (8004970 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	f003 0303 	and.w	r3, r3, #3
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d018      	beq.n	80047dc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80047aa:	4b71      	ldr	r3, [pc, #452]	; (8004970 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	f003 0203 	and.w	r2, r3, #3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d10d      	bne.n	80047d6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
       ||
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d009      	beq.n	80047d6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80047c2:	4b6b      	ldr	r3, [pc, #428]	; (8004970 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	091b      	lsrs	r3, r3, #4
 80047c8:	f003 0307 	and.w	r3, r3, #7
 80047cc:	1c5a      	adds	r2, r3, #1
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	685b      	ldr	r3, [r3, #4]
       ||
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d047      	beq.n	8004866 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	73fb      	strb	r3, [r7, #15]
 80047da:	e044      	b.n	8004866 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	2b03      	cmp	r3, #3
 80047e2:	d018      	beq.n	8004816 <RCCEx_PLLSAI1_Config+0x86>
 80047e4:	2b03      	cmp	r3, #3
 80047e6:	d825      	bhi.n	8004834 <RCCEx_PLLSAI1_Config+0xa4>
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d002      	beq.n	80047f2 <RCCEx_PLLSAI1_Config+0x62>
 80047ec:	2b02      	cmp	r3, #2
 80047ee:	d009      	beq.n	8004804 <RCCEx_PLLSAI1_Config+0x74>
 80047f0:	e020      	b.n	8004834 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80047f2:	4b5f      	ldr	r3, [pc, #380]	; (8004970 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0302 	and.w	r3, r3, #2
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d11d      	bne.n	800483a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004802:	e01a      	b.n	800483a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004804:	4b5a      	ldr	r3, [pc, #360]	; (8004970 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800480c:	2b00      	cmp	r3, #0
 800480e:	d116      	bne.n	800483e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004814:	e013      	b.n	800483e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004816:	4b56      	ldr	r3, [pc, #344]	; (8004970 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800481e:	2b00      	cmp	r3, #0
 8004820:	d10f      	bne.n	8004842 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004822:	4b53      	ldr	r3, [pc, #332]	; (8004970 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d109      	bne.n	8004842 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004832:	e006      	b.n	8004842 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	73fb      	strb	r3, [r7, #15]
      break;
 8004838:	e004      	b.n	8004844 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800483a:	bf00      	nop
 800483c:	e002      	b.n	8004844 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800483e:	bf00      	nop
 8004840:	e000      	b.n	8004844 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004842:	bf00      	nop
    }

    if(status == HAL_OK)
 8004844:	7bfb      	ldrb	r3, [r7, #15]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d10d      	bne.n	8004866 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800484a:	4b49      	ldr	r3, [pc, #292]	; (8004970 <RCCEx_PLLSAI1_Config+0x1e0>)
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6819      	ldr	r1, [r3, #0]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	3b01      	subs	r3, #1
 800485c:	011b      	lsls	r3, r3, #4
 800485e:	430b      	orrs	r3, r1
 8004860:	4943      	ldr	r1, [pc, #268]	; (8004970 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004862:	4313      	orrs	r3, r2
 8004864:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004866:	7bfb      	ldrb	r3, [r7, #15]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d17c      	bne.n	8004966 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800486c:	4b40      	ldr	r3, [pc, #256]	; (8004970 <RCCEx_PLLSAI1_Config+0x1e0>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a3f      	ldr	r2, [pc, #252]	; (8004970 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004872:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004876:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004878:	f7fd f88a 	bl	8001990 <HAL_GetTick>
 800487c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800487e:	e009      	b.n	8004894 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004880:	f7fd f886 	bl	8001990 <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	2b02      	cmp	r3, #2
 800488c:	d902      	bls.n	8004894 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	73fb      	strb	r3, [r7, #15]
        break;
 8004892:	e005      	b.n	80048a0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004894:	4b36      	ldr	r3, [pc, #216]	; (8004970 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d1ef      	bne.n	8004880 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80048a0:	7bfb      	ldrb	r3, [r7, #15]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d15f      	bne.n	8004966 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d110      	bne.n	80048ce <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80048ac:	4b30      	ldr	r3, [pc, #192]	; (8004970 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048ae:	691b      	ldr	r3, [r3, #16]
 80048b0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80048b4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	6892      	ldr	r2, [r2, #8]
 80048bc:	0211      	lsls	r1, r2, #8
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	68d2      	ldr	r2, [r2, #12]
 80048c2:	06d2      	lsls	r2, r2, #27
 80048c4:	430a      	orrs	r2, r1
 80048c6:	492a      	ldr	r1, [pc, #168]	; (8004970 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048c8:	4313      	orrs	r3, r2
 80048ca:	610b      	str	r3, [r1, #16]
 80048cc:	e027      	b.n	800491e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d112      	bne.n	80048fa <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80048d4:	4b26      	ldr	r3, [pc, #152]	; (8004970 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048d6:	691b      	ldr	r3, [r3, #16]
 80048d8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80048dc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	6892      	ldr	r2, [r2, #8]
 80048e4:	0211      	lsls	r1, r2, #8
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	6912      	ldr	r2, [r2, #16]
 80048ea:	0852      	lsrs	r2, r2, #1
 80048ec:	3a01      	subs	r2, #1
 80048ee:	0552      	lsls	r2, r2, #21
 80048f0:	430a      	orrs	r2, r1
 80048f2:	491f      	ldr	r1, [pc, #124]	; (8004970 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048f4:	4313      	orrs	r3, r2
 80048f6:	610b      	str	r3, [r1, #16]
 80048f8:	e011      	b.n	800491e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80048fa:	4b1d      	ldr	r3, [pc, #116]	; (8004970 <RCCEx_PLLSAI1_Config+0x1e0>)
 80048fc:	691b      	ldr	r3, [r3, #16]
 80048fe:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004902:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	6892      	ldr	r2, [r2, #8]
 800490a:	0211      	lsls	r1, r2, #8
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	6952      	ldr	r2, [r2, #20]
 8004910:	0852      	lsrs	r2, r2, #1
 8004912:	3a01      	subs	r2, #1
 8004914:	0652      	lsls	r2, r2, #25
 8004916:	430a      	orrs	r2, r1
 8004918:	4915      	ldr	r1, [pc, #84]	; (8004970 <RCCEx_PLLSAI1_Config+0x1e0>)
 800491a:	4313      	orrs	r3, r2
 800491c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800491e:	4b14      	ldr	r3, [pc, #80]	; (8004970 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a13      	ldr	r2, [pc, #76]	; (8004970 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004924:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004928:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800492a:	f7fd f831 	bl	8001990 <HAL_GetTick>
 800492e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004930:	e009      	b.n	8004946 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004932:	f7fd f82d 	bl	8001990 <HAL_GetTick>
 8004936:	4602      	mov	r2, r0
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	2b02      	cmp	r3, #2
 800493e:	d902      	bls.n	8004946 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004940:	2303      	movs	r3, #3
 8004942:	73fb      	strb	r3, [r7, #15]
          break;
 8004944:	e005      	b.n	8004952 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004946:	4b0a      	ldr	r3, [pc, #40]	; (8004970 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800494e:	2b00      	cmp	r3, #0
 8004950:	d0ef      	beq.n	8004932 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004952:	7bfb      	ldrb	r3, [r7, #15]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d106      	bne.n	8004966 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004958:	4b05      	ldr	r3, [pc, #20]	; (8004970 <RCCEx_PLLSAI1_Config+0x1e0>)
 800495a:	691a      	ldr	r2, [r3, #16]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	699b      	ldr	r3, [r3, #24]
 8004960:	4903      	ldr	r1, [pc, #12]	; (8004970 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004962:	4313      	orrs	r3, r2
 8004964:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004966:	7bfb      	ldrb	r3, [r7, #15]
}
 8004968:	4618      	mov	r0, r3
 800496a:	3710      	adds	r7, #16
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}
 8004970:	40021000 	.word	0x40021000

08004974 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b082      	sub	sp, #8
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d101      	bne.n	8004986 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e040      	b.n	8004a08 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800498a:	2b00      	cmp	r3, #0
 800498c:	d106      	bne.n	800499c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f7fc fdd6 	bl	8001548 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2224      	movs	r2, #36	; 0x24
 80049a0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f022 0201 	bic.w	r2, r2, #1
 80049b0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f000 fbc2 	bl	800513c <UART_SetConfig>
 80049b8:	4603      	mov	r3, r0
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d101      	bne.n	80049c2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e022      	b.n	8004a08 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d002      	beq.n	80049d0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f000 fde2 	bl	8005594 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	685a      	ldr	r2, [r3, #4]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80049de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	689a      	ldr	r2, [r3, #8]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80049ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f042 0201 	orr.w	r2, r2, #1
 80049fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f000 fe69 	bl	80056d8 <UART_CheckIdleState>
 8004a06:	4603      	mov	r3, r0
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3708      	adds	r7, #8
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}

08004a10 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b08a      	sub	sp, #40	; 0x28
 8004a14:	af02      	add	r7, sp, #8
 8004a16:	60f8      	str	r0, [r7, #12]
 8004a18:	60b9      	str	r1, [r7, #8]
 8004a1a:	603b      	str	r3, [r7, #0]
 8004a1c:	4613      	mov	r3, r2
 8004a1e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a24:	2b20      	cmp	r3, #32
 8004a26:	f040 8082 	bne.w	8004b2e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d002      	beq.n	8004a36 <HAL_UART_Transmit+0x26>
 8004a30:	88fb      	ldrh	r3, [r7, #6]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d101      	bne.n	8004a3a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e07a      	b.n	8004b30 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d101      	bne.n	8004a48 <HAL_UART_Transmit+0x38>
 8004a44:	2302      	movs	r3, #2
 8004a46:	e073      	b.n	8004b30 <HAL_UART_Transmit+0x120>
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2200      	movs	r2, #0
 8004a54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2221      	movs	r2, #33	; 0x21
 8004a5c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a5e:	f7fc ff97 	bl	8001990 <HAL_GetTick>
 8004a62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	88fa      	ldrh	r2, [r7, #6]
 8004a68:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	88fa      	ldrh	r2, [r7, #6]
 8004a70:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a7c:	d108      	bne.n	8004a90 <HAL_UART_Transmit+0x80>
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	691b      	ldr	r3, [r3, #16]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d104      	bne.n	8004a90 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004a86:	2300      	movs	r3, #0
 8004a88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	61bb      	str	r3, [r7, #24]
 8004a8e:	e003      	b.n	8004a98 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a94:	2300      	movs	r3, #0
 8004a96:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004aa0:	e02d      	b.n	8004afe <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	9300      	str	r3, [sp, #0]
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	2180      	movs	r1, #128	; 0x80
 8004aac:	68f8      	ldr	r0, [r7, #12]
 8004aae:	f000 fe5c 	bl	800576a <UART_WaitOnFlagUntilTimeout>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d001      	beq.n	8004abc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004ab8:	2303      	movs	r3, #3
 8004aba:	e039      	b.n	8004b30 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004abc:	69fb      	ldr	r3, [r7, #28]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d10b      	bne.n	8004ada <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ac2:	69bb      	ldr	r3, [r7, #24]
 8004ac4:	881a      	ldrh	r2, [r3, #0]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ace:	b292      	uxth	r2, r2
 8004ad0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004ad2:	69bb      	ldr	r3, [r7, #24]
 8004ad4:	3302      	adds	r3, #2
 8004ad6:	61bb      	str	r3, [r7, #24]
 8004ad8:	e008      	b.n	8004aec <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	781a      	ldrb	r2, [r3, #0]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	b292      	uxth	r2, r2
 8004ae4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004ae6:	69fb      	ldr	r3, [r7, #28]
 8004ae8:	3301      	adds	r3, #1
 8004aea:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	3b01      	subs	r3, #1
 8004af6:	b29a      	uxth	r2, r3
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004b04:	b29b      	uxth	r3, r3
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d1cb      	bne.n	8004aa2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	9300      	str	r3, [sp, #0]
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	2200      	movs	r2, #0
 8004b12:	2140      	movs	r1, #64	; 0x40
 8004b14:	68f8      	ldr	r0, [r7, #12]
 8004b16:	f000 fe28 	bl	800576a <UART_WaitOnFlagUntilTimeout>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d001      	beq.n	8004b24 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004b20:	2303      	movs	r3, #3
 8004b22:	e005      	b.n	8004b30 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2220      	movs	r2, #32
 8004b28:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	e000      	b.n	8004b30 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004b2e:	2302      	movs	r3, #2
  }
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3720      	adds	r7, #32
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}

08004b38 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b0ba      	sub	sp, #232	; 0xe8
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	69db      	ldr	r3, [r3, #28]
 8004b46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004b5e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004b62:	f640 030f 	movw	r3, #2063	; 0x80f
 8004b66:	4013      	ands	r3, r2
 8004b68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004b6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d115      	bne.n	8004ba0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004b74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b78:	f003 0320 	and.w	r3, r3, #32
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d00f      	beq.n	8004ba0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004b80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b84:	f003 0320 	and.w	r3, r3, #32
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d009      	beq.n	8004ba0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	f000 82a6 	beq.w	80050e2 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	4798      	blx	r3
      }
      return;
 8004b9e:	e2a0      	b.n	80050e2 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004ba0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	f000 8117 	beq.w	8004dd8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004baa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004bae:	f003 0301 	and.w	r3, r3, #1
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d106      	bne.n	8004bc4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004bb6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004bba:	4b85      	ldr	r3, [pc, #532]	; (8004dd0 <HAL_UART_IRQHandler+0x298>)
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	f000 810a 	beq.w	8004dd8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004bc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bc8:	f003 0301 	and.w	r3, r3, #1
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d011      	beq.n	8004bf4 <HAL_UART_IRQHandler+0xbc>
 8004bd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d00b      	beq.n	8004bf4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	2201      	movs	r2, #1
 8004be2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bea:	f043 0201 	orr.w	r2, r3, #1
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004bf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bf8:	f003 0302 	and.w	r3, r3, #2
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d011      	beq.n	8004c24 <HAL_UART_IRQHandler+0xec>
 8004c00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c04:	f003 0301 	and.w	r3, r3, #1
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d00b      	beq.n	8004c24 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	2202      	movs	r2, #2
 8004c12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c1a:	f043 0204 	orr.w	r2, r3, #4
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004c24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c28:	f003 0304 	and.w	r3, r3, #4
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d011      	beq.n	8004c54 <HAL_UART_IRQHandler+0x11c>
 8004c30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c34:	f003 0301 	and.w	r3, r3, #1
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d00b      	beq.n	8004c54 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	2204      	movs	r2, #4
 8004c42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c4a:	f043 0202 	orr.w	r2, r3, #2
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004c54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c58:	f003 0308 	and.w	r3, r3, #8
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d017      	beq.n	8004c90 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004c60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c64:	f003 0320 	and.w	r3, r3, #32
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d105      	bne.n	8004c78 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004c6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c70:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d00b      	beq.n	8004c90 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	2208      	movs	r2, #8
 8004c7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c86:	f043 0208 	orr.w	r2, r3, #8
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004c90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d012      	beq.n	8004cc2 <HAL_UART_IRQHandler+0x18a>
 8004c9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ca0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d00c      	beq.n	8004cc2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004cb0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cb8:	f043 0220 	orr.w	r2, r3, #32
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	f000 820c 	beq.w	80050e6 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004cce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cd2:	f003 0320 	and.w	r3, r3, #32
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d00d      	beq.n	8004cf6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004cda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cde:	f003 0320 	and.w	r3, r3, #32
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d007      	beq.n	8004cf6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d003      	beq.n	8004cf6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cfc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d0a:	2b40      	cmp	r3, #64	; 0x40
 8004d0c:	d005      	beq.n	8004d1a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004d0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004d12:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d04f      	beq.n	8004dba <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f000 fde9 	bl	80058f2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d2a:	2b40      	cmp	r3, #64	; 0x40
 8004d2c:	d141      	bne.n	8004db2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	3308      	adds	r3, #8
 8004d34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d38:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004d3c:	e853 3f00 	ldrex	r3, [r3]
 8004d40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004d44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004d48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	3308      	adds	r3, #8
 8004d56:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004d5a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004d5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d62:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004d66:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004d6a:	e841 2300 	strex	r3, r2, [r1]
 8004d6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004d72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d1d9      	bne.n	8004d2e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d013      	beq.n	8004daa <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d86:	4a13      	ldr	r2, [pc, #76]	; (8004dd4 <HAL_UART_IRQHandler+0x29c>)
 8004d88:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f7fc ff7d 	bl	8001c8e <HAL_DMA_Abort_IT>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d017      	beq.n	8004dca <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004da4:	4610      	mov	r0, r2
 8004da6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004da8:	e00f      	b.n	8004dca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f000 f9b0 	bl	8005110 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004db0:	e00b      	b.n	8004dca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f000 f9ac 	bl	8005110 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004db8:	e007      	b.n	8004dca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f000 f9a8 	bl	8005110 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004dc8:	e18d      	b.n	80050e6 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dca:	bf00      	nop
    return;
 8004dcc:	e18b      	b.n	80050e6 <HAL_UART_IRQHandler+0x5ae>
 8004dce:	bf00      	nop
 8004dd0:	04000120 	.word	0x04000120
 8004dd4:	080059b9 	.word	0x080059b9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	f040 8146 	bne.w	800506e <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004de2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004de6:	f003 0310 	and.w	r3, r3, #16
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	f000 813f 	beq.w	800506e <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004df0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004df4:	f003 0310 	and.w	r3, r3, #16
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	f000 8138 	beq.w	800506e <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	2210      	movs	r2, #16
 8004e04:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e10:	2b40      	cmp	r3, #64	; 0x40
 8004e12:	f040 80b4 	bne.w	8004f7e <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004e22:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	f000 815f 	beq.w	80050ea <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004e32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004e36:	429a      	cmp	r2, r3
 8004e38:	f080 8157 	bcs.w	80050ea <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004e42:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 0320 	and.w	r3, r3, #32
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	f040 8085 	bne.w	8004f62 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e60:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e64:	e853 3f00 	ldrex	r3, [r3]
 8004e68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004e6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e74:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004e82:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004e86:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e8a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004e8e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004e92:	e841 2300 	strex	r3, r2, [r1]
 8004e96:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004e9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d1da      	bne.n	8004e58 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	3308      	adds	r3, #8
 8004ea8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eaa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004eac:	e853 3f00 	ldrex	r3, [r3]
 8004eb0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004eb2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004eb4:	f023 0301 	bic.w	r3, r3, #1
 8004eb8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	3308      	adds	r3, #8
 8004ec2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004ec6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004eca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ecc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004ece:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004ed2:	e841 2300 	strex	r3, r2, [r1]
 8004ed6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004ed8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d1e1      	bne.n	8004ea2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	3308      	adds	r3, #8
 8004ee4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ee8:	e853 3f00 	ldrex	r3, [r3]
 8004eec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004eee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ef0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ef4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	3308      	adds	r3, #8
 8004efe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004f02:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004f04:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f06:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004f08:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004f0a:	e841 2300 	strex	r3, r2, [r1]
 8004f0e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004f10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d1e3      	bne.n	8004ede <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2220      	movs	r2, #32
 8004f1a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f2a:	e853 3f00 	ldrex	r3, [r3]
 8004f2e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004f30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f32:	f023 0310 	bic.w	r3, r3, #16
 8004f36:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	461a      	mov	r2, r3
 8004f40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004f44:	65bb      	str	r3, [r7, #88]	; 0x58
 8004f46:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f48:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004f4a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004f4c:	e841 2300 	strex	r3, r2, [r1]
 8004f50:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004f52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d1e4      	bne.n	8004f22 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f7fc fe58 	bl	8001c12 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	1ad3      	subs	r3, r2, r3
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	4619      	mov	r1, r3
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f000 f8d4 	bl	8005124 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004f7c:	e0b5      	b.n	80050ea <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	1ad3      	subs	r3, r2, r3
 8004f8e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	f000 80a7 	beq.w	80050ee <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8004fa0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	f000 80a2 	beq.w	80050ee <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fb2:	e853 3f00 	ldrex	r3, [r3]
 8004fb6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004fbe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004fcc:	647b      	str	r3, [r7, #68]	; 0x44
 8004fce:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fd0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004fd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004fd4:	e841 2300 	strex	r3, r2, [r1]
 8004fd8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004fda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d1e4      	bne.n	8004faa <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	3308      	adds	r3, #8
 8004fe6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fea:	e853 3f00 	ldrex	r3, [r3]
 8004fee:	623b      	str	r3, [r7, #32]
   return(result);
 8004ff0:	6a3b      	ldr	r3, [r7, #32]
 8004ff2:	f023 0301 	bic.w	r3, r3, #1
 8004ff6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	3308      	adds	r3, #8
 8005000:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005004:	633a      	str	r2, [r7, #48]	; 0x30
 8005006:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005008:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800500a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800500c:	e841 2300 	strex	r3, r2, [r1]
 8005010:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005014:	2b00      	cmp	r3, #0
 8005016:	d1e3      	bne.n	8004fe0 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2220      	movs	r2, #32
 800501c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2200      	movs	r2, #0
 8005028:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	e853 3f00 	ldrex	r3, [r3]
 8005036:	60fb      	str	r3, [r7, #12]
   return(result);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f023 0310 	bic.w	r3, r3, #16
 800503e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	461a      	mov	r2, r3
 8005048:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800504c:	61fb      	str	r3, [r7, #28]
 800504e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005050:	69b9      	ldr	r1, [r7, #24]
 8005052:	69fa      	ldr	r2, [r7, #28]
 8005054:	e841 2300 	strex	r3, r2, [r1]
 8005058:	617b      	str	r3, [r7, #20]
   return(result);
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d1e4      	bne.n	800502a <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005060:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005064:	4619      	mov	r1, r3
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f000 f85c 	bl	8005124 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800506c:	e03f      	b.n	80050ee <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800506e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005072:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005076:	2b00      	cmp	r3, #0
 8005078:	d00e      	beq.n	8005098 <HAL_UART_IRQHandler+0x560>
 800507a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800507e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005082:	2b00      	cmp	r3, #0
 8005084:	d008      	beq.n	8005098 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800508e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f000 fcd1 	bl	8005a38 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005096:	e02d      	b.n	80050f4 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005098:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800509c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d00e      	beq.n	80050c2 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80050a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d008      	beq.n	80050c2 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d01c      	beq.n	80050f2 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	4798      	blx	r3
    }
    return;
 80050c0:	e017      	b.n	80050f2 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80050c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d012      	beq.n	80050f4 <HAL_UART_IRQHandler+0x5bc>
 80050ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d00c      	beq.n	80050f4 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f000 fc82 	bl	80059e4 <UART_EndTransmit_IT>
    return;
 80050e0:	e008      	b.n	80050f4 <HAL_UART_IRQHandler+0x5bc>
      return;
 80050e2:	bf00      	nop
 80050e4:	e006      	b.n	80050f4 <HAL_UART_IRQHandler+0x5bc>
    return;
 80050e6:	bf00      	nop
 80050e8:	e004      	b.n	80050f4 <HAL_UART_IRQHandler+0x5bc>
      return;
 80050ea:	bf00      	nop
 80050ec:	e002      	b.n	80050f4 <HAL_UART_IRQHandler+0x5bc>
      return;
 80050ee:	bf00      	nop
 80050f0:	e000      	b.n	80050f4 <HAL_UART_IRQHandler+0x5bc>
    return;
 80050f2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80050f4:	37e8      	adds	r7, #232	; 0xe8
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop

080050fc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b083      	sub	sp, #12
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005104:	bf00      	nop
 8005106:	370c      	adds	r7, #12
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr

08005110 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005110:	b480      	push	{r7}
 8005112:	b083      	sub	sp, #12
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005118:	bf00      	nop
 800511a:	370c      	adds	r7, #12
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr

08005124 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005124:	b480      	push	{r7}
 8005126:	b083      	sub	sp, #12
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	460b      	mov	r3, r1
 800512e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005130:	bf00      	nop
 8005132:	370c      	adds	r7, #12
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr

0800513c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800513c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005140:	b08a      	sub	sp, #40	; 0x28
 8005142:	af00      	add	r7, sp, #0
 8005144:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005146:	2300      	movs	r3, #0
 8005148:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	689a      	ldr	r2, [r3, #8]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	691b      	ldr	r3, [r3, #16]
 8005154:	431a      	orrs	r2, r3
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	695b      	ldr	r3, [r3, #20]
 800515a:	431a      	orrs	r2, r3
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	69db      	ldr	r3, [r3, #28]
 8005160:	4313      	orrs	r3, r2
 8005162:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	4bb4      	ldr	r3, [pc, #720]	; (800543c <UART_SetConfig+0x300>)
 800516c:	4013      	ands	r3, r2
 800516e:	68fa      	ldr	r2, [r7, #12]
 8005170:	6812      	ldr	r2, [r2, #0]
 8005172:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005174:	430b      	orrs	r3, r1
 8005176:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	68da      	ldr	r2, [r3, #12]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	430a      	orrs	r2, r1
 800518c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	699b      	ldr	r3, [r3, #24]
 8005192:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4aa9      	ldr	r2, [pc, #676]	; (8005440 <UART_SetConfig+0x304>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d004      	beq.n	80051a8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	6a1b      	ldr	r3, [r3, #32]
 80051a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051a4:	4313      	orrs	r3, r2
 80051a6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051b8:	430a      	orrs	r2, r1
 80051ba:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4aa0      	ldr	r2, [pc, #640]	; (8005444 <UART_SetConfig+0x308>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d126      	bne.n	8005214 <UART_SetConfig+0xd8>
 80051c6:	4ba0      	ldr	r3, [pc, #640]	; (8005448 <UART_SetConfig+0x30c>)
 80051c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051cc:	f003 0303 	and.w	r3, r3, #3
 80051d0:	2b03      	cmp	r3, #3
 80051d2:	d81b      	bhi.n	800520c <UART_SetConfig+0xd0>
 80051d4:	a201      	add	r2, pc, #4	; (adr r2, 80051dc <UART_SetConfig+0xa0>)
 80051d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051da:	bf00      	nop
 80051dc:	080051ed 	.word	0x080051ed
 80051e0:	080051fd 	.word	0x080051fd
 80051e4:	080051f5 	.word	0x080051f5
 80051e8:	08005205 	.word	0x08005205
 80051ec:	2301      	movs	r3, #1
 80051ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051f2:	e080      	b.n	80052f6 <UART_SetConfig+0x1ba>
 80051f4:	2302      	movs	r3, #2
 80051f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051fa:	e07c      	b.n	80052f6 <UART_SetConfig+0x1ba>
 80051fc:	2304      	movs	r3, #4
 80051fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005202:	e078      	b.n	80052f6 <UART_SetConfig+0x1ba>
 8005204:	2308      	movs	r3, #8
 8005206:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800520a:	e074      	b.n	80052f6 <UART_SetConfig+0x1ba>
 800520c:	2310      	movs	r3, #16
 800520e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005212:	e070      	b.n	80052f6 <UART_SetConfig+0x1ba>
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a8c      	ldr	r2, [pc, #560]	; (800544c <UART_SetConfig+0x310>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d138      	bne.n	8005290 <UART_SetConfig+0x154>
 800521e:	4b8a      	ldr	r3, [pc, #552]	; (8005448 <UART_SetConfig+0x30c>)
 8005220:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005224:	f003 030c 	and.w	r3, r3, #12
 8005228:	2b0c      	cmp	r3, #12
 800522a:	d82d      	bhi.n	8005288 <UART_SetConfig+0x14c>
 800522c:	a201      	add	r2, pc, #4	; (adr r2, 8005234 <UART_SetConfig+0xf8>)
 800522e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005232:	bf00      	nop
 8005234:	08005269 	.word	0x08005269
 8005238:	08005289 	.word	0x08005289
 800523c:	08005289 	.word	0x08005289
 8005240:	08005289 	.word	0x08005289
 8005244:	08005279 	.word	0x08005279
 8005248:	08005289 	.word	0x08005289
 800524c:	08005289 	.word	0x08005289
 8005250:	08005289 	.word	0x08005289
 8005254:	08005271 	.word	0x08005271
 8005258:	08005289 	.word	0x08005289
 800525c:	08005289 	.word	0x08005289
 8005260:	08005289 	.word	0x08005289
 8005264:	08005281 	.word	0x08005281
 8005268:	2300      	movs	r3, #0
 800526a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800526e:	e042      	b.n	80052f6 <UART_SetConfig+0x1ba>
 8005270:	2302      	movs	r3, #2
 8005272:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005276:	e03e      	b.n	80052f6 <UART_SetConfig+0x1ba>
 8005278:	2304      	movs	r3, #4
 800527a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800527e:	e03a      	b.n	80052f6 <UART_SetConfig+0x1ba>
 8005280:	2308      	movs	r3, #8
 8005282:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005286:	e036      	b.n	80052f6 <UART_SetConfig+0x1ba>
 8005288:	2310      	movs	r3, #16
 800528a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800528e:	e032      	b.n	80052f6 <UART_SetConfig+0x1ba>
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a6a      	ldr	r2, [pc, #424]	; (8005440 <UART_SetConfig+0x304>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d12a      	bne.n	80052f0 <UART_SetConfig+0x1b4>
 800529a:	4b6b      	ldr	r3, [pc, #428]	; (8005448 <UART_SetConfig+0x30c>)
 800529c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052a0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80052a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80052a8:	d01a      	beq.n	80052e0 <UART_SetConfig+0x1a4>
 80052aa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80052ae:	d81b      	bhi.n	80052e8 <UART_SetConfig+0x1ac>
 80052b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052b4:	d00c      	beq.n	80052d0 <UART_SetConfig+0x194>
 80052b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052ba:	d815      	bhi.n	80052e8 <UART_SetConfig+0x1ac>
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d003      	beq.n	80052c8 <UART_SetConfig+0x18c>
 80052c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052c4:	d008      	beq.n	80052d8 <UART_SetConfig+0x19c>
 80052c6:	e00f      	b.n	80052e8 <UART_SetConfig+0x1ac>
 80052c8:	2300      	movs	r3, #0
 80052ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052ce:	e012      	b.n	80052f6 <UART_SetConfig+0x1ba>
 80052d0:	2302      	movs	r3, #2
 80052d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052d6:	e00e      	b.n	80052f6 <UART_SetConfig+0x1ba>
 80052d8:	2304      	movs	r3, #4
 80052da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052de:	e00a      	b.n	80052f6 <UART_SetConfig+0x1ba>
 80052e0:	2308      	movs	r3, #8
 80052e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052e6:	e006      	b.n	80052f6 <UART_SetConfig+0x1ba>
 80052e8:	2310      	movs	r3, #16
 80052ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052ee:	e002      	b.n	80052f6 <UART_SetConfig+0x1ba>
 80052f0:	2310      	movs	r3, #16
 80052f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a51      	ldr	r2, [pc, #324]	; (8005440 <UART_SetConfig+0x304>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d17a      	bne.n	80053f6 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005300:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005304:	2b08      	cmp	r3, #8
 8005306:	d824      	bhi.n	8005352 <UART_SetConfig+0x216>
 8005308:	a201      	add	r2, pc, #4	; (adr r2, 8005310 <UART_SetConfig+0x1d4>)
 800530a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800530e:	bf00      	nop
 8005310:	08005335 	.word	0x08005335
 8005314:	08005353 	.word	0x08005353
 8005318:	0800533d 	.word	0x0800533d
 800531c:	08005353 	.word	0x08005353
 8005320:	08005343 	.word	0x08005343
 8005324:	08005353 	.word	0x08005353
 8005328:	08005353 	.word	0x08005353
 800532c:	08005353 	.word	0x08005353
 8005330:	0800534b 	.word	0x0800534b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005334:	f7fe ff9a 	bl	800426c <HAL_RCC_GetPCLK1Freq>
 8005338:	61f8      	str	r0, [r7, #28]
        break;
 800533a:	e010      	b.n	800535e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800533c:	4b44      	ldr	r3, [pc, #272]	; (8005450 <UART_SetConfig+0x314>)
 800533e:	61fb      	str	r3, [r7, #28]
        break;
 8005340:	e00d      	b.n	800535e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005342:	f7fe fefb 	bl	800413c <HAL_RCC_GetSysClockFreq>
 8005346:	61f8      	str	r0, [r7, #28]
        break;
 8005348:	e009      	b.n	800535e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800534a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800534e:	61fb      	str	r3, [r7, #28]
        break;
 8005350:	e005      	b.n	800535e <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8005352:	2300      	movs	r3, #0
 8005354:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800535c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800535e:	69fb      	ldr	r3, [r7, #28]
 8005360:	2b00      	cmp	r3, #0
 8005362:	f000 8107 	beq.w	8005574 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	685a      	ldr	r2, [r3, #4]
 800536a:	4613      	mov	r3, r2
 800536c:	005b      	lsls	r3, r3, #1
 800536e:	4413      	add	r3, r2
 8005370:	69fa      	ldr	r2, [r7, #28]
 8005372:	429a      	cmp	r2, r3
 8005374:	d305      	bcc.n	8005382 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800537c:	69fa      	ldr	r2, [r7, #28]
 800537e:	429a      	cmp	r2, r3
 8005380:	d903      	bls.n	800538a <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005388:	e0f4      	b.n	8005574 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800538a:	69fb      	ldr	r3, [r7, #28]
 800538c:	2200      	movs	r2, #0
 800538e:	461c      	mov	r4, r3
 8005390:	4615      	mov	r5, r2
 8005392:	f04f 0200 	mov.w	r2, #0
 8005396:	f04f 0300 	mov.w	r3, #0
 800539a:	022b      	lsls	r3, r5, #8
 800539c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80053a0:	0222      	lsls	r2, r4, #8
 80053a2:	68f9      	ldr	r1, [r7, #12]
 80053a4:	6849      	ldr	r1, [r1, #4]
 80053a6:	0849      	lsrs	r1, r1, #1
 80053a8:	2000      	movs	r0, #0
 80053aa:	4688      	mov	r8, r1
 80053ac:	4681      	mov	r9, r0
 80053ae:	eb12 0a08 	adds.w	sl, r2, r8
 80053b2:	eb43 0b09 	adc.w	fp, r3, r9
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	2200      	movs	r2, #0
 80053bc:	603b      	str	r3, [r7, #0]
 80053be:	607a      	str	r2, [r7, #4]
 80053c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80053c4:	4650      	mov	r0, sl
 80053c6:	4659      	mov	r1, fp
 80053c8:	f7fb fc28 	bl	8000c1c <__aeabi_uldivmod>
 80053cc:	4602      	mov	r2, r0
 80053ce:	460b      	mov	r3, r1
 80053d0:	4613      	mov	r3, r2
 80053d2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80053d4:	69bb      	ldr	r3, [r7, #24]
 80053d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053da:	d308      	bcc.n	80053ee <UART_SetConfig+0x2b2>
 80053dc:	69bb      	ldr	r3, [r7, #24]
 80053de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053e2:	d204      	bcs.n	80053ee <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	69ba      	ldr	r2, [r7, #24]
 80053ea:	60da      	str	r2, [r3, #12]
 80053ec:	e0c2      	b.n	8005574 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80053f4:	e0be      	b.n	8005574 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	69db      	ldr	r3, [r3, #28]
 80053fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053fe:	d16a      	bne.n	80054d6 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8005400:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005404:	2b08      	cmp	r3, #8
 8005406:	d834      	bhi.n	8005472 <UART_SetConfig+0x336>
 8005408:	a201      	add	r2, pc, #4	; (adr r2, 8005410 <UART_SetConfig+0x2d4>)
 800540a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800540e:	bf00      	nop
 8005410:	08005435 	.word	0x08005435
 8005414:	08005455 	.word	0x08005455
 8005418:	0800545d 	.word	0x0800545d
 800541c:	08005473 	.word	0x08005473
 8005420:	08005463 	.word	0x08005463
 8005424:	08005473 	.word	0x08005473
 8005428:	08005473 	.word	0x08005473
 800542c:	08005473 	.word	0x08005473
 8005430:	0800546b 	.word	0x0800546b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005434:	f7fe ff1a 	bl	800426c <HAL_RCC_GetPCLK1Freq>
 8005438:	61f8      	str	r0, [r7, #28]
        break;
 800543a:	e020      	b.n	800547e <UART_SetConfig+0x342>
 800543c:	efff69f3 	.word	0xefff69f3
 8005440:	40008000 	.word	0x40008000
 8005444:	40013800 	.word	0x40013800
 8005448:	40021000 	.word	0x40021000
 800544c:	40004400 	.word	0x40004400
 8005450:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005454:	f7fe ff20 	bl	8004298 <HAL_RCC_GetPCLK2Freq>
 8005458:	61f8      	str	r0, [r7, #28]
        break;
 800545a:	e010      	b.n	800547e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800545c:	4b4c      	ldr	r3, [pc, #304]	; (8005590 <UART_SetConfig+0x454>)
 800545e:	61fb      	str	r3, [r7, #28]
        break;
 8005460:	e00d      	b.n	800547e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005462:	f7fe fe6b 	bl	800413c <HAL_RCC_GetSysClockFreq>
 8005466:	61f8      	str	r0, [r7, #28]
        break;
 8005468:	e009      	b.n	800547e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800546a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800546e:	61fb      	str	r3, [r7, #28]
        break;
 8005470:	e005      	b.n	800547e <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8005472:	2300      	movs	r3, #0
 8005474:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800547c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800547e:	69fb      	ldr	r3, [r7, #28]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d077      	beq.n	8005574 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005484:	69fb      	ldr	r3, [r7, #28]
 8005486:	005a      	lsls	r2, r3, #1
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	085b      	lsrs	r3, r3, #1
 800548e:	441a      	add	r2, r3
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	fbb2 f3f3 	udiv	r3, r2, r3
 8005498:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800549a:	69bb      	ldr	r3, [r7, #24]
 800549c:	2b0f      	cmp	r3, #15
 800549e:	d916      	bls.n	80054ce <UART_SetConfig+0x392>
 80054a0:	69bb      	ldr	r3, [r7, #24]
 80054a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054a6:	d212      	bcs.n	80054ce <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80054a8:	69bb      	ldr	r3, [r7, #24]
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	f023 030f 	bic.w	r3, r3, #15
 80054b0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80054b2:	69bb      	ldr	r3, [r7, #24]
 80054b4:	085b      	lsrs	r3, r3, #1
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	f003 0307 	and.w	r3, r3, #7
 80054bc:	b29a      	uxth	r2, r3
 80054be:	8afb      	ldrh	r3, [r7, #22]
 80054c0:	4313      	orrs	r3, r2
 80054c2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	8afa      	ldrh	r2, [r7, #22]
 80054ca:	60da      	str	r2, [r3, #12]
 80054cc:	e052      	b.n	8005574 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80054d4:	e04e      	b.n	8005574 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80054d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80054da:	2b08      	cmp	r3, #8
 80054dc:	d827      	bhi.n	800552e <UART_SetConfig+0x3f2>
 80054de:	a201      	add	r2, pc, #4	; (adr r2, 80054e4 <UART_SetConfig+0x3a8>)
 80054e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054e4:	08005509 	.word	0x08005509
 80054e8:	08005511 	.word	0x08005511
 80054ec:	08005519 	.word	0x08005519
 80054f0:	0800552f 	.word	0x0800552f
 80054f4:	0800551f 	.word	0x0800551f
 80054f8:	0800552f 	.word	0x0800552f
 80054fc:	0800552f 	.word	0x0800552f
 8005500:	0800552f 	.word	0x0800552f
 8005504:	08005527 	.word	0x08005527
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005508:	f7fe feb0 	bl	800426c <HAL_RCC_GetPCLK1Freq>
 800550c:	61f8      	str	r0, [r7, #28]
        break;
 800550e:	e014      	b.n	800553a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005510:	f7fe fec2 	bl	8004298 <HAL_RCC_GetPCLK2Freq>
 8005514:	61f8      	str	r0, [r7, #28]
        break;
 8005516:	e010      	b.n	800553a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005518:	4b1d      	ldr	r3, [pc, #116]	; (8005590 <UART_SetConfig+0x454>)
 800551a:	61fb      	str	r3, [r7, #28]
        break;
 800551c:	e00d      	b.n	800553a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800551e:	f7fe fe0d 	bl	800413c <HAL_RCC_GetSysClockFreq>
 8005522:	61f8      	str	r0, [r7, #28]
        break;
 8005524:	e009      	b.n	800553a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005526:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800552a:	61fb      	str	r3, [r7, #28]
        break;
 800552c:	e005      	b.n	800553a <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800552e:	2300      	movs	r3, #0
 8005530:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005538:	bf00      	nop
    }

    if (pclk != 0U)
 800553a:	69fb      	ldr	r3, [r7, #28]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d019      	beq.n	8005574 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	085a      	lsrs	r2, r3, #1
 8005546:	69fb      	ldr	r3, [r7, #28]
 8005548:	441a      	add	r2, r3
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005552:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005554:	69bb      	ldr	r3, [r7, #24]
 8005556:	2b0f      	cmp	r3, #15
 8005558:	d909      	bls.n	800556e <UART_SetConfig+0x432>
 800555a:	69bb      	ldr	r3, [r7, #24]
 800555c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005560:	d205      	bcs.n	800556e <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005562:	69bb      	ldr	r3, [r7, #24]
 8005564:	b29a      	uxth	r2, r3
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	60da      	str	r2, [r3, #12]
 800556c:	e002      	b.n	8005574 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2200      	movs	r2, #0
 8005578:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2200      	movs	r2, #0
 800557e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005580:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005584:	4618      	mov	r0, r3
 8005586:	3728      	adds	r7, #40	; 0x28
 8005588:	46bd      	mov	sp, r7
 800558a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800558e:	bf00      	nop
 8005590:	00f42400 	.word	0x00f42400

08005594 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005594:	b480      	push	{r7}
 8005596:	b083      	sub	sp, #12
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a0:	f003 0301 	and.w	r3, r3, #1
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d00a      	beq.n	80055be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	430a      	orrs	r2, r1
 80055bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c2:	f003 0302 	and.w	r3, r3, #2
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d00a      	beq.n	80055e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	430a      	orrs	r2, r1
 80055de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e4:	f003 0304 	and.w	r3, r3, #4
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d00a      	beq.n	8005602 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	430a      	orrs	r2, r1
 8005600:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005606:	f003 0308 	and.w	r3, r3, #8
 800560a:	2b00      	cmp	r3, #0
 800560c:	d00a      	beq.n	8005624 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	430a      	orrs	r2, r1
 8005622:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005628:	f003 0310 	and.w	r3, r3, #16
 800562c:	2b00      	cmp	r3, #0
 800562e:	d00a      	beq.n	8005646 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	430a      	orrs	r2, r1
 8005644:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564a:	f003 0320 	and.w	r3, r3, #32
 800564e:	2b00      	cmp	r3, #0
 8005650:	d00a      	beq.n	8005668 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	430a      	orrs	r2, r1
 8005666:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800566c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005670:	2b00      	cmp	r3, #0
 8005672:	d01a      	beq.n	80056aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	430a      	orrs	r2, r1
 8005688:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800568e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005692:	d10a      	bne.n	80056aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	430a      	orrs	r2, r1
 80056a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d00a      	beq.n	80056cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	430a      	orrs	r2, r1
 80056ca:	605a      	str	r2, [r3, #4]
  }
}
 80056cc:	bf00      	nop
 80056ce:	370c      	adds	r7, #12
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b086      	sub	sp, #24
 80056dc:	af02      	add	r7, sp, #8
 80056de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2200      	movs	r2, #0
 80056e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80056e8:	f7fc f952 	bl	8001990 <HAL_GetTick>
 80056ec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f003 0308 	and.w	r3, r3, #8
 80056f8:	2b08      	cmp	r3, #8
 80056fa:	d10e      	bne.n	800571a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005700:	9300      	str	r3, [sp, #0]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2200      	movs	r2, #0
 8005706:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 f82d 	bl	800576a <UART_WaitOnFlagUntilTimeout>
 8005710:	4603      	mov	r3, r0
 8005712:	2b00      	cmp	r3, #0
 8005714:	d001      	beq.n	800571a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005716:	2303      	movs	r3, #3
 8005718:	e023      	b.n	8005762 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f003 0304 	and.w	r3, r3, #4
 8005724:	2b04      	cmp	r3, #4
 8005726:	d10e      	bne.n	8005746 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005728:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800572c:	9300      	str	r3, [sp, #0]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2200      	movs	r2, #0
 8005732:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f000 f817 	bl	800576a <UART_WaitOnFlagUntilTimeout>
 800573c:	4603      	mov	r3, r0
 800573e:	2b00      	cmp	r3, #0
 8005740:	d001      	beq.n	8005746 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005742:	2303      	movs	r3, #3
 8005744:	e00d      	b.n	8005762 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2220      	movs	r2, #32
 800574a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2220      	movs	r2, #32
 8005750:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2200      	movs	r2, #0
 8005756:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005760:	2300      	movs	r3, #0
}
 8005762:	4618      	mov	r0, r3
 8005764:	3710      	adds	r7, #16
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}

0800576a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800576a:	b580      	push	{r7, lr}
 800576c:	b09c      	sub	sp, #112	; 0x70
 800576e:	af00      	add	r7, sp, #0
 8005770:	60f8      	str	r0, [r7, #12]
 8005772:	60b9      	str	r1, [r7, #8]
 8005774:	603b      	str	r3, [r7, #0]
 8005776:	4613      	mov	r3, r2
 8005778:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800577a:	e0a5      	b.n	80058c8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800577c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800577e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005782:	f000 80a1 	beq.w	80058c8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005786:	f7fc f903 	bl	8001990 <HAL_GetTick>
 800578a:	4602      	mov	r2, r0
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	1ad3      	subs	r3, r2, r3
 8005790:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005792:	429a      	cmp	r2, r3
 8005794:	d302      	bcc.n	800579c <UART_WaitOnFlagUntilTimeout+0x32>
 8005796:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005798:	2b00      	cmp	r3, #0
 800579a:	d13e      	bne.n	800581a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057a4:	e853 3f00 	ldrex	r3, [r3]
 80057a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80057aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80057b0:	667b      	str	r3, [r7, #100]	; 0x64
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	461a      	mov	r2, r3
 80057b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80057bc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80057c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80057c2:	e841 2300 	strex	r3, r2, [r1]
 80057c6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80057c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d1e6      	bne.n	800579c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	3308      	adds	r3, #8
 80057d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057d8:	e853 3f00 	ldrex	r3, [r3]
 80057dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80057de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057e0:	f023 0301 	bic.w	r3, r3, #1
 80057e4:	663b      	str	r3, [r7, #96]	; 0x60
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	3308      	adds	r3, #8
 80057ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80057ee:	64ba      	str	r2, [r7, #72]	; 0x48
 80057f0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80057f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80057f6:	e841 2300 	strex	r3, r2, [r1]
 80057fa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80057fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d1e5      	bne.n	80057ce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2220      	movs	r2, #32
 8005806:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2220      	movs	r2, #32
 800580c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2200      	movs	r2, #0
 8005812:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005816:	2303      	movs	r3, #3
 8005818:	e067      	b.n	80058ea <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f003 0304 	and.w	r3, r3, #4
 8005824:	2b00      	cmp	r3, #0
 8005826:	d04f      	beq.n	80058c8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	69db      	ldr	r3, [r3, #28]
 800582e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005832:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005836:	d147      	bne.n	80058c8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005840:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800584a:	e853 3f00 	ldrex	r3, [r3]
 800584e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005852:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005856:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	461a      	mov	r2, r3
 800585e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005860:	637b      	str	r3, [r7, #52]	; 0x34
 8005862:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005864:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005866:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005868:	e841 2300 	strex	r3, r2, [r1]
 800586c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800586e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005870:	2b00      	cmp	r3, #0
 8005872:	d1e6      	bne.n	8005842 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	3308      	adds	r3, #8
 800587a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	e853 3f00 	ldrex	r3, [r3]
 8005882:	613b      	str	r3, [r7, #16]
   return(result);
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	f023 0301 	bic.w	r3, r3, #1
 800588a:	66bb      	str	r3, [r7, #104]	; 0x68
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	3308      	adds	r3, #8
 8005892:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005894:	623a      	str	r2, [r7, #32]
 8005896:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005898:	69f9      	ldr	r1, [r7, #28]
 800589a:	6a3a      	ldr	r2, [r7, #32]
 800589c:	e841 2300 	strex	r3, r2, [r1]
 80058a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80058a2:	69bb      	ldr	r3, [r7, #24]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d1e5      	bne.n	8005874 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2220      	movs	r2, #32
 80058ac:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2220      	movs	r2, #32
 80058b2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2220      	movs	r2, #32
 80058b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2200      	movs	r2, #0
 80058c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80058c4:	2303      	movs	r3, #3
 80058c6:	e010      	b.n	80058ea <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	69da      	ldr	r2, [r3, #28]
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	4013      	ands	r3, r2
 80058d2:	68ba      	ldr	r2, [r7, #8]
 80058d4:	429a      	cmp	r2, r3
 80058d6:	bf0c      	ite	eq
 80058d8:	2301      	moveq	r3, #1
 80058da:	2300      	movne	r3, #0
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	461a      	mov	r2, r3
 80058e0:	79fb      	ldrb	r3, [r7, #7]
 80058e2:	429a      	cmp	r2, r3
 80058e4:	f43f af4a 	beq.w	800577c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058e8:	2300      	movs	r3, #0
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3770      	adds	r7, #112	; 0x70
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}

080058f2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80058f2:	b480      	push	{r7}
 80058f4:	b095      	sub	sp, #84	; 0x54
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005902:	e853 3f00 	ldrex	r3, [r3]
 8005906:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800590a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800590e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	461a      	mov	r2, r3
 8005916:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005918:	643b      	str	r3, [r7, #64]	; 0x40
 800591a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800591c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800591e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005920:	e841 2300 	strex	r3, r2, [r1]
 8005924:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005928:	2b00      	cmp	r3, #0
 800592a:	d1e6      	bne.n	80058fa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	3308      	adds	r3, #8
 8005932:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005934:	6a3b      	ldr	r3, [r7, #32]
 8005936:	e853 3f00 	ldrex	r3, [r3]
 800593a:	61fb      	str	r3, [r7, #28]
   return(result);
 800593c:	69fb      	ldr	r3, [r7, #28]
 800593e:	f023 0301 	bic.w	r3, r3, #1
 8005942:	64bb      	str	r3, [r7, #72]	; 0x48
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	3308      	adds	r3, #8
 800594a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800594c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800594e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005950:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005952:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005954:	e841 2300 	strex	r3, r2, [r1]
 8005958:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800595a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800595c:	2b00      	cmp	r3, #0
 800595e:	d1e5      	bne.n	800592c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005964:	2b01      	cmp	r3, #1
 8005966:	d118      	bne.n	800599a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	e853 3f00 	ldrex	r3, [r3]
 8005974:	60bb      	str	r3, [r7, #8]
   return(result);
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	f023 0310 	bic.w	r3, r3, #16
 800597c:	647b      	str	r3, [r7, #68]	; 0x44
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	461a      	mov	r2, r3
 8005984:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005986:	61bb      	str	r3, [r7, #24]
 8005988:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800598a:	6979      	ldr	r1, [r7, #20]
 800598c:	69ba      	ldr	r2, [r7, #24]
 800598e:	e841 2300 	strex	r3, r2, [r1]
 8005992:	613b      	str	r3, [r7, #16]
   return(result);
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d1e6      	bne.n	8005968 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2220      	movs	r2, #32
 800599e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2200      	movs	r2, #0
 80059a4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	665a      	str	r2, [r3, #100]	; 0x64
}
 80059ac:	bf00      	nop
 80059ae:	3754      	adds	r7, #84	; 0x54
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr

080059b8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b084      	sub	sp, #16
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059c4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2200      	movs	r2, #0
 80059ca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2200      	movs	r2, #0
 80059d2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80059d6:	68f8      	ldr	r0, [r7, #12]
 80059d8:	f7ff fb9a 	bl	8005110 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059dc:	bf00      	nop
 80059de:	3710      	adds	r7, #16
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}

080059e4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b088      	sub	sp, #32
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	e853 3f00 	ldrex	r3, [r3]
 80059f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a00:	61fb      	str	r3, [r7, #28]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	461a      	mov	r2, r3
 8005a08:	69fb      	ldr	r3, [r7, #28]
 8005a0a:	61bb      	str	r3, [r7, #24]
 8005a0c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a0e:	6979      	ldr	r1, [r7, #20]
 8005a10:	69ba      	ldr	r2, [r7, #24]
 8005a12:	e841 2300 	strex	r3, r2, [r1]
 8005a16:	613b      	str	r3, [r7, #16]
   return(result);
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d1e6      	bne.n	80059ec <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2220      	movs	r2, #32
 8005a22:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2200      	movs	r2, #0
 8005a28:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f7ff fb66 	bl	80050fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a30:	bf00      	nop
 8005a32:	3720      	adds	r7, #32
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}

08005a38 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b083      	sub	sp, #12
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005a40:	bf00      	nop
 8005a42:	370c      	adds	r7, #12
 8005a44:	46bd      	mov	sp, r7
 8005a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4a:	4770      	bx	lr

08005a4c <gcvt>:
 8005a4c:	b530      	push	{r4, r5, lr}
 8005a4e:	2200      	movs	r2, #0
 8005a50:	b085      	sub	sp, #20
 8005a52:	460c      	mov	r4, r1
 8005a54:	4605      	mov	r5, r0
 8005a56:	2300      	movs	r3, #0
 8005a58:	ec51 0b10 	vmov	r0, r1, d0
 8005a5c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005a60:	f7fb f83c 	bl	8000adc <__aeabi_dcmplt>
 8005a64:	ed9d 0b02 	vldr	d0, [sp, #8]
 8005a68:	4622      	mov	r2, r4
 8005a6a:	b118      	cbz	r0, 8005a74 <gcvt+0x28>
 8005a6c:	232d      	movs	r3, #45	; 0x2d
 8005a6e:	f802 3b01 	strb.w	r3, [r2], #1
 8005a72:	3d01      	subs	r5, #1
 8005a74:	2300      	movs	r3, #0
 8005a76:	4806      	ldr	r0, [pc, #24]	; (8005a90 <gcvt+0x44>)
 8005a78:	9300      	str	r3, [sp, #0]
 8005a7a:	4629      	mov	r1, r5
 8005a7c:	2367      	movs	r3, #103	; 0x67
 8005a7e:	6800      	ldr	r0, [r0, #0]
 8005a80:	f000 f8b2 	bl	8005be8 <_gcvt>
 8005a84:	2800      	cmp	r0, #0
 8005a86:	bf14      	ite	ne
 8005a88:	4620      	movne	r0, r4
 8005a8a:	2000      	moveq	r0, #0
 8005a8c:	b005      	add	sp, #20
 8005a8e:	bd30      	pop	{r4, r5, pc}
 8005a90:	2000000c 	.word	0x2000000c

08005a94 <__errno>:
 8005a94:	4b01      	ldr	r3, [pc, #4]	; (8005a9c <__errno+0x8>)
 8005a96:	6818      	ldr	r0, [r3, #0]
 8005a98:	4770      	bx	lr
 8005a9a:	bf00      	nop
 8005a9c:	2000000c 	.word	0x2000000c

08005aa0 <__libc_init_array>:
 8005aa0:	b570      	push	{r4, r5, r6, lr}
 8005aa2:	4d0d      	ldr	r5, [pc, #52]	; (8005ad8 <__libc_init_array+0x38>)
 8005aa4:	4c0d      	ldr	r4, [pc, #52]	; (8005adc <__libc_init_array+0x3c>)
 8005aa6:	1b64      	subs	r4, r4, r5
 8005aa8:	10a4      	asrs	r4, r4, #2
 8005aaa:	2600      	movs	r6, #0
 8005aac:	42a6      	cmp	r6, r4
 8005aae:	d109      	bne.n	8005ac4 <__libc_init_array+0x24>
 8005ab0:	4d0b      	ldr	r5, [pc, #44]	; (8005ae0 <__libc_init_array+0x40>)
 8005ab2:	4c0c      	ldr	r4, [pc, #48]	; (8005ae4 <__libc_init_array+0x44>)
 8005ab4:	f002 fb9c 	bl	80081f0 <_init>
 8005ab8:	1b64      	subs	r4, r4, r5
 8005aba:	10a4      	asrs	r4, r4, #2
 8005abc:	2600      	movs	r6, #0
 8005abe:	42a6      	cmp	r6, r4
 8005ac0:	d105      	bne.n	8005ace <__libc_init_array+0x2e>
 8005ac2:	bd70      	pop	{r4, r5, r6, pc}
 8005ac4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ac8:	4798      	blx	r3
 8005aca:	3601      	adds	r6, #1
 8005acc:	e7ee      	b.n	8005aac <__libc_init_array+0xc>
 8005ace:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ad2:	4798      	blx	r3
 8005ad4:	3601      	adds	r6, #1
 8005ad6:	e7f2      	b.n	8005abe <__libc_init_array+0x1e>
 8005ad8:	08008530 	.word	0x08008530
 8005adc:	08008530 	.word	0x08008530
 8005ae0:	08008530 	.word	0x08008530
 8005ae4:	08008534 	.word	0x08008534

08005ae8 <memset>:
 8005ae8:	4402      	add	r2, r0
 8005aea:	4603      	mov	r3, r0
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d100      	bne.n	8005af2 <memset+0xa>
 8005af0:	4770      	bx	lr
 8005af2:	f803 1b01 	strb.w	r1, [r3], #1
 8005af6:	e7f9      	b.n	8005aec <memset+0x4>

08005af8 <print_e>:
 8005af8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005afa:	b087      	sub	sp, #28
 8005afc:	ec43 2b10 	vmov	d0, r2, r3
 8005b00:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8005b02:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8005b06:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8005b08:	ab04      	add	r3, sp, #16
 8005b0a:	9301      	str	r3, [sp, #4]
 8005b0c:	ab03      	add	r3, sp, #12
 8005b0e:	9300      	str	r3, [sp, #0]
 8005b10:	1c62      	adds	r2, r4, #1
 8005b12:	ab05      	add	r3, sp, #20
 8005b14:	460f      	mov	r7, r1
 8005b16:	2102      	movs	r1, #2
 8005b18:	f000 fe36 	bl	8006788 <_dtoa_r>
 8005b1c:	9a05      	ldr	r2, [sp, #20]
 8005b1e:	f242 730f 	movw	r3, #9999	; 0x270f
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d105      	bne.n	8005b32 <print_e+0x3a>
 8005b26:	4601      	mov	r1, r0
 8005b28:	4638      	mov	r0, r7
 8005b2a:	f000 fd79 	bl	8006620 <strcpy>
 8005b2e:	b007      	add	sp, #28
 8005b30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b32:	463b      	mov	r3, r7
 8005b34:	7801      	ldrb	r1, [r0, #0]
 8005b36:	f803 1b01 	strb.w	r1, [r3], #1
 8005b3a:	2c00      	cmp	r4, #0
 8005b3c:	bfc8      	it	gt
 8005b3e:	2501      	movgt	r5, #1
 8005b40:	212e      	movs	r1, #46	; 0x2e
 8005b42:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 8005b46:	b10f      	cbz	r7, 8005b4c <print_e+0x54>
 8005b48:	2c00      	cmp	r4, #0
 8005b4a:	dc37      	bgt.n	8005bbc <print_e+0xc4>
 8005b4c:	2e67      	cmp	r6, #103	; 0x67
 8005b4e:	d046      	beq.n	8005bde <print_e+0xe6>
 8005b50:	2e47      	cmp	r6, #71	; 0x47
 8005b52:	d046      	beq.n	8005be2 <print_e+0xea>
 8005b54:	212e      	movs	r1, #46	; 0x2e
 8005b56:	2030      	movs	r0, #48	; 0x30
 8005b58:	2c00      	cmp	r4, #0
 8005b5a:	dc38      	bgt.n	8005bce <print_e+0xd6>
 8005b5c:	1e51      	subs	r1, r2, #1
 8005b5e:	2900      	cmp	r1, #0
 8005b60:	bfb8      	it	lt
 8005b62:	f1c2 0201 	rsblt	r2, r2, #1
 8005b66:	4618      	mov	r0, r3
 8005b68:	9105      	str	r1, [sp, #20]
 8005b6a:	bfac      	ite	ge
 8005b6c:	222b      	movge	r2, #43	; 0x2b
 8005b6e:	9205      	strlt	r2, [sp, #20]
 8005b70:	f800 6b02 	strb.w	r6, [r0], #2
 8005b74:	bfa8      	it	ge
 8005b76:	705a      	strbge	r2, [r3, #1]
 8005b78:	9a05      	ldr	r2, [sp, #20]
 8005b7a:	bfbc      	itt	lt
 8005b7c:	212d      	movlt	r1, #45	; 0x2d
 8005b7e:	7059      	strblt	r1, [r3, #1]
 8005b80:	2a63      	cmp	r2, #99	; 0x63
 8005b82:	dd0b      	ble.n	8005b9c <print_e+0xa4>
 8005b84:	2164      	movs	r1, #100	; 0x64
 8005b86:	fb92 f1f1 	sdiv	r1, r2, r1
 8005b8a:	f101 0430 	add.w	r4, r1, #48	; 0x30
 8005b8e:	1cd8      	adds	r0, r3, #3
 8005b90:	709c      	strb	r4, [r3, #2]
 8005b92:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8005b96:	fb03 2201 	mla	r2, r3, r1, r2
 8005b9a:	9205      	str	r2, [sp, #20]
 8005b9c:	9b05      	ldr	r3, [sp, #20]
 8005b9e:	220a      	movs	r2, #10
 8005ba0:	fb93 f2f2 	sdiv	r2, r3, r2
 8005ba4:	f102 0130 	add.w	r1, r2, #48	; 0x30
 8005ba8:	7001      	strb	r1, [r0, #0]
 8005baa:	f06f 0109 	mvn.w	r1, #9
 8005bae:	fb01 3302 	mla	r3, r1, r2, r3
 8005bb2:	3330      	adds	r3, #48	; 0x30
 8005bb4:	7043      	strb	r3, [r0, #1]
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	7083      	strb	r3, [r0, #2]
 8005bba:	e7b8      	b.n	8005b2e <print_e+0x36>
 8005bbc:	b10d      	cbz	r5, 8005bc2 <print_e+0xca>
 8005bbe:	f803 1b01 	strb.w	r1, [r3], #1
 8005bc2:	7805      	ldrb	r5, [r0, #0]
 8005bc4:	f803 5b01 	strb.w	r5, [r3], #1
 8005bc8:	3c01      	subs	r4, #1
 8005bca:	2500      	movs	r5, #0
 8005bcc:	e7b9      	b.n	8005b42 <print_e+0x4a>
 8005bce:	b10d      	cbz	r5, 8005bd4 <print_e+0xdc>
 8005bd0:	f803 1b01 	strb.w	r1, [r3], #1
 8005bd4:	f803 0b01 	strb.w	r0, [r3], #1
 8005bd8:	3c01      	subs	r4, #1
 8005bda:	2500      	movs	r5, #0
 8005bdc:	e7bc      	b.n	8005b58 <print_e+0x60>
 8005bde:	2665      	movs	r6, #101	; 0x65
 8005be0:	e7bc      	b.n	8005b5c <print_e+0x64>
 8005be2:	2645      	movs	r6, #69	; 0x45
 8005be4:	e7ba      	b.n	8005b5c <print_e+0x64>
	...

08005be8 <_gcvt>:
 8005be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bec:	ec55 4b10 	vmov	r4, r5, d0
 8005bf0:	b088      	sub	sp, #32
 8005bf2:	4681      	mov	r9, r0
 8005bf4:	4688      	mov	r8, r1
 8005bf6:	4616      	mov	r6, r2
 8005bf8:	469a      	mov	sl, r3
 8005bfa:	ee10 0a10 	vmov	r0, s0
 8005bfe:	2200      	movs	r2, #0
 8005c00:	2300      	movs	r3, #0
 8005c02:	4629      	mov	r1, r5
 8005c04:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8005c06:	f7fa ff69 	bl	8000adc <__aeabi_dcmplt>
 8005c0a:	b110      	cbz	r0, 8005c12 <_gcvt+0x2a>
 8005c0c:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005c10:	461d      	mov	r5, r3
 8005c12:	2200      	movs	r2, #0
 8005c14:	2300      	movs	r3, #0
 8005c16:	4620      	mov	r0, r4
 8005c18:	4629      	mov	r1, r5
 8005c1a:	f7fa ff55 	bl	8000ac8 <__aeabi_dcmpeq>
 8005c1e:	b138      	cbz	r0, 8005c30 <_gcvt+0x48>
 8005c20:	2330      	movs	r3, #48	; 0x30
 8005c22:	7033      	strb	r3, [r6, #0]
 8005c24:	2300      	movs	r3, #0
 8005c26:	7073      	strb	r3, [r6, #1]
 8005c28:	4630      	mov	r0, r6
 8005c2a:	b008      	add	sp, #32
 8005c2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c30:	a34b      	add	r3, pc, #300	; (adr r3, 8005d60 <_gcvt+0x178>)
 8005c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c36:	4620      	mov	r0, r4
 8005c38:	4629      	mov	r1, r5
 8005c3a:	f7fa ff59 	bl	8000af0 <__aeabi_dcmple>
 8005c3e:	b158      	cbz	r0, 8005c58 <_gcvt+0x70>
 8005c40:	f108 31ff 	add.w	r1, r8, #4294967295
 8005c44:	9100      	str	r1, [sp, #0]
 8005c46:	e9cd a701 	strd	sl, r7, [sp, #4]
 8005c4a:	4622      	mov	r2, r4
 8005c4c:	462b      	mov	r3, r5
 8005c4e:	4631      	mov	r1, r6
 8005c50:	4648      	mov	r0, r9
 8005c52:	f7ff ff51 	bl	8005af8 <print_e>
 8005c56:	e7e7      	b.n	8005c28 <_gcvt+0x40>
 8005c58:	4640      	mov	r0, r8
 8005c5a:	f000 fc09 	bl	8006470 <_mprec_log10>
 8005c5e:	4622      	mov	r2, r4
 8005c60:	ec51 0b10 	vmov	r0, r1, d0
 8005c64:	462b      	mov	r3, r5
 8005c66:	f7fa ff43 	bl	8000af0 <__aeabi_dcmple>
 8005c6a:	2800      	cmp	r0, #0
 8005c6c:	d1e8      	bne.n	8005c40 <_gcvt+0x58>
 8005c6e:	ab07      	add	r3, sp, #28
 8005c70:	9301      	str	r3, [sp, #4]
 8005c72:	ab06      	add	r3, sp, #24
 8005c74:	9300      	str	r3, [sp, #0]
 8005c76:	4642      	mov	r2, r8
 8005c78:	ab05      	add	r3, sp, #20
 8005c7a:	ec45 4b10 	vmov	d0, r4, r5
 8005c7e:	2102      	movs	r1, #2
 8005c80:	4648      	mov	r0, r9
 8005c82:	f000 fd81 	bl	8006788 <_dtoa_r>
 8005c86:	9a05      	ldr	r2, [sp, #20]
 8005c88:	f242 730f 	movw	r3, #9999	; 0x270f
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d00e      	beq.n	8005cae <_gcvt+0xc6>
 8005c90:	4633      	mov	r3, r6
 8005c92:	44b0      	add	r8, r6
 8005c94:	4605      	mov	r5, r0
 8005c96:	f810 1b01 	ldrb.w	r1, [r0], #1
 8005c9a:	9c05      	ldr	r4, [sp, #20]
 8005c9c:	eba8 0203 	sub.w	r2, r8, r3
 8005ca0:	b109      	cbz	r1, 8005ca6 <_gcvt+0xbe>
 8005ca2:	2c00      	cmp	r4, #0
 8005ca4:	dc08      	bgt.n	8005cb8 <_gcvt+0xd0>
 8005ca6:	2100      	movs	r1, #0
 8005ca8:	f04f 0c30 	mov.w	ip, #48	; 0x30
 8005cac:	e00d      	b.n	8005cca <_gcvt+0xe2>
 8005cae:	4601      	mov	r1, r0
 8005cb0:	4630      	mov	r0, r6
 8005cb2:	f000 fcb5 	bl	8006620 <strcpy>
 8005cb6:	e7b7      	b.n	8005c28 <_gcvt+0x40>
 8005cb8:	3c01      	subs	r4, #1
 8005cba:	f803 1b01 	strb.w	r1, [r3], #1
 8005cbe:	9405      	str	r4, [sp, #20]
 8005cc0:	e7e8      	b.n	8005c94 <_gcvt+0xac>
 8005cc2:	f803 cb01 	strb.w	ip, [r3], #1
 8005cc6:	3a01      	subs	r2, #1
 8005cc8:	2101      	movs	r1, #1
 8005cca:	2c00      	cmp	r4, #0
 8005ccc:	4620      	mov	r0, r4
 8005cce:	dc2a      	bgt.n	8005d26 <_gcvt+0x13e>
 8005cd0:	b101      	cbz	r1, 8005cd4 <_gcvt+0xec>
 8005cd2:	9405      	str	r4, [sp, #20]
 8005cd4:	b90f      	cbnz	r7, 8005cda <_gcvt+0xf2>
 8005cd6:	7829      	ldrb	r1, [r5, #0]
 8005cd8:	b311      	cbz	r1, 8005d20 <_gcvt+0x138>
 8005cda:	42b3      	cmp	r3, r6
 8005cdc:	bf04      	itt	eq
 8005cde:	2130      	moveq	r1, #48	; 0x30
 8005ce0:	f803 1b01 	strbeq.w	r1, [r3], #1
 8005ce4:	212e      	movs	r1, #46	; 0x2e
 8005ce6:	7019      	strb	r1, [r3, #0]
 8005ce8:	9905      	ldr	r1, [sp, #20]
 8005cea:	4618      	mov	r0, r3
 8005cec:	2400      	movs	r4, #0
 8005cee:	eba1 0c03 	sub.w	ip, r1, r3
 8005cf2:	f04f 0e30 	mov.w	lr, #48	; 0x30
 8005cf6:	eb1c 0f00 	cmn.w	ip, r0
 8005cfa:	d41c      	bmi.n	8005d36 <_gcvt+0x14e>
 8005cfc:	2900      	cmp	r1, #0
 8005cfe:	f1c1 0000 	rsb	r0, r1, #0
 8005d02:	bfc8      	it	gt
 8005d04:	2000      	movgt	r0, #0
 8005d06:	f100 0c01 	add.w	ip, r0, #1
 8005d0a:	4463      	add	r3, ip
 8005d0c:	4401      	add	r1, r0
 8005d0e:	b104      	cbz	r4, 8005d12 <_gcvt+0x12a>
 8005d10:	9105      	str	r1, [sp, #20]
 8005d12:	1e69      	subs	r1, r5, #1
 8005d14:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005d18:	b108      	cbz	r0, 8005d1e <_gcvt+0x136>
 8005d1a:	2a00      	cmp	r2, #0
 8005d1c:	dc0f      	bgt.n	8005d3e <_gcvt+0x156>
 8005d1e:	b9df      	cbnz	r7, 8005d58 <_gcvt+0x170>
 8005d20:	2200      	movs	r2, #0
 8005d22:	701a      	strb	r2, [r3, #0]
 8005d24:	e780      	b.n	8005c28 <_gcvt+0x40>
 8005d26:	2a00      	cmp	r2, #0
 8005d28:	f104 34ff 	add.w	r4, r4, #4294967295
 8005d2c:	dcc9      	bgt.n	8005cc2 <_gcvt+0xda>
 8005d2e:	2900      	cmp	r1, #0
 8005d30:	d0d0      	beq.n	8005cd4 <_gcvt+0xec>
 8005d32:	9005      	str	r0, [sp, #20]
 8005d34:	e7ce      	b.n	8005cd4 <_gcvt+0xec>
 8005d36:	f800 ef01 	strb.w	lr, [r0, #1]!
 8005d3a:	2401      	movs	r4, #1
 8005d3c:	e7db      	b.n	8005cf6 <_gcvt+0x10e>
 8005d3e:	f803 0b01 	strb.w	r0, [r3], #1
 8005d42:	3a01      	subs	r2, #1
 8005d44:	e7e6      	b.n	8005d14 <_gcvt+0x12c>
 8005d46:	f801 5b01 	strb.w	r5, [r1], #1
 8005d4a:	1a60      	subs	r0, r4, r1
 8005d4c:	2800      	cmp	r0, #0
 8005d4e:	dcfa      	bgt.n	8005d46 <_gcvt+0x15e>
 8005d50:	2a00      	cmp	r2, #0
 8005d52:	bfa8      	it	ge
 8005d54:	189b      	addge	r3, r3, r2
 8005d56:	e7e3      	b.n	8005d20 <_gcvt+0x138>
 8005d58:	4619      	mov	r1, r3
 8005d5a:	189c      	adds	r4, r3, r2
 8005d5c:	2530      	movs	r5, #48	; 0x30
 8005d5e:	e7f4      	b.n	8005d4a <_gcvt+0x162>
 8005d60:	eb1c432d 	.word	0xeb1c432d
 8005d64:	3f1a36e2 	.word	0x3f1a36e2

08005d68 <_Balloc>:
 8005d68:	b570      	push	{r4, r5, r6, lr}
 8005d6a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005d6c:	4604      	mov	r4, r0
 8005d6e:	460d      	mov	r5, r1
 8005d70:	b976      	cbnz	r6, 8005d90 <_Balloc+0x28>
 8005d72:	2010      	movs	r0, #16
 8005d74:	f001 fb08 	bl	8007388 <malloc>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	6260      	str	r0, [r4, #36]	; 0x24
 8005d7c:	b920      	cbnz	r0, 8005d88 <_Balloc+0x20>
 8005d7e:	4b18      	ldr	r3, [pc, #96]	; (8005de0 <_Balloc+0x78>)
 8005d80:	4818      	ldr	r0, [pc, #96]	; (8005de4 <_Balloc+0x7c>)
 8005d82:	2166      	movs	r1, #102	; 0x66
 8005d84:	f000 fc54 	bl	8006630 <__assert_func>
 8005d88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005d8c:	6006      	str	r6, [r0, #0]
 8005d8e:	60c6      	str	r6, [r0, #12]
 8005d90:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005d92:	68f3      	ldr	r3, [r6, #12]
 8005d94:	b183      	cbz	r3, 8005db8 <_Balloc+0x50>
 8005d96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d98:	68db      	ldr	r3, [r3, #12]
 8005d9a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005d9e:	b9b8      	cbnz	r0, 8005dd0 <_Balloc+0x68>
 8005da0:	2101      	movs	r1, #1
 8005da2:	fa01 f605 	lsl.w	r6, r1, r5
 8005da6:	1d72      	adds	r2, r6, #5
 8005da8:	0092      	lsls	r2, r2, #2
 8005daa:	4620      	mov	r0, r4
 8005dac:	f000 fb7e 	bl	80064ac <_calloc_r>
 8005db0:	b160      	cbz	r0, 8005dcc <_Balloc+0x64>
 8005db2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005db6:	e00e      	b.n	8005dd6 <_Balloc+0x6e>
 8005db8:	2221      	movs	r2, #33	; 0x21
 8005dba:	2104      	movs	r1, #4
 8005dbc:	4620      	mov	r0, r4
 8005dbe:	f000 fb75 	bl	80064ac <_calloc_r>
 8005dc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005dc4:	60f0      	str	r0, [r6, #12]
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d1e4      	bne.n	8005d96 <_Balloc+0x2e>
 8005dcc:	2000      	movs	r0, #0
 8005dce:	bd70      	pop	{r4, r5, r6, pc}
 8005dd0:	6802      	ldr	r2, [r0, #0]
 8005dd2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005ddc:	e7f7      	b.n	8005dce <_Balloc+0x66>
 8005dde:	bf00      	nop
 8005de0:	0800826c 	.word	0x0800826c
 8005de4:	08008283 	.word	0x08008283

08005de8 <_Bfree>:
 8005de8:	b570      	push	{r4, r5, r6, lr}
 8005dea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005dec:	4605      	mov	r5, r0
 8005dee:	460c      	mov	r4, r1
 8005df0:	b976      	cbnz	r6, 8005e10 <_Bfree+0x28>
 8005df2:	2010      	movs	r0, #16
 8005df4:	f001 fac8 	bl	8007388 <malloc>
 8005df8:	4602      	mov	r2, r0
 8005dfa:	6268      	str	r0, [r5, #36]	; 0x24
 8005dfc:	b920      	cbnz	r0, 8005e08 <_Bfree+0x20>
 8005dfe:	4b09      	ldr	r3, [pc, #36]	; (8005e24 <_Bfree+0x3c>)
 8005e00:	4809      	ldr	r0, [pc, #36]	; (8005e28 <_Bfree+0x40>)
 8005e02:	218a      	movs	r1, #138	; 0x8a
 8005e04:	f000 fc14 	bl	8006630 <__assert_func>
 8005e08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005e0c:	6006      	str	r6, [r0, #0]
 8005e0e:	60c6      	str	r6, [r0, #12]
 8005e10:	b13c      	cbz	r4, 8005e22 <_Bfree+0x3a>
 8005e12:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005e14:	6862      	ldr	r2, [r4, #4]
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005e1c:	6021      	str	r1, [r4, #0]
 8005e1e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005e22:	bd70      	pop	{r4, r5, r6, pc}
 8005e24:	0800826c 	.word	0x0800826c
 8005e28:	08008283 	.word	0x08008283

08005e2c <__multadd>:
 8005e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e30:	690d      	ldr	r5, [r1, #16]
 8005e32:	4607      	mov	r7, r0
 8005e34:	460c      	mov	r4, r1
 8005e36:	461e      	mov	r6, r3
 8005e38:	f101 0c14 	add.w	ip, r1, #20
 8005e3c:	2000      	movs	r0, #0
 8005e3e:	f8dc 3000 	ldr.w	r3, [ip]
 8005e42:	b299      	uxth	r1, r3
 8005e44:	fb02 6101 	mla	r1, r2, r1, r6
 8005e48:	0c1e      	lsrs	r6, r3, #16
 8005e4a:	0c0b      	lsrs	r3, r1, #16
 8005e4c:	fb02 3306 	mla	r3, r2, r6, r3
 8005e50:	b289      	uxth	r1, r1
 8005e52:	3001      	adds	r0, #1
 8005e54:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005e58:	4285      	cmp	r5, r0
 8005e5a:	f84c 1b04 	str.w	r1, [ip], #4
 8005e5e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005e62:	dcec      	bgt.n	8005e3e <__multadd+0x12>
 8005e64:	b30e      	cbz	r6, 8005eaa <__multadd+0x7e>
 8005e66:	68a3      	ldr	r3, [r4, #8]
 8005e68:	42ab      	cmp	r3, r5
 8005e6a:	dc19      	bgt.n	8005ea0 <__multadd+0x74>
 8005e6c:	6861      	ldr	r1, [r4, #4]
 8005e6e:	4638      	mov	r0, r7
 8005e70:	3101      	adds	r1, #1
 8005e72:	f7ff ff79 	bl	8005d68 <_Balloc>
 8005e76:	4680      	mov	r8, r0
 8005e78:	b928      	cbnz	r0, 8005e86 <__multadd+0x5a>
 8005e7a:	4602      	mov	r2, r0
 8005e7c:	4b0c      	ldr	r3, [pc, #48]	; (8005eb0 <__multadd+0x84>)
 8005e7e:	480d      	ldr	r0, [pc, #52]	; (8005eb4 <__multadd+0x88>)
 8005e80:	21b5      	movs	r1, #181	; 0xb5
 8005e82:	f000 fbd5 	bl	8006630 <__assert_func>
 8005e86:	6922      	ldr	r2, [r4, #16]
 8005e88:	3202      	adds	r2, #2
 8005e8a:	f104 010c 	add.w	r1, r4, #12
 8005e8e:	0092      	lsls	r2, r2, #2
 8005e90:	300c      	adds	r0, #12
 8005e92:	f001 fa81 	bl	8007398 <memcpy>
 8005e96:	4621      	mov	r1, r4
 8005e98:	4638      	mov	r0, r7
 8005e9a:	f7ff ffa5 	bl	8005de8 <_Bfree>
 8005e9e:	4644      	mov	r4, r8
 8005ea0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005ea4:	3501      	adds	r5, #1
 8005ea6:	615e      	str	r6, [r3, #20]
 8005ea8:	6125      	str	r5, [r4, #16]
 8005eaa:	4620      	mov	r0, r4
 8005eac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005eb0:	080082df 	.word	0x080082df
 8005eb4:	08008283 	.word	0x08008283

08005eb8 <__hi0bits>:
 8005eb8:	0c03      	lsrs	r3, r0, #16
 8005eba:	041b      	lsls	r3, r3, #16
 8005ebc:	b9d3      	cbnz	r3, 8005ef4 <__hi0bits+0x3c>
 8005ebe:	0400      	lsls	r0, r0, #16
 8005ec0:	2310      	movs	r3, #16
 8005ec2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005ec6:	bf04      	itt	eq
 8005ec8:	0200      	lsleq	r0, r0, #8
 8005eca:	3308      	addeq	r3, #8
 8005ecc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005ed0:	bf04      	itt	eq
 8005ed2:	0100      	lsleq	r0, r0, #4
 8005ed4:	3304      	addeq	r3, #4
 8005ed6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005eda:	bf04      	itt	eq
 8005edc:	0080      	lsleq	r0, r0, #2
 8005ede:	3302      	addeq	r3, #2
 8005ee0:	2800      	cmp	r0, #0
 8005ee2:	db05      	blt.n	8005ef0 <__hi0bits+0x38>
 8005ee4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005ee8:	f103 0301 	add.w	r3, r3, #1
 8005eec:	bf08      	it	eq
 8005eee:	2320      	moveq	r3, #32
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	4770      	bx	lr
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	e7e4      	b.n	8005ec2 <__hi0bits+0xa>

08005ef8 <__lo0bits>:
 8005ef8:	6803      	ldr	r3, [r0, #0]
 8005efa:	f013 0207 	ands.w	r2, r3, #7
 8005efe:	4601      	mov	r1, r0
 8005f00:	d00b      	beq.n	8005f1a <__lo0bits+0x22>
 8005f02:	07da      	lsls	r2, r3, #31
 8005f04:	d423      	bmi.n	8005f4e <__lo0bits+0x56>
 8005f06:	0798      	lsls	r0, r3, #30
 8005f08:	bf49      	itett	mi
 8005f0a:	085b      	lsrmi	r3, r3, #1
 8005f0c:	089b      	lsrpl	r3, r3, #2
 8005f0e:	2001      	movmi	r0, #1
 8005f10:	600b      	strmi	r3, [r1, #0]
 8005f12:	bf5c      	itt	pl
 8005f14:	600b      	strpl	r3, [r1, #0]
 8005f16:	2002      	movpl	r0, #2
 8005f18:	4770      	bx	lr
 8005f1a:	b298      	uxth	r0, r3
 8005f1c:	b9a8      	cbnz	r0, 8005f4a <__lo0bits+0x52>
 8005f1e:	0c1b      	lsrs	r3, r3, #16
 8005f20:	2010      	movs	r0, #16
 8005f22:	b2da      	uxtb	r2, r3
 8005f24:	b90a      	cbnz	r2, 8005f2a <__lo0bits+0x32>
 8005f26:	3008      	adds	r0, #8
 8005f28:	0a1b      	lsrs	r3, r3, #8
 8005f2a:	071a      	lsls	r2, r3, #28
 8005f2c:	bf04      	itt	eq
 8005f2e:	091b      	lsreq	r3, r3, #4
 8005f30:	3004      	addeq	r0, #4
 8005f32:	079a      	lsls	r2, r3, #30
 8005f34:	bf04      	itt	eq
 8005f36:	089b      	lsreq	r3, r3, #2
 8005f38:	3002      	addeq	r0, #2
 8005f3a:	07da      	lsls	r2, r3, #31
 8005f3c:	d403      	bmi.n	8005f46 <__lo0bits+0x4e>
 8005f3e:	085b      	lsrs	r3, r3, #1
 8005f40:	f100 0001 	add.w	r0, r0, #1
 8005f44:	d005      	beq.n	8005f52 <__lo0bits+0x5a>
 8005f46:	600b      	str	r3, [r1, #0]
 8005f48:	4770      	bx	lr
 8005f4a:	4610      	mov	r0, r2
 8005f4c:	e7e9      	b.n	8005f22 <__lo0bits+0x2a>
 8005f4e:	2000      	movs	r0, #0
 8005f50:	4770      	bx	lr
 8005f52:	2020      	movs	r0, #32
 8005f54:	4770      	bx	lr
	...

08005f58 <__i2b>:
 8005f58:	b510      	push	{r4, lr}
 8005f5a:	460c      	mov	r4, r1
 8005f5c:	2101      	movs	r1, #1
 8005f5e:	f7ff ff03 	bl	8005d68 <_Balloc>
 8005f62:	4602      	mov	r2, r0
 8005f64:	b928      	cbnz	r0, 8005f72 <__i2b+0x1a>
 8005f66:	4b05      	ldr	r3, [pc, #20]	; (8005f7c <__i2b+0x24>)
 8005f68:	4805      	ldr	r0, [pc, #20]	; (8005f80 <__i2b+0x28>)
 8005f6a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005f6e:	f000 fb5f 	bl	8006630 <__assert_func>
 8005f72:	2301      	movs	r3, #1
 8005f74:	6144      	str	r4, [r0, #20]
 8005f76:	6103      	str	r3, [r0, #16]
 8005f78:	bd10      	pop	{r4, pc}
 8005f7a:	bf00      	nop
 8005f7c:	080082df 	.word	0x080082df
 8005f80:	08008283 	.word	0x08008283

08005f84 <__multiply>:
 8005f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f88:	4691      	mov	r9, r2
 8005f8a:	690a      	ldr	r2, [r1, #16]
 8005f8c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005f90:	429a      	cmp	r2, r3
 8005f92:	bfb8      	it	lt
 8005f94:	460b      	movlt	r3, r1
 8005f96:	460c      	mov	r4, r1
 8005f98:	bfbc      	itt	lt
 8005f9a:	464c      	movlt	r4, r9
 8005f9c:	4699      	movlt	r9, r3
 8005f9e:	6927      	ldr	r7, [r4, #16]
 8005fa0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005fa4:	68a3      	ldr	r3, [r4, #8]
 8005fa6:	6861      	ldr	r1, [r4, #4]
 8005fa8:	eb07 060a 	add.w	r6, r7, sl
 8005fac:	42b3      	cmp	r3, r6
 8005fae:	b085      	sub	sp, #20
 8005fb0:	bfb8      	it	lt
 8005fb2:	3101      	addlt	r1, #1
 8005fb4:	f7ff fed8 	bl	8005d68 <_Balloc>
 8005fb8:	b930      	cbnz	r0, 8005fc8 <__multiply+0x44>
 8005fba:	4602      	mov	r2, r0
 8005fbc:	4b44      	ldr	r3, [pc, #272]	; (80060d0 <__multiply+0x14c>)
 8005fbe:	4845      	ldr	r0, [pc, #276]	; (80060d4 <__multiply+0x150>)
 8005fc0:	f240 115d 	movw	r1, #349	; 0x15d
 8005fc4:	f000 fb34 	bl	8006630 <__assert_func>
 8005fc8:	f100 0514 	add.w	r5, r0, #20
 8005fcc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005fd0:	462b      	mov	r3, r5
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	4543      	cmp	r3, r8
 8005fd6:	d321      	bcc.n	800601c <__multiply+0x98>
 8005fd8:	f104 0314 	add.w	r3, r4, #20
 8005fdc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005fe0:	f109 0314 	add.w	r3, r9, #20
 8005fe4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005fe8:	9202      	str	r2, [sp, #8]
 8005fea:	1b3a      	subs	r2, r7, r4
 8005fec:	3a15      	subs	r2, #21
 8005fee:	f022 0203 	bic.w	r2, r2, #3
 8005ff2:	3204      	adds	r2, #4
 8005ff4:	f104 0115 	add.w	r1, r4, #21
 8005ff8:	428f      	cmp	r7, r1
 8005ffa:	bf38      	it	cc
 8005ffc:	2204      	movcc	r2, #4
 8005ffe:	9201      	str	r2, [sp, #4]
 8006000:	9a02      	ldr	r2, [sp, #8]
 8006002:	9303      	str	r3, [sp, #12]
 8006004:	429a      	cmp	r2, r3
 8006006:	d80c      	bhi.n	8006022 <__multiply+0x9e>
 8006008:	2e00      	cmp	r6, #0
 800600a:	dd03      	ble.n	8006014 <__multiply+0x90>
 800600c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006010:	2b00      	cmp	r3, #0
 8006012:	d05a      	beq.n	80060ca <__multiply+0x146>
 8006014:	6106      	str	r6, [r0, #16]
 8006016:	b005      	add	sp, #20
 8006018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800601c:	f843 2b04 	str.w	r2, [r3], #4
 8006020:	e7d8      	b.n	8005fd4 <__multiply+0x50>
 8006022:	f8b3 a000 	ldrh.w	sl, [r3]
 8006026:	f1ba 0f00 	cmp.w	sl, #0
 800602a:	d024      	beq.n	8006076 <__multiply+0xf2>
 800602c:	f104 0e14 	add.w	lr, r4, #20
 8006030:	46a9      	mov	r9, r5
 8006032:	f04f 0c00 	mov.w	ip, #0
 8006036:	f85e 2b04 	ldr.w	r2, [lr], #4
 800603a:	f8d9 1000 	ldr.w	r1, [r9]
 800603e:	fa1f fb82 	uxth.w	fp, r2
 8006042:	b289      	uxth	r1, r1
 8006044:	fb0a 110b 	mla	r1, sl, fp, r1
 8006048:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800604c:	f8d9 2000 	ldr.w	r2, [r9]
 8006050:	4461      	add	r1, ip
 8006052:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006056:	fb0a c20b 	mla	r2, sl, fp, ip
 800605a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800605e:	b289      	uxth	r1, r1
 8006060:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006064:	4577      	cmp	r7, lr
 8006066:	f849 1b04 	str.w	r1, [r9], #4
 800606a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800606e:	d8e2      	bhi.n	8006036 <__multiply+0xb2>
 8006070:	9a01      	ldr	r2, [sp, #4]
 8006072:	f845 c002 	str.w	ip, [r5, r2]
 8006076:	9a03      	ldr	r2, [sp, #12]
 8006078:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800607c:	3304      	adds	r3, #4
 800607e:	f1b9 0f00 	cmp.w	r9, #0
 8006082:	d020      	beq.n	80060c6 <__multiply+0x142>
 8006084:	6829      	ldr	r1, [r5, #0]
 8006086:	f104 0c14 	add.w	ip, r4, #20
 800608a:	46ae      	mov	lr, r5
 800608c:	f04f 0a00 	mov.w	sl, #0
 8006090:	f8bc b000 	ldrh.w	fp, [ip]
 8006094:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006098:	fb09 220b 	mla	r2, r9, fp, r2
 800609c:	4492      	add	sl, r2
 800609e:	b289      	uxth	r1, r1
 80060a0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80060a4:	f84e 1b04 	str.w	r1, [lr], #4
 80060a8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80060ac:	f8be 1000 	ldrh.w	r1, [lr]
 80060b0:	0c12      	lsrs	r2, r2, #16
 80060b2:	fb09 1102 	mla	r1, r9, r2, r1
 80060b6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80060ba:	4567      	cmp	r7, ip
 80060bc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80060c0:	d8e6      	bhi.n	8006090 <__multiply+0x10c>
 80060c2:	9a01      	ldr	r2, [sp, #4]
 80060c4:	50a9      	str	r1, [r5, r2]
 80060c6:	3504      	adds	r5, #4
 80060c8:	e79a      	b.n	8006000 <__multiply+0x7c>
 80060ca:	3e01      	subs	r6, #1
 80060cc:	e79c      	b.n	8006008 <__multiply+0x84>
 80060ce:	bf00      	nop
 80060d0:	080082df 	.word	0x080082df
 80060d4:	08008283 	.word	0x08008283

080060d8 <__pow5mult>:
 80060d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060dc:	4615      	mov	r5, r2
 80060de:	f012 0203 	ands.w	r2, r2, #3
 80060e2:	4606      	mov	r6, r0
 80060e4:	460f      	mov	r7, r1
 80060e6:	d007      	beq.n	80060f8 <__pow5mult+0x20>
 80060e8:	4c25      	ldr	r4, [pc, #148]	; (8006180 <__pow5mult+0xa8>)
 80060ea:	3a01      	subs	r2, #1
 80060ec:	2300      	movs	r3, #0
 80060ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80060f2:	f7ff fe9b 	bl	8005e2c <__multadd>
 80060f6:	4607      	mov	r7, r0
 80060f8:	10ad      	asrs	r5, r5, #2
 80060fa:	d03d      	beq.n	8006178 <__pow5mult+0xa0>
 80060fc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80060fe:	b97c      	cbnz	r4, 8006120 <__pow5mult+0x48>
 8006100:	2010      	movs	r0, #16
 8006102:	f001 f941 	bl	8007388 <malloc>
 8006106:	4602      	mov	r2, r0
 8006108:	6270      	str	r0, [r6, #36]	; 0x24
 800610a:	b928      	cbnz	r0, 8006118 <__pow5mult+0x40>
 800610c:	4b1d      	ldr	r3, [pc, #116]	; (8006184 <__pow5mult+0xac>)
 800610e:	481e      	ldr	r0, [pc, #120]	; (8006188 <__pow5mult+0xb0>)
 8006110:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006114:	f000 fa8c 	bl	8006630 <__assert_func>
 8006118:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800611c:	6004      	str	r4, [r0, #0]
 800611e:	60c4      	str	r4, [r0, #12]
 8006120:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006124:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006128:	b94c      	cbnz	r4, 800613e <__pow5mult+0x66>
 800612a:	f240 2171 	movw	r1, #625	; 0x271
 800612e:	4630      	mov	r0, r6
 8006130:	f7ff ff12 	bl	8005f58 <__i2b>
 8006134:	2300      	movs	r3, #0
 8006136:	f8c8 0008 	str.w	r0, [r8, #8]
 800613a:	4604      	mov	r4, r0
 800613c:	6003      	str	r3, [r0, #0]
 800613e:	f04f 0900 	mov.w	r9, #0
 8006142:	07eb      	lsls	r3, r5, #31
 8006144:	d50a      	bpl.n	800615c <__pow5mult+0x84>
 8006146:	4639      	mov	r1, r7
 8006148:	4622      	mov	r2, r4
 800614a:	4630      	mov	r0, r6
 800614c:	f7ff ff1a 	bl	8005f84 <__multiply>
 8006150:	4639      	mov	r1, r7
 8006152:	4680      	mov	r8, r0
 8006154:	4630      	mov	r0, r6
 8006156:	f7ff fe47 	bl	8005de8 <_Bfree>
 800615a:	4647      	mov	r7, r8
 800615c:	106d      	asrs	r5, r5, #1
 800615e:	d00b      	beq.n	8006178 <__pow5mult+0xa0>
 8006160:	6820      	ldr	r0, [r4, #0]
 8006162:	b938      	cbnz	r0, 8006174 <__pow5mult+0x9c>
 8006164:	4622      	mov	r2, r4
 8006166:	4621      	mov	r1, r4
 8006168:	4630      	mov	r0, r6
 800616a:	f7ff ff0b 	bl	8005f84 <__multiply>
 800616e:	6020      	str	r0, [r4, #0]
 8006170:	f8c0 9000 	str.w	r9, [r0]
 8006174:	4604      	mov	r4, r0
 8006176:	e7e4      	b.n	8006142 <__pow5mult+0x6a>
 8006178:	4638      	mov	r0, r7
 800617a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800617e:	bf00      	nop
 8006180:	080083e0 	.word	0x080083e0
 8006184:	0800826c 	.word	0x0800826c
 8006188:	08008283 	.word	0x08008283

0800618c <__lshift>:
 800618c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006190:	460c      	mov	r4, r1
 8006192:	6849      	ldr	r1, [r1, #4]
 8006194:	6923      	ldr	r3, [r4, #16]
 8006196:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800619a:	68a3      	ldr	r3, [r4, #8]
 800619c:	4607      	mov	r7, r0
 800619e:	4691      	mov	r9, r2
 80061a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80061a4:	f108 0601 	add.w	r6, r8, #1
 80061a8:	42b3      	cmp	r3, r6
 80061aa:	db0b      	blt.n	80061c4 <__lshift+0x38>
 80061ac:	4638      	mov	r0, r7
 80061ae:	f7ff fddb 	bl	8005d68 <_Balloc>
 80061b2:	4605      	mov	r5, r0
 80061b4:	b948      	cbnz	r0, 80061ca <__lshift+0x3e>
 80061b6:	4602      	mov	r2, r0
 80061b8:	4b2a      	ldr	r3, [pc, #168]	; (8006264 <__lshift+0xd8>)
 80061ba:	482b      	ldr	r0, [pc, #172]	; (8006268 <__lshift+0xdc>)
 80061bc:	f240 11d9 	movw	r1, #473	; 0x1d9
 80061c0:	f000 fa36 	bl	8006630 <__assert_func>
 80061c4:	3101      	adds	r1, #1
 80061c6:	005b      	lsls	r3, r3, #1
 80061c8:	e7ee      	b.n	80061a8 <__lshift+0x1c>
 80061ca:	2300      	movs	r3, #0
 80061cc:	f100 0114 	add.w	r1, r0, #20
 80061d0:	f100 0210 	add.w	r2, r0, #16
 80061d4:	4618      	mov	r0, r3
 80061d6:	4553      	cmp	r3, sl
 80061d8:	db37      	blt.n	800624a <__lshift+0xbe>
 80061da:	6920      	ldr	r0, [r4, #16]
 80061dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80061e0:	f104 0314 	add.w	r3, r4, #20
 80061e4:	f019 091f 	ands.w	r9, r9, #31
 80061e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80061ec:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80061f0:	d02f      	beq.n	8006252 <__lshift+0xc6>
 80061f2:	f1c9 0e20 	rsb	lr, r9, #32
 80061f6:	468a      	mov	sl, r1
 80061f8:	f04f 0c00 	mov.w	ip, #0
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	fa02 f209 	lsl.w	r2, r2, r9
 8006202:	ea42 020c 	orr.w	r2, r2, ip
 8006206:	f84a 2b04 	str.w	r2, [sl], #4
 800620a:	f853 2b04 	ldr.w	r2, [r3], #4
 800620e:	4298      	cmp	r0, r3
 8006210:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006214:	d8f2      	bhi.n	80061fc <__lshift+0x70>
 8006216:	1b03      	subs	r3, r0, r4
 8006218:	3b15      	subs	r3, #21
 800621a:	f023 0303 	bic.w	r3, r3, #3
 800621e:	3304      	adds	r3, #4
 8006220:	f104 0215 	add.w	r2, r4, #21
 8006224:	4290      	cmp	r0, r2
 8006226:	bf38      	it	cc
 8006228:	2304      	movcc	r3, #4
 800622a:	f841 c003 	str.w	ip, [r1, r3]
 800622e:	f1bc 0f00 	cmp.w	ip, #0
 8006232:	d001      	beq.n	8006238 <__lshift+0xac>
 8006234:	f108 0602 	add.w	r6, r8, #2
 8006238:	3e01      	subs	r6, #1
 800623a:	4638      	mov	r0, r7
 800623c:	612e      	str	r6, [r5, #16]
 800623e:	4621      	mov	r1, r4
 8006240:	f7ff fdd2 	bl	8005de8 <_Bfree>
 8006244:	4628      	mov	r0, r5
 8006246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800624a:	f842 0f04 	str.w	r0, [r2, #4]!
 800624e:	3301      	adds	r3, #1
 8006250:	e7c1      	b.n	80061d6 <__lshift+0x4a>
 8006252:	3904      	subs	r1, #4
 8006254:	f853 2b04 	ldr.w	r2, [r3], #4
 8006258:	f841 2f04 	str.w	r2, [r1, #4]!
 800625c:	4298      	cmp	r0, r3
 800625e:	d8f9      	bhi.n	8006254 <__lshift+0xc8>
 8006260:	e7ea      	b.n	8006238 <__lshift+0xac>
 8006262:	bf00      	nop
 8006264:	080082df 	.word	0x080082df
 8006268:	08008283 	.word	0x08008283

0800626c <__mcmp>:
 800626c:	b530      	push	{r4, r5, lr}
 800626e:	6902      	ldr	r2, [r0, #16]
 8006270:	690c      	ldr	r4, [r1, #16]
 8006272:	1b12      	subs	r2, r2, r4
 8006274:	d10e      	bne.n	8006294 <__mcmp+0x28>
 8006276:	f100 0314 	add.w	r3, r0, #20
 800627a:	3114      	adds	r1, #20
 800627c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006280:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006284:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006288:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800628c:	42a5      	cmp	r5, r4
 800628e:	d003      	beq.n	8006298 <__mcmp+0x2c>
 8006290:	d305      	bcc.n	800629e <__mcmp+0x32>
 8006292:	2201      	movs	r2, #1
 8006294:	4610      	mov	r0, r2
 8006296:	bd30      	pop	{r4, r5, pc}
 8006298:	4283      	cmp	r3, r0
 800629a:	d3f3      	bcc.n	8006284 <__mcmp+0x18>
 800629c:	e7fa      	b.n	8006294 <__mcmp+0x28>
 800629e:	f04f 32ff 	mov.w	r2, #4294967295
 80062a2:	e7f7      	b.n	8006294 <__mcmp+0x28>

080062a4 <__mdiff>:
 80062a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062a8:	460c      	mov	r4, r1
 80062aa:	4606      	mov	r6, r0
 80062ac:	4611      	mov	r1, r2
 80062ae:	4620      	mov	r0, r4
 80062b0:	4690      	mov	r8, r2
 80062b2:	f7ff ffdb 	bl	800626c <__mcmp>
 80062b6:	1e05      	subs	r5, r0, #0
 80062b8:	d110      	bne.n	80062dc <__mdiff+0x38>
 80062ba:	4629      	mov	r1, r5
 80062bc:	4630      	mov	r0, r6
 80062be:	f7ff fd53 	bl	8005d68 <_Balloc>
 80062c2:	b930      	cbnz	r0, 80062d2 <__mdiff+0x2e>
 80062c4:	4b3a      	ldr	r3, [pc, #232]	; (80063b0 <__mdiff+0x10c>)
 80062c6:	4602      	mov	r2, r0
 80062c8:	f240 2132 	movw	r1, #562	; 0x232
 80062cc:	4839      	ldr	r0, [pc, #228]	; (80063b4 <__mdiff+0x110>)
 80062ce:	f000 f9af 	bl	8006630 <__assert_func>
 80062d2:	2301      	movs	r3, #1
 80062d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80062d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062dc:	bfa4      	itt	ge
 80062de:	4643      	movge	r3, r8
 80062e0:	46a0      	movge	r8, r4
 80062e2:	4630      	mov	r0, r6
 80062e4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80062e8:	bfa6      	itte	ge
 80062ea:	461c      	movge	r4, r3
 80062ec:	2500      	movge	r5, #0
 80062ee:	2501      	movlt	r5, #1
 80062f0:	f7ff fd3a 	bl	8005d68 <_Balloc>
 80062f4:	b920      	cbnz	r0, 8006300 <__mdiff+0x5c>
 80062f6:	4b2e      	ldr	r3, [pc, #184]	; (80063b0 <__mdiff+0x10c>)
 80062f8:	4602      	mov	r2, r0
 80062fa:	f44f 7110 	mov.w	r1, #576	; 0x240
 80062fe:	e7e5      	b.n	80062cc <__mdiff+0x28>
 8006300:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006304:	6926      	ldr	r6, [r4, #16]
 8006306:	60c5      	str	r5, [r0, #12]
 8006308:	f104 0914 	add.w	r9, r4, #20
 800630c:	f108 0514 	add.w	r5, r8, #20
 8006310:	f100 0e14 	add.w	lr, r0, #20
 8006314:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006318:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800631c:	f108 0210 	add.w	r2, r8, #16
 8006320:	46f2      	mov	sl, lr
 8006322:	2100      	movs	r1, #0
 8006324:	f859 3b04 	ldr.w	r3, [r9], #4
 8006328:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800632c:	fa1f f883 	uxth.w	r8, r3
 8006330:	fa11 f18b 	uxtah	r1, r1, fp
 8006334:	0c1b      	lsrs	r3, r3, #16
 8006336:	eba1 0808 	sub.w	r8, r1, r8
 800633a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800633e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006342:	fa1f f888 	uxth.w	r8, r8
 8006346:	1419      	asrs	r1, r3, #16
 8006348:	454e      	cmp	r6, r9
 800634a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800634e:	f84a 3b04 	str.w	r3, [sl], #4
 8006352:	d8e7      	bhi.n	8006324 <__mdiff+0x80>
 8006354:	1b33      	subs	r3, r6, r4
 8006356:	3b15      	subs	r3, #21
 8006358:	f023 0303 	bic.w	r3, r3, #3
 800635c:	3304      	adds	r3, #4
 800635e:	3415      	adds	r4, #21
 8006360:	42a6      	cmp	r6, r4
 8006362:	bf38      	it	cc
 8006364:	2304      	movcc	r3, #4
 8006366:	441d      	add	r5, r3
 8006368:	4473      	add	r3, lr
 800636a:	469e      	mov	lr, r3
 800636c:	462e      	mov	r6, r5
 800636e:	4566      	cmp	r6, ip
 8006370:	d30e      	bcc.n	8006390 <__mdiff+0xec>
 8006372:	f10c 0203 	add.w	r2, ip, #3
 8006376:	1b52      	subs	r2, r2, r5
 8006378:	f022 0203 	bic.w	r2, r2, #3
 800637c:	3d03      	subs	r5, #3
 800637e:	45ac      	cmp	ip, r5
 8006380:	bf38      	it	cc
 8006382:	2200      	movcc	r2, #0
 8006384:	441a      	add	r2, r3
 8006386:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800638a:	b17b      	cbz	r3, 80063ac <__mdiff+0x108>
 800638c:	6107      	str	r7, [r0, #16]
 800638e:	e7a3      	b.n	80062d8 <__mdiff+0x34>
 8006390:	f856 8b04 	ldr.w	r8, [r6], #4
 8006394:	fa11 f288 	uxtah	r2, r1, r8
 8006398:	1414      	asrs	r4, r2, #16
 800639a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800639e:	b292      	uxth	r2, r2
 80063a0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80063a4:	f84e 2b04 	str.w	r2, [lr], #4
 80063a8:	1421      	asrs	r1, r4, #16
 80063aa:	e7e0      	b.n	800636e <__mdiff+0xca>
 80063ac:	3f01      	subs	r7, #1
 80063ae:	e7ea      	b.n	8006386 <__mdiff+0xe2>
 80063b0:	080082df 	.word	0x080082df
 80063b4:	08008283 	.word	0x08008283

080063b8 <__d2b>:
 80063b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80063bc:	4689      	mov	r9, r1
 80063be:	2101      	movs	r1, #1
 80063c0:	ec57 6b10 	vmov	r6, r7, d0
 80063c4:	4690      	mov	r8, r2
 80063c6:	f7ff fccf 	bl	8005d68 <_Balloc>
 80063ca:	4604      	mov	r4, r0
 80063cc:	b930      	cbnz	r0, 80063dc <__d2b+0x24>
 80063ce:	4602      	mov	r2, r0
 80063d0:	4b25      	ldr	r3, [pc, #148]	; (8006468 <__d2b+0xb0>)
 80063d2:	4826      	ldr	r0, [pc, #152]	; (800646c <__d2b+0xb4>)
 80063d4:	f240 310a 	movw	r1, #778	; 0x30a
 80063d8:	f000 f92a 	bl	8006630 <__assert_func>
 80063dc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80063e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80063e4:	bb35      	cbnz	r5, 8006434 <__d2b+0x7c>
 80063e6:	2e00      	cmp	r6, #0
 80063e8:	9301      	str	r3, [sp, #4]
 80063ea:	d028      	beq.n	800643e <__d2b+0x86>
 80063ec:	4668      	mov	r0, sp
 80063ee:	9600      	str	r6, [sp, #0]
 80063f0:	f7ff fd82 	bl	8005ef8 <__lo0bits>
 80063f4:	9900      	ldr	r1, [sp, #0]
 80063f6:	b300      	cbz	r0, 800643a <__d2b+0x82>
 80063f8:	9a01      	ldr	r2, [sp, #4]
 80063fa:	f1c0 0320 	rsb	r3, r0, #32
 80063fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006402:	430b      	orrs	r3, r1
 8006404:	40c2      	lsrs	r2, r0
 8006406:	6163      	str	r3, [r4, #20]
 8006408:	9201      	str	r2, [sp, #4]
 800640a:	9b01      	ldr	r3, [sp, #4]
 800640c:	61a3      	str	r3, [r4, #24]
 800640e:	2b00      	cmp	r3, #0
 8006410:	bf14      	ite	ne
 8006412:	2202      	movne	r2, #2
 8006414:	2201      	moveq	r2, #1
 8006416:	6122      	str	r2, [r4, #16]
 8006418:	b1d5      	cbz	r5, 8006450 <__d2b+0x98>
 800641a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800641e:	4405      	add	r5, r0
 8006420:	f8c9 5000 	str.w	r5, [r9]
 8006424:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006428:	f8c8 0000 	str.w	r0, [r8]
 800642c:	4620      	mov	r0, r4
 800642e:	b003      	add	sp, #12
 8006430:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006434:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006438:	e7d5      	b.n	80063e6 <__d2b+0x2e>
 800643a:	6161      	str	r1, [r4, #20]
 800643c:	e7e5      	b.n	800640a <__d2b+0x52>
 800643e:	a801      	add	r0, sp, #4
 8006440:	f7ff fd5a 	bl	8005ef8 <__lo0bits>
 8006444:	9b01      	ldr	r3, [sp, #4]
 8006446:	6163      	str	r3, [r4, #20]
 8006448:	2201      	movs	r2, #1
 800644a:	6122      	str	r2, [r4, #16]
 800644c:	3020      	adds	r0, #32
 800644e:	e7e3      	b.n	8006418 <__d2b+0x60>
 8006450:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006454:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006458:	f8c9 0000 	str.w	r0, [r9]
 800645c:	6918      	ldr	r0, [r3, #16]
 800645e:	f7ff fd2b 	bl	8005eb8 <__hi0bits>
 8006462:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006466:	e7df      	b.n	8006428 <__d2b+0x70>
 8006468:	080082df 	.word	0x080082df
 800646c:	08008283 	.word	0x08008283

08006470 <_mprec_log10>:
 8006470:	2817      	cmp	r0, #23
 8006472:	b5d0      	push	{r4, r6, r7, lr}
 8006474:	4604      	mov	r4, r0
 8006476:	dc07      	bgt.n	8006488 <_mprec_log10+0x18>
 8006478:	4809      	ldr	r0, [pc, #36]	; (80064a0 <_mprec_log10+0x30>)
 800647a:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 800647e:	e9d4 0100 	ldrd	r0, r1, [r4]
 8006482:	ec41 0b10 	vmov	d0, r0, r1
 8006486:	bdd0      	pop	{r4, r6, r7, pc}
 8006488:	4906      	ldr	r1, [pc, #24]	; (80064a4 <_mprec_log10+0x34>)
 800648a:	4f07      	ldr	r7, [pc, #28]	; (80064a8 <_mprec_log10+0x38>)
 800648c:	2000      	movs	r0, #0
 800648e:	2600      	movs	r6, #0
 8006490:	4632      	mov	r2, r6
 8006492:	463b      	mov	r3, r7
 8006494:	f7fa f8b0 	bl	80005f8 <__aeabi_dmul>
 8006498:	3c01      	subs	r4, #1
 800649a:	d1f9      	bne.n	8006490 <_mprec_log10+0x20>
 800649c:	e7f1      	b.n	8006482 <_mprec_log10+0x12>
 800649e:	bf00      	nop
 80064a0:	08008318 	.word	0x08008318
 80064a4:	3ff00000 	.word	0x3ff00000
 80064a8:	40240000 	.word	0x40240000

080064ac <_calloc_r>:
 80064ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80064ae:	fba1 2402 	umull	r2, r4, r1, r2
 80064b2:	b94c      	cbnz	r4, 80064c8 <_calloc_r+0x1c>
 80064b4:	4611      	mov	r1, r2
 80064b6:	9201      	str	r2, [sp, #4]
 80064b8:	f000 f82e 	bl	8006518 <_malloc_r>
 80064bc:	9a01      	ldr	r2, [sp, #4]
 80064be:	4605      	mov	r5, r0
 80064c0:	b930      	cbnz	r0, 80064d0 <_calloc_r+0x24>
 80064c2:	4628      	mov	r0, r5
 80064c4:	b003      	add	sp, #12
 80064c6:	bd30      	pop	{r4, r5, pc}
 80064c8:	220c      	movs	r2, #12
 80064ca:	6002      	str	r2, [r0, #0]
 80064cc:	2500      	movs	r5, #0
 80064ce:	e7f8      	b.n	80064c2 <_calloc_r+0x16>
 80064d0:	4621      	mov	r1, r4
 80064d2:	f7ff fb09 	bl	8005ae8 <memset>
 80064d6:	e7f4      	b.n	80064c2 <_calloc_r+0x16>

080064d8 <sbrk_aligned>:
 80064d8:	b570      	push	{r4, r5, r6, lr}
 80064da:	4e0e      	ldr	r6, [pc, #56]	; (8006514 <sbrk_aligned+0x3c>)
 80064dc:	460c      	mov	r4, r1
 80064de:	6831      	ldr	r1, [r6, #0]
 80064e0:	4605      	mov	r5, r0
 80064e2:	b911      	cbnz	r1, 80064ea <sbrk_aligned+0x12>
 80064e4:	f000 f88c 	bl	8006600 <_sbrk_r>
 80064e8:	6030      	str	r0, [r6, #0]
 80064ea:	4621      	mov	r1, r4
 80064ec:	4628      	mov	r0, r5
 80064ee:	f000 f887 	bl	8006600 <_sbrk_r>
 80064f2:	1c43      	adds	r3, r0, #1
 80064f4:	d00a      	beq.n	800650c <sbrk_aligned+0x34>
 80064f6:	1cc4      	adds	r4, r0, #3
 80064f8:	f024 0403 	bic.w	r4, r4, #3
 80064fc:	42a0      	cmp	r0, r4
 80064fe:	d007      	beq.n	8006510 <sbrk_aligned+0x38>
 8006500:	1a21      	subs	r1, r4, r0
 8006502:	4628      	mov	r0, r5
 8006504:	f000 f87c 	bl	8006600 <_sbrk_r>
 8006508:	3001      	adds	r0, #1
 800650a:	d101      	bne.n	8006510 <sbrk_aligned+0x38>
 800650c:	f04f 34ff 	mov.w	r4, #4294967295
 8006510:	4620      	mov	r0, r4
 8006512:	bd70      	pop	{r4, r5, r6, pc}
 8006514:	20000170 	.word	0x20000170

08006518 <_malloc_r>:
 8006518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800651c:	1ccd      	adds	r5, r1, #3
 800651e:	f025 0503 	bic.w	r5, r5, #3
 8006522:	3508      	adds	r5, #8
 8006524:	2d0c      	cmp	r5, #12
 8006526:	bf38      	it	cc
 8006528:	250c      	movcc	r5, #12
 800652a:	2d00      	cmp	r5, #0
 800652c:	4607      	mov	r7, r0
 800652e:	db01      	blt.n	8006534 <_malloc_r+0x1c>
 8006530:	42a9      	cmp	r1, r5
 8006532:	d905      	bls.n	8006540 <_malloc_r+0x28>
 8006534:	230c      	movs	r3, #12
 8006536:	603b      	str	r3, [r7, #0]
 8006538:	2600      	movs	r6, #0
 800653a:	4630      	mov	r0, r6
 800653c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006540:	4e2e      	ldr	r6, [pc, #184]	; (80065fc <_malloc_r+0xe4>)
 8006542:	f000 ff37 	bl	80073b4 <__malloc_lock>
 8006546:	6833      	ldr	r3, [r6, #0]
 8006548:	461c      	mov	r4, r3
 800654a:	bb34      	cbnz	r4, 800659a <_malloc_r+0x82>
 800654c:	4629      	mov	r1, r5
 800654e:	4638      	mov	r0, r7
 8006550:	f7ff ffc2 	bl	80064d8 <sbrk_aligned>
 8006554:	1c43      	adds	r3, r0, #1
 8006556:	4604      	mov	r4, r0
 8006558:	d14d      	bne.n	80065f6 <_malloc_r+0xde>
 800655a:	6834      	ldr	r4, [r6, #0]
 800655c:	4626      	mov	r6, r4
 800655e:	2e00      	cmp	r6, #0
 8006560:	d140      	bne.n	80065e4 <_malloc_r+0xcc>
 8006562:	6823      	ldr	r3, [r4, #0]
 8006564:	4631      	mov	r1, r6
 8006566:	4638      	mov	r0, r7
 8006568:	eb04 0803 	add.w	r8, r4, r3
 800656c:	f000 f848 	bl	8006600 <_sbrk_r>
 8006570:	4580      	cmp	r8, r0
 8006572:	d13a      	bne.n	80065ea <_malloc_r+0xd2>
 8006574:	6821      	ldr	r1, [r4, #0]
 8006576:	3503      	adds	r5, #3
 8006578:	1a6d      	subs	r5, r5, r1
 800657a:	f025 0503 	bic.w	r5, r5, #3
 800657e:	3508      	adds	r5, #8
 8006580:	2d0c      	cmp	r5, #12
 8006582:	bf38      	it	cc
 8006584:	250c      	movcc	r5, #12
 8006586:	4629      	mov	r1, r5
 8006588:	4638      	mov	r0, r7
 800658a:	f7ff ffa5 	bl	80064d8 <sbrk_aligned>
 800658e:	3001      	adds	r0, #1
 8006590:	d02b      	beq.n	80065ea <_malloc_r+0xd2>
 8006592:	6823      	ldr	r3, [r4, #0]
 8006594:	442b      	add	r3, r5
 8006596:	6023      	str	r3, [r4, #0]
 8006598:	e00e      	b.n	80065b8 <_malloc_r+0xa0>
 800659a:	6822      	ldr	r2, [r4, #0]
 800659c:	1b52      	subs	r2, r2, r5
 800659e:	d41e      	bmi.n	80065de <_malloc_r+0xc6>
 80065a0:	2a0b      	cmp	r2, #11
 80065a2:	d916      	bls.n	80065d2 <_malloc_r+0xba>
 80065a4:	1961      	adds	r1, r4, r5
 80065a6:	42a3      	cmp	r3, r4
 80065a8:	6025      	str	r5, [r4, #0]
 80065aa:	bf18      	it	ne
 80065ac:	6059      	strne	r1, [r3, #4]
 80065ae:	6863      	ldr	r3, [r4, #4]
 80065b0:	bf08      	it	eq
 80065b2:	6031      	streq	r1, [r6, #0]
 80065b4:	5162      	str	r2, [r4, r5]
 80065b6:	604b      	str	r3, [r1, #4]
 80065b8:	4638      	mov	r0, r7
 80065ba:	f104 060b 	add.w	r6, r4, #11
 80065be:	f000 feff 	bl	80073c0 <__malloc_unlock>
 80065c2:	f026 0607 	bic.w	r6, r6, #7
 80065c6:	1d23      	adds	r3, r4, #4
 80065c8:	1af2      	subs	r2, r6, r3
 80065ca:	d0b6      	beq.n	800653a <_malloc_r+0x22>
 80065cc:	1b9b      	subs	r3, r3, r6
 80065ce:	50a3      	str	r3, [r4, r2]
 80065d0:	e7b3      	b.n	800653a <_malloc_r+0x22>
 80065d2:	6862      	ldr	r2, [r4, #4]
 80065d4:	42a3      	cmp	r3, r4
 80065d6:	bf0c      	ite	eq
 80065d8:	6032      	streq	r2, [r6, #0]
 80065da:	605a      	strne	r2, [r3, #4]
 80065dc:	e7ec      	b.n	80065b8 <_malloc_r+0xa0>
 80065de:	4623      	mov	r3, r4
 80065e0:	6864      	ldr	r4, [r4, #4]
 80065e2:	e7b2      	b.n	800654a <_malloc_r+0x32>
 80065e4:	4634      	mov	r4, r6
 80065e6:	6876      	ldr	r6, [r6, #4]
 80065e8:	e7b9      	b.n	800655e <_malloc_r+0x46>
 80065ea:	230c      	movs	r3, #12
 80065ec:	603b      	str	r3, [r7, #0]
 80065ee:	4638      	mov	r0, r7
 80065f0:	f000 fee6 	bl	80073c0 <__malloc_unlock>
 80065f4:	e7a1      	b.n	800653a <_malloc_r+0x22>
 80065f6:	6025      	str	r5, [r4, #0]
 80065f8:	e7de      	b.n	80065b8 <_malloc_r+0xa0>
 80065fa:	bf00      	nop
 80065fc:	2000016c 	.word	0x2000016c

08006600 <_sbrk_r>:
 8006600:	b538      	push	{r3, r4, r5, lr}
 8006602:	4d06      	ldr	r5, [pc, #24]	; (800661c <_sbrk_r+0x1c>)
 8006604:	2300      	movs	r3, #0
 8006606:	4604      	mov	r4, r0
 8006608:	4608      	mov	r0, r1
 800660a:	602b      	str	r3, [r5, #0]
 800660c:	f7fb f8e6 	bl	80017dc <_sbrk>
 8006610:	1c43      	adds	r3, r0, #1
 8006612:	d102      	bne.n	800661a <_sbrk_r+0x1a>
 8006614:	682b      	ldr	r3, [r5, #0]
 8006616:	b103      	cbz	r3, 800661a <_sbrk_r+0x1a>
 8006618:	6023      	str	r3, [r4, #0]
 800661a:	bd38      	pop	{r3, r4, r5, pc}
 800661c:	20000174 	.word	0x20000174

08006620 <strcpy>:
 8006620:	4603      	mov	r3, r0
 8006622:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006626:	f803 2b01 	strb.w	r2, [r3], #1
 800662a:	2a00      	cmp	r2, #0
 800662c:	d1f9      	bne.n	8006622 <strcpy+0x2>
 800662e:	4770      	bx	lr

08006630 <__assert_func>:
 8006630:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006632:	4614      	mov	r4, r2
 8006634:	461a      	mov	r2, r3
 8006636:	4b09      	ldr	r3, [pc, #36]	; (800665c <__assert_func+0x2c>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4605      	mov	r5, r0
 800663c:	68d8      	ldr	r0, [r3, #12]
 800663e:	b14c      	cbz	r4, 8006654 <__assert_func+0x24>
 8006640:	4b07      	ldr	r3, [pc, #28]	; (8006660 <__assert_func+0x30>)
 8006642:	9100      	str	r1, [sp, #0]
 8006644:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006648:	4906      	ldr	r1, [pc, #24]	; (8006664 <__assert_func+0x34>)
 800664a:	462b      	mov	r3, r5
 800664c:	f000 fe8a 	bl	8007364 <fiprintf>
 8006650:	f001 fab6 	bl	8007bc0 <abort>
 8006654:	4b04      	ldr	r3, [pc, #16]	; (8006668 <__assert_func+0x38>)
 8006656:	461c      	mov	r4, r3
 8006658:	e7f3      	b.n	8006642 <__assert_func+0x12>
 800665a:	bf00      	nop
 800665c:	2000000c 	.word	0x2000000c
 8006660:	080083ec 	.word	0x080083ec
 8006664:	080083f9 	.word	0x080083f9
 8006668:	08008427 	.word	0x08008427

0800666c <quorem>:
 800666c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006670:	6903      	ldr	r3, [r0, #16]
 8006672:	690c      	ldr	r4, [r1, #16]
 8006674:	42a3      	cmp	r3, r4
 8006676:	4607      	mov	r7, r0
 8006678:	f2c0 8081 	blt.w	800677e <quorem+0x112>
 800667c:	3c01      	subs	r4, #1
 800667e:	f101 0814 	add.w	r8, r1, #20
 8006682:	f100 0514 	add.w	r5, r0, #20
 8006686:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800668a:	9301      	str	r3, [sp, #4]
 800668c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006690:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006694:	3301      	adds	r3, #1
 8006696:	429a      	cmp	r2, r3
 8006698:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800669c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80066a0:	fbb2 f6f3 	udiv	r6, r2, r3
 80066a4:	d331      	bcc.n	800670a <quorem+0x9e>
 80066a6:	f04f 0e00 	mov.w	lr, #0
 80066aa:	4640      	mov	r0, r8
 80066ac:	46ac      	mov	ip, r5
 80066ae:	46f2      	mov	sl, lr
 80066b0:	f850 2b04 	ldr.w	r2, [r0], #4
 80066b4:	b293      	uxth	r3, r2
 80066b6:	fb06 e303 	mla	r3, r6, r3, lr
 80066ba:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80066be:	b29b      	uxth	r3, r3
 80066c0:	ebaa 0303 	sub.w	r3, sl, r3
 80066c4:	f8dc a000 	ldr.w	sl, [ip]
 80066c8:	0c12      	lsrs	r2, r2, #16
 80066ca:	fa13 f38a 	uxtah	r3, r3, sl
 80066ce:	fb06 e202 	mla	r2, r6, r2, lr
 80066d2:	9300      	str	r3, [sp, #0]
 80066d4:	9b00      	ldr	r3, [sp, #0]
 80066d6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80066da:	b292      	uxth	r2, r2
 80066dc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80066e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80066e4:	f8bd 3000 	ldrh.w	r3, [sp]
 80066e8:	4581      	cmp	r9, r0
 80066ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80066ee:	f84c 3b04 	str.w	r3, [ip], #4
 80066f2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80066f6:	d2db      	bcs.n	80066b0 <quorem+0x44>
 80066f8:	f855 300b 	ldr.w	r3, [r5, fp]
 80066fc:	b92b      	cbnz	r3, 800670a <quorem+0x9e>
 80066fe:	9b01      	ldr	r3, [sp, #4]
 8006700:	3b04      	subs	r3, #4
 8006702:	429d      	cmp	r5, r3
 8006704:	461a      	mov	r2, r3
 8006706:	d32e      	bcc.n	8006766 <quorem+0xfa>
 8006708:	613c      	str	r4, [r7, #16]
 800670a:	4638      	mov	r0, r7
 800670c:	f7ff fdae 	bl	800626c <__mcmp>
 8006710:	2800      	cmp	r0, #0
 8006712:	db24      	blt.n	800675e <quorem+0xf2>
 8006714:	3601      	adds	r6, #1
 8006716:	4628      	mov	r0, r5
 8006718:	f04f 0c00 	mov.w	ip, #0
 800671c:	f858 2b04 	ldr.w	r2, [r8], #4
 8006720:	f8d0 e000 	ldr.w	lr, [r0]
 8006724:	b293      	uxth	r3, r2
 8006726:	ebac 0303 	sub.w	r3, ip, r3
 800672a:	0c12      	lsrs	r2, r2, #16
 800672c:	fa13 f38e 	uxtah	r3, r3, lr
 8006730:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006734:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006738:	b29b      	uxth	r3, r3
 800673a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800673e:	45c1      	cmp	r9, r8
 8006740:	f840 3b04 	str.w	r3, [r0], #4
 8006744:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006748:	d2e8      	bcs.n	800671c <quorem+0xb0>
 800674a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800674e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006752:	b922      	cbnz	r2, 800675e <quorem+0xf2>
 8006754:	3b04      	subs	r3, #4
 8006756:	429d      	cmp	r5, r3
 8006758:	461a      	mov	r2, r3
 800675a:	d30a      	bcc.n	8006772 <quorem+0x106>
 800675c:	613c      	str	r4, [r7, #16]
 800675e:	4630      	mov	r0, r6
 8006760:	b003      	add	sp, #12
 8006762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006766:	6812      	ldr	r2, [r2, #0]
 8006768:	3b04      	subs	r3, #4
 800676a:	2a00      	cmp	r2, #0
 800676c:	d1cc      	bne.n	8006708 <quorem+0x9c>
 800676e:	3c01      	subs	r4, #1
 8006770:	e7c7      	b.n	8006702 <quorem+0x96>
 8006772:	6812      	ldr	r2, [r2, #0]
 8006774:	3b04      	subs	r3, #4
 8006776:	2a00      	cmp	r2, #0
 8006778:	d1f0      	bne.n	800675c <quorem+0xf0>
 800677a:	3c01      	subs	r4, #1
 800677c:	e7eb      	b.n	8006756 <quorem+0xea>
 800677e:	2000      	movs	r0, #0
 8006780:	e7ee      	b.n	8006760 <quorem+0xf4>
 8006782:	0000      	movs	r0, r0
 8006784:	0000      	movs	r0, r0
	...

08006788 <_dtoa_r>:
 8006788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800678c:	ed2d 8b04 	vpush	{d8-d9}
 8006790:	ec57 6b10 	vmov	r6, r7, d0
 8006794:	b093      	sub	sp, #76	; 0x4c
 8006796:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006798:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800679c:	9106      	str	r1, [sp, #24]
 800679e:	ee10 aa10 	vmov	sl, s0
 80067a2:	4604      	mov	r4, r0
 80067a4:	9209      	str	r2, [sp, #36]	; 0x24
 80067a6:	930c      	str	r3, [sp, #48]	; 0x30
 80067a8:	46bb      	mov	fp, r7
 80067aa:	b975      	cbnz	r5, 80067ca <_dtoa_r+0x42>
 80067ac:	2010      	movs	r0, #16
 80067ae:	f000 fdeb 	bl	8007388 <malloc>
 80067b2:	4602      	mov	r2, r0
 80067b4:	6260      	str	r0, [r4, #36]	; 0x24
 80067b6:	b920      	cbnz	r0, 80067c2 <_dtoa_r+0x3a>
 80067b8:	4ba7      	ldr	r3, [pc, #668]	; (8006a58 <_dtoa_r+0x2d0>)
 80067ba:	21ea      	movs	r1, #234	; 0xea
 80067bc:	48a7      	ldr	r0, [pc, #668]	; (8006a5c <_dtoa_r+0x2d4>)
 80067be:	f7ff ff37 	bl	8006630 <__assert_func>
 80067c2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80067c6:	6005      	str	r5, [r0, #0]
 80067c8:	60c5      	str	r5, [r0, #12]
 80067ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80067cc:	6819      	ldr	r1, [r3, #0]
 80067ce:	b151      	cbz	r1, 80067e6 <_dtoa_r+0x5e>
 80067d0:	685a      	ldr	r2, [r3, #4]
 80067d2:	604a      	str	r2, [r1, #4]
 80067d4:	2301      	movs	r3, #1
 80067d6:	4093      	lsls	r3, r2
 80067d8:	608b      	str	r3, [r1, #8]
 80067da:	4620      	mov	r0, r4
 80067dc:	f7ff fb04 	bl	8005de8 <_Bfree>
 80067e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80067e2:	2200      	movs	r2, #0
 80067e4:	601a      	str	r2, [r3, #0]
 80067e6:	1e3b      	subs	r3, r7, #0
 80067e8:	bfaa      	itet	ge
 80067ea:	2300      	movge	r3, #0
 80067ec:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80067f0:	f8c8 3000 	strge.w	r3, [r8]
 80067f4:	4b9a      	ldr	r3, [pc, #616]	; (8006a60 <_dtoa_r+0x2d8>)
 80067f6:	bfbc      	itt	lt
 80067f8:	2201      	movlt	r2, #1
 80067fa:	f8c8 2000 	strlt.w	r2, [r8]
 80067fe:	ea33 030b 	bics.w	r3, r3, fp
 8006802:	d11b      	bne.n	800683c <_dtoa_r+0xb4>
 8006804:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006806:	f242 730f 	movw	r3, #9999	; 0x270f
 800680a:	6013      	str	r3, [r2, #0]
 800680c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006810:	4333      	orrs	r3, r6
 8006812:	f000 8592 	beq.w	800733a <_dtoa_r+0xbb2>
 8006816:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006818:	b963      	cbnz	r3, 8006834 <_dtoa_r+0xac>
 800681a:	4b92      	ldr	r3, [pc, #584]	; (8006a64 <_dtoa_r+0x2dc>)
 800681c:	e022      	b.n	8006864 <_dtoa_r+0xdc>
 800681e:	4b92      	ldr	r3, [pc, #584]	; (8006a68 <_dtoa_r+0x2e0>)
 8006820:	9301      	str	r3, [sp, #4]
 8006822:	3308      	adds	r3, #8
 8006824:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006826:	6013      	str	r3, [r2, #0]
 8006828:	9801      	ldr	r0, [sp, #4]
 800682a:	b013      	add	sp, #76	; 0x4c
 800682c:	ecbd 8b04 	vpop	{d8-d9}
 8006830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006834:	4b8b      	ldr	r3, [pc, #556]	; (8006a64 <_dtoa_r+0x2dc>)
 8006836:	9301      	str	r3, [sp, #4]
 8006838:	3303      	adds	r3, #3
 800683a:	e7f3      	b.n	8006824 <_dtoa_r+0x9c>
 800683c:	2200      	movs	r2, #0
 800683e:	2300      	movs	r3, #0
 8006840:	4650      	mov	r0, sl
 8006842:	4659      	mov	r1, fp
 8006844:	f7fa f940 	bl	8000ac8 <__aeabi_dcmpeq>
 8006848:	ec4b ab19 	vmov	d9, sl, fp
 800684c:	4680      	mov	r8, r0
 800684e:	b158      	cbz	r0, 8006868 <_dtoa_r+0xe0>
 8006850:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006852:	2301      	movs	r3, #1
 8006854:	6013      	str	r3, [r2, #0]
 8006856:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006858:	2b00      	cmp	r3, #0
 800685a:	f000 856b 	beq.w	8007334 <_dtoa_r+0xbac>
 800685e:	4883      	ldr	r0, [pc, #524]	; (8006a6c <_dtoa_r+0x2e4>)
 8006860:	6018      	str	r0, [r3, #0]
 8006862:	1e43      	subs	r3, r0, #1
 8006864:	9301      	str	r3, [sp, #4]
 8006866:	e7df      	b.n	8006828 <_dtoa_r+0xa0>
 8006868:	ec4b ab10 	vmov	d0, sl, fp
 800686c:	aa10      	add	r2, sp, #64	; 0x40
 800686e:	a911      	add	r1, sp, #68	; 0x44
 8006870:	4620      	mov	r0, r4
 8006872:	f7ff fda1 	bl	80063b8 <__d2b>
 8006876:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800687a:	ee08 0a10 	vmov	s16, r0
 800687e:	2d00      	cmp	r5, #0
 8006880:	f000 8084 	beq.w	800698c <_dtoa_r+0x204>
 8006884:	ee19 3a90 	vmov	r3, s19
 8006888:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800688c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006890:	4656      	mov	r6, sl
 8006892:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006896:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800689a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800689e:	4b74      	ldr	r3, [pc, #464]	; (8006a70 <_dtoa_r+0x2e8>)
 80068a0:	2200      	movs	r2, #0
 80068a2:	4630      	mov	r0, r6
 80068a4:	4639      	mov	r1, r7
 80068a6:	f7f9 fcef 	bl	8000288 <__aeabi_dsub>
 80068aa:	a365      	add	r3, pc, #404	; (adr r3, 8006a40 <_dtoa_r+0x2b8>)
 80068ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b0:	f7f9 fea2 	bl	80005f8 <__aeabi_dmul>
 80068b4:	a364      	add	r3, pc, #400	; (adr r3, 8006a48 <_dtoa_r+0x2c0>)
 80068b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ba:	f7f9 fce7 	bl	800028c <__adddf3>
 80068be:	4606      	mov	r6, r0
 80068c0:	4628      	mov	r0, r5
 80068c2:	460f      	mov	r7, r1
 80068c4:	f7f9 fe2e 	bl	8000524 <__aeabi_i2d>
 80068c8:	a361      	add	r3, pc, #388	; (adr r3, 8006a50 <_dtoa_r+0x2c8>)
 80068ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ce:	f7f9 fe93 	bl	80005f8 <__aeabi_dmul>
 80068d2:	4602      	mov	r2, r0
 80068d4:	460b      	mov	r3, r1
 80068d6:	4630      	mov	r0, r6
 80068d8:	4639      	mov	r1, r7
 80068da:	f7f9 fcd7 	bl	800028c <__adddf3>
 80068de:	4606      	mov	r6, r0
 80068e0:	460f      	mov	r7, r1
 80068e2:	f7fa f923 	bl	8000b2c <__aeabi_d2iz>
 80068e6:	2200      	movs	r2, #0
 80068e8:	9000      	str	r0, [sp, #0]
 80068ea:	2300      	movs	r3, #0
 80068ec:	4630      	mov	r0, r6
 80068ee:	4639      	mov	r1, r7
 80068f0:	f7fa f8f4 	bl	8000adc <__aeabi_dcmplt>
 80068f4:	b150      	cbz	r0, 800690c <_dtoa_r+0x184>
 80068f6:	9800      	ldr	r0, [sp, #0]
 80068f8:	f7f9 fe14 	bl	8000524 <__aeabi_i2d>
 80068fc:	4632      	mov	r2, r6
 80068fe:	463b      	mov	r3, r7
 8006900:	f7fa f8e2 	bl	8000ac8 <__aeabi_dcmpeq>
 8006904:	b910      	cbnz	r0, 800690c <_dtoa_r+0x184>
 8006906:	9b00      	ldr	r3, [sp, #0]
 8006908:	3b01      	subs	r3, #1
 800690a:	9300      	str	r3, [sp, #0]
 800690c:	9b00      	ldr	r3, [sp, #0]
 800690e:	2b16      	cmp	r3, #22
 8006910:	d85a      	bhi.n	80069c8 <_dtoa_r+0x240>
 8006912:	9a00      	ldr	r2, [sp, #0]
 8006914:	4b57      	ldr	r3, [pc, #348]	; (8006a74 <_dtoa_r+0x2ec>)
 8006916:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800691a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800691e:	ec51 0b19 	vmov	r0, r1, d9
 8006922:	f7fa f8db 	bl	8000adc <__aeabi_dcmplt>
 8006926:	2800      	cmp	r0, #0
 8006928:	d050      	beq.n	80069cc <_dtoa_r+0x244>
 800692a:	9b00      	ldr	r3, [sp, #0]
 800692c:	3b01      	subs	r3, #1
 800692e:	9300      	str	r3, [sp, #0]
 8006930:	2300      	movs	r3, #0
 8006932:	930b      	str	r3, [sp, #44]	; 0x2c
 8006934:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006936:	1b5d      	subs	r5, r3, r5
 8006938:	1e6b      	subs	r3, r5, #1
 800693a:	9305      	str	r3, [sp, #20]
 800693c:	bf45      	ittet	mi
 800693e:	f1c5 0301 	rsbmi	r3, r5, #1
 8006942:	9304      	strmi	r3, [sp, #16]
 8006944:	2300      	movpl	r3, #0
 8006946:	2300      	movmi	r3, #0
 8006948:	bf4c      	ite	mi
 800694a:	9305      	strmi	r3, [sp, #20]
 800694c:	9304      	strpl	r3, [sp, #16]
 800694e:	9b00      	ldr	r3, [sp, #0]
 8006950:	2b00      	cmp	r3, #0
 8006952:	db3d      	blt.n	80069d0 <_dtoa_r+0x248>
 8006954:	9b05      	ldr	r3, [sp, #20]
 8006956:	9a00      	ldr	r2, [sp, #0]
 8006958:	920a      	str	r2, [sp, #40]	; 0x28
 800695a:	4413      	add	r3, r2
 800695c:	9305      	str	r3, [sp, #20]
 800695e:	2300      	movs	r3, #0
 8006960:	9307      	str	r3, [sp, #28]
 8006962:	9b06      	ldr	r3, [sp, #24]
 8006964:	2b09      	cmp	r3, #9
 8006966:	f200 8089 	bhi.w	8006a7c <_dtoa_r+0x2f4>
 800696a:	2b05      	cmp	r3, #5
 800696c:	bfc4      	itt	gt
 800696e:	3b04      	subgt	r3, #4
 8006970:	9306      	strgt	r3, [sp, #24]
 8006972:	9b06      	ldr	r3, [sp, #24]
 8006974:	f1a3 0302 	sub.w	r3, r3, #2
 8006978:	bfcc      	ite	gt
 800697a:	2500      	movgt	r5, #0
 800697c:	2501      	movle	r5, #1
 800697e:	2b03      	cmp	r3, #3
 8006980:	f200 8087 	bhi.w	8006a92 <_dtoa_r+0x30a>
 8006984:	e8df f003 	tbb	[pc, r3]
 8006988:	59383a2d 	.word	0x59383a2d
 800698c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006990:	441d      	add	r5, r3
 8006992:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006996:	2b20      	cmp	r3, #32
 8006998:	bfc1      	itttt	gt
 800699a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800699e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80069a2:	fa0b f303 	lslgt.w	r3, fp, r3
 80069a6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80069aa:	bfda      	itte	le
 80069ac:	f1c3 0320 	rsble	r3, r3, #32
 80069b0:	fa06 f003 	lslle.w	r0, r6, r3
 80069b4:	4318      	orrgt	r0, r3
 80069b6:	f7f9 fda5 	bl	8000504 <__aeabi_ui2d>
 80069ba:	2301      	movs	r3, #1
 80069bc:	4606      	mov	r6, r0
 80069be:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80069c2:	3d01      	subs	r5, #1
 80069c4:	930e      	str	r3, [sp, #56]	; 0x38
 80069c6:	e76a      	b.n	800689e <_dtoa_r+0x116>
 80069c8:	2301      	movs	r3, #1
 80069ca:	e7b2      	b.n	8006932 <_dtoa_r+0x1aa>
 80069cc:	900b      	str	r0, [sp, #44]	; 0x2c
 80069ce:	e7b1      	b.n	8006934 <_dtoa_r+0x1ac>
 80069d0:	9b04      	ldr	r3, [sp, #16]
 80069d2:	9a00      	ldr	r2, [sp, #0]
 80069d4:	1a9b      	subs	r3, r3, r2
 80069d6:	9304      	str	r3, [sp, #16]
 80069d8:	4253      	negs	r3, r2
 80069da:	9307      	str	r3, [sp, #28]
 80069dc:	2300      	movs	r3, #0
 80069de:	930a      	str	r3, [sp, #40]	; 0x28
 80069e0:	e7bf      	b.n	8006962 <_dtoa_r+0x1da>
 80069e2:	2300      	movs	r3, #0
 80069e4:	9308      	str	r3, [sp, #32]
 80069e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	dc55      	bgt.n	8006a98 <_dtoa_r+0x310>
 80069ec:	2301      	movs	r3, #1
 80069ee:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80069f2:	461a      	mov	r2, r3
 80069f4:	9209      	str	r2, [sp, #36]	; 0x24
 80069f6:	e00c      	b.n	8006a12 <_dtoa_r+0x28a>
 80069f8:	2301      	movs	r3, #1
 80069fa:	e7f3      	b.n	80069e4 <_dtoa_r+0x25c>
 80069fc:	2300      	movs	r3, #0
 80069fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a00:	9308      	str	r3, [sp, #32]
 8006a02:	9b00      	ldr	r3, [sp, #0]
 8006a04:	4413      	add	r3, r2
 8006a06:	9302      	str	r3, [sp, #8]
 8006a08:	3301      	adds	r3, #1
 8006a0a:	2b01      	cmp	r3, #1
 8006a0c:	9303      	str	r3, [sp, #12]
 8006a0e:	bfb8      	it	lt
 8006a10:	2301      	movlt	r3, #1
 8006a12:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006a14:	2200      	movs	r2, #0
 8006a16:	6042      	str	r2, [r0, #4]
 8006a18:	2204      	movs	r2, #4
 8006a1a:	f102 0614 	add.w	r6, r2, #20
 8006a1e:	429e      	cmp	r6, r3
 8006a20:	6841      	ldr	r1, [r0, #4]
 8006a22:	d93d      	bls.n	8006aa0 <_dtoa_r+0x318>
 8006a24:	4620      	mov	r0, r4
 8006a26:	f7ff f99f 	bl	8005d68 <_Balloc>
 8006a2a:	9001      	str	r0, [sp, #4]
 8006a2c:	2800      	cmp	r0, #0
 8006a2e:	d13b      	bne.n	8006aa8 <_dtoa_r+0x320>
 8006a30:	4b11      	ldr	r3, [pc, #68]	; (8006a78 <_dtoa_r+0x2f0>)
 8006a32:	4602      	mov	r2, r0
 8006a34:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006a38:	e6c0      	b.n	80067bc <_dtoa_r+0x34>
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	e7df      	b.n	80069fe <_dtoa_r+0x276>
 8006a3e:	bf00      	nop
 8006a40:	636f4361 	.word	0x636f4361
 8006a44:	3fd287a7 	.word	0x3fd287a7
 8006a48:	8b60c8b3 	.word	0x8b60c8b3
 8006a4c:	3fc68a28 	.word	0x3fc68a28
 8006a50:	509f79fb 	.word	0x509f79fb
 8006a54:	3fd34413 	.word	0x3fd34413
 8006a58:	0800826c 	.word	0x0800826c
 8006a5c:	08008437 	.word	0x08008437
 8006a60:	7ff00000 	.word	0x7ff00000
 8006a64:	08008431 	.word	0x08008431
 8006a68:	08008428 	.word	0x08008428
 8006a6c:	08008436 	.word	0x08008436
 8006a70:	3ff80000 	.word	0x3ff80000
 8006a74:	08008318 	.word	0x08008318
 8006a78:	080082df 	.word	0x080082df
 8006a7c:	2501      	movs	r5, #1
 8006a7e:	2300      	movs	r3, #0
 8006a80:	9306      	str	r3, [sp, #24]
 8006a82:	9508      	str	r5, [sp, #32]
 8006a84:	f04f 33ff 	mov.w	r3, #4294967295
 8006a88:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	2312      	movs	r3, #18
 8006a90:	e7b0      	b.n	80069f4 <_dtoa_r+0x26c>
 8006a92:	2301      	movs	r3, #1
 8006a94:	9308      	str	r3, [sp, #32]
 8006a96:	e7f5      	b.n	8006a84 <_dtoa_r+0x2fc>
 8006a98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a9a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006a9e:	e7b8      	b.n	8006a12 <_dtoa_r+0x28a>
 8006aa0:	3101      	adds	r1, #1
 8006aa2:	6041      	str	r1, [r0, #4]
 8006aa4:	0052      	lsls	r2, r2, #1
 8006aa6:	e7b8      	b.n	8006a1a <_dtoa_r+0x292>
 8006aa8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006aaa:	9a01      	ldr	r2, [sp, #4]
 8006aac:	601a      	str	r2, [r3, #0]
 8006aae:	9b03      	ldr	r3, [sp, #12]
 8006ab0:	2b0e      	cmp	r3, #14
 8006ab2:	f200 809d 	bhi.w	8006bf0 <_dtoa_r+0x468>
 8006ab6:	2d00      	cmp	r5, #0
 8006ab8:	f000 809a 	beq.w	8006bf0 <_dtoa_r+0x468>
 8006abc:	9b00      	ldr	r3, [sp, #0]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	dd32      	ble.n	8006b28 <_dtoa_r+0x3a0>
 8006ac2:	4ab7      	ldr	r2, [pc, #732]	; (8006da0 <_dtoa_r+0x618>)
 8006ac4:	f003 030f 	and.w	r3, r3, #15
 8006ac8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006acc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006ad0:	9b00      	ldr	r3, [sp, #0]
 8006ad2:	05d8      	lsls	r0, r3, #23
 8006ad4:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006ad8:	d516      	bpl.n	8006b08 <_dtoa_r+0x380>
 8006ada:	4bb2      	ldr	r3, [pc, #712]	; (8006da4 <_dtoa_r+0x61c>)
 8006adc:	ec51 0b19 	vmov	r0, r1, d9
 8006ae0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006ae4:	f7f9 feb2 	bl	800084c <__aeabi_ddiv>
 8006ae8:	f007 070f 	and.w	r7, r7, #15
 8006aec:	4682      	mov	sl, r0
 8006aee:	468b      	mov	fp, r1
 8006af0:	2503      	movs	r5, #3
 8006af2:	4eac      	ldr	r6, [pc, #688]	; (8006da4 <_dtoa_r+0x61c>)
 8006af4:	b957      	cbnz	r7, 8006b0c <_dtoa_r+0x384>
 8006af6:	4642      	mov	r2, r8
 8006af8:	464b      	mov	r3, r9
 8006afa:	4650      	mov	r0, sl
 8006afc:	4659      	mov	r1, fp
 8006afe:	f7f9 fea5 	bl	800084c <__aeabi_ddiv>
 8006b02:	4682      	mov	sl, r0
 8006b04:	468b      	mov	fp, r1
 8006b06:	e028      	b.n	8006b5a <_dtoa_r+0x3d2>
 8006b08:	2502      	movs	r5, #2
 8006b0a:	e7f2      	b.n	8006af2 <_dtoa_r+0x36a>
 8006b0c:	07f9      	lsls	r1, r7, #31
 8006b0e:	d508      	bpl.n	8006b22 <_dtoa_r+0x39a>
 8006b10:	4640      	mov	r0, r8
 8006b12:	4649      	mov	r1, r9
 8006b14:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006b18:	f7f9 fd6e 	bl	80005f8 <__aeabi_dmul>
 8006b1c:	3501      	adds	r5, #1
 8006b1e:	4680      	mov	r8, r0
 8006b20:	4689      	mov	r9, r1
 8006b22:	107f      	asrs	r7, r7, #1
 8006b24:	3608      	adds	r6, #8
 8006b26:	e7e5      	b.n	8006af4 <_dtoa_r+0x36c>
 8006b28:	f000 809b 	beq.w	8006c62 <_dtoa_r+0x4da>
 8006b2c:	9b00      	ldr	r3, [sp, #0]
 8006b2e:	4f9d      	ldr	r7, [pc, #628]	; (8006da4 <_dtoa_r+0x61c>)
 8006b30:	425e      	negs	r6, r3
 8006b32:	4b9b      	ldr	r3, [pc, #620]	; (8006da0 <_dtoa_r+0x618>)
 8006b34:	f006 020f 	and.w	r2, r6, #15
 8006b38:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b40:	ec51 0b19 	vmov	r0, r1, d9
 8006b44:	f7f9 fd58 	bl	80005f8 <__aeabi_dmul>
 8006b48:	1136      	asrs	r6, r6, #4
 8006b4a:	4682      	mov	sl, r0
 8006b4c:	468b      	mov	fp, r1
 8006b4e:	2300      	movs	r3, #0
 8006b50:	2502      	movs	r5, #2
 8006b52:	2e00      	cmp	r6, #0
 8006b54:	d17a      	bne.n	8006c4c <_dtoa_r+0x4c4>
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d1d3      	bne.n	8006b02 <_dtoa_r+0x37a>
 8006b5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	f000 8082 	beq.w	8006c66 <_dtoa_r+0x4de>
 8006b62:	4b91      	ldr	r3, [pc, #580]	; (8006da8 <_dtoa_r+0x620>)
 8006b64:	2200      	movs	r2, #0
 8006b66:	4650      	mov	r0, sl
 8006b68:	4659      	mov	r1, fp
 8006b6a:	f7f9 ffb7 	bl	8000adc <__aeabi_dcmplt>
 8006b6e:	2800      	cmp	r0, #0
 8006b70:	d079      	beq.n	8006c66 <_dtoa_r+0x4de>
 8006b72:	9b03      	ldr	r3, [sp, #12]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d076      	beq.n	8006c66 <_dtoa_r+0x4de>
 8006b78:	9b02      	ldr	r3, [sp, #8]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	dd36      	ble.n	8006bec <_dtoa_r+0x464>
 8006b7e:	9b00      	ldr	r3, [sp, #0]
 8006b80:	4650      	mov	r0, sl
 8006b82:	4659      	mov	r1, fp
 8006b84:	1e5f      	subs	r7, r3, #1
 8006b86:	2200      	movs	r2, #0
 8006b88:	4b88      	ldr	r3, [pc, #544]	; (8006dac <_dtoa_r+0x624>)
 8006b8a:	f7f9 fd35 	bl	80005f8 <__aeabi_dmul>
 8006b8e:	9e02      	ldr	r6, [sp, #8]
 8006b90:	4682      	mov	sl, r0
 8006b92:	468b      	mov	fp, r1
 8006b94:	3501      	adds	r5, #1
 8006b96:	4628      	mov	r0, r5
 8006b98:	f7f9 fcc4 	bl	8000524 <__aeabi_i2d>
 8006b9c:	4652      	mov	r2, sl
 8006b9e:	465b      	mov	r3, fp
 8006ba0:	f7f9 fd2a 	bl	80005f8 <__aeabi_dmul>
 8006ba4:	4b82      	ldr	r3, [pc, #520]	; (8006db0 <_dtoa_r+0x628>)
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	f7f9 fb70 	bl	800028c <__adddf3>
 8006bac:	46d0      	mov	r8, sl
 8006bae:	46d9      	mov	r9, fp
 8006bb0:	4682      	mov	sl, r0
 8006bb2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006bb6:	2e00      	cmp	r6, #0
 8006bb8:	d158      	bne.n	8006c6c <_dtoa_r+0x4e4>
 8006bba:	4b7e      	ldr	r3, [pc, #504]	; (8006db4 <_dtoa_r+0x62c>)
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	4640      	mov	r0, r8
 8006bc0:	4649      	mov	r1, r9
 8006bc2:	f7f9 fb61 	bl	8000288 <__aeabi_dsub>
 8006bc6:	4652      	mov	r2, sl
 8006bc8:	465b      	mov	r3, fp
 8006bca:	4680      	mov	r8, r0
 8006bcc:	4689      	mov	r9, r1
 8006bce:	f7f9 ffa3 	bl	8000b18 <__aeabi_dcmpgt>
 8006bd2:	2800      	cmp	r0, #0
 8006bd4:	f040 8295 	bne.w	8007102 <_dtoa_r+0x97a>
 8006bd8:	4652      	mov	r2, sl
 8006bda:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006bde:	4640      	mov	r0, r8
 8006be0:	4649      	mov	r1, r9
 8006be2:	f7f9 ff7b 	bl	8000adc <__aeabi_dcmplt>
 8006be6:	2800      	cmp	r0, #0
 8006be8:	f040 8289 	bne.w	80070fe <_dtoa_r+0x976>
 8006bec:	ec5b ab19 	vmov	sl, fp, d9
 8006bf0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	f2c0 8148 	blt.w	8006e88 <_dtoa_r+0x700>
 8006bf8:	9a00      	ldr	r2, [sp, #0]
 8006bfa:	2a0e      	cmp	r2, #14
 8006bfc:	f300 8144 	bgt.w	8006e88 <_dtoa_r+0x700>
 8006c00:	4b67      	ldr	r3, [pc, #412]	; (8006da0 <_dtoa_r+0x618>)
 8006c02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c06:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006c0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	f280 80d5 	bge.w	8006dbc <_dtoa_r+0x634>
 8006c12:	9b03      	ldr	r3, [sp, #12]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	f300 80d1 	bgt.w	8006dbc <_dtoa_r+0x634>
 8006c1a:	f040 826f 	bne.w	80070fc <_dtoa_r+0x974>
 8006c1e:	4b65      	ldr	r3, [pc, #404]	; (8006db4 <_dtoa_r+0x62c>)
 8006c20:	2200      	movs	r2, #0
 8006c22:	4640      	mov	r0, r8
 8006c24:	4649      	mov	r1, r9
 8006c26:	f7f9 fce7 	bl	80005f8 <__aeabi_dmul>
 8006c2a:	4652      	mov	r2, sl
 8006c2c:	465b      	mov	r3, fp
 8006c2e:	f7f9 ff69 	bl	8000b04 <__aeabi_dcmpge>
 8006c32:	9e03      	ldr	r6, [sp, #12]
 8006c34:	4637      	mov	r7, r6
 8006c36:	2800      	cmp	r0, #0
 8006c38:	f040 8245 	bne.w	80070c6 <_dtoa_r+0x93e>
 8006c3c:	9d01      	ldr	r5, [sp, #4]
 8006c3e:	2331      	movs	r3, #49	; 0x31
 8006c40:	f805 3b01 	strb.w	r3, [r5], #1
 8006c44:	9b00      	ldr	r3, [sp, #0]
 8006c46:	3301      	adds	r3, #1
 8006c48:	9300      	str	r3, [sp, #0]
 8006c4a:	e240      	b.n	80070ce <_dtoa_r+0x946>
 8006c4c:	07f2      	lsls	r2, r6, #31
 8006c4e:	d505      	bpl.n	8006c5c <_dtoa_r+0x4d4>
 8006c50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c54:	f7f9 fcd0 	bl	80005f8 <__aeabi_dmul>
 8006c58:	3501      	adds	r5, #1
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	1076      	asrs	r6, r6, #1
 8006c5e:	3708      	adds	r7, #8
 8006c60:	e777      	b.n	8006b52 <_dtoa_r+0x3ca>
 8006c62:	2502      	movs	r5, #2
 8006c64:	e779      	b.n	8006b5a <_dtoa_r+0x3d2>
 8006c66:	9f00      	ldr	r7, [sp, #0]
 8006c68:	9e03      	ldr	r6, [sp, #12]
 8006c6a:	e794      	b.n	8006b96 <_dtoa_r+0x40e>
 8006c6c:	9901      	ldr	r1, [sp, #4]
 8006c6e:	4b4c      	ldr	r3, [pc, #304]	; (8006da0 <_dtoa_r+0x618>)
 8006c70:	4431      	add	r1, r6
 8006c72:	910d      	str	r1, [sp, #52]	; 0x34
 8006c74:	9908      	ldr	r1, [sp, #32]
 8006c76:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006c7a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006c7e:	2900      	cmp	r1, #0
 8006c80:	d043      	beq.n	8006d0a <_dtoa_r+0x582>
 8006c82:	494d      	ldr	r1, [pc, #308]	; (8006db8 <_dtoa_r+0x630>)
 8006c84:	2000      	movs	r0, #0
 8006c86:	f7f9 fde1 	bl	800084c <__aeabi_ddiv>
 8006c8a:	4652      	mov	r2, sl
 8006c8c:	465b      	mov	r3, fp
 8006c8e:	f7f9 fafb 	bl	8000288 <__aeabi_dsub>
 8006c92:	9d01      	ldr	r5, [sp, #4]
 8006c94:	4682      	mov	sl, r0
 8006c96:	468b      	mov	fp, r1
 8006c98:	4649      	mov	r1, r9
 8006c9a:	4640      	mov	r0, r8
 8006c9c:	f7f9 ff46 	bl	8000b2c <__aeabi_d2iz>
 8006ca0:	4606      	mov	r6, r0
 8006ca2:	f7f9 fc3f 	bl	8000524 <__aeabi_i2d>
 8006ca6:	4602      	mov	r2, r0
 8006ca8:	460b      	mov	r3, r1
 8006caa:	4640      	mov	r0, r8
 8006cac:	4649      	mov	r1, r9
 8006cae:	f7f9 faeb 	bl	8000288 <__aeabi_dsub>
 8006cb2:	3630      	adds	r6, #48	; 0x30
 8006cb4:	f805 6b01 	strb.w	r6, [r5], #1
 8006cb8:	4652      	mov	r2, sl
 8006cba:	465b      	mov	r3, fp
 8006cbc:	4680      	mov	r8, r0
 8006cbe:	4689      	mov	r9, r1
 8006cc0:	f7f9 ff0c 	bl	8000adc <__aeabi_dcmplt>
 8006cc4:	2800      	cmp	r0, #0
 8006cc6:	d163      	bne.n	8006d90 <_dtoa_r+0x608>
 8006cc8:	4642      	mov	r2, r8
 8006cca:	464b      	mov	r3, r9
 8006ccc:	4936      	ldr	r1, [pc, #216]	; (8006da8 <_dtoa_r+0x620>)
 8006cce:	2000      	movs	r0, #0
 8006cd0:	f7f9 fada 	bl	8000288 <__aeabi_dsub>
 8006cd4:	4652      	mov	r2, sl
 8006cd6:	465b      	mov	r3, fp
 8006cd8:	f7f9 ff00 	bl	8000adc <__aeabi_dcmplt>
 8006cdc:	2800      	cmp	r0, #0
 8006cde:	f040 80b5 	bne.w	8006e4c <_dtoa_r+0x6c4>
 8006ce2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ce4:	429d      	cmp	r5, r3
 8006ce6:	d081      	beq.n	8006bec <_dtoa_r+0x464>
 8006ce8:	4b30      	ldr	r3, [pc, #192]	; (8006dac <_dtoa_r+0x624>)
 8006cea:	2200      	movs	r2, #0
 8006cec:	4650      	mov	r0, sl
 8006cee:	4659      	mov	r1, fp
 8006cf0:	f7f9 fc82 	bl	80005f8 <__aeabi_dmul>
 8006cf4:	4b2d      	ldr	r3, [pc, #180]	; (8006dac <_dtoa_r+0x624>)
 8006cf6:	4682      	mov	sl, r0
 8006cf8:	468b      	mov	fp, r1
 8006cfa:	4640      	mov	r0, r8
 8006cfc:	4649      	mov	r1, r9
 8006cfe:	2200      	movs	r2, #0
 8006d00:	f7f9 fc7a 	bl	80005f8 <__aeabi_dmul>
 8006d04:	4680      	mov	r8, r0
 8006d06:	4689      	mov	r9, r1
 8006d08:	e7c6      	b.n	8006c98 <_dtoa_r+0x510>
 8006d0a:	4650      	mov	r0, sl
 8006d0c:	4659      	mov	r1, fp
 8006d0e:	f7f9 fc73 	bl	80005f8 <__aeabi_dmul>
 8006d12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d14:	9d01      	ldr	r5, [sp, #4]
 8006d16:	930f      	str	r3, [sp, #60]	; 0x3c
 8006d18:	4682      	mov	sl, r0
 8006d1a:	468b      	mov	fp, r1
 8006d1c:	4649      	mov	r1, r9
 8006d1e:	4640      	mov	r0, r8
 8006d20:	f7f9 ff04 	bl	8000b2c <__aeabi_d2iz>
 8006d24:	4606      	mov	r6, r0
 8006d26:	f7f9 fbfd 	bl	8000524 <__aeabi_i2d>
 8006d2a:	3630      	adds	r6, #48	; 0x30
 8006d2c:	4602      	mov	r2, r0
 8006d2e:	460b      	mov	r3, r1
 8006d30:	4640      	mov	r0, r8
 8006d32:	4649      	mov	r1, r9
 8006d34:	f7f9 faa8 	bl	8000288 <__aeabi_dsub>
 8006d38:	f805 6b01 	strb.w	r6, [r5], #1
 8006d3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d3e:	429d      	cmp	r5, r3
 8006d40:	4680      	mov	r8, r0
 8006d42:	4689      	mov	r9, r1
 8006d44:	f04f 0200 	mov.w	r2, #0
 8006d48:	d124      	bne.n	8006d94 <_dtoa_r+0x60c>
 8006d4a:	4b1b      	ldr	r3, [pc, #108]	; (8006db8 <_dtoa_r+0x630>)
 8006d4c:	4650      	mov	r0, sl
 8006d4e:	4659      	mov	r1, fp
 8006d50:	f7f9 fa9c 	bl	800028c <__adddf3>
 8006d54:	4602      	mov	r2, r0
 8006d56:	460b      	mov	r3, r1
 8006d58:	4640      	mov	r0, r8
 8006d5a:	4649      	mov	r1, r9
 8006d5c:	f7f9 fedc 	bl	8000b18 <__aeabi_dcmpgt>
 8006d60:	2800      	cmp	r0, #0
 8006d62:	d173      	bne.n	8006e4c <_dtoa_r+0x6c4>
 8006d64:	4652      	mov	r2, sl
 8006d66:	465b      	mov	r3, fp
 8006d68:	4913      	ldr	r1, [pc, #76]	; (8006db8 <_dtoa_r+0x630>)
 8006d6a:	2000      	movs	r0, #0
 8006d6c:	f7f9 fa8c 	bl	8000288 <__aeabi_dsub>
 8006d70:	4602      	mov	r2, r0
 8006d72:	460b      	mov	r3, r1
 8006d74:	4640      	mov	r0, r8
 8006d76:	4649      	mov	r1, r9
 8006d78:	f7f9 feb0 	bl	8000adc <__aeabi_dcmplt>
 8006d7c:	2800      	cmp	r0, #0
 8006d7e:	f43f af35 	beq.w	8006bec <_dtoa_r+0x464>
 8006d82:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006d84:	1e6b      	subs	r3, r5, #1
 8006d86:	930f      	str	r3, [sp, #60]	; 0x3c
 8006d88:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006d8c:	2b30      	cmp	r3, #48	; 0x30
 8006d8e:	d0f8      	beq.n	8006d82 <_dtoa_r+0x5fa>
 8006d90:	9700      	str	r7, [sp, #0]
 8006d92:	e049      	b.n	8006e28 <_dtoa_r+0x6a0>
 8006d94:	4b05      	ldr	r3, [pc, #20]	; (8006dac <_dtoa_r+0x624>)
 8006d96:	f7f9 fc2f 	bl	80005f8 <__aeabi_dmul>
 8006d9a:	4680      	mov	r8, r0
 8006d9c:	4689      	mov	r9, r1
 8006d9e:	e7bd      	b.n	8006d1c <_dtoa_r+0x594>
 8006da0:	08008318 	.word	0x08008318
 8006da4:	080082f0 	.word	0x080082f0
 8006da8:	3ff00000 	.word	0x3ff00000
 8006dac:	40240000 	.word	0x40240000
 8006db0:	401c0000 	.word	0x401c0000
 8006db4:	40140000 	.word	0x40140000
 8006db8:	3fe00000 	.word	0x3fe00000
 8006dbc:	9d01      	ldr	r5, [sp, #4]
 8006dbe:	4656      	mov	r6, sl
 8006dc0:	465f      	mov	r7, fp
 8006dc2:	4642      	mov	r2, r8
 8006dc4:	464b      	mov	r3, r9
 8006dc6:	4630      	mov	r0, r6
 8006dc8:	4639      	mov	r1, r7
 8006dca:	f7f9 fd3f 	bl	800084c <__aeabi_ddiv>
 8006dce:	f7f9 fead 	bl	8000b2c <__aeabi_d2iz>
 8006dd2:	4682      	mov	sl, r0
 8006dd4:	f7f9 fba6 	bl	8000524 <__aeabi_i2d>
 8006dd8:	4642      	mov	r2, r8
 8006dda:	464b      	mov	r3, r9
 8006ddc:	f7f9 fc0c 	bl	80005f8 <__aeabi_dmul>
 8006de0:	4602      	mov	r2, r0
 8006de2:	460b      	mov	r3, r1
 8006de4:	4630      	mov	r0, r6
 8006de6:	4639      	mov	r1, r7
 8006de8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006dec:	f7f9 fa4c 	bl	8000288 <__aeabi_dsub>
 8006df0:	f805 6b01 	strb.w	r6, [r5], #1
 8006df4:	9e01      	ldr	r6, [sp, #4]
 8006df6:	9f03      	ldr	r7, [sp, #12]
 8006df8:	1bae      	subs	r6, r5, r6
 8006dfa:	42b7      	cmp	r7, r6
 8006dfc:	4602      	mov	r2, r0
 8006dfe:	460b      	mov	r3, r1
 8006e00:	d135      	bne.n	8006e6e <_dtoa_r+0x6e6>
 8006e02:	f7f9 fa43 	bl	800028c <__adddf3>
 8006e06:	4642      	mov	r2, r8
 8006e08:	464b      	mov	r3, r9
 8006e0a:	4606      	mov	r6, r0
 8006e0c:	460f      	mov	r7, r1
 8006e0e:	f7f9 fe83 	bl	8000b18 <__aeabi_dcmpgt>
 8006e12:	b9d0      	cbnz	r0, 8006e4a <_dtoa_r+0x6c2>
 8006e14:	4642      	mov	r2, r8
 8006e16:	464b      	mov	r3, r9
 8006e18:	4630      	mov	r0, r6
 8006e1a:	4639      	mov	r1, r7
 8006e1c:	f7f9 fe54 	bl	8000ac8 <__aeabi_dcmpeq>
 8006e20:	b110      	cbz	r0, 8006e28 <_dtoa_r+0x6a0>
 8006e22:	f01a 0f01 	tst.w	sl, #1
 8006e26:	d110      	bne.n	8006e4a <_dtoa_r+0x6c2>
 8006e28:	4620      	mov	r0, r4
 8006e2a:	ee18 1a10 	vmov	r1, s16
 8006e2e:	f7fe ffdb 	bl	8005de8 <_Bfree>
 8006e32:	2300      	movs	r3, #0
 8006e34:	9800      	ldr	r0, [sp, #0]
 8006e36:	702b      	strb	r3, [r5, #0]
 8006e38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e3a:	3001      	adds	r0, #1
 8006e3c:	6018      	str	r0, [r3, #0]
 8006e3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	f43f acf1 	beq.w	8006828 <_dtoa_r+0xa0>
 8006e46:	601d      	str	r5, [r3, #0]
 8006e48:	e4ee      	b.n	8006828 <_dtoa_r+0xa0>
 8006e4a:	9f00      	ldr	r7, [sp, #0]
 8006e4c:	462b      	mov	r3, r5
 8006e4e:	461d      	mov	r5, r3
 8006e50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006e54:	2a39      	cmp	r2, #57	; 0x39
 8006e56:	d106      	bne.n	8006e66 <_dtoa_r+0x6de>
 8006e58:	9a01      	ldr	r2, [sp, #4]
 8006e5a:	429a      	cmp	r2, r3
 8006e5c:	d1f7      	bne.n	8006e4e <_dtoa_r+0x6c6>
 8006e5e:	9901      	ldr	r1, [sp, #4]
 8006e60:	2230      	movs	r2, #48	; 0x30
 8006e62:	3701      	adds	r7, #1
 8006e64:	700a      	strb	r2, [r1, #0]
 8006e66:	781a      	ldrb	r2, [r3, #0]
 8006e68:	3201      	adds	r2, #1
 8006e6a:	701a      	strb	r2, [r3, #0]
 8006e6c:	e790      	b.n	8006d90 <_dtoa_r+0x608>
 8006e6e:	4ba6      	ldr	r3, [pc, #664]	; (8007108 <_dtoa_r+0x980>)
 8006e70:	2200      	movs	r2, #0
 8006e72:	f7f9 fbc1 	bl	80005f8 <__aeabi_dmul>
 8006e76:	2200      	movs	r2, #0
 8006e78:	2300      	movs	r3, #0
 8006e7a:	4606      	mov	r6, r0
 8006e7c:	460f      	mov	r7, r1
 8006e7e:	f7f9 fe23 	bl	8000ac8 <__aeabi_dcmpeq>
 8006e82:	2800      	cmp	r0, #0
 8006e84:	d09d      	beq.n	8006dc2 <_dtoa_r+0x63a>
 8006e86:	e7cf      	b.n	8006e28 <_dtoa_r+0x6a0>
 8006e88:	9a08      	ldr	r2, [sp, #32]
 8006e8a:	2a00      	cmp	r2, #0
 8006e8c:	f000 80d7 	beq.w	800703e <_dtoa_r+0x8b6>
 8006e90:	9a06      	ldr	r2, [sp, #24]
 8006e92:	2a01      	cmp	r2, #1
 8006e94:	f300 80ba 	bgt.w	800700c <_dtoa_r+0x884>
 8006e98:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006e9a:	2a00      	cmp	r2, #0
 8006e9c:	f000 80b2 	beq.w	8007004 <_dtoa_r+0x87c>
 8006ea0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006ea4:	9e07      	ldr	r6, [sp, #28]
 8006ea6:	9d04      	ldr	r5, [sp, #16]
 8006ea8:	9a04      	ldr	r2, [sp, #16]
 8006eaa:	441a      	add	r2, r3
 8006eac:	9204      	str	r2, [sp, #16]
 8006eae:	9a05      	ldr	r2, [sp, #20]
 8006eb0:	2101      	movs	r1, #1
 8006eb2:	441a      	add	r2, r3
 8006eb4:	4620      	mov	r0, r4
 8006eb6:	9205      	str	r2, [sp, #20]
 8006eb8:	f7ff f84e 	bl	8005f58 <__i2b>
 8006ebc:	4607      	mov	r7, r0
 8006ebe:	2d00      	cmp	r5, #0
 8006ec0:	dd0c      	ble.n	8006edc <_dtoa_r+0x754>
 8006ec2:	9b05      	ldr	r3, [sp, #20]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	dd09      	ble.n	8006edc <_dtoa_r+0x754>
 8006ec8:	42ab      	cmp	r3, r5
 8006eca:	9a04      	ldr	r2, [sp, #16]
 8006ecc:	bfa8      	it	ge
 8006ece:	462b      	movge	r3, r5
 8006ed0:	1ad2      	subs	r2, r2, r3
 8006ed2:	9204      	str	r2, [sp, #16]
 8006ed4:	9a05      	ldr	r2, [sp, #20]
 8006ed6:	1aed      	subs	r5, r5, r3
 8006ed8:	1ad3      	subs	r3, r2, r3
 8006eda:	9305      	str	r3, [sp, #20]
 8006edc:	9b07      	ldr	r3, [sp, #28]
 8006ede:	b31b      	cbz	r3, 8006f28 <_dtoa_r+0x7a0>
 8006ee0:	9b08      	ldr	r3, [sp, #32]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	f000 80af 	beq.w	8007046 <_dtoa_r+0x8be>
 8006ee8:	2e00      	cmp	r6, #0
 8006eea:	dd13      	ble.n	8006f14 <_dtoa_r+0x78c>
 8006eec:	4639      	mov	r1, r7
 8006eee:	4632      	mov	r2, r6
 8006ef0:	4620      	mov	r0, r4
 8006ef2:	f7ff f8f1 	bl	80060d8 <__pow5mult>
 8006ef6:	ee18 2a10 	vmov	r2, s16
 8006efa:	4601      	mov	r1, r0
 8006efc:	4607      	mov	r7, r0
 8006efe:	4620      	mov	r0, r4
 8006f00:	f7ff f840 	bl	8005f84 <__multiply>
 8006f04:	ee18 1a10 	vmov	r1, s16
 8006f08:	4680      	mov	r8, r0
 8006f0a:	4620      	mov	r0, r4
 8006f0c:	f7fe ff6c 	bl	8005de8 <_Bfree>
 8006f10:	ee08 8a10 	vmov	s16, r8
 8006f14:	9b07      	ldr	r3, [sp, #28]
 8006f16:	1b9a      	subs	r2, r3, r6
 8006f18:	d006      	beq.n	8006f28 <_dtoa_r+0x7a0>
 8006f1a:	ee18 1a10 	vmov	r1, s16
 8006f1e:	4620      	mov	r0, r4
 8006f20:	f7ff f8da 	bl	80060d8 <__pow5mult>
 8006f24:	ee08 0a10 	vmov	s16, r0
 8006f28:	2101      	movs	r1, #1
 8006f2a:	4620      	mov	r0, r4
 8006f2c:	f7ff f814 	bl	8005f58 <__i2b>
 8006f30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	4606      	mov	r6, r0
 8006f36:	f340 8088 	ble.w	800704a <_dtoa_r+0x8c2>
 8006f3a:	461a      	mov	r2, r3
 8006f3c:	4601      	mov	r1, r0
 8006f3e:	4620      	mov	r0, r4
 8006f40:	f7ff f8ca 	bl	80060d8 <__pow5mult>
 8006f44:	9b06      	ldr	r3, [sp, #24]
 8006f46:	2b01      	cmp	r3, #1
 8006f48:	4606      	mov	r6, r0
 8006f4a:	f340 8081 	ble.w	8007050 <_dtoa_r+0x8c8>
 8006f4e:	f04f 0800 	mov.w	r8, #0
 8006f52:	6933      	ldr	r3, [r6, #16]
 8006f54:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006f58:	6918      	ldr	r0, [r3, #16]
 8006f5a:	f7fe ffad 	bl	8005eb8 <__hi0bits>
 8006f5e:	f1c0 0020 	rsb	r0, r0, #32
 8006f62:	9b05      	ldr	r3, [sp, #20]
 8006f64:	4418      	add	r0, r3
 8006f66:	f010 001f 	ands.w	r0, r0, #31
 8006f6a:	f000 8092 	beq.w	8007092 <_dtoa_r+0x90a>
 8006f6e:	f1c0 0320 	rsb	r3, r0, #32
 8006f72:	2b04      	cmp	r3, #4
 8006f74:	f340 808a 	ble.w	800708c <_dtoa_r+0x904>
 8006f78:	f1c0 001c 	rsb	r0, r0, #28
 8006f7c:	9b04      	ldr	r3, [sp, #16]
 8006f7e:	4403      	add	r3, r0
 8006f80:	9304      	str	r3, [sp, #16]
 8006f82:	9b05      	ldr	r3, [sp, #20]
 8006f84:	4403      	add	r3, r0
 8006f86:	4405      	add	r5, r0
 8006f88:	9305      	str	r3, [sp, #20]
 8006f8a:	9b04      	ldr	r3, [sp, #16]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	dd07      	ble.n	8006fa0 <_dtoa_r+0x818>
 8006f90:	ee18 1a10 	vmov	r1, s16
 8006f94:	461a      	mov	r2, r3
 8006f96:	4620      	mov	r0, r4
 8006f98:	f7ff f8f8 	bl	800618c <__lshift>
 8006f9c:	ee08 0a10 	vmov	s16, r0
 8006fa0:	9b05      	ldr	r3, [sp, #20]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	dd05      	ble.n	8006fb2 <_dtoa_r+0x82a>
 8006fa6:	4631      	mov	r1, r6
 8006fa8:	461a      	mov	r2, r3
 8006faa:	4620      	mov	r0, r4
 8006fac:	f7ff f8ee 	bl	800618c <__lshift>
 8006fb0:	4606      	mov	r6, r0
 8006fb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d06e      	beq.n	8007096 <_dtoa_r+0x90e>
 8006fb8:	ee18 0a10 	vmov	r0, s16
 8006fbc:	4631      	mov	r1, r6
 8006fbe:	f7ff f955 	bl	800626c <__mcmp>
 8006fc2:	2800      	cmp	r0, #0
 8006fc4:	da67      	bge.n	8007096 <_dtoa_r+0x90e>
 8006fc6:	9b00      	ldr	r3, [sp, #0]
 8006fc8:	3b01      	subs	r3, #1
 8006fca:	ee18 1a10 	vmov	r1, s16
 8006fce:	9300      	str	r3, [sp, #0]
 8006fd0:	220a      	movs	r2, #10
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	4620      	mov	r0, r4
 8006fd6:	f7fe ff29 	bl	8005e2c <__multadd>
 8006fda:	9b08      	ldr	r3, [sp, #32]
 8006fdc:	ee08 0a10 	vmov	s16, r0
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	f000 81b1 	beq.w	8007348 <_dtoa_r+0xbc0>
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	4639      	mov	r1, r7
 8006fea:	220a      	movs	r2, #10
 8006fec:	4620      	mov	r0, r4
 8006fee:	f7fe ff1d 	bl	8005e2c <__multadd>
 8006ff2:	9b02      	ldr	r3, [sp, #8]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	4607      	mov	r7, r0
 8006ff8:	f300 808e 	bgt.w	8007118 <_dtoa_r+0x990>
 8006ffc:	9b06      	ldr	r3, [sp, #24]
 8006ffe:	2b02      	cmp	r3, #2
 8007000:	dc51      	bgt.n	80070a6 <_dtoa_r+0x91e>
 8007002:	e089      	b.n	8007118 <_dtoa_r+0x990>
 8007004:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007006:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800700a:	e74b      	b.n	8006ea4 <_dtoa_r+0x71c>
 800700c:	9b03      	ldr	r3, [sp, #12]
 800700e:	1e5e      	subs	r6, r3, #1
 8007010:	9b07      	ldr	r3, [sp, #28]
 8007012:	42b3      	cmp	r3, r6
 8007014:	bfbf      	itttt	lt
 8007016:	9b07      	ldrlt	r3, [sp, #28]
 8007018:	9607      	strlt	r6, [sp, #28]
 800701a:	1af2      	sublt	r2, r6, r3
 800701c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800701e:	bfb6      	itet	lt
 8007020:	189b      	addlt	r3, r3, r2
 8007022:	1b9e      	subge	r6, r3, r6
 8007024:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007026:	9b03      	ldr	r3, [sp, #12]
 8007028:	bfb8      	it	lt
 800702a:	2600      	movlt	r6, #0
 800702c:	2b00      	cmp	r3, #0
 800702e:	bfb7      	itett	lt
 8007030:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007034:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007038:	1a9d      	sublt	r5, r3, r2
 800703a:	2300      	movlt	r3, #0
 800703c:	e734      	b.n	8006ea8 <_dtoa_r+0x720>
 800703e:	9e07      	ldr	r6, [sp, #28]
 8007040:	9d04      	ldr	r5, [sp, #16]
 8007042:	9f08      	ldr	r7, [sp, #32]
 8007044:	e73b      	b.n	8006ebe <_dtoa_r+0x736>
 8007046:	9a07      	ldr	r2, [sp, #28]
 8007048:	e767      	b.n	8006f1a <_dtoa_r+0x792>
 800704a:	9b06      	ldr	r3, [sp, #24]
 800704c:	2b01      	cmp	r3, #1
 800704e:	dc18      	bgt.n	8007082 <_dtoa_r+0x8fa>
 8007050:	f1ba 0f00 	cmp.w	sl, #0
 8007054:	d115      	bne.n	8007082 <_dtoa_r+0x8fa>
 8007056:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800705a:	b993      	cbnz	r3, 8007082 <_dtoa_r+0x8fa>
 800705c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007060:	0d1b      	lsrs	r3, r3, #20
 8007062:	051b      	lsls	r3, r3, #20
 8007064:	b183      	cbz	r3, 8007088 <_dtoa_r+0x900>
 8007066:	9b04      	ldr	r3, [sp, #16]
 8007068:	3301      	adds	r3, #1
 800706a:	9304      	str	r3, [sp, #16]
 800706c:	9b05      	ldr	r3, [sp, #20]
 800706e:	3301      	adds	r3, #1
 8007070:	9305      	str	r3, [sp, #20]
 8007072:	f04f 0801 	mov.w	r8, #1
 8007076:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007078:	2b00      	cmp	r3, #0
 800707a:	f47f af6a 	bne.w	8006f52 <_dtoa_r+0x7ca>
 800707e:	2001      	movs	r0, #1
 8007080:	e76f      	b.n	8006f62 <_dtoa_r+0x7da>
 8007082:	f04f 0800 	mov.w	r8, #0
 8007086:	e7f6      	b.n	8007076 <_dtoa_r+0x8ee>
 8007088:	4698      	mov	r8, r3
 800708a:	e7f4      	b.n	8007076 <_dtoa_r+0x8ee>
 800708c:	f43f af7d 	beq.w	8006f8a <_dtoa_r+0x802>
 8007090:	4618      	mov	r0, r3
 8007092:	301c      	adds	r0, #28
 8007094:	e772      	b.n	8006f7c <_dtoa_r+0x7f4>
 8007096:	9b03      	ldr	r3, [sp, #12]
 8007098:	2b00      	cmp	r3, #0
 800709a:	dc37      	bgt.n	800710c <_dtoa_r+0x984>
 800709c:	9b06      	ldr	r3, [sp, #24]
 800709e:	2b02      	cmp	r3, #2
 80070a0:	dd34      	ble.n	800710c <_dtoa_r+0x984>
 80070a2:	9b03      	ldr	r3, [sp, #12]
 80070a4:	9302      	str	r3, [sp, #8]
 80070a6:	9b02      	ldr	r3, [sp, #8]
 80070a8:	b96b      	cbnz	r3, 80070c6 <_dtoa_r+0x93e>
 80070aa:	4631      	mov	r1, r6
 80070ac:	2205      	movs	r2, #5
 80070ae:	4620      	mov	r0, r4
 80070b0:	f7fe febc 	bl	8005e2c <__multadd>
 80070b4:	4601      	mov	r1, r0
 80070b6:	4606      	mov	r6, r0
 80070b8:	ee18 0a10 	vmov	r0, s16
 80070bc:	f7ff f8d6 	bl	800626c <__mcmp>
 80070c0:	2800      	cmp	r0, #0
 80070c2:	f73f adbb 	bgt.w	8006c3c <_dtoa_r+0x4b4>
 80070c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070c8:	9d01      	ldr	r5, [sp, #4]
 80070ca:	43db      	mvns	r3, r3
 80070cc:	9300      	str	r3, [sp, #0]
 80070ce:	f04f 0800 	mov.w	r8, #0
 80070d2:	4631      	mov	r1, r6
 80070d4:	4620      	mov	r0, r4
 80070d6:	f7fe fe87 	bl	8005de8 <_Bfree>
 80070da:	2f00      	cmp	r7, #0
 80070dc:	f43f aea4 	beq.w	8006e28 <_dtoa_r+0x6a0>
 80070e0:	f1b8 0f00 	cmp.w	r8, #0
 80070e4:	d005      	beq.n	80070f2 <_dtoa_r+0x96a>
 80070e6:	45b8      	cmp	r8, r7
 80070e8:	d003      	beq.n	80070f2 <_dtoa_r+0x96a>
 80070ea:	4641      	mov	r1, r8
 80070ec:	4620      	mov	r0, r4
 80070ee:	f7fe fe7b 	bl	8005de8 <_Bfree>
 80070f2:	4639      	mov	r1, r7
 80070f4:	4620      	mov	r0, r4
 80070f6:	f7fe fe77 	bl	8005de8 <_Bfree>
 80070fa:	e695      	b.n	8006e28 <_dtoa_r+0x6a0>
 80070fc:	2600      	movs	r6, #0
 80070fe:	4637      	mov	r7, r6
 8007100:	e7e1      	b.n	80070c6 <_dtoa_r+0x93e>
 8007102:	9700      	str	r7, [sp, #0]
 8007104:	4637      	mov	r7, r6
 8007106:	e599      	b.n	8006c3c <_dtoa_r+0x4b4>
 8007108:	40240000 	.word	0x40240000
 800710c:	9b08      	ldr	r3, [sp, #32]
 800710e:	2b00      	cmp	r3, #0
 8007110:	f000 80ca 	beq.w	80072a8 <_dtoa_r+0xb20>
 8007114:	9b03      	ldr	r3, [sp, #12]
 8007116:	9302      	str	r3, [sp, #8]
 8007118:	2d00      	cmp	r5, #0
 800711a:	dd05      	ble.n	8007128 <_dtoa_r+0x9a0>
 800711c:	4639      	mov	r1, r7
 800711e:	462a      	mov	r2, r5
 8007120:	4620      	mov	r0, r4
 8007122:	f7ff f833 	bl	800618c <__lshift>
 8007126:	4607      	mov	r7, r0
 8007128:	f1b8 0f00 	cmp.w	r8, #0
 800712c:	d05b      	beq.n	80071e6 <_dtoa_r+0xa5e>
 800712e:	6879      	ldr	r1, [r7, #4]
 8007130:	4620      	mov	r0, r4
 8007132:	f7fe fe19 	bl	8005d68 <_Balloc>
 8007136:	4605      	mov	r5, r0
 8007138:	b928      	cbnz	r0, 8007146 <_dtoa_r+0x9be>
 800713a:	4b87      	ldr	r3, [pc, #540]	; (8007358 <_dtoa_r+0xbd0>)
 800713c:	4602      	mov	r2, r0
 800713e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007142:	f7ff bb3b 	b.w	80067bc <_dtoa_r+0x34>
 8007146:	693a      	ldr	r2, [r7, #16]
 8007148:	3202      	adds	r2, #2
 800714a:	0092      	lsls	r2, r2, #2
 800714c:	f107 010c 	add.w	r1, r7, #12
 8007150:	300c      	adds	r0, #12
 8007152:	f000 f921 	bl	8007398 <memcpy>
 8007156:	2201      	movs	r2, #1
 8007158:	4629      	mov	r1, r5
 800715a:	4620      	mov	r0, r4
 800715c:	f7ff f816 	bl	800618c <__lshift>
 8007160:	9b01      	ldr	r3, [sp, #4]
 8007162:	f103 0901 	add.w	r9, r3, #1
 8007166:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800716a:	4413      	add	r3, r2
 800716c:	9305      	str	r3, [sp, #20]
 800716e:	f00a 0301 	and.w	r3, sl, #1
 8007172:	46b8      	mov	r8, r7
 8007174:	9304      	str	r3, [sp, #16]
 8007176:	4607      	mov	r7, r0
 8007178:	4631      	mov	r1, r6
 800717a:	ee18 0a10 	vmov	r0, s16
 800717e:	f7ff fa75 	bl	800666c <quorem>
 8007182:	4641      	mov	r1, r8
 8007184:	9002      	str	r0, [sp, #8]
 8007186:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800718a:	ee18 0a10 	vmov	r0, s16
 800718e:	f7ff f86d 	bl	800626c <__mcmp>
 8007192:	463a      	mov	r2, r7
 8007194:	9003      	str	r0, [sp, #12]
 8007196:	4631      	mov	r1, r6
 8007198:	4620      	mov	r0, r4
 800719a:	f7ff f883 	bl	80062a4 <__mdiff>
 800719e:	68c2      	ldr	r2, [r0, #12]
 80071a0:	f109 3bff 	add.w	fp, r9, #4294967295
 80071a4:	4605      	mov	r5, r0
 80071a6:	bb02      	cbnz	r2, 80071ea <_dtoa_r+0xa62>
 80071a8:	4601      	mov	r1, r0
 80071aa:	ee18 0a10 	vmov	r0, s16
 80071ae:	f7ff f85d 	bl	800626c <__mcmp>
 80071b2:	4602      	mov	r2, r0
 80071b4:	4629      	mov	r1, r5
 80071b6:	4620      	mov	r0, r4
 80071b8:	9207      	str	r2, [sp, #28]
 80071ba:	f7fe fe15 	bl	8005de8 <_Bfree>
 80071be:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80071c2:	ea43 0102 	orr.w	r1, r3, r2
 80071c6:	9b04      	ldr	r3, [sp, #16]
 80071c8:	430b      	orrs	r3, r1
 80071ca:	464d      	mov	r5, r9
 80071cc:	d10f      	bne.n	80071ee <_dtoa_r+0xa66>
 80071ce:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80071d2:	d02a      	beq.n	800722a <_dtoa_r+0xaa2>
 80071d4:	9b03      	ldr	r3, [sp, #12]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	dd02      	ble.n	80071e0 <_dtoa_r+0xa58>
 80071da:	9b02      	ldr	r3, [sp, #8]
 80071dc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80071e0:	f88b a000 	strb.w	sl, [fp]
 80071e4:	e775      	b.n	80070d2 <_dtoa_r+0x94a>
 80071e6:	4638      	mov	r0, r7
 80071e8:	e7ba      	b.n	8007160 <_dtoa_r+0x9d8>
 80071ea:	2201      	movs	r2, #1
 80071ec:	e7e2      	b.n	80071b4 <_dtoa_r+0xa2c>
 80071ee:	9b03      	ldr	r3, [sp, #12]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	db04      	blt.n	80071fe <_dtoa_r+0xa76>
 80071f4:	9906      	ldr	r1, [sp, #24]
 80071f6:	430b      	orrs	r3, r1
 80071f8:	9904      	ldr	r1, [sp, #16]
 80071fa:	430b      	orrs	r3, r1
 80071fc:	d122      	bne.n	8007244 <_dtoa_r+0xabc>
 80071fe:	2a00      	cmp	r2, #0
 8007200:	ddee      	ble.n	80071e0 <_dtoa_r+0xa58>
 8007202:	ee18 1a10 	vmov	r1, s16
 8007206:	2201      	movs	r2, #1
 8007208:	4620      	mov	r0, r4
 800720a:	f7fe ffbf 	bl	800618c <__lshift>
 800720e:	4631      	mov	r1, r6
 8007210:	ee08 0a10 	vmov	s16, r0
 8007214:	f7ff f82a 	bl	800626c <__mcmp>
 8007218:	2800      	cmp	r0, #0
 800721a:	dc03      	bgt.n	8007224 <_dtoa_r+0xa9c>
 800721c:	d1e0      	bne.n	80071e0 <_dtoa_r+0xa58>
 800721e:	f01a 0f01 	tst.w	sl, #1
 8007222:	d0dd      	beq.n	80071e0 <_dtoa_r+0xa58>
 8007224:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007228:	d1d7      	bne.n	80071da <_dtoa_r+0xa52>
 800722a:	2339      	movs	r3, #57	; 0x39
 800722c:	f88b 3000 	strb.w	r3, [fp]
 8007230:	462b      	mov	r3, r5
 8007232:	461d      	mov	r5, r3
 8007234:	3b01      	subs	r3, #1
 8007236:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800723a:	2a39      	cmp	r2, #57	; 0x39
 800723c:	d071      	beq.n	8007322 <_dtoa_r+0xb9a>
 800723e:	3201      	adds	r2, #1
 8007240:	701a      	strb	r2, [r3, #0]
 8007242:	e746      	b.n	80070d2 <_dtoa_r+0x94a>
 8007244:	2a00      	cmp	r2, #0
 8007246:	dd07      	ble.n	8007258 <_dtoa_r+0xad0>
 8007248:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800724c:	d0ed      	beq.n	800722a <_dtoa_r+0xaa2>
 800724e:	f10a 0301 	add.w	r3, sl, #1
 8007252:	f88b 3000 	strb.w	r3, [fp]
 8007256:	e73c      	b.n	80070d2 <_dtoa_r+0x94a>
 8007258:	9b05      	ldr	r3, [sp, #20]
 800725a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800725e:	4599      	cmp	r9, r3
 8007260:	d047      	beq.n	80072f2 <_dtoa_r+0xb6a>
 8007262:	ee18 1a10 	vmov	r1, s16
 8007266:	2300      	movs	r3, #0
 8007268:	220a      	movs	r2, #10
 800726a:	4620      	mov	r0, r4
 800726c:	f7fe fdde 	bl	8005e2c <__multadd>
 8007270:	45b8      	cmp	r8, r7
 8007272:	ee08 0a10 	vmov	s16, r0
 8007276:	f04f 0300 	mov.w	r3, #0
 800727a:	f04f 020a 	mov.w	r2, #10
 800727e:	4641      	mov	r1, r8
 8007280:	4620      	mov	r0, r4
 8007282:	d106      	bne.n	8007292 <_dtoa_r+0xb0a>
 8007284:	f7fe fdd2 	bl	8005e2c <__multadd>
 8007288:	4680      	mov	r8, r0
 800728a:	4607      	mov	r7, r0
 800728c:	f109 0901 	add.w	r9, r9, #1
 8007290:	e772      	b.n	8007178 <_dtoa_r+0x9f0>
 8007292:	f7fe fdcb 	bl	8005e2c <__multadd>
 8007296:	4639      	mov	r1, r7
 8007298:	4680      	mov	r8, r0
 800729a:	2300      	movs	r3, #0
 800729c:	220a      	movs	r2, #10
 800729e:	4620      	mov	r0, r4
 80072a0:	f7fe fdc4 	bl	8005e2c <__multadd>
 80072a4:	4607      	mov	r7, r0
 80072a6:	e7f1      	b.n	800728c <_dtoa_r+0xb04>
 80072a8:	9b03      	ldr	r3, [sp, #12]
 80072aa:	9302      	str	r3, [sp, #8]
 80072ac:	9d01      	ldr	r5, [sp, #4]
 80072ae:	ee18 0a10 	vmov	r0, s16
 80072b2:	4631      	mov	r1, r6
 80072b4:	f7ff f9da 	bl	800666c <quorem>
 80072b8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80072bc:	9b01      	ldr	r3, [sp, #4]
 80072be:	f805 ab01 	strb.w	sl, [r5], #1
 80072c2:	1aea      	subs	r2, r5, r3
 80072c4:	9b02      	ldr	r3, [sp, #8]
 80072c6:	4293      	cmp	r3, r2
 80072c8:	dd09      	ble.n	80072de <_dtoa_r+0xb56>
 80072ca:	ee18 1a10 	vmov	r1, s16
 80072ce:	2300      	movs	r3, #0
 80072d0:	220a      	movs	r2, #10
 80072d2:	4620      	mov	r0, r4
 80072d4:	f7fe fdaa 	bl	8005e2c <__multadd>
 80072d8:	ee08 0a10 	vmov	s16, r0
 80072dc:	e7e7      	b.n	80072ae <_dtoa_r+0xb26>
 80072de:	9b02      	ldr	r3, [sp, #8]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	bfc8      	it	gt
 80072e4:	461d      	movgt	r5, r3
 80072e6:	9b01      	ldr	r3, [sp, #4]
 80072e8:	bfd8      	it	le
 80072ea:	2501      	movle	r5, #1
 80072ec:	441d      	add	r5, r3
 80072ee:	f04f 0800 	mov.w	r8, #0
 80072f2:	ee18 1a10 	vmov	r1, s16
 80072f6:	2201      	movs	r2, #1
 80072f8:	4620      	mov	r0, r4
 80072fa:	f7fe ff47 	bl	800618c <__lshift>
 80072fe:	4631      	mov	r1, r6
 8007300:	ee08 0a10 	vmov	s16, r0
 8007304:	f7fe ffb2 	bl	800626c <__mcmp>
 8007308:	2800      	cmp	r0, #0
 800730a:	dc91      	bgt.n	8007230 <_dtoa_r+0xaa8>
 800730c:	d102      	bne.n	8007314 <_dtoa_r+0xb8c>
 800730e:	f01a 0f01 	tst.w	sl, #1
 8007312:	d18d      	bne.n	8007230 <_dtoa_r+0xaa8>
 8007314:	462b      	mov	r3, r5
 8007316:	461d      	mov	r5, r3
 8007318:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800731c:	2a30      	cmp	r2, #48	; 0x30
 800731e:	d0fa      	beq.n	8007316 <_dtoa_r+0xb8e>
 8007320:	e6d7      	b.n	80070d2 <_dtoa_r+0x94a>
 8007322:	9a01      	ldr	r2, [sp, #4]
 8007324:	429a      	cmp	r2, r3
 8007326:	d184      	bne.n	8007232 <_dtoa_r+0xaaa>
 8007328:	9b00      	ldr	r3, [sp, #0]
 800732a:	3301      	adds	r3, #1
 800732c:	9300      	str	r3, [sp, #0]
 800732e:	2331      	movs	r3, #49	; 0x31
 8007330:	7013      	strb	r3, [r2, #0]
 8007332:	e6ce      	b.n	80070d2 <_dtoa_r+0x94a>
 8007334:	4b09      	ldr	r3, [pc, #36]	; (800735c <_dtoa_r+0xbd4>)
 8007336:	f7ff ba95 	b.w	8006864 <_dtoa_r+0xdc>
 800733a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800733c:	2b00      	cmp	r3, #0
 800733e:	f47f aa6e 	bne.w	800681e <_dtoa_r+0x96>
 8007342:	4b07      	ldr	r3, [pc, #28]	; (8007360 <_dtoa_r+0xbd8>)
 8007344:	f7ff ba8e 	b.w	8006864 <_dtoa_r+0xdc>
 8007348:	9b02      	ldr	r3, [sp, #8]
 800734a:	2b00      	cmp	r3, #0
 800734c:	dcae      	bgt.n	80072ac <_dtoa_r+0xb24>
 800734e:	9b06      	ldr	r3, [sp, #24]
 8007350:	2b02      	cmp	r3, #2
 8007352:	f73f aea8 	bgt.w	80070a6 <_dtoa_r+0x91e>
 8007356:	e7a9      	b.n	80072ac <_dtoa_r+0xb24>
 8007358:	080082df 	.word	0x080082df
 800735c:	08008435 	.word	0x08008435
 8007360:	08008428 	.word	0x08008428

08007364 <fiprintf>:
 8007364:	b40e      	push	{r1, r2, r3}
 8007366:	b503      	push	{r0, r1, lr}
 8007368:	4601      	mov	r1, r0
 800736a:	ab03      	add	r3, sp, #12
 800736c:	4805      	ldr	r0, [pc, #20]	; (8007384 <fiprintf+0x20>)
 800736e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007372:	6800      	ldr	r0, [r0, #0]
 8007374:	9301      	str	r3, [sp, #4]
 8007376:	f000 f89f 	bl	80074b8 <_vfiprintf_r>
 800737a:	b002      	add	sp, #8
 800737c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007380:	b003      	add	sp, #12
 8007382:	4770      	bx	lr
 8007384:	2000000c 	.word	0x2000000c

08007388 <malloc>:
 8007388:	4b02      	ldr	r3, [pc, #8]	; (8007394 <malloc+0xc>)
 800738a:	4601      	mov	r1, r0
 800738c:	6818      	ldr	r0, [r3, #0]
 800738e:	f7ff b8c3 	b.w	8006518 <_malloc_r>
 8007392:	bf00      	nop
 8007394:	2000000c 	.word	0x2000000c

08007398 <memcpy>:
 8007398:	440a      	add	r2, r1
 800739a:	4291      	cmp	r1, r2
 800739c:	f100 33ff 	add.w	r3, r0, #4294967295
 80073a0:	d100      	bne.n	80073a4 <memcpy+0xc>
 80073a2:	4770      	bx	lr
 80073a4:	b510      	push	{r4, lr}
 80073a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80073ae:	4291      	cmp	r1, r2
 80073b0:	d1f9      	bne.n	80073a6 <memcpy+0xe>
 80073b2:	bd10      	pop	{r4, pc}

080073b4 <__malloc_lock>:
 80073b4:	4801      	ldr	r0, [pc, #4]	; (80073bc <__malloc_lock+0x8>)
 80073b6:	f000 bdc3 	b.w	8007f40 <__retarget_lock_acquire_recursive>
 80073ba:	bf00      	nop
 80073bc:	20000178 	.word	0x20000178

080073c0 <__malloc_unlock>:
 80073c0:	4801      	ldr	r0, [pc, #4]	; (80073c8 <__malloc_unlock+0x8>)
 80073c2:	f000 bdbe 	b.w	8007f42 <__retarget_lock_release_recursive>
 80073c6:	bf00      	nop
 80073c8:	20000178 	.word	0x20000178

080073cc <_free_r>:
 80073cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80073ce:	2900      	cmp	r1, #0
 80073d0:	d044      	beq.n	800745c <_free_r+0x90>
 80073d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073d6:	9001      	str	r0, [sp, #4]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	f1a1 0404 	sub.w	r4, r1, #4
 80073de:	bfb8      	it	lt
 80073e0:	18e4      	addlt	r4, r4, r3
 80073e2:	f7ff ffe7 	bl	80073b4 <__malloc_lock>
 80073e6:	4a1e      	ldr	r2, [pc, #120]	; (8007460 <_free_r+0x94>)
 80073e8:	9801      	ldr	r0, [sp, #4]
 80073ea:	6813      	ldr	r3, [r2, #0]
 80073ec:	b933      	cbnz	r3, 80073fc <_free_r+0x30>
 80073ee:	6063      	str	r3, [r4, #4]
 80073f0:	6014      	str	r4, [r2, #0]
 80073f2:	b003      	add	sp, #12
 80073f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80073f8:	f7ff bfe2 	b.w	80073c0 <__malloc_unlock>
 80073fc:	42a3      	cmp	r3, r4
 80073fe:	d908      	bls.n	8007412 <_free_r+0x46>
 8007400:	6825      	ldr	r5, [r4, #0]
 8007402:	1961      	adds	r1, r4, r5
 8007404:	428b      	cmp	r3, r1
 8007406:	bf01      	itttt	eq
 8007408:	6819      	ldreq	r1, [r3, #0]
 800740a:	685b      	ldreq	r3, [r3, #4]
 800740c:	1949      	addeq	r1, r1, r5
 800740e:	6021      	streq	r1, [r4, #0]
 8007410:	e7ed      	b.n	80073ee <_free_r+0x22>
 8007412:	461a      	mov	r2, r3
 8007414:	685b      	ldr	r3, [r3, #4]
 8007416:	b10b      	cbz	r3, 800741c <_free_r+0x50>
 8007418:	42a3      	cmp	r3, r4
 800741a:	d9fa      	bls.n	8007412 <_free_r+0x46>
 800741c:	6811      	ldr	r1, [r2, #0]
 800741e:	1855      	adds	r5, r2, r1
 8007420:	42a5      	cmp	r5, r4
 8007422:	d10b      	bne.n	800743c <_free_r+0x70>
 8007424:	6824      	ldr	r4, [r4, #0]
 8007426:	4421      	add	r1, r4
 8007428:	1854      	adds	r4, r2, r1
 800742a:	42a3      	cmp	r3, r4
 800742c:	6011      	str	r1, [r2, #0]
 800742e:	d1e0      	bne.n	80073f2 <_free_r+0x26>
 8007430:	681c      	ldr	r4, [r3, #0]
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	6053      	str	r3, [r2, #4]
 8007436:	4421      	add	r1, r4
 8007438:	6011      	str	r1, [r2, #0]
 800743a:	e7da      	b.n	80073f2 <_free_r+0x26>
 800743c:	d902      	bls.n	8007444 <_free_r+0x78>
 800743e:	230c      	movs	r3, #12
 8007440:	6003      	str	r3, [r0, #0]
 8007442:	e7d6      	b.n	80073f2 <_free_r+0x26>
 8007444:	6825      	ldr	r5, [r4, #0]
 8007446:	1961      	adds	r1, r4, r5
 8007448:	428b      	cmp	r3, r1
 800744a:	bf04      	itt	eq
 800744c:	6819      	ldreq	r1, [r3, #0]
 800744e:	685b      	ldreq	r3, [r3, #4]
 8007450:	6063      	str	r3, [r4, #4]
 8007452:	bf04      	itt	eq
 8007454:	1949      	addeq	r1, r1, r5
 8007456:	6021      	streq	r1, [r4, #0]
 8007458:	6054      	str	r4, [r2, #4]
 800745a:	e7ca      	b.n	80073f2 <_free_r+0x26>
 800745c:	b003      	add	sp, #12
 800745e:	bd30      	pop	{r4, r5, pc}
 8007460:	2000016c 	.word	0x2000016c

08007464 <__sfputc_r>:
 8007464:	6893      	ldr	r3, [r2, #8]
 8007466:	3b01      	subs	r3, #1
 8007468:	2b00      	cmp	r3, #0
 800746a:	b410      	push	{r4}
 800746c:	6093      	str	r3, [r2, #8]
 800746e:	da08      	bge.n	8007482 <__sfputc_r+0x1e>
 8007470:	6994      	ldr	r4, [r2, #24]
 8007472:	42a3      	cmp	r3, r4
 8007474:	db01      	blt.n	800747a <__sfputc_r+0x16>
 8007476:	290a      	cmp	r1, #10
 8007478:	d103      	bne.n	8007482 <__sfputc_r+0x1e>
 800747a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800747e:	f000 badf 	b.w	8007a40 <__swbuf_r>
 8007482:	6813      	ldr	r3, [r2, #0]
 8007484:	1c58      	adds	r0, r3, #1
 8007486:	6010      	str	r0, [r2, #0]
 8007488:	7019      	strb	r1, [r3, #0]
 800748a:	4608      	mov	r0, r1
 800748c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007490:	4770      	bx	lr

08007492 <__sfputs_r>:
 8007492:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007494:	4606      	mov	r6, r0
 8007496:	460f      	mov	r7, r1
 8007498:	4614      	mov	r4, r2
 800749a:	18d5      	adds	r5, r2, r3
 800749c:	42ac      	cmp	r4, r5
 800749e:	d101      	bne.n	80074a4 <__sfputs_r+0x12>
 80074a0:	2000      	movs	r0, #0
 80074a2:	e007      	b.n	80074b4 <__sfputs_r+0x22>
 80074a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074a8:	463a      	mov	r2, r7
 80074aa:	4630      	mov	r0, r6
 80074ac:	f7ff ffda 	bl	8007464 <__sfputc_r>
 80074b0:	1c43      	adds	r3, r0, #1
 80074b2:	d1f3      	bne.n	800749c <__sfputs_r+0xa>
 80074b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080074b8 <_vfiprintf_r>:
 80074b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074bc:	460d      	mov	r5, r1
 80074be:	b09d      	sub	sp, #116	; 0x74
 80074c0:	4614      	mov	r4, r2
 80074c2:	4698      	mov	r8, r3
 80074c4:	4606      	mov	r6, r0
 80074c6:	b118      	cbz	r0, 80074d0 <_vfiprintf_r+0x18>
 80074c8:	6983      	ldr	r3, [r0, #24]
 80074ca:	b90b      	cbnz	r3, 80074d0 <_vfiprintf_r+0x18>
 80074cc:	f000 fc9a 	bl	8007e04 <__sinit>
 80074d0:	4b89      	ldr	r3, [pc, #548]	; (80076f8 <_vfiprintf_r+0x240>)
 80074d2:	429d      	cmp	r5, r3
 80074d4:	d11b      	bne.n	800750e <_vfiprintf_r+0x56>
 80074d6:	6875      	ldr	r5, [r6, #4]
 80074d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80074da:	07d9      	lsls	r1, r3, #31
 80074dc:	d405      	bmi.n	80074ea <_vfiprintf_r+0x32>
 80074de:	89ab      	ldrh	r3, [r5, #12]
 80074e0:	059a      	lsls	r2, r3, #22
 80074e2:	d402      	bmi.n	80074ea <_vfiprintf_r+0x32>
 80074e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80074e6:	f000 fd2b 	bl	8007f40 <__retarget_lock_acquire_recursive>
 80074ea:	89ab      	ldrh	r3, [r5, #12]
 80074ec:	071b      	lsls	r3, r3, #28
 80074ee:	d501      	bpl.n	80074f4 <_vfiprintf_r+0x3c>
 80074f0:	692b      	ldr	r3, [r5, #16]
 80074f2:	b9eb      	cbnz	r3, 8007530 <_vfiprintf_r+0x78>
 80074f4:	4629      	mov	r1, r5
 80074f6:	4630      	mov	r0, r6
 80074f8:	f000 faf4 	bl	8007ae4 <__swsetup_r>
 80074fc:	b1c0      	cbz	r0, 8007530 <_vfiprintf_r+0x78>
 80074fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007500:	07dc      	lsls	r4, r3, #31
 8007502:	d50e      	bpl.n	8007522 <_vfiprintf_r+0x6a>
 8007504:	f04f 30ff 	mov.w	r0, #4294967295
 8007508:	b01d      	add	sp, #116	; 0x74
 800750a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800750e:	4b7b      	ldr	r3, [pc, #492]	; (80076fc <_vfiprintf_r+0x244>)
 8007510:	429d      	cmp	r5, r3
 8007512:	d101      	bne.n	8007518 <_vfiprintf_r+0x60>
 8007514:	68b5      	ldr	r5, [r6, #8]
 8007516:	e7df      	b.n	80074d8 <_vfiprintf_r+0x20>
 8007518:	4b79      	ldr	r3, [pc, #484]	; (8007700 <_vfiprintf_r+0x248>)
 800751a:	429d      	cmp	r5, r3
 800751c:	bf08      	it	eq
 800751e:	68f5      	ldreq	r5, [r6, #12]
 8007520:	e7da      	b.n	80074d8 <_vfiprintf_r+0x20>
 8007522:	89ab      	ldrh	r3, [r5, #12]
 8007524:	0598      	lsls	r0, r3, #22
 8007526:	d4ed      	bmi.n	8007504 <_vfiprintf_r+0x4c>
 8007528:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800752a:	f000 fd0a 	bl	8007f42 <__retarget_lock_release_recursive>
 800752e:	e7e9      	b.n	8007504 <_vfiprintf_r+0x4c>
 8007530:	2300      	movs	r3, #0
 8007532:	9309      	str	r3, [sp, #36]	; 0x24
 8007534:	2320      	movs	r3, #32
 8007536:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800753a:	f8cd 800c 	str.w	r8, [sp, #12]
 800753e:	2330      	movs	r3, #48	; 0x30
 8007540:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007704 <_vfiprintf_r+0x24c>
 8007544:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007548:	f04f 0901 	mov.w	r9, #1
 800754c:	4623      	mov	r3, r4
 800754e:	469a      	mov	sl, r3
 8007550:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007554:	b10a      	cbz	r2, 800755a <_vfiprintf_r+0xa2>
 8007556:	2a25      	cmp	r2, #37	; 0x25
 8007558:	d1f9      	bne.n	800754e <_vfiprintf_r+0x96>
 800755a:	ebba 0b04 	subs.w	fp, sl, r4
 800755e:	d00b      	beq.n	8007578 <_vfiprintf_r+0xc0>
 8007560:	465b      	mov	r3, fp
 8007562:	4622      	mov	r2, r4
 8007564:	4629      	mov	r1, r5
 8007566:	4630      	mov	r0, r6
 8007568:	f7ff ff93 	bl	8007492 <__sfputs_r>
 800756c:	3001      	adds	r0, #1
 800756e:	f000 80aa 	beq.w	80076c6 <_vfiprintf_r+0x20e>
 8007572:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007574:	445a      	add	r2, fp
 8007576:	9209      	str	r2, [sp, #36]	; 0x24
 8007578:	f89a 3000 	ldrb.w	r3, [sl]
 800757c:	2b00      	cmp	r3, #0
 800757e:	f000 80a2 	beq.w	80076c6 <_vfiprintf_r+0x20e>
 8007582:	2300      	movs	r3, #0
 8007584:	f04f 32ff 	mov.w	r2, #4294967295
 8007588:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800758c:	f10a 0a01 	add.w	sl, sl, #1
 8007590:	9304      	str	r3, [sp, #16]
 8007592:	9307      	str	r3, [sp, #28]
 8007594:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007598:	931a      	str	r3, [sp, #104]	; 0x68
 800759a:	4654      	mov	r4, sl
 800759c:	2205      	movs	r2, #5
 800759e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075a2:	4858      	ldr	r0, [pc, #352]	; (8007704 <_vfiprintf_r+0x24c>)
 80075a4:	f7f8 fe1c 	bl	80001e0 <memchr>
 80075a8:	9a04      	ldr	r2, [sp, #16]
 80075aa:	b9d8      	cbnz	r0, 80075e4 <_vfiprintf_r+0x12c>
 80075ac:	06d1      	lsls	r1, r2, #27
 80075ae:	bf44      	itt	mi
 80075b0:	2320      	movmi	r3, #32
 80075b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075b6:	0713      	lsls	r3, r2, #28
 80075b8:	bf44      	itt	mi
 80075ba:	232b      	movmi	r3, #43	; 0x2b
 80075bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075c0:	f89a 3000 	ldrb.w	r3, [sl]
 80075c4:	2b2a      	cmp	r3, #42	; 0x2a
 80075c6:	d015      	beq.n	80075f4 <_vfiprintf_r+0x13c>
 80075c8:	9a07      	ldr	r2, [sp, #28]
 80075ca:	4654      	mov	r4, sl
 80075cc:	2000      	movs	r0, #0
 80075ce:	f04f 0c0a 	mov.w	ip, #10
 80075d2:	4621      	mov	r1, r4
 80075d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80075d8:	3b30      	subs	r3, #48	; 0x30
 80075da:	2b09      	cmp	r3, #9
 80075dc:	d94e      	bls.n	800767c <_vfiprintf_r+0x1c4>
 80075de:	b1b0      	cbz	r0, 800760e <_vfiprintf_r+0x156>
 80075e0:	9207      	str	r2, [sp, #28]
 80075e2:	e014      	b.n	800760e <_vfiprintf_r+0x156>
 80075e4:	eba0 0308 	sub.w	r3, r0, r8
 80075e8:	fa09 f303 	lsl.w	r3, r9, r3
 80075ec:	4313      	orrs	r3, r2
 80075ee:	9304      	str	r3, [sp, #16]
 80075f0:	46a2      	mov	sl, r4
 80075f2:	e7d2      	b.n	800759a <_vfiprintf_r+0xe2>
 80075f4:	9b03      	ldr	r3, [sp, #12]
 80075f6:	1d19      	adds	r1, r3, #4
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	9103      	str	r1, [sp, #12]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	bfbb      	ittet	lt
 8007600:	425b      	neglt	r3, r3
 8007602:	f042 0202 	orrlt.w	r2, r2, #2
 8007606:	9307      	strge	r3, [sp, #28]
 8007608:	9307      	strlt	r3, [sp, #28]
 800760a:	bfb8      	it	lt
 800760c:	9204      	strlt	r2, [sp, #16]
 800760e:	7823      	ldrb	r3, [r4, #0]
 8007610:	2b2e      	cmp	r3, #46	; 0x2e
 8007612:	d10c      	bne.n	800762e <_vfiprintf_r+0x176>
 8007614:	7863      	ldrb	r3, [r4, #1]
 8007616:	2b2a      	cmp	r3, #42	; 0x2a
 8007618:	d135      	bne.n	8007686 <_vfiprintf_r+0x1ce>
 800761a:	9b03      	ldr	r3, [sp, #12]
 800761c:	1d1a      	adds	r2, r3, #4
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	9203      	str	r2, [sp, #12]
 8007622:	2b00      	cmp	r3, #0
 8007624:	bfb8      	it	lt
 8007626:	f04f 33ff 	movlt.w	r3, #4294967295
 800762a:	3402      	adds	r4, #2
 800762c:	9305      	str	r3, [sp, #20]
 800762e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007714 <_vfiprintf_r+0x25c>
 8007632:	7821      	ldrb	r1, [r4, #0]
 8007634:	2203      	movs	r2, #3
 8007636:	4650      	mov	r0, sl
 8007638:	f7f8 fdd2 	bl	80001e0 <memchr>
 800763c:	b140      	cbz	r0, 8007650 <_vfiprintf_r+0x198>
 800763e:	2340      	movs	r3, #64	; 0x40
 8007640:	eba0 000a 	sub.w	r0, r0, sl
 8007644:	fa03 f000 	lsl.w	r0, r3, r0
 8007648:	9b04      	ldr	r3, [sp, #16]
 800764a:	4303      	orrs	r3, r0
 800764c:	3401      	adds	r4, #1
 800764e:	9304      	str	r3, [sp, #16]
 8007650:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007654:	482c      	ldr	r0, [pc, #176]	; (8007708 <_vfiprintf_r+0x250>)
 8007656:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800765a:	2206      	movs	r2, #6
 800765c:	f7f8 fdc0 	bl	80001e0 <memchr>
 8007660:	2800      	cmp	r0, #0
 8007662:	d03f      	beq.n	80076e4 <_vfiprintf_r+0x22c>
 8007664:	4b29      	ldr	r3, [pc, #164]	; (800770c <_vfiprintf_r+0x254>)
 8007666:	bb1b      	cbnz	r3, 80076b0 <_vfiprintf_r+0x1f8>
 8007668:	9b03      	ldr	r3, [sp, #12]
 800766a:	3307      	adds	r3, #7
 800766c:	f023 0307 	bic.w	r3, r3, #7
 8007670:	3308      	adds	r3, #8
 8007672:	9303      	str	r3, [sp, #12]
 8007674:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007676:	443b      	add	r3, r7
 8007678:	9309      	str	r3, [sp, #36]	; 0x24
 800767a:	e767      	b.n	800754c <_vfiprintf_r+0x94>
 800767c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007680:	460c      	mov	r4, r1
 8007682:	2001      	movs	r0, #1
 8007684:	e7a5      	b.n	80075d2 <_vfiprintf_r+0x11a>
 8007686:	2300      	movs	r3, #0
 8007688:	3401      	adds	r4, #1
 800768a:	9305      	str	r3, [sp, #20]
 800768c:	4619      	mov	r1, r3
 800768e:	f04f 0c0a 	mov.w	ip, #10
 8007692:	4620      	mov	r0, r4
 8007694:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007698:	3a30      	subs	r2, #48	; 0x30
 800769a:	2a09      	cmp	r2, #9
 800769c:	d903      	bls.n	80076a6 <_vfiprintf_r+0x1ee>
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d0c5      	beq.n	800762e <_vfiprintf_r+0x176>
 80076a2:	9105      	str	r1, [sp, #20]
 80076a4:	e7c3      	b.n	800762e <_vfiprintf_r+0x176>
 80076a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80076aa:	4604      	mov	r4, r0
 80076ac:	2301      	movs	r3, #1
 80076ae:	e7f0      	b.n	8007692 <_vfiprintf_r+0x1da>
 80076b0:	ab03      	add	r3, sp, #12
 80076b2:	9300      	str	r3, [sp, #0]
 80076b4:	462a      	mov	r2, r5
 80076b6:	4b16      	ldr	r3, [pc, #88]	; (8007710 <_vfiprintf_r+0x258>)
 80076b8:	a904      	add	r1, sp, #16
 80076ba:	4630      	mov	r0, r6
 80076bc:	f3af 8000 	nop.w
 80076c0:	4607      	mov	r7, r0
 80076c2:	1c78      	adds	r0, r7, #1
 80076c4:	d1d6      	bne.n	8007674 <_vfiprintf_r+0x1bc>
 80076c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80076c8:	07d9      	lsls	r1, r3, #31
 80076ca:	d405      	bmi.n	80076d8 <_vfiprintf_r+0x220>
 80076cc:	89ab      	ldrh	r3, [r5, #12]
 80076ce:	059a      	lsls	r2, r3, #22
 80076d0:	d402      	bmi.n	80076d8 <_vfiprintf_r+0x220>
 80076d2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80076d4:	f000 fc35 	bl	8007f42 <__retarget_lock_release_recursive>
 80076d8:	89ab      	ldrh	r3, [r5, #12]
 80076da:	065b      	lsls	r3, r3, #25
 80076dc:	f53f af12 	bmi.w	8007504 <_vfiprintf_r+0x4c>
 80076e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80076e2:	e711      	b.n	8007508 <_vfiprintf_r+0x50>
 80076e4:	ab03      	add	r3, sp, #12
 80076e6:	9300      	str	r3, [sp, #0]
 80076e8:	462a      	mov	r2, r5
 80076ea:	4b09      	ldr	r3, [pc, #36]	; (8007710 <_vfiprintf_r+0x258>)
 80076ec:	a904      	add	r1, sp, #16
 80076ee:	4630      	mov	r0, r6
 80076f0:	f000 f880 	bl	80077f4 <_printf_i>
 80076f4:	e7e4      	b.n	80076c0 <_vfiprintf_r+0x208>
 80076f6:	bf00      	nop
 80076f8:	080084e8 	.word	0x080084e8
 80076fc:	08008508 	.word	0x08008508
 8007700:	080084c8 	.word	0x080084c8
 8007704:	08008492 	.word	0x08008492
 8007708:	0800849c 	.word	0x0800849c
 800770c:	00000000 	.word	0x00000000
 8007710:	08007493 	.word	0x08007493
 8007714:	08008498 	.word	0x08008498

08007718 <_printf_common>:
 8007718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800771c:	4616      	mov	r6, r2
 800771e:	4699      	mov	r9, r3
 8007720:	688a      	ldr	r2, [r1, #8]
 8007722:	690b      	ldr	r3, [r1, #16]
 8007724:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007728:	4293      	cmp	r3, r2
 800772a:	bfb8      	it	lt
 800772c:	4613      	movlt	r3, r2
 800772e:	6033      	str	r3, [r6, #0]
 8007730:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007734:	4607      	mov	r7, r0
 8007736:	460c      	mov	r4, r1
 8007738:	b10a      	cbz	r2, 800773e <_printf_common+0x26>
 800773a:	3301      	adds	r3, #1
 800773c:	6033      	str	r3, [r6, #0]
 800773e:	6823      	ldr	r3, [r4, #0]
 8007740:	0699      	lsls	r1, r3, #26
 8007742:	bf42      	ittt	mi
 8007744:	6833      	ldrmi	r3, [r6, #0]
 8007746:	3302      	addmi	r3, #2
 8007748:	6033      	strmi	r3, [r6, #0]
 800774a:	6825      	ldr	r5, [r4, #0]
 800774c:	f015 0506 	ands.w	r5, r5, #6
 8007750:	d106      	bne.n	8007760 <_printf_common+0x48>
 8007752:	f104 0a19 	add.w	sl, r4, #25
 8007756:	68e3      	ldr	r3, [r4, #12]
 8007758:	6832      	ldr	r2, [r6, #0]
 800775a:	1a9b      	subs	r3, r3, r2
 800775c:	42ab      	cmp	r3, r5
 800775e:	dc26      	bgt.n	80077ae <_printf_common+0x96>
 8007760:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007764:	1e13      	subs	r3, r2, #0
 8007766:	6822      	ldr	r2, [r4, #0]
 8007768:	bf18      	it	ne
 800776a:	2301      	movne	r3, #1
 800776c:	0692      	lsls	r2, r2, #26
 800776e:	d42b      	bmi.n	80077c8 <_printf_common+0xb0>
 8007770:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007774:	4649      	mov	r1, r9
 8007776:	4638      	mov	r0, r7
 8007778:	47c0      	blx	r8
 800777a:	3001      	adds	r0, #1
 800777c:	d01e      	beq.n	80077bc <_printf_common+0xa4>
 800777e:	6823      	ldr	r3, [r4, #0]
 8007780:	68e5      	ldr	r5, [r4, #12]
 8007782:	6832      	ldr	r2, [r6, #0]
 8007784:	f003 0306 	and.w	r3, r3, #6
 8007788:	2b04      	cmp	r3, #4
 800778a:	bf08      	it	eq
 800778c:	1aad      	subeq	r5, r5, r2
 800778e:	68a3      	ldr	r3, [r4, #8]
 8007790:	6922      	ldr	r2, [r4, #16]
 8007792:	bf0c      	ite	eq
 8007794:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007798:	2500      	movne	r5, #0
 800779a:	4293      	cmp	r3, r2
 800779c:	bfc4      	itt	gt
 800779e:	1a9b      	subgt	r3, r3, r2
 80077a0:	18ed      	addgt	r5, r5, r3
 80077a2:	2600      	movs	r6, #0
 80077a4:	341a      	adds	r4, #26
 80077a6:	42b5      	cmp	r5, r6
 80077a8:	d11a      	bne.n	80077e0 <_printf_common+0xc8>
 80077aa:	2000      	movs	r0, #0
 80077ac:	e008      	b.n	80077c0 <_printf_common+0xa8>
 80077ae:	2301      	movs	r3, #1
 80077b0:	4652      	mov	r2, sl
 80077b2:	4649      	mov	r1, r9
 80077b4:	4638      	mov	r0, r7
 80077b6:	47c0      	blx	r8
 80077b8:	3001      	adds	r0, #1
 80077ba:	d103      	bne.n	80077c4 <_printf_common+0xac>
 80077bc:	f04f 30ff 	mov.w	r0, #4294967295
 80077c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077c4:	3501      	adds	r5, #1
 80077c6:	e7c6      	b.n	8007756 <_printf_common+0x3e>
 80077c8:	18e1      	adds	r1, r4, r3
 80077ca:	1c5a      	adds	r2, r3, #1
 80077cc:	2030      	movs	r0, #48	; 0x30
 80077ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80077d2:	4422      	add	r2, r4
 80077d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80077d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80077dc:	3302      	adds	r3, #2
 80077de:	e7c7      	b.n	8007770 <_printf_common+0x58>
 80077e0:	2301      	movs	r3, #1
 80077e2:	4622      	mov	r2, r4
 80077e4:	4649      	mov	r1, r9
 80077e6:	4638      	mov	r0, r7
 80077e8:	47c0      	blx	r8
 80077ea:	3001      	adds	r0, #1
 80077ec:	d0e6      	beq.n	80077bc <_printf_common+0xa4>
 80077ee:	3601      	adds	r6, #1
 80077f0:	e7d9      	b.n	80077a6 <_printf_common+0x8e>
	...

080077f4 <_printf_i>:
 80077f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80077f8:	7e0f      	ldrb	r7, [r1, #24]
 80077fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80077fc:	2f78      	cmp	r7, #120	; 0x78
 80077fe:	4691      	mov	r9, r2
 8007800:	4680      	mov	r8, r0
 8007802:	460c      	mov	r4, r1
 8007804:	469a      	mov	sl, r3
 8007806:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800780a:	d807      	bhi.n	800781c <_printf_i+0x28>
 800780c:	2f62      	cmp	r7, #98	; 0x62
 800780e:	d80a      	bhi.n	8007826 <_printf_i+0x32>
 8007810:	2f00      	cmp	r7, #0
 8007812:	f000 80d8 	beq.w	80079c6 <_printf_i+0x1d2>
 8007816:	2f58      	cmp	r7, #88	; 0x58
 8007818:	f000 80a3 	beq.w	8007962 <_printf_i+0x16e>
 800781c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007820:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007824:	e03a      	b.n	800789c <_printf_i+0xa8>
 8007826:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800782a:	2b15      	cmp	r3, #21
 800782c:	d8f6      	bhi.n	800781c <_printf_i+0x28>
 800782e:	a101      	add	r1, pc, #4	; (adr r1, 8007834 <_printf_i+0x40>)
 8007830:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007834:	0800788d 	.word	0x0800788d
 8007838:	080078a1 	.word	0x080078a1
 800783c:	0800781d 	.word	0x0800781d
 8007840:	0800781d 	.word	0x0800781d
 8007844:	0800781d 	.word	0x0800781d
 8007848:	0800781d 	.word	0x0800781d
 800784c:	080078a1 	.word	0x080078a1
 8007850:	0800781d 	.word	0x0800781d
 8007854:	0800781d 	.word	0x0800781d
 8007858:	0800781d 	.word	0x0800781d
 800785c:	0800781d 	.word	0x0800781d
 8007860:	080079ad 	.word	0x080079ad
 8007864:	080078d1 	.word	0x080078d1
 8007868:	0800798f 	.word	0x0800798f
 800786c:	0800781d 	.word	0x0800781d
 8007870:	0800781d 	.word	0x0800781d
 8007874:	080079cf 	.word	0x080079cf
 8007878:	0800781d 	.word	0x0800781d
 800787c:	080078d1 	.word	0x080078d1
 8007880:	0800781d 	.word	0x0800781d
 8007884:	0800781d 	.word	0x0800781d
 8007888:	08007997 	.word	0x08007997
 800788c:	682b      	ldr	r3, [r5, #0]
 800788e:	1d1a      	adds	r2, r3, #4
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	602a      	str	r2, [r5, #0]
 8007894:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007898:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800789c:	2301      	movs	r3, #1
 800789e:	e0a3      	b.n	80079e8 <_printf_i+0x1f4>
 80078a0:	6820      	ldr	r0, [r4, #0]
 80078a2:	6829      	ldr	r1, [r5, #0]
 80078a4:	0606      	lsls	r6, r0, #24
 80078a6:	f101 0304 	add.w	r3, r1, #4
 80078aa:	d50a      	bpl.n	80078c2 <_printf_i+0xce>
 80078ac:	680e      	ldr	r6, [r1, #0]
 80078ae:	602b      	str	r3, [r5, #0]
 80078b0:	2e00      	cmp	r6, #0
 80078b2:	da03      	bge.n	80078bc <_printf_i+0xc8>
 80078b4:	232d      	movs	r3, #45	; 0x2d
 80078b6:	4276      	negs	r6, r6
 80078b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078bc:	485e      	ldr	r0, [pc, #376]	; (8007a38 <_printf_i+0x244>)
 80078be:	230a      	movs	r3, #10
 80078c0:	e019      	b.n	80078f6 <_printf_i+0x102>
 80078c2:	680e      	ldr	r6, [r1, #0]
 80078c4:	602b      	str	r3, [r5, #0]
 80078c6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80078ca:	bf18      	it	ne
 80078cc:	b236      	sxthne	r6, r6
 80078ce:	e7ef      	b.n	80078b0 <_printf_i+0xbc>
 80078d0:	682b      	ldr	r3, [r5, #0]
 80078d2:	6820      	ldr	r0, [r4, #0]
 80078d4:	1d19      	adds	r1, r3, #4
 80078d6:	6029      	str	r1, [r5, #0]
 80078d8:	0601      	lsls	r1, r0, #24
 80078da:	d501      	bpl.n	80078e0 <_printf_i+0xec>
 80078dc:	681e      	ldr	r6, [r3, #0]
 80078de:	e002      	b.n	80078e6 <_printf_i+0xf2>
 80078e0:	0646      	lsls	r6, r0, #25
 80078e2:	d5fb      	bpl.n	80078dc <_printf_i+0xe8>
 80078e4:	881e      	ldrh	r6, [r3, #0]
 80078e6:	4854      	ldr	r0, [pc, #336]	; (8007a38 <_printf_i+0x244>)
 80078e8:	2f6f      	cmp	r7, #111	; 0x6f
 80078ea:	bf0c      	ite	eq
 80078ec:	2308      	moveq	r3, #8
 80078ee:	230a      	movne	r3, #10
 80078f0:	2100      	movs	r1, #0
 80078f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80078f6:	6865      	ldr	r5, [r4, #4]
 80078f8:	60a5      	str	r5, [r4, #8]
 80078fa:	2d00      	cmp	r5, #0
 80078fc:	bfa2      	ittt	ge
 80078fe:	6821      	ldrge	r1, [r4, #0]
 8007900:	f021 0104 	bicge.w	r1, r1, #4
 8007904:	6021      	strge	r1, [r4, #0]
 8007906:	b90e      	cbnz	r6, 800790c <_printf_i+0x118>
 8007908:	2d00      	cmp	r5, #0
 800790a:	d04d      	beq.n	80079a8 <_printf_i+0x1b4>
 800790c:	4615      	mov	r5, r2
 800790e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007912:	fb03 6711 	mls	r7, r3, r1, r6
 8007916:	5dc7      	ldrb	r7, [r0, r7]
 8007918:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800791c:	4637      	mov	r7, r6
 800791e:	42bb      	cmp	r3, r7
 8007920:	460e      	mov	r6, r1
 8007922:	d9f4      	bls.n	800790e <_printf_i+0x11a>
 8007924:	2b08      	cmp	r3, #8
 8007926:	d10b      	bne.n	8007940 <_printf_i+0x14c>
 8007928:	6823      	ldr	r3, [r4, #0]
 800792a:	07de      	lsls	r6, r3, #31
 800792c:	d508      	bpl.n	8007940 <_printf_i+0x14c>
 800792e:	6923      	ldr	r3, [r4, #16]
 8007930:	6861      	ldr	r1, [r4, #4]
 8007932:	4299      	cmp	r1, r3
 8007934:	bfde      	ittt	le
 8007936:	2330      	movle	r3, #48	; 0x30
 8007938:	f805 3c01 	strble.w	r3, [r5, #-1]
 800793c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007940:	1b52      	subs	r2, r2, r5
 8007942:	6122      	str	r2, [r4, #16]
 8007944:	f8cd a000 	str.w	sl, [sp]
 8007948:	464b      	mov	r3, r9
 800794a:	aa03      	add	r2, sp, #12
 800794c:	4621      	mov	r1, r4
 800794e:	4640      	mov	r0, r8
 8007950:	f7ff fee2 	bl	8007718 <_printf_common>
 8007954:	3001      	adds	r0, #1
 8007956:	d14c      	bne.n	80079f2 <_printf_i+0x1fe>
 8007958:	f04f 30ff 	mov.w	r0, #4294967295
 800795c:	b004      	add	sp, #16
 800795e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007962:	4835      	ldr	r0, [pc, #212]	; (8007a38 <_printf_i+0x244>)
 8007964:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007968:	6829      	ldr	r1, [r5, #0]
 800796a:	6823      	ldr	r3, [r4, #0]
 800796c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007970:	6029      	str	r1, [r5, #0]
 8007972:	061d      	lsls	r5, r3, #24
 8007974:	d514      	bpl.n	80079a0 <_printf_i+0x1ac>
 8007976:	07df      	lsls	r7, r3, #31
 8007978:	bf44      	itt	mi
 800797a:	f043 0320 	orrmi.w	r3, r3, #32
 800797e:	6023      	strmi	r3, [r4, #0]
 8007980:	b91e      	cbnz	r6, 800798a <_printf_i+0x196>
 8007982:	6823      	ldr	r3, [r4, #0]
 8007984:	f023 0320 	bic.w	r3, r3, #32
 8007988:	6023      	str	r3, [r4, #0]
 800798a:	2310      	movs	r3, #16
 800798c:	e7b0      	b.n	80078f0 <_printf_i+0xfc>
 800798e:	6823      	ldr	r3, [r4, #0]
 8007990:	f043 0320 	orr.w	r3, r3, #32
 8007994:	6023      	str	r3, [r4, #0]
 8007996:	2378      	movs	r3, #120	; 0x78
 8007998:	4828      	ldr	r0, [pc, #160]	; (8007a3c <_printf_i+0x248>)
 800799a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800799e:	e7e3      	b.n	8007968 <_printf_i+0x174>
 80079a0:	0659      	lsls	r1, r3, #25
 80079a2:	bf48      	it	mi
 80079a4:	b2b6      	uxthmi	r6, r6
 80079a6:	e7e6      	b.n	8007976 <_printf_i+0x182>
 80079a8:	4615      	mov	r5, r2
 80079aa:	e7bb      	b.n	8007924 <_printf_i+0x130>
 80079ac:	682b      	ldr	r3, [r5, #0]
 80079ae:	6826      	ldr	r6, [r4, #0]
 80079b0:	6961      	ldr	r1, [r4, #20]
 80079b2:	1d18      	adds	r0, r3, #4
 80079b4:	6028      	str	r0, [r5, #0]
 80079b6:	0635      	lsls	r5, r6, #24
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	d501      	bpl.n	80079c0 <_printf_i+0x1cc>
 80079bc:	6019      	str	r1, [r3, #0]
 80079be:	e002      	b.n	80079c6 <_printf_i+0x1d2>
 80079c0:	0670      	lsls	r0, r6, #25
 80079c2:	d5fb      	bpl.n	80079bc <_printf_i+0x1c8>
 80079c4:	8019      	strh	r1, [r3, #0]
 80079c6:	2300      	movs	r3, #0
 80079c8:	6123      	str	r3, [r4, #16]
 80079ca:	4615      	mov	r5, r2
 80079cc:	e7ba      	b.n	8007944 <_printf_i+0x150>
 80079ce:	682b      	ldr	r3, [r5, #0]
 80079d0:	1d1a      	adds	r2, r3, #4
 80079d2:	602a      	str	r2, [r5, #0]
 80079d4:	681d      	ldr	r5, [r3, #0]
 80079d6:	6862      	ldr	r2, [r4, #4]
 80079d8:	2100      	movs	r1, #0
 80079da:	4628      	mov	r0, r5
 80079dc:	f7f8 fc00 	bl	80001e0 <memchr>
 80079e0:	b108      	cbz	r0, 80079e6 <_printf_i+0x1f2>
 80079e2:	1b40      	subs	r0, r0, r5
 80079e4:	6060      	str	r0, [r4, #4]
 80079e6:	6863      	ldr	r3, [r4, #4]
 80079e8:	6123      	str	r3, [r4, #16]
 80079ea:	2300      	movs	r3, #0
 80079ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079f0:	e7a8      	b.n	8007944 <_printf_i+0x150>
 80079f2:	6923      	ldr	r3, [r4, #16]
 80079f4:	462a      	mov	r2, r5
 80079f6:	4649      	mov	r1, r9
 80079f8:	4640      	mov	r0, r8
 80079fa:	47d0      	blx	sl
 80079fc:	3001      	adds	r0, #1
 80079fe:	d0ab      	beq.n	8007958 <_printf_i+0x164>
 8007a00:	6823      	ldr	r3, [r4, #0]
 8007a02:	079b      	lsls	r3, r3, #30
 8007a04:	d413      	bmi.n	8007a2e <_printf_i+0x23a>
 8007a06:	68e0      	ldr	r0, [r4, #12]
 8007a08:	9b03      	ldr	r3, [sp, #12]
 8007a0a:	4298      	cmp	r0, r3
 8007a0c:	bfb8      	it	lt
 8007a0e:	4618      	movlt	r0, r3
 8007a10:	e7a4      	b.n	800795c <_printf_i+0x168>
 8007a12:	2301      	movs	r3, #1
 8007a14:	4632      	mov	r2, r6
 8007a16:	4649      	mov	r1, r9
 8007a18:	4640      	mov	r0, r8
 8007a1a:	47d0      	blx	sl
 8007a1c:	3001      	adds	r0, #1
 8007a1e:	d09b      	beq.n	8007958 <_printf_i+0x164>
 8007a20:	3501      	adds	r5, #1
 8007a22:	68e3      	ldr	r3, [r4, #12]
 8007a24:	9903      	ldr	r1, [sp, #12]
 8007a26:	1a5b      	subs	r3, r3, r1
 8007a28:	42ab      	cmp	r3, r5
 8007a2a:	dcf2      	bgt.n	8007a12 <_printf_i+0x21e>
 8007a2c:	e7eb      	b.n	8007a06 <_printf_i+0x212>
 8007a2e:	2500      	movs	r5, #0
 8007a30:	f104 0619 	add.w	r6, r4, #25
 8007a34:	e7f5      	b.n	8007a22 <_printf_i+0x22e>
 8007a36:	bf00      	nop
 8007a38:	080084a3 	.word	0x080084a3
 8007a3c:	080084b4 	.word	0x080084b4

08007a40 <__swbuf_r>:
 8007a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a42:	460e      	mov	r6, r1
 8007a44:	4614      	mov	r4, r2
 8007a46:	4605      	mov	r5, r0
 8007a48:	b118      	cbz	r0, 8007a52 <__swbuf_r+0x12>
 8007a4a:	6983      	ldr	r3, [r0, #24]
 8007a4c:	b90b      	cbnz	r3, 8007a52 <__swbuf_r+0x12>
 8007a4e:	f000 f9d9 	bl	8007e04 <__sinit>
 8007a52:	4b21      	ldr	r3, [pc, #132]	; (8007ad8 <__swbuf_r+0x98>)
 8007a54:	429c      	cmp	r4, r3
 8007a56:	d12b      	bne.n	8007ab0 <__swbuf_r+0x70>
 8007a58:	686c      	ldr	r4, [r5, #4]
 8007a5a:	69a3      	ldr	r3, [r4, #24]
 8007a5c:	60a3      	str	r3, [r4, #8]
 8007a5e:	89a3      	ldrh	r3, [r4, #12]
 8007a60:	071a      	lsls	r2, r3, #28
 8007a62:	d52f      	bpl.n	8007ac4 <__swbuf_r+0x84>
 8007a64:	6923      	ldr	r3, [r4, #16]
 8007a66:	b36b      	cbz	r3, 8007ac4 <__swbuf_r+0x84>
 8007a68:	6923      	ldr	r3, [r4, #16]
 8007a6a:	6820      	ldr	r0, [r4, #0]
 8007a6c:	1ac0      	subs	r0, r0, r3
 8007a6e:	6963      	ldr	r3, [r4, #20]
 8007a70:	b2f6      	uxtb	r6, r6
 8007a72:	4283      	cmp	r3, r0
 8007a74:	4637      	mov	r7, r6
 8007a76:	dc04      	bgt.n	8007a82 <__swbuf_r+0x42>
 8007a78:	4621      	mov	r1, r4
 8007a7a:	4628      	mov	r0, r5
 8007a7c:	f000 f92e 	bl	8007cdc <_fflush_r>
 8007a80:	bb30      	cbnz	r0, 8007ad0 <__swbuf_r+0x90>
 8007a82:	68a3      	ldr	r3, [r4, #8]
 8007a84:	3b01      	subs	r3, #1
 8007a86:	60a3      	str	r3, [r4, #8]
 8007a88:	6823      	ldr	r3, [r4, #0]
 8007a8a:	1c5a      	adds	r2, r3, #1
 8007a8c:	6022      	str	r2, [r4, #0]
 8007a8e:	701e      	strb	r6, [r3, #0]
 8007a90:	6963      	ldr	r3, [r4, #20]
 8007a92:	3001      	adds	r0, #1
 8007a94:	4283      	cmp	r3, r0
 8007a96:	d004      	beq.n	8007aa2 <__swbuf_r+0x62>
 8007a98:	89a3      	ldrh	r3, [r4, #12]
 8007a9a:	07db      	lsls	r3, r3, #31
 8007a9c:	d506      	bpl.n	8007aac <__swbuf_r+0x6c>
 8007a9e:	2e0a      	cmp	r6, #10
 8007aa0:	d104      	bne.n	8007aac <__swbuf_r+0x6c>
 8007aa2:	4621      	mov	r1, r4
 8007aa4:	4628      	mov	r0, r5
 8007aa6:	f000 f919 	bl	8007cdc <_fflush_r>
 8007aaa:	b988      	cbnz	r0, 8007ad0 <__swbuf_r+0x90>
 8007aac:	4638      	mov	r0, r7
 8007aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ab0:	4b0a      	ldr	r3, [pc, #40]	; (8007adc <__swbuf_r+0x9c>)
 8007ab2:	429c      	cmp	r4, r3
 8007ab4:	d101      	bne.n	8007aba <__swbuf_r+0x7a>
 8007ab6:	68ac      	ldr	r4, [r5, #8]
 8007ab8:	e7cf      	b.n	8007a5a <__swbuf_r+0x1a>
 8007aba:	4b09      	ldr	r3, [pc, #36]	; (8007ae0 <__swbuf_r+0xa0>)
 8007abc:	429c      	cmp	r4, r3
 8007abe:	bf08      	it	eq
 8007ac0:	68ec      	ldreq	r4, [r5, #12]
 8007ac2:	e7ca      	b.n	8007a5a <__swbuf_r+0x1a>
 8007ac4:	4621      	mov	r1, r4
 8007ac6:	4628      	mov	r0, r5
 8007ac8:	f000 f80c 	bl	8007ae4 <__swsetup_r>
 8007acc:	2800      	cmp	r0, #0
 8007ace:	d0cb      	beq.n	8007a68 <__swbuf_r+0x28>
 8007ad0:	f04f 37ff 	mov.w	r7, #4294967295
 8007ad4:	e7ea      	b.n	8007aac <__swbuf_r+0x6c>
 8007ad6:	bf00      	nop
 8007ad8:	080084e8 	.word	0x080084e8
 8007adc:	08008508 	.word	0x08008508
 8007ae0:	080084c8 	.word	0x080084c8

08007ae4 <__swsetup_r>:
 8007ae4:	4b32      	ldr	r3, [pc, #200]	; (8007bb0 <__swsetup_r+0xcc>)
 8007ae6:	b570      	push	{r4, r5, r6, lr}
 8007ae8:	681d      	ldr	r5, [r3, #0]
 8007aea:	4606      	mov	r6, r0
 8007aec:	460c      	mov	r4, r1
 8007aee:	b125      	cbz	r5, 8007afa <__swsetup_r+0x16>
 8007af0:	69ab      	ldr	r3, [r5, #24]
 8007af2:	b913      	cbnz	r3, 8007afa <__swsetup_r+0x16>
 8007af4:	4628      	mov	r0, r5
 8007af6:	f000 f985 	bl	8007e04 <__sinit>
 8007afa:	4b2e      	ldr	r3, [pc, #184]	; (8007bb4 <__swsetup_r+0xd0>)
 8007afc:	429c      	cmp	r4, r3
 8007afe:	d10f      	bne.n	8007b20 <__swsetup_r+0x3c>
 8007b00:	686c      	ldr	r4, [r5, #4]
 8007b02:	89a3      	ldrh	r3, [r4, #12]
 8007b04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007b08:	0719      	lsls	r1, r3, #28
 8007b0a:	d42c      	bmi.n	8007b66 <__swsetup_r+0x82>
 8007b0c:	06dd      	lsls	r5, r3, #27
 8007b0e:	d411      	bmi.n	8007b34 <__swsetup_r+0x50>
 8007b10:	2309      	movs	r3, #9
 8007b12:	6033      	str	r3, [r6, #0]
 8007b14:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007b18:	81a3      	strh	r3, [r4, #12]
 8007b1a:	f04f 30ff 	mov.w	r0, #4294967295
 8007b1e:	e03e      	b.n	8007b9e <__swsetup_r+0xba>
 8007b20:	4b25      	ldr	r3, [pc, #148]	; (8007bb8 <__swsetup_r+0xd4>)
 8007b22:	429c      	cmp	r4, r3
 8007b24:	d101      	bne.n	8007b2a <__swsetup_r+0x46>
 8007b26:	68ac      	ldr	r4, [r5, #8]
 8007b28:	e7eb      	b.n	8007b02 <__swsetup_r+0x1e>
 8007b2a:	4b24      	ldr	r3, [pc, #144]	; (8007bbc <__swsetup_r+0xd8>)
 8007b2c:	429c      	cmp	r4, r3
 8007b2e:	bf08      	it	eq
 8007b30:	68ec      	ldreq	r4, [r5, #12]
 8007b32:	e7e6      	b.n	8007b02 <__swsetup_r+0x1e>
 8007b34:	0758      	lsls	r0, r3, #29
 8007b36:	d512      	bpl.n	8007b5e <__swsetup_r+0x7a>
 8007b38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b3a:	b141      	cbz	r1, 8007b4e <__swsetup_r+0x6a>
 8007b3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b40:	4299      	cmp	r1, r3
 8007b42:	d002      	beq.n	8007b4a <__swsetup_r+0x66>
 8007b44:	4630      	mov	r0, r6
 8007b46:	f7ff fc41 	bl	80073cc <_free_r>
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	6363      	str	r3, [r4, #52]	; 0x34
 8007b4e:	89a3      	ldrh	r3, [r4, #12]
 8007b50:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007b54:	81a3      	strh	r3, [r4, #12]
 8007b56:	2300      	movs	r3, #0
 8007b58:	6063      	str	r3, [r4, #4]
 8007b5a:	6923      	ldr	r3, [r4, #16]
 8007b5c:	6023      	str	r3, [r4, #0]
 8007b5e:	89a3      	ldrh	r3, [r4, #12]
 8007b60:	f043 0308 	orr.w	r3, r3, #8
 8007b64:	81a3      	strh	r3, [r4, #12]
 8007b66:	6923      	ldr	r3, [r4, #16]
 8007b68:	b94b      	cbnz	r3, 8007b7e <__swsetup_r+0x9a>
 8007b6a:	89a3      	ldrh	r3, [r4, #12]
 8007b6c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007b70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b74:	d003      	beq.n	8007b7e <__swsetup_r+0x9a>
 8007b76:	4621      	mov	r1, r4
 8007b78:	4630      	mov	r0, r6
 8007b7a:	f000 fa09 	bl	8007f90 <__smakebuf_r>
 8007b7e:	89a0      	ldrh	r0, [r4, #12]
 8007b80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007b84:	f010 0301 	ands.w	r3, r0, #1
 8007b88:	d00a      	beq.n	8007ba0 <__swsetup_r+0xbc>
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	60a3      	str	r3, [r4, #8]
 8007b8e:	6963      	ldr	r3, [r4, #20]
 8007b90:	425b      	negs	r3, r3
 8007b92:	61a3      	str	r3, [r4, #24]
 8007b94:	6923      	ldr	r3, [r4, #16]
 8007b96:	b943      	cbnz	r3, 8007baa <__swsetup_r+0xc6>
 8007b98:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007b9c:	d1ba      	bne.n	8007b14 <__swsetup_r+0x30>
 8007b9e:	bd70      	pop	{r4, r5, r6, pc}
 8007ba0:	0781      	lsls	r1, r0, #30
 8007ba2:	bf58      	it	pl
 8007ba4:	6963      	ldrpl	r3, [r4, #20]
 8007ba6:	60a3      	str	r3, [r4, #8]
 8007ba8:	e7f4      	b.n	8007b94 <__swsetup_r+0xb0>
 8007baa:	2000      	movs	r0, #0
 8007bac:	e7f7      	b.n	8007b9e <__swsetup_r+0xba>
 8007bae:	bf00      	nop
 8007bb0:	2000000c 	.word	0x2000000c
 8007bb4:	080084e8 	.word	0x080084e8
 8007bb8:	08008508 	.word	0x08008508
 8007bbc:	080084c8 	.word	0x080084c8

08007bc0 <abort>:
 8007bc0:	b508      	push	{r3, lr}
 8007bc2:	2006      	movs	r0, #6
 8007bc4:	f000 fa4c 	bl	8008060 <raise>
 8007bc8:	2001      	movs	r0, #1
 8007bca:	f7f9 fd8f 	bl	80016ec <_exit>
	...

08007bd0 <__sflush_r>:
 8007bd0:	898a      	ldrh	r2, [r1, #12]
 8007bd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bd6:	4605      	mov	r5, r0
 8007bd8:	0710      	lsls	r0, r2, #28
 8007bda:	460c      	mov	r4, r1
 8007bdc:	d458      	bmi.n	8007c90 <__sflush_r+0xc0>
 8007bde:	684b      	ldr	r3, [r1, #4]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	dc05      	bgt.n	8007bf0 <__sflush_r+0x20>
 8007be4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	dc02      	bgt.n	8007bf0 <__sflush_r+0x20>
 8007bea:	2000      	movs	r0, #0
 8007bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bf0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007bf2:	2e00      	cmp	r6, #0
 8007bf4:	d0f9      	beq.n	8007bea <__sflush_r+0x1a>
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007bfc:	682f      	ldr	r7, [r5, #0]
 8007bfe:	602b      	str	r3, [r5, #0]
 8007c00:	d032      	beq.n	8007c68 <__sflush_r+0x98>
 8007c02:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007c04:	89a3      	ldrh	r3, [r4, #12]
 8007c06:	075a      	lsls	r2, r3, #29
 8007c08:	d505      	bpl.n	8007c16 <__sflush_r+0x46>
 8007c0a:	6863      	ldr	r3, [r4, #4]
 8007c0c:	1ac0      	subs	r0, r0, r3
 8007c0e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007c10:	b10b      	cbz	r3, 8007c16 <__sflush_r+0x46>
 8007c12:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007c14:	1ac0      	subs	r0, r0, r3
 8007c16:	2300      	movs	r3, #0
 8007c18:	4602      	mov	r2, r0
 8007c1a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c1c:	6a21      	ldr	r1, [r4, #32]
 8007c1e:	4628      	mov	r0, r5
 8007c20:	47b0      	blx	r6
 8007c22:	1c43      	adds	r3, r0, #1
 8007c24:	89a3      	ldrh	r3, [r4, #12]
 8007c26:	d106      	bne.n	8007c36 <__sflush_r+0x66>
 8007c28:	6829      	ldr	r1, [r5, #0]
 8007c2a:	291d      	cmp	r1, #29
 8007c2c:	d82c      	bhi.n	8007c88 <__sflush_r+0xb8>
 8007c2e:	4a2a      	ldr	r2, [pc, #168]	; (8007cd8 <__sflush_r+0x108>)
 8007c30:	40ca      	lsrs	r2, r1
 8007c32:	07d6      	lsls	r6, r2, #31
 8007c34:	d528      	bpl.n	8007c88 <__sflush_r+0xb8>
 8007c36:	2200      	movs	r2, #0
 8007c38:	6062      	str	r2, [r4, #4]
 8007c3a:	04d9      	lsls	r1, r3, #19
 8007c3c:	6922      	ldr	r2, [r4, #16]
 8007c3e:	6022      	str	r2, [r4, #0]
 8007c40:	d504      	bpl.n	8007c4c <__sflush_r+0x7c>
 8007c42:	1c42      	adds	r2, r0, #1
 8007c44:	d101      	bne.n	8007c4a <__sflush_r+0x7a>
 8007c46:	682b      	ldr	r3, [r5, #0]
 8007c48:	b903      	cbnz	r3, 8007c4c <__sflush_r+0x7c>
 8007c4a:	6560      	str	r0, [r4, #84]	; 0x54
 8007c4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c4e:	602f      	str	r7, [r5, #0]
 8007c50:	2900      	cmp	r1, #0
 8007c52:	d0ca      	beq.n	8007bea <__sflush_r+0x1a>
 8007c54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c58:	4299      	cmp	r1, r3
 8007c5a:	d002      	beq.n	8007c62 <__sflush_r+0x92>
 8007c5c:	4628      	mov	r0, r5
 8007c5e:	f7ff fbb5 	bl	80073cc <_free_r>
 8007c62:	2000      	movs	r0, #0
 8007c64:	6360      	str	r0, [r4, #52]	; 0x34
 8007c66:	e7c1      	b.n	8007bec <__sflush_r+0x1c>
 8007c68:	6a21      	ldr	r1, [r4, #32]
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	4628      	mov	r0, r5
 8007c6e:	47b0      	blx	r6
 8007c70:	1c41      	adds	r1, r0, #1
 8007c72:	d1c7      	bne.n	8007c04 <__sflush_r+0x34>
 8007c74:	682b      	ldr	r3, [r5, #0]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d0c4      	beq.n	8007c04 <__sflush_r+0x34>
 8007c7a:	2b1d      	cmp	r3, #29
 8007c7c:	d001      	beq.n	8007c82 <__sflush_r+0xb2>
 8007c7e:	2b16      	cmp	r3, #22
 8007c80:	d101      	bne.n	8007c86 <__sflush_r+0xb6>
 8007c82:	602f      	str	r7, [r5, #0]
 8007c84:	e7b1      	b.n	8007bea <__sflush_r+0x1a>
 8007c86:	89a3      	ldrh	r3, [r4, #12]
 8007c88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c8c:	81a3      	strh	r3, [r4, #12]
 8007c8e:	e7ad      	b.n	8007bec <__sflush_r+0x1c>
 8007c90:	690f      	ldr	r7, [r1, #16]
 8007c92:	2f00      	cmp	r7, #0
 8007c94:	d0a9      	beq.n	8007bea <__sflush_r+0x1a>
 8007c96:	0793      	lsls	r3, r2, #30
 8007c98:	680e      	ldr	r6, [r1, #0]
 8007c9a:	bf08      	it	eq
 8007c9c:	694b      	ldreq	r3, [r1, #20]
 8007c9e:	600f      	str	r7, [r1, #0]
 8007ca0:	bf18      	it	ne
 8007ca2:	2300      	movne	r3, #0
 8007ca4:	eba6 0807 	sub.w	r8, r6, r7
 8007ca8:	608b      	str	r3, [r1, #8]
 8007caa:	f1b8 0f00 	cmp.w	r8, #0
 8007cae:	dd9c      	ble.n	8007bea <__sflush_r+0x1a>
 8007cb0:	6a21      	ldr	r1, [r4, #32]
 8007cb2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007cb4:	4643      	mov	r3, r8
 8007cb6:	463a      	mov	r2, r7
 8007cb8:	4628      	mov	r0, r5
 8007cba:	47b0      	blx	r6
 8007cbc:	2800      	cmp	r0, #0
 8007cbe:	dc06      	bgt.n	8007cce <__sflush_r+0xfe>
 8007cc0:	89a3      	ldrh	r3, [r4, #12]
 8007cc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cc6:	81a3      	strh	r3, [r4, #12]
 8007cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8007ccc:	e78e      	b.n	8007bec <__sflush_r+0x1c>
 8007cce:	4407      	add	r7, r0
 8007cd0:	eba8 0800 	sub.w	r8, r8, r0
 8007cd4:	e7e9      	b.n	8007caa <__sflush_r+0xda>
 8007cd6:	bf00      	nop
 8007cd8:	20400001 	.word	0x20400001

08007cdc <_fflush_r>:
 8007cdc:	b538      	push	{r3, r4, r5, lr}
 8007cde:	690b      	ldr	r3, [r1, #16]
 8007ce0:	4605      	mov	r5, r0
 8007ce2:	460c      	mov	r4, r1
 8007ce4:	b913      	cbnz	r3, 8007cec <_fflush_r+0x10>
 8007ce6:	2500      	movs	r5, #0
 8007ce8:	4628      	mov	r0, r5
 8007cea:	bd38      	pop	{r3, r4, r5, pc}
 8007cec:	b118      	cbz	r0, 8007cf6 <_fflush_r+0x1a>
 8007cee:	6983      	ldr	r3, [r0, #24]
 8007cf0:	b90b      	cbnz	r3, 8007cf6 <_fflush_r+0x1a>
 8007cf2:	f000 f887 	bl	8007e04 <__sinit>
 8007cf6:	4b14      	ldr	r3, [pc, #80]	; (8007d48 <_fflush_r+0x6c>)
 8007cf8:	429c      	cmp	r4, r3
 8007cfa:	d11b      	bne.n	8007d34 <_fflush_r+0x58>
 8007cfc:	686c      	ldr	r4, [r5, #4]
 8007cfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d0ef      	beq.n	8007ce6 <_fflush_r+0xa>
 8007d06:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007d08:	07d0      	lsls	r0, r2, #31
 8007d0a:	d404      	bmi.n	8007d16 <_fflush_r+0x3a>
 8007d0c:	0599      	lsls	r1, r3, #22
 8007d0e:	d402      	bmi.n	8007d16 <_fflush_r+0x3a>
 8007d10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d12:	f000 f915 	bl	8007f40 <__retarget_lock_acquire_recursive>
 8007d16:	4628      	mov	r0, r5
 8007d18:	4621      	mov	r1, r4
 8007d1a:	f7ff ff59 	bl	8007bd0 <__sflush_r>
 8007d1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d20:	07da      	lsls	r2, r3, #31
 8007d22:	4605      	mov	r5, r0
 8007d24:	d4e0      	bmi.n	8007ce8 <_fflush_r+0xc>
 8007d26:	89a3      	ldrh	r3, [r4, #12]
 8007d28:	059b      	lsls	r3, r3, #22
 8007d2a:	d4dd      	bmi.n	8007ce8 <_fflush_r+0xc>
 8007d2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d2e:	f000 f908 	bl	8007f42 <__retarget_lock_release_recursive>
 8007d32:	e7d9      	b.n	8007ce8 <_fflush_r+0xc>
 8007d34:	4b05      	ldr	r3, [pc, #20]	; (8007d4c <_fflush_r+0x70>)
 8007d36:	429c      	cmp	r4, r3
 8007d38:	d101      	bne.n	8007d3e <_fflush_r+0x62>
 8007d3a:	68ac      	ldr	r4, [r5, #8]
 8007d3c:	e7df      	b.n	8007cfe <_fflush_r+0x22>
 8007d3e:	4b04      	ldr	r3, [pc, #16]	; (8007d50 <_fflush_r+0x74>)
 8007d40:	429c      	cmp	r4, r3
 8007d42:	bf08      	it	eq
 8007d44:	68ec      	ldreq	r4, [r5, #12]
 8007d46:	e7da      	b.n	8007cfe <_fflush_r+0x22>
 8007d48:	080084e8 	.word	0x080084e8
 8007d4c:	08008508 	.word	0x08008508
 8007d50:	080084c8 	.word	0x080084c8

08007d54 <std>:
 8007d54:	2300      	movs	r3, #0
 8007d56:	b510      	push	{r4, lr}
 8007d58:	4604      	mov	r4, r0
 8007d5a:	e9c0 3300 	strd	r3, r3, [r0]
 8007d5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007d62:	6083      	str	r3, [r0, #8]
 8007d64:	8181      	strh	r1, [r0, #12]
 8007d66:	6643      	str	r3, [r0, #100]	; 0x64
 8007d68:	81c2      	strh	r2, [r0, #14]
 8007d6a:	6183      	str	r3, [r0, #24]
 8007d6c:	4619      	mov	r1, r3
 8007d6e:	2208      	movs	r2, #8
 8007d70:	305c      	adds	r0, #92	; 0x5c
 8007d72:	f7fd feb9 	bl	8005ae8 <memset>
 8007d76:	4b05      	ldr	r3, [pc, #20]	; (8007d8c <std+0x38>)
 8007d78:	6263      	str	r3, [r4, #36]	; 0x24
 8007d7a:	4b05      	ldr	r3, [pc, #20]	; (8007d90 <std+0x3c>)
 8007d7c:	62a3      	str	r3, [r4, #40]	; 0x28
 8007d7e:	4b05      	ldr	r3, [pc, #20]	; (8007d94 <std+0x40>)
 8007d80:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007d82:	4b05      	ldr	r3, [pc, #20]	; (8007d98 <std+0x44>)
 8007d84:	6224      	str	r4, [r4, #32]
 8007d86:	6323      	str	r3, [r4, #48]	; 0x30
 8007d88:	bd10      	pop	{r4, pc}
 8007d8a:	bf00      	nop
 8007d8c:	08008099 	.word	0x08008099
 8007d90:	080080bb 	.word	0x080080bb
 8007d94:	080080f3 	.word	0x080080f3
 8007d98:	08008117 	.word	0x08008117

08007d9c <_cleanup_r>:
 8007d9c:	4901      	ldr	r1, [pc, #4]	; (8007da4 <_cleanup_r+0x8>)
 8007d9e:	f000 b8af 	b.w	8007f00 <_fwalk_reent>
 8007da2:	bf00      	nop
 8007da4:	08007cdd 	.word	0x08007cdd

08007da8 <__sfmoreglue>:
 8007da8:	b570      	push	{r4, r5, r6, lr}
 8007daa:	2268      	movs	r2, #104	; 0x68
 8007dac:	1e4d      	subs	r5, r1, #1
 8007dae:	4355      	muls	r5, r2
 8007db0:	460e      	mov	r6, r1
 8007db2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007db6:	f7fe fbaf 	bl	8006518 <_malloc_r>
 8007dba:	4604      	mov	r4, r0
 8007dbc:	b140      	cbz	r0, 8007dd0 <__sfmoreglue+0x28>
 8007dbe:	2100      	movs	r1, #0
 8007dc0:	e9c0 1600 	strd	r1, r6, [r0]
 8007dc4:	300c      	adds	r0, #12
 8007dc6:	60a0      	str	r0, [r4, #8]
 8007dc8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007dcc:	f7fd fe8c 	bl	8005ae8 <memset>
 8007dd0:	4620      	mov	r0, r4
 8007dd2:	bd70      	pop	{r4, r5, r6, pc}

08007dd4 <__sfp_lock_acquire>:
 8007dd4:	4801      	ldr	r0, [pc, #4]	; (8007ddc <__sfp_lock_acquire+0x8>)
 8007dd6:	f000 b8b3 	b.w	8007f40 <__retarget_lock_acquire_recursive>
 8007dda:	bf00      	nop
 8007ddc:	20000179 	.word	0x20000179

08007de0 <__sfp_lock_release>:
 8007de0:	4801      	ldr	r0, [pc, #4]	; (8007de8 <__sfp_lock_release+0x8>)
 8007de2:	f000 b8ae 	b.w	8007f42 <__retarget_lock_release_recursive>
 8007de6:	bf00      	nop
 8007de8:	20000179 	.word	0x20000179

08007dec <__sinit_lock_acquire>:
 8007dec:	4801      	ldr	r0, [pc, #4]	; (8007df4 <__sinit_lock_acquire+0x8>)
 8007dee:	f000 b8a7 	b.w	8007f40 <__retarget_lock_acquire_recursive>
 8007df2:	bf00      	nop
 8007df4:	2000017a 	.word	0x2000017a

08007df8 <__sinit_lock_release>:
 8007df8:	4801      	ldr	r0, [pc, #4]	; (8007e00 <__sinit_lock_release+0x8>)
 8007dfa:	f000 b8a2 	b.w	8007f42 <__retarget_lock_release_recursive>
 8007dfe:	bf00      	nop
 8007e00:	2000017a 	.word	0x2000017a

08007e04 <__sinit>:
 8007e04:	b510      	push	{r4, lr}
 8007e06:	4604      	mov	r4, r0
 8007e08:	f7ff fff0 	bl	8007dec <__sinit_lock_acquire>
 8007e0c:	69a3      	ldr	r3, [r4, #24]
 8007e0e:	b11b      	cbz	r3, 8007e18 <__sinit+0x14>
 8007e10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e14:	f7ff bff0 	b.w	8007df8 <__sinit_lock_release>
 8007e18:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007e1c:	6523      	str	r3, [r4, #80]	; 0x50
 8007e1e:	4b13      	ldr	r3, [pc, #76]	; (8007e6c <__sinit+0x68>)
 8007e20:	4a13      	ldr	r2, [pc, #76]	; (8007e70 <__sinit+0x6c>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	62a2      	str	r2, [r4, #40]	; 0x28
 8007e26:	42a3      	cmp	r3, r4
 8007e28:	bf04      	itt	eq
 8007e2a:	2301      	moveq	r3, #1
 8007e2c:	61a3      	streq	r3, [r4, #24]
 8007e2e:	4620      	mov	r0, r4
 8007e30:	f000 f820 	bl	8007e74 <__sfp>
 8007e34:	6060      	str	r0, [r4, #4]
 8007e36:	4620      	mov	r0, r4
 8007e38:	f000 f81c 	bl	8007e74 <__sfp>
 8007e3c:	60a0      	str	r0, [r4, #8]
 8007e3e:	4620      	mov	r0, r4
 8007e40:	f000 f818 	bl	8007e74 <__sfp>
 8007e44:	2200      	movs	r2, #0
 8007e46:	60e0      	str	r0, [r4, #12]
 8007e48:	2104      	movs	r1, #4
 8007e4a:	6860      	ldr	r0, [r4, #4]
 8007e4c:	f7ff ff82 	bl	8007d54 <std>
 8007e50:	68a0      	ldr	r0, [r4, #8]
 8007e52:	2201      	movs	r2, #1
 8007e54:	2109      	movs	r1, #9
 8007e56:	f7ff ff7d 	bl	8007d54 <std>
 8007e5a:	68e0      	ldr	r0, [r4, #12]
 8007e5c:	2202      	movs	r2, #2
 8007e5e:	2112      	movs	r1, #18
 8007e60:	f7ff ff78 	bl	8007d54 <std>
 8007e64:	2301      	movs	r3, #1
 8007e66:	61a3      	str	r3, [r4, #24]
 8007e68:	e7d2      	b.n	8007e10 <__sinit+0xc>
 8007e6a:	bf00      	nop
 8007e6c:	08008268 	.word	0x08008268
 8007e70:	08007d9d 	.word	0x08007d9d

08007e74 <__sfp>:
 8007e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e76:	4607      	mov	r7, r0
 8007e78:	f7ff ffac 	bl	8007dd4 <__sfp_lock_acquire>
 8007e7c:	4b1e      	ldr	r3, [pc, #120]	; (8007ef8 <__sfp+0x84>)
 8007e7e:	681e      	ldr	r6, [r3, #0]
 8007e80:	69b3      	ldr	r3, [r6, #24]
 8007e82:	b913      	cbnz	r3, 8007e8a <__sfp+0x16>
 8007e84:	4630      	mov	r0, r6
 8007e86:	f7ff ffbd 	bl	8007e04 <__sinit>
 8007e8a:	3648      	adds	r6, #72	; 0x48
 8007e8c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007e90:	3b01      	subs	r3, #1
 8007e92:	d503      	bpl.n	8007e9c <__sfp+0x28>
 8007e94:	6833      	ldr	r3, [r6, #0]
 8007e96:	b30b      	cbz	r3, 8007edc <__sfp+0x68>
 8007e98:	6836      	ldr	r6, [r6, #0]
 8007e9a:	e7f7      	b.n	8007e8c <__sfp+0x18>
 8007e9c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007ea0:	b9d5      	cbnz	r5, 8007ed8 <__sfp+0x64>
 8007ea2:	4b16      	ldr	r3, [pc, #88]	; (8007efc <__sfp+0x88>)
 8007ea4:	60e3      	str	r3, [r4, #12]
 8007ea6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007eaa:	6665      	str	r5, [r4, #100]	; 0x64
 8007eac:	f000 f847 	bl	8007f3e <__retarget_lock_init_recursive>
 8007eb0:	f7ff ff96 	bl	8007de0 <__sfp_lock_release>
 8007eb4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007eb8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007ebc:	6025      	str	r5, [r4, #0]
 8007ebe:	61a5      	str	r5, [r4, #24]
 8007ec0:	2208      	movs	r2, #8
 8007ec2:	4629      	mov	r1, r5
 8007ec4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007ec8:	f7fd fe0e 	bl	8005ae8 <memset>
 8007ecc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007ed0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007ed4:	4620      	mov	r0, r4
 8007ed6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ed8:	3468      	adds	r4, #104	; 0x68
 8007eda:	e7d9      	b.n	8007e90 <__sfp+0x1c>
 8007edc:	2104      	movs	r1, #4
 8007ede:	4638      	mov	r0, r7
 8007ee0:	f7ff ff62 	bl	8007da8 <__sfmoreglue>
 8007ee4:	4604      	mov	r4, r0
 8007ee6:	6030      	str	r0, [r6, #0]
 8007ee8:	2800      	cmp	r0, #0
 8007eea:	d1d5      	bne.n	8007e98 <__sfp+0x24>
 8007eec:	f7ff ff78 	bl	8007de0 <__sfp_lock_release>
 8007ef0:	230c      	movs	r3, #12
 8007ef2:	603b      	str	r3, [r7, #0]
 8007ef4:	e7ee      	b.n	8007ed4 <__sfp+0x60>
 8007ef6:	bf00      	nop
 8007ef8:	08008268 	.word	0x08008268
 8007efc:	ffff0001 	.word	0xffff0001

08007f00 <_fwalk_reent>:
 8007f00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f04:	4606      	mov	r6, r0
 8007f06:	4688      	mov	r8, r1
 8007f08:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007f0c:	2700      	movs	r7, #0
 8007f0e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007f12:	f1b9 0901 	subs.w	r9, r9, #1
 8007f16:	d505      	bpl.n	8007f24 <_fwalk_reent+0x24>
 8007f18:	6824      	ldr	r4, [r4, #0]
 8007f1a:	2c00      	cmp	r4, #0
 8007f1c:	d1f7      	bne.n	8007f0e <_fwalk_reent+0xe>
 8007f1e:	4638      	mov	r0, r7
 8007f20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f24:	89ab      	ldrh	r3, [r5, #12]
 8007f26:	2b01      	cmp	r3, #1
 8007f28:	d907      	bls.n	8007f3a <_fwalk_reent+0x3a>
 8007f2a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007f2e:	3301      	adds	r3, #1
 8007f30:	d003      	beq.n	8007f3a <_fwalk_reent+0x3a>
 8007f32:	4629      	mov	r1, r5
 8007f34:	4630      	mov	r0, r6
 8007f36:	47c0      	blx	r8
 8007f38:	4307      	orrs	r7, r0
 8007f3a:	3568      	adds	r5, #104	; 0x68
 8007f3c:	e7e9      	b.n	8007f12 <_fwalk_reent+0x12>

08007f3e <__retarget_lock_init_recursive>:
 8007f3e:	4770      	bx	lr

08007f40 <__retarget_lock_acquire_recursive>:
 8007f40:	4770      	bx	lr

08007f42 <__retarget_lock_release_recursive>:
 8007f42:	4770      	bx	lr

08007f44 <__swhatbuf_r>:
 8007f44:	b570      	push	{r4, r5, r6, lr}
 8007f46:	460e      	mov	r6, r1
 8007f48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f4c:	2900      	cmp	r1, #0
 8007f4e:	b096      	sub	sp, #88	; 0x58
 8007f50:	4614      	mov	r4, r2
 8007f52:	461d      	mov	r5, r3
 8007f54:	da08      	bge.n	8007f68 <__swhatbuf_r+0x24>
 8007f56:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	602a      	str	r2, [r5, #0]
 8007f5e:	061a      	lsls	r2, r3, #24
 8007f60:	d410      	bmi.n	8007f84 <__swhatbuf_r+0x40>
 8007f62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f66:	e00e      	b.n	8007f86 <__swhatbuf_r+0x42>
 8007f68:	466a      	mov	r2, sp
 8007f6a:	f000 f8fb 	bl	8008164 <_fstat_r>
 8007f6e:	2800      	cmp	r0, #0
 8007f70:	dbf1      	blt.n	8007f56 <__swhatbuf_r+0x12>
 8007f72:	9a01      	ldr	r2, [sp, #4]
 8007f74:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007f78:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007f7c:	425a      	negs	r2, r3
 8007f7e:	415a      	adcs	r2, r3
 8007f80:	602a      	str	r2, [r5, #0]
 8007f82:	e7ee      	b.n	8007f62 <__swhatbuf_r+0x1e>
 8007f84:	2340      	movs	r3, #64	; 0x40
 8007f86:	2000      	movs	r0, #0
 8007f88:	6023      	str	r3, [r4, #0]
 8007f8a:	b016      	add	sp, #88	; 0x58
 8007f8c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007f90 <__smakebuf_r>:
 8007f90:	898b      	ldrh	r3, [r1, #12]
 8007f92:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007f94:	079d      	lsls	r5, r3, #30
 8007f96:	4606      	mov	r6, r0
 8007f98:	460c      	mov	r4, r1
 8007f9a:	d507      	bpl.n	8007fac <__smakebuf_r+0x1c>
 8007f9c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007fa0:	6023      	str	r3, [r4, #0]
 8007fa2:	6123      	str	r3, [r4, #16]
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	6163      	str	r3, [r4, #20]
 8007fa8:	b002      	add	sp, #8
 8007faa:	bd70      	pop	{r4, r5, r6, pc}
 8007fac:	ab01      	add	r3, sp, #4
 8007fae:	466a      	mov	r2, sp
 8007fb0:	f7ff ffc8 	bl	8007f44 <__swhatbuf_r>
 8007fb4:	9900      	ldr	r1, [sp, #0]
 8007fb6:	4605      	mov	r5, r0
 8007fb8:	4630      	mov	r0, r6
 8007fba:	f7fe faad 	bl	8006518 <_malloc_r>
 8007fbe:	b948      	cbnz	r0, 8007fd4 <__smakebuf_r+0x44>
 8007fc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fc4:	059a      	lsls	r2, r3, #22
 8007fc6:	d4ef      	bmi.n	8007fa8 <__smakebuf_r+0x18>
 8007fc8:	f023 0303 	bic.w	r3, r3, #3
 8007fcc:	f043 0302 	orr.w	r3, r3, #2
 8007fd0:	81a3      	strh	r3, [r4, #12]
 8007fd2:	e7e3      	b.n	8007f9c <__smakebuf_r+0xc>
 8007fd4:	4b0d      	ldr	r3, [pc, #52]	; (800800c <__smakebuf_r+0x7c>)
 8007fd6:	62b3      	str	r3, [r6, #40]	; 0x28
 8007fd8:	89a3      	ldrh	r3, [r4, #12]
 8007fda:	6020      	str	r0, [r4, #0]
 8007fdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fe0:	81a3      	strh	r3, [r4, #12]
 8007fe2:	9b00      	ldr	r3, [sp, #0]
 8007fe4:	6163      	str	r3, [r4, #20]
 8007fe6:	9b01      	ldr	r3, [sp, #4]
 8007fe8:	6120      	str	r0, [r4, #16]
 8007fea:	b15b      	cbz	r3, 8008004 <__smakebuf_r+0x74>
 8007fec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ff0:	4630      	mov	r0, r6
 8007ff2:	f000 f8c9 	bl	8008188 <_isatty_r>
 8007ff6:	b128      	cbz	r0, 8008004 <__smakebuf_r+0x74>
 8007ff8:	89a3      	ldrh	r3, [r4, #12]
 8007ffa:	f023 0303 	bic.w	r3, r3, #3
 8007ffe:	f043 0301 	orr.w	r3, r3, #1
 8008002:	81a3      	strh	r3, [r4, #12]
 8008004:	89a0      	ldrh	r0, [r4, #12]
 8008006:	4305      	orrs	r5, r0
 8008008:	81a5      	strh	r5, [r4, #12]
 800800a:	e7cd      	b.n	8007fa8 <__smakebuf_r+0x18>
 800800c:	08007d9d 	.word	0x08007d9d

08008010 <_raise_r>:
 8008010:	291f      	cmp	r1, #31
 8008012:	b538      	push	{r3, r4, r5, lr}
 8008014:	4604      	mov	r4, r0
 8008016:	460d      	mov	r5, r1
 8008018:	d904      	bls.n	8008024 <_raise_r+0x14>
 800801a:	2316      	movs	r3, #22
 800801c:	6003      	str	r3, [r0, #0]
 800801e:	f04f 30ff 	mov.w	r0, #4294967295
 8008022:	bd38      	pop	{r3, r4, r5, pc}
 8008024:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008026:	b112      	cbz	r2, 800802e <_raise_r+0x1e>
 8008028:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800802c:	b94b      	cbnz	r3, 8008042 <_raise_r+0x32>
 800802e:	4620      	mov	r0, r4
 8008030:	f000 f830 	bl	8008094 <_getpid_r>
 8008034:	462a      	mov	r2, r5
 8008036:	4601      	mov	r1, r0
 8008038:	4620      	mov	r0, r4
 800803a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800803e:	f000 b817 	b.w	8008070 <_kill_r>
 8008042:	2b01      	cmp	r3, #1
 8008044:	d00a      	beq.n	800805c <_raise_r+0x4c>
 8008046:	1c59      	adds	r1, r3, #1
 8008048:	d103      	bne.n	8008052 <_raise_r+0x42>
 800804a:	2316      	movs	r3, #22
 800804c:	6003      	str	r3, [r0, #0]
 800804e:	2001      	movs	r0, #1
 8008050:	e7e7      	b.n	8008022 <_raise_r+0x12>
 8008052:	2400      	movs	r4, #0
 8008054:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008058:	4628      	mov	r0, r5
 800805a:	4798      	blx	r3
 800805c:	2000      	movs	r0, #0
 800805e:	e7e0      	b.n	8008022 <_raise_r+0x12>

08008060 <raise>:
 8008060:	4b02      	ldr	r3, [pc, #8]	; (800806c <raise+0xc>)
 8008062:	4601      	mov	r1, r0
 8008064:	6818      	ldr	r0, [r3, #0]
 8008066:	f7ff bfd3 	b.w	8008010 <_raise_r>
 800806a:	bf00      	nop
 800806c:	2000000c 	.word	0x2000000c

08008070 <_kill_r>:
 8008070:	b538      	push	{r3, r4, r5, lr}
 8008072:	4d07      	ldr	r5, [pc, #28]	; (8008090 <_kill_r+0x20>)
 8008074:	2300      	movs	r3, #0
 8008076:	4604      	mov	r4, r0
 8008078:	4608      	mov	r0, r1
 800807a:	4611      	mov	r1, r2
 800807c:	602b      	str	r3, [r5, #0]
 800807e:	f7f9 fb25 	bl	80016cc <_kill>
 8008082:	1c43      	adds	r3, r0, #1
 8008084:	d102      	bne.n	800808c <_kill_r+0x1c>
 8008086:	682b      	ldr	r3, [r5, #0]
 8008088:	b103      	cbz	r3, 800808c <_kill_r+0x1c>
 800808a:	6023      	str	r3, [r4, #0]
 800808c:	bd38      	pop	{r3, r4, r5, pc}
 800808e:	bf00      	nop
 8008090:	20000174 	.word	0x20000174

08008094 <_getpid_r>:
 8008094:	f7f9 bb12 	b.w	80016bc <_getpid>

08008098 <__sread>:
 8008098:	b510      	push	{r4, lr}
 800809a:	460c      	mov	r4, r1
 800809c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080a0:	f000 f894 	bl	80081cc <_read_r>
 80080a4:	2800      	cmp	r0, #0
 80080a6:	bfab      	itete	ge
 80080a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80080aa:	89a3      	ldrhlt	r3, [r4, #12]
 80080ac:	181b      	addge	r3, r3, r0
 80080ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80080b2:	bfac      	ite	ge
 80080b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80080b6:	81a3      	strhlt	r3, [r4, #12]
 80080b8:	bd10      	pop	{r4, pc}

080080ba <__swrite>:
 80080ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080be:	461f      	mov	r7, r3
 80080c0:	898b      	ldrh	r3, [r1, #12]
 80080c2:	05db      	lsls	r3, r3, #23
 80080c4:	4605      	mov	r5, r0
 80080c6:	460c      	mov	r4, r1
 80080c8:	4616      	mov	r6, r2
 80080ca:	d505      	bpl.n	80080d8 <__swrite+0x1e>
 80080cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080d0:	2302      	movs	r3, #2
 80080d2:	2200      	movs	r2, #0
 80080d4:	f000 f868 	bl	80081a8 <_lseek_r>
 80080d8:	89a3      	ldrh	r3, [r4, #12]
 80080da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80080de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80080e2:	81a3      	strh	r3, [r4, #12]
 80080e4:	4632      	mov	r2, r6
 80080e6:	463b      	mov	r3, r7
 80080e8:	4628      	mov	r0, r5
 80080ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80080ee:	f000 b817 	b.w	8008120 <_write_r>

080080f2 <__sseek>:
 80080f2:	b510      	push	{r4, lr}
 80080f4:	460c      	mov	r4, r1
 80080f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080fa:	f000 f855 	bl	80081a8 <_lseek_r>
 80080fe:	1c43      	adds	r3, r0, #1
 8008100:	89a3      	ldrh	r3, [r4, #12]
 8008102:	bf15      	itete	ne
 8008104:	6560      	strne	r0, [r4, #84]	; 0x54
 8008106:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800810a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800810e:	81a3      	strheq	r3, [r4, #12]
 8008110:	bf18      	it	ne
 8008112:	81a3      	strhne	r3, [r4, #12]
 8008114:	bd10      	pop	{r4, pc}

08008116 <__sclose>:
 8008116:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800811a:	f000 b813 	b.w	8008144 <_close_r>
	...

08008120 <_write_r>:
 8008120:	b538      	push	{r3, r4, r5, lr}
 8008122:	4d07      	ldr	r5, [pc, #28]	; (8008140 <_write_r+0x20>)
 8008124:	4604      	mov	r4, r0
 8008126:	4608      	mov	r0, r1
 8008128:	4611      	mov	r1, r2
 800812a:	2200      	movs	r2, #0
 800812c:	602a      	str	r2, [r5, #0]
 800812e:	461a      	mov	r2, r3
 8008130:	f7f9 fb03 	bl	800173a <_write>
 8008134:	1c43      	adds	r3, r0, #1
 8008136:	d102      	bne.n	800813e <_write_r+0x1e>
 8008138:	682b      	ldr	r3, [r5, #0]
 800813a:	b103      	cbz	r3, 800813e <_write_r+0x1e>
 800813c:	6023      	str	r3, [r4, #0]
 800813e:	bd38      	pop	{r3, r4, r5, pc}
 8008140:	20000174 	.word	0x20000174

08008144 <_close_r>:
 8008144:	b538      	push	{r3, r4, r5, lr}
 8008146:	4d06      	ldr	r5, [pc, #24]	; (8008160 <_close_r+0x1c>)
 8008148:	2300      	movs	r3, #0
 800814a:	4604      	mov	r4, r0
 800814c:	4608      	mov	r0, r1
 800814e:	602b      	str	r3, [r5, #0]
 8008150:	f7f9 fb0f 	bl	8001772 <_close>
 8008154:	1c43      	adds	r3, r0, #1
 8008156:	d102      	bne.n	800815e <_close_r+0x1a>
 8008158:	682b      	ldr	r3, [r5, #0]
 800815a:	b103      	cbz	r3, 800815e <_close_r+0x1a>
 800815c:	6023      	str	r3, [r4, #0]
 800815e:	bd38      	pop	{r3, r4, r5, pc}
 8008160:	20000174 	.word	0x20000174

08008164 <_fstat_r>:
 8008164:	b538      	push	{r3, r4, r5, lr}
 8008166:	4d07      	ldr	r5, [pc, #28]	; (8008184 <_fstat_r+0x20>)
 8008168:	2300      	movs	r3, #0
 800816a:	4604      	mov	r4, r0
 800816c:	4608      	mov	r0, r1
 800816e:	4611      	mov	r1, r2
 8008170:	602b      	str	r3, [r5, #0]
 8008172:	f7f9 fb0a 	bl	800178a <_fstat>
 8008176:	1c43      	adds	r3, r0, #1
 8008178:	d102      	bne.n	8008180 <_fstat_r+0x1c>
 800817a:	682b      	ldr	r3, [r5, #0]
 800817c:	b103      	cbz	r3, 8008180 <_fstat_r+0x1c>
 800817e:	6023      	str	r3, [r4, #0]
 8008180:	bd38      	pop	{r3, r4, r5, pc}
 8008182:	bf00      	nop
 8008184:	20000174 	.word	0x20000174

08008188 <_isatty_r>:
 8008188:	b538      	push	{r3, r4, r5, lr}
 800818a:	4d06      	ldr	r5, [pc, #24]	; (80081a4 <_isatty_r+0x1c>)
 800818c:	2300      	movs	r3, #0
 800818e:	4604      	mov	r4, r0
 8008190:	4608      	mov	r0, r1
 8008192:	602b      	str	r3, [r5, #0]
 8008194:	f7f9 fb09 	bl	80017aa <_isatty>
 8008198:	1c43      	adds	r3, r0, #1
 800819a:	d102      	bne.n	80081a2 <_isatty_r+0x1a>
 800819c:	682b      	ldr	r3, [r5, #0]
 800819e:	b103      	cbz	r3, 80081a2 <_isatty_r+0x1a>
 80081a0:	6023      	str	r3, [r4, #0]
 80081a2:	bd38      	pop	{r3, r4, r5, pc}
 80081a4:	20000174 	.word	0x20000174

080081a8 <_lseek_r>:
 80081a8:	b538      	push	{r3, r4, r5, lr}
 80081aa:	4d07      	ldr	r5, [pc, #28]	; (80081c8 <_lseek_r+0x20>)
 80081ac:	4604      	mov	r4, r0
 80081ae:	4608      	mov	r0, r1
 80081b0:	4611      	mov	r1, r2
 80081b2:	2200      	movs	r2, #0
 80081b4:	602a      	str	r2, [r5, #0]
 80081b6:	461a      	mov	r2, r3
 80081b8:	f7f9 fb02 	bl	80017c0 <_lseek>
 80081bc:	1c43      	adds	r3, r0, #1
 80081be:	d102      	bne.n	80081c6 <_lseek_r+0x1e>
 80081c0:	682b      	ldr	r3, [r5, #0]
 80081c2:	b103      	cbz	r3, 80081c6 <_lseek_r+0x1e>
 80081c4:	6023      	str	r3, [r4, #0]
 80081c6:	bd38      	pop	{r3, r4, r5, pc}
 80081c8:	20000174 	.word	0x20000174

080081cc <_read_r>:
 80081cc:	b538      	push	{r3, r4, r5, lr}
 80081ce:	4d07      	ldr	r5, [pc, #28]	; (80081ec <_read_r+0x20>)
 80081d0:	4604      	mov	r4, r0
 80081d2:	4608      	mov	r0, r1
 80081d4:	4611      	mov	r1, r2
 80081d6:	2200      	movs	r2, #0
 80081d8:	602a      	str	r2, [r5, #0]
 80081da:	461a      	mov	r2, r3
 80081dc:	f7f9 fa90 	bl	8001700 <_read>
 80081e0:	1c43      	adds	r3, r0, #1
 80081e2:	d102      	bne.n	80081ea <_read_r+0x1e>
 80081e4:	682b      	ldr	r3, [r5, #0]
 80081e6:	b103      	cbz	r3, 80081ea <_read_r+0x1e>
 80081e8:	6023      	str	r3, [r4, #0]
 80081ea:	bd38      	pop	{r3, r4, r5, pc}
 80081ec:	20000174 	.word	0x20000174

080081f0 <_init>:
 80081f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081f2:	bf00      	nop
 80081f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081f6:	bc08      	pop	{r3}
 80081f8:	469e      	mov	lr, r3
 80081fa:	4770      	bx	lr

080081fc <_fini>:
 80081fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081fe:	bf00      	nop
 8008200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008202:	bc08      	pop	{r3}
 8008204:	469e      	mov	lr, r3
 8008206:	4770      	bx	lr
